
STM32_Biomech_Orthesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08007070  08007070  00017070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800740c  0800740c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800740c  0800740c  0001740c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007414  08007414  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007414  08007414  00017414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007418  08007418  00017418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800741c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200001d4  080075f0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080075f0  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a820  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d28  00000000  00000000  0002aa67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  0002c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d2  00000000  00000000  0002d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230c8  00000000  00000000  0002d752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c20c  00000000  00000000  0005081a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6929  00000000  00000000  0005ca26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000353c  00000000  00000000  00133350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013688c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007058 	.word	0x08007058

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08007058 	.word	0x08007058

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	0000      	movs	r0, r0
	...

08000f88 <Read_ADC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Read_ADC(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000f8c:	481c      	ldr	r0, [pc, #112]	; (8001000 <Read_ADC+0x78>)
 8000f8e:	f000 fcc3 	bl	8001918 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 100000) == HAL_OK){
 8000f92:	491c      	ldr	r1, [pc, #112]	; (8001004 <Read_ADC+0x7c>)
 8000f94:	481a      	ldr	r0, [pc, #104]	; (8001000 <Read_ADC+0x78>)
 8000f96:	f000 fdc4 	bl	8001b22 <HAL_ADC_PollForConversion>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d122      	bne.n	8000fe6 <Read_ADC+0x5e>
		flexADCvalue = HAL_ADC_GetValue(&hadc1);
 8000fa0:	4817      	ldr	r0, [pc, #92]	; (8001000 <Read_ADC+0x78>)
 8000fa2:	f000 fe49 	bl	8001c38 <HAL_ADC_GetValue>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <Read_ADC+0x80>)
 8000fac:	801a      	strh	r2, [r3, #0]
		//Main aim is sending Vflex data from UART!
		Vflex = 3.3 * flexADCvalue / 4095;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <Read_ADC+0x80>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fad6 	bl	8000564 <__aeabi_i2d>
 8000fb8:	a30d      	add	r3, pc, #52	; (adr r3, 8000ff0 <Read_ADC+0x68>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fb3b 	bl	8000638 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	a30b      	add	r3, pc, #44	; (adr r3, 8000ff8 <Read_ADC+0x70>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff fc5c 	bl	800088c <__aeabi_ddiv>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fe04 	bl	8000be8 <__aeabi_d2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <Read_ADC+0x84>)
 8000fe4:	6013      	str	r3, [r2, #0]
	}

	HAL_ADC_Stop(&hadc1);
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <Read_ADC+0x78>)
 8000fe8:	f000 fd68 	bl	8001abc <HAL_ADC_Stop>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	66666666 	.word	0x66666666
 8000ff4:	400a6666 	.word	0x400a6666
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40affe00 	.word	0x40affe00
 8001000:	200001f8 	.word	0x200001f8
 8001004:	000186a0 	.word	0x000186a0
 8001008:	200001f0 	.word	0x200001f0
 800100c:	200001f4 	.word	0x200001f4

08001010 <floatToChar>:

void floatToChar(float floatValue, char* charArray, int arraySize) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b087      	sub	sp, #28
 8001014:	af02      	add	r7, sp, #8
 8001016:	ed87 0a03 	vstr	s0, [r7, #12]
 800101a:	60b8      	str	r0, [r7, #8]
 800101c:	6079      	str	r1, [r7, #4]
  // Use snprintf to convert float to char array
  snprintf(charArray, arraySize, "%f", floatValue);
 800101e:	687c      	ldr	r4, [r7, #4]
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f7ff fab1 	bl	8000588 <__aeabi_f2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	e9cd 2300 	strd	r2, r3, [sp]
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <floatToChar+0x30>)
 8001030:	4621      	mov	r1, r4
 8001032:	68b8      	ldr	r0, [r7, #8]
 8001034:	f003 fea0 	bl	8004d78 <sniprintf>
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	08007070 	.word	0x08007070

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104a:	f000 fb8b 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104e:	f000 f829 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001052:	f000 f911 	bl	8001278 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001056:	f000 f893 	bl	8001180 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800105a:	f000 f8e3 	bl	8001224 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Read_ADC();
 800105e:	f7ff ff93 	bl	8000f88 <Read_ADC>
	  char serialData[] = "Hello World";
 8001062:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <main+0x54>)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	ca07      	ldmia	r2, {r0, r1, r2}
 8001068:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  floatToChar(Vflex, serialData, sizeof(serialData));
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <main+0x58>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	210c      	movs	r1, #12
 8001076:	4618      	mov	r0, r3
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	f7ff ffc8 	bl	8001010 <floatToChar>
    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart1, serialData, sizeof(serialData), 100);
 8001080:	1d39      	adds	r1, r7, #4
 8001082:	2364      	movs	r3, #100	; 0x64
 8001084:	220c      	movs	r2, #12
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <main+0x5c>)
 8001088:	f002 f999 	bl	80033be <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800108c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001090:	f000 fbda 	bl	8001848 <HAL_Delay>
  {
 8001094:	e7e3      	b.n	800105e <main+0x1a>
 8001096:	bf00      	nop
 8001098:	08007074 	.word	0x08007074
 800109c:	200001f4 	.word	0x200001f4
 80010a0:	20000240 	.word	0x20000240

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	2234      	movs	r2, #52	; 0x34
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 fed7 	bl	8004e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <SystemClock_Config+0xd4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a29      	ldr	r2, [pc, #164]	; (8001178 <SystemClock_Config+0xd4>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <SystemClock_Config+0xd4>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010e4:	2300      	movs	r3, #0
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <SystemClock_Config+0xd8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010f0:	4a22      	ldr	r2, [pc, #136]	; (800117c <SystemClock_Config+0xd8>)
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b20      	ldr	r3, [pc, #128]	; (800117c <SystemClock_Config+0xd8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001104:	2302      	movs	r3, #2
 8001106:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110c:	2310      	movs	r3, #16
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	2302      	movs	r3, #2
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001114:	2300      	movs	r3, #0
 8001116:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001118:	2310      	movs	r3, #16
 800111a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800111c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001120:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001122:	2304      	movs	r3, #4
 8001124:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001126:	2302      	movs	r3, #2
 8001128:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fe58 	bl	8002de8 <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800113e:	f000 f919 	bl	8001374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2302      	movs	r3, #2
 8001148:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	2102      	movs	r1, #2
 800115e:	4618      	mov	r0, r3
 8001160:	f001 faf8 	bl	8002754 <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800116a:	f000 f903 	bl	8001374 <Error_Handler>
  }
}
 800116e:	bf00      	nop
 8001170:	3750      	adds	r7, #80	; 0x50
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <MX_ADC1_Init+0x98>)
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <MX_ADC1_Init+0x9c>)
 8001196:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_ADC1_Init+0x98>)
 800119a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800119e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_ADC1_Init+0x98>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_ADC1_Init+0x98>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_ADC1_Init+0x98>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_ADC1_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_ADC1_Init+0x98>)
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <MX_ADC1_Init+0xa0>)
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_ADC1_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_ADC1_Init+0x98>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_ADC1_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_ADC1_Init+0x98>)
 80011dc:	2201      	movs	r2, #1
 80011de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_ADC1_Init+0x98>)
 80011e2:	f000 fb55 	bl	8001890 <HAL_ADC_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011ec:	f000 f8c2 	bl	8001374 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_ADC1_Init+0x98>)
 8001202:	f000 fd27 	bl	8001c54 <HAL_ADC_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800120c:	f000 f8b2 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200001f8 	.word	0x200001f8
 800121c:	40012000 	.word	0x40012000
 8001220:	0f000001 	.word	0x0f000001

08001224 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <MX_USART1_UART_Init+0x50>)
 800122c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001230:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USART1_UART_Init+0x4c>)
 800125c:	f002 f862 	bl	8003324 <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001266:	f000 f885 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000240 	.word	0x20000240
 8001274:	40011000 	.word	0x40011000

08001278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b35      	ldr	r3, [pc, #212]	; (8001368 <MX_GPIO_Init+0xf0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a34      	ldr	r2, [pc, #208]	; (8001368 <MX_GPIO_Init+0xf0>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <MX_GPIO_Init+0xf0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <MX_GPIO_Init+0xf0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a2d      	ldr	r2, [pc, #180]	; (8001368 <MX_GPIO_Init+0xf0>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <MX_GPIO_Init+0xf0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	4b27      	ldr	r3, [pc, #156]	; (8001368 <MX_GPIO_Init+0xf0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a26      	ldr	r2, [pc, #152]	; (8001368 <MX_GPIO_Init+0xf0>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <MX_GPIO_Init+0xf0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <MX_GPIO_Init+0xf0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <MX_GPIO_Init+0xf0>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_GPIO_Init+0xf0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2120      	movs	r1, #32
 8001302:	481a      	ldr	r0, [pc, #104]	; (800136c <MX_GPIO_Init+0xf4>)
 8001304:	f001 fa0c 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800130e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_GPIO_Init+0xf8>)
 8001320:	f001 f86a 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001324:	230c      	movs	r3, #12
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001334:	2307      	movs	r3, #7
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	480b      	ldr	r0, [pc, #44]	; (800136c <MX_GPIO_Init+0xf4>)
 8001340:	f001 f85a 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001344:	2320      	movs	r3, #32
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_GPIO_Init+0xf4>)
 800135c:	f001 f84c 	bl	80023f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020800 	.word	0x40020800

08001374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137c:	e7fe      	b.n	800137c <Error_Handler+0x8>
	...

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <HAL_MspInit+0x4c>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_MspInit+0x4c>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013be:	2007      	movs	r0, #7
 80013c0:	f000 ff46 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_ADC_MspInit+0x7c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d127      	bne.n	8001442 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_ADC_MspInit+0x80>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a15      	ldr	r2, [pc, #84]	; (8001450 <HAL_ADC_MspInit+0x80>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_ADC_MspInit+0x80>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_ADC_MspInit+0x80>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_ADC_MspInit+0x80>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_ADC_MspInit+0x80>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800142a:	2301      	movs	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142e:	2303      	movs	r3, #3
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <HAL_ADC_MspInit+0x84>)
 800143e:	f000 ffdb 	bl	80023f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000

08001458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_UART_MspInit+0x94>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d134      	bne.n	80014e4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <HAL_UART_MspInit+0x98>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <HAL_UART_MspInit+0x98>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_UART_MspInit+0x98>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_UART_MspInit+0x98>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <HAL_UART_MspInit+0x98>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_UART_MspInit+0x98>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c4:	2307      	movs	r3, #7
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <HAL_UART_MspInit+0x9c>)
 80014d0:	f000 ff92 	bl	80023f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2025      	movs	r0, #37	; 0x25
 80014da:	f000 fec4 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014de:	2025      	movs	r0, #37	; 0x25
 80014e0:	f000 fedd 	bl	800229e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40011000 	.word	0x40011000
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000

080014f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <NMI_Handler+0x4>

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler+0x4>

0800150a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler+0x4>

08001516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001544:	f000 f960 	bl	8001808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <USART1_IRQHandler+0x10>)
 8001552:	f001 ffc7 	bl	80034e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000240 	.word	0x20000240

08001560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_kill>:

int _kill(int pid, int sig)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800157a:	f003 fcc7 	bl	8004f0c <__errno>
 800157e:	4603      	mov	r3, r0
 8001580:	2216      	movs	r2, #22
 8001582:	601a      	str	r2, [r3, #0]
  return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_exit>:

void _exit (int status)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffe7 	bl	8001570 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015a2:	e7fe      	b.n	80015a2 <_exit+0x12>

080015a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	e00a      	b.n	80015cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b6:	f3af 8000 	nop.w
 80015ba:	4601      	mov	r1, r0
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60ba      	str	r2, [r7, #8]
 80015c2:	b2ca      	uxtb	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbf0      	blt.n	80015b6 <_read+0x12>
  }

  return len;
 80015d4:	687b      	ldr	r3, [r7, #4]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e009      	b.n	8001604 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	60ba      	str	r2, [r7, #8]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf1      	blt.n	80015f0 <_write+0x12>
  }
  return len;
 800160c:	687b      	ldr	r3, [r7, #4]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_close>:

int _close(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163e:	605a      	str	r2, [r3, #4]
  return 0;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <_isatty>:

int _isatty(int file)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f003 fc2c 	bl	8004f0c <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	220c      	movs	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20020000 	.word	0x20020000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	20000284 	.word	0x20000284
 80016e8:	200003d8 	.word	0x200003d8

080016ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <SystemInit+0x20>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <SystemInit+0x20>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001748 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001716:	490e      	ldr	r1, [pc, #56]	; (8001750 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800172c:	4c0b      	ldr	r4, [pc, #44]	; (800175c <LoopFillZerobss+0x26>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800173a:	f7ff ffd7 	bl	80016ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173e:	f003 fbeb 	bl	8004f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001742:	f7ff fc7f 	bl	8001044 <main>
  bx  lr    
 8001746:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001754:	0800741c 	.word	0x0800741c
  ldr r2, =_sbss
 8001758:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800175c:	200003d8 	.word	0x200003d8

08001760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC_IRQHandler>
	...

08001764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <HAL_Init+0x40>)
 800176e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <HAL_Init+0x40>)
 800177a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_Init+0x40>)
 8001786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f000 fd5f 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001792:	2000      	movs	r0, #0
 8001794:	f000 f808 	bl	80017a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001798:	f7ff fdf2 	bl	8001380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00

080017a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_InitTick+0x54>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_InitTick+0x58>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017be:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fd77 	bl	80022ba <HAL_SYSTICK_Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00e      	b.n	80017f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d80a      	bhi.n	80017f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017dc:	2200      	movs	r2, #0
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f000 fd3f 	bl	8002266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_InitTick+0x5c>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e000      	b.n	80017f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000008 	.word	0x20000008
 8001804:	20000004 	.word	0x20000004

08001808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x20>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x24>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_IncTick+0x24>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000008 	.word	0x20000008
 800182c:	20000288 	.word	0x20000288

08001830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_GetTick+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000288 	.word	0x20000288

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff ffee 	bl	8001830 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_Delay+0x44>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800186e:	bf00      	nop
 8001870:	f7ff ffde 	bl	8001830 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000008 	.word	0x20000008

08001890 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e033      	b.n	800190e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fd8e 	bl	80013d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d118      	bne.n	8001900 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018d6:	f023 0302 	bic.w	r3, r3, #2
 80018da:	f043 0202 	orr.w	r2, r3, #2
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fae8 	bl	8001eb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f023 0303 	bic.w	r3, r3, #3
 80018f6:	f043 0201 	orr.w	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
 80018fe:	e001      	b.n	8001904 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_ADC_Start+0x1a>
 800192e:	2302      	movs	r3, #2
 8001930:	e0b2      	b.n	8001a98 <HAL_ADC_Start+0x180>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b01      	cmp	r3, #1
 8001946:	d018      	beq.n	800197a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001958:	4b52      	ldr	r3, [pc, #328]	; (8001aa4 <HAL_ADC_Start+0x18c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a52      	ldr	r2, [pc, #328]	; (8001aa8 <HAL_ADC_Start+0x190>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0c9a      	lsrs	r2, r3, #18
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800196c:	e002      	b.n	8001974 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3b01      	subs	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f9      	bne.n	800196e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b01      	cmp	r3, #1
 8001986:	d17a      	bne.n	8001a7e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019c6:	d106      	bne.n	80019d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f023 0206 	bic.w	r2, r3, #6
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
 80019d4:	e002      	b.n	80019dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019e4:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_ADC_Start+0x194>)
 80019e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d12a      	bne.n	8001a54 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a2b      	ldr	r2, [pc, #172]	; (8001ab0 <HAL_ADC_Start+0x198>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d015      	beq.n	8001a34 <HAL_ADC_Start+0x11c>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a29      	ldr	r2, [pc, #164]	; (8001ab4 <HAL_ADC_Start+0x19c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d105      	bne.n	8001a1e <HAL_ADC_Start+0x106>
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <HAL_ADC_Start+0x194>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00a      	beq.n	8001a34 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a25      	ldr	r2, [pc, #148]	; (8001ab8 <HAL_ADC_Start+0x1a0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d136      	bne.n	8001a96 <HAL_ADC_Start+0x17e>
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_ADC_Start+0x194>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d130      	bne.n	8001a96 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d129      	bne.n	8001a96 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	e020      	b.n	8001a96 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <HAL_ADC_Start+0x198>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d11b      	bne.n	8001a96 <HAL_ADC_Start+0x17e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d114      	bne.n	8001a96 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	e00b      	b.n	8001a96 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f043 0210 	orr.w	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f043 0201 	orr.w	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	431bde83 	.word	0x431bde83
 8001aac:	40012300 	.word	0x40012300
 8001ab0:	40012000 	.word	0x40012000
 8001ab4:	40012100 	.word	0x40012100
 8001ab8:	40012200 	.word	0x40012200

08001abc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Stop+0x16>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e021      	b.n	8001b16 <HAL_ADC_Stop+0x5a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3e:	d113      	bne.n	8001b68 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b4e:	d10b      	bne.n	8001b68 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f043 0220 	orr.w	r2, r3, #32
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e063      	b.n	8001c30 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b68:	f7ff fe62 	bl	8001830 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b6e:	e021      	b.n	8001bb4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b76:	d01d      	beq.n	8001bb4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d007      	beq.n	8001b8e <HAL_ADC_PollForConversion+0x6c>
 8001b7e:	f7ff fe57 	bl	8001830 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d212      	bcs.n	8001bb4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d00b      	beq.n	8001bb4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f043 0204 	orr.w	r2, r3, #4
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e03d      	b.n	8001c30 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d1d6      	bne.n	8001b70 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f06f 0212 	mvn.w	r2, #18
 8001bca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d123      	bne.n	8001c2e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d11f      	bne.n	8001c2e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d111      	bne.n	8001c2e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d105      	bne.n	8001c2e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1c>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e113      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x244>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	d925      	bls.n	8001ccc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68d9      	ldr	r1, [r3, #12]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	3b1e      	subs	r3, #30
 8001c96:	2207      	movs	r2, #7
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43da      	mvns	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68d9      	ldr	r1, [r3, #12]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	4603      	mov	r3, r0
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4403      	add	r3, r0
 8001cbe:	3b1e      	subs	r3, #30
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	e022      	b.n	8001d12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6919      	ldr	r1, [r3, #16]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	400a      	ands	r2, r1
 8001cee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6919      	ldr	r1, [r3, #16]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	4603      	mov	r3, r0
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4403      	add	r3, r0
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d824      	bhi.n	8001d64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b05      	subs	r3, #5
 8001d2c:	221f      	movs	r2, #31
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	400a      	ands	r2, r1
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	3b05      	subs	r3, #5
 8001d56:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	635a      	str	r2, [r3, #52]	; 0x34
 8001d62:	e04c      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b0c      	cmp	r3, #12
 8001d6a:	d824      	bhi.n	8001db6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b23      	subs	r3, #35	; 0x23
 8001d7e:	221f      	movs	r2, #31
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43da      	mvns	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	400a      	ands	r2, r1
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	3b23      	subs	r3, #35	; 0x23
 8001da8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
 8001db4:	e023      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3b41      	subs	r3, #65	; 0x41
 8001dc8:	221f      	movs	r2, #31
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4618      	mov	r0, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	3b41      	subs	r3, #65	; 0x41
 8001df2:	fa00 f203 	lsl.w	r2, r0, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dfe:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <HAL_ADC_ConfigChannel+0x250>)
 8001e00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <HAL_ADC_ConfigChannel+0x254>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d10f      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1d8>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b12      	cmp	r3, #18
 8001e12:	d10b      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <HAL_ADC_ConfigChannel+0x254>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12b      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x23a>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <HAL_ADC_ConfigChannel+0x258>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d003      	beq.n	8001e48 <HAL_ADC_ConfigChannel+0x1f4>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b11      	cmp	r3, #17
 8001e46:	d122      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_ADC_ConfigChannel+0x258>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d111      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_ADC_ConfigChannel+0x25c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_ADC_ConfigChannel+0x260>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	0c9a      	lsrs	r2, r3, #18
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e80:	e002      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f9      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	40012300 	.word	0x40012300
 8001ea8:	40012000 	.word	0x40012000
 8001eac:	10000012 	.word	0x10000012
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	431bde83 	.word	0x431bde83

08001eb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ec0:	4b79      	ldr	r3, [pc, #484]	; (80020a8 <ADC_Init+0x1f0>)
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	021a      	lsls	r2, r3, #8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6899      	ldr	r1, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	4a58      	ldr	r2, [pc, #352]	; (80020ac <ADC_Init+0x1f4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d022      	beq.n	8001f96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6899      	ldr	r1, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6899      	ldr	r1, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	e00f      	b.n	8001fb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0202 	bic.w	r2, r2, #2
 8001fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6899      	ldr	r1, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7e1b      	ldrb	r3, [r3, #24]
 8001fd0:	005a      	lsls	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01b      	beq.n	800201c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ff2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002002:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6859      	ldr	r1, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	3b01      	subs	r3, #1
 8002010:	035a      	lsls	r2, r3, #13
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	e007      	b.n	800202c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	3b01      	subs	r3, #1
 8002048:	051a      	lsls	r2, r3, #20
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800206e:	025a      	lsls	r2, r3, #9
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6899      	ldr	r1, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	029a      	lsls	r2, r3, #10
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	609a      	str	r2, [r3, #8]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40012300 	.word	0x40012300
 80020ac:	0f000001 	.word	0x0f000001

080020b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e2:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60d3      	str	r3, [r2, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db0b      	blt.n	800213e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <__NVIC_EnableIRQ+0x38>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800221c:	d301      	bcc.n	8002222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221e:	2301      	movs	r3, #1
 8002220:	e00f      	b.n	8002242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <SysTick_Config+0x40>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222a:	210f      	movs	r1, #15
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f7ff ff8e 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <SysTick_Config+0x40>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <SysTick_Config+0x40>)
 800223c:	2207      	movs	r2, #7
 800223e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000e010 	.word	0xe000e010

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff29 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002278:	f7ff ff3e 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 800227c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7ff ff8e 	bl	80021a4 <NVIC_EncodePriority>
 8002288:	4602      	mov	r2, r0
 800228a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff5d 	bl	8002150 <__NVIC_SetPriority>
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff31 	bl	8002114 <__NVIC_EnableIRQ>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ffa2 	bl	800220c <SysTick_Config>
 80022c8:	4603      	mov	r3, r0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff faa6 	bl	8001830 <HAL_GetTick>
 80022e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d008      	beq.n	8002304 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2280      	movs	r2, #128	; 0x80
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e052      	b.n	80023aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0216 	bic.w	r2, r2, #22
 8002312:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002322:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <HAL_DMA_Abort+0x62>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0208 	bic.w	r2, r2, #8
 8002342:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002354:	e013      	b.n	800237e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002356:	f7ff fa6b 	bl	8001830 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b05      	cmp	r3, #5
 8002362:	d90c      	bls.n	800237e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2203      	movs	r2, #3
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e015      	b.n	80023aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e4      	bne.n	8002356 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	223f      	movs	r2, #63	; 0x3f
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d004      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2280      	movs	r2, #128	; 0x80
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e00c      	b.n	80023ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2205      	movs	r2, #5
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	e165      	b.n	80026e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002414:	2201      	movs	r2, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	f040 8154 	bne.w	80026da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d005      	beq.n	800244a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002446:	2b02      	cmp	r3, #2
 8002448:	d130      	bne.n	80024ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 0201 	and.w	r2, r3, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d017      	beq.n	80024e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d123      	bne.n	800253c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	08da      	lsrs	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	08da      	lsrs	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3208      	adds	r2, #8
 8002536:	69b9      	ldr	r1, [r7, #24]
 8002538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80ae 	beq.w	80026da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <HAL_GPIO_Init+0x300>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4a5c      	ldr	r2, [pc, #368]	; (80026f8 <HAL_GPIO_Init+0x300>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800258c:	6453      	str	r3, [r2, #68]	; 0x44
 800258e:	4b5a      	ldr	r3, [pc, #360]	; (80026f8 <HAL_GPIO_Init+0x300>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259a:	4a58      	ldr	r2, [pc, #352]	; (80026fc <HAL_GPIO_Init+0x304>)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	220f      	movs	r2, #15
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4f      	ldr	r2, [pc, #316]	; (8002700 <HAL_GPIO_Init+0x308>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d025      	beq.n	8002612 <HAL_GPIO_Init+0x21a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4e      	ldr	r2, [pc, #312]	; (8002704 <HAL_GPIO_Init+0x30c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01f      	beq.n	800260e <HAL_GPIO_Init+0x216>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4d      	ldr	r2, [pc, #308]	; (8002708 <HAL_GPIO_Init+0x310>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x212>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4c      	ldr	r2, [pc, #304]	; (800270c <HAL_GPIO_Init+0x314>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x20e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4b      	ldr	r2, [pc, #300]	; (8002710 <HAL_GPIO_Init+0x318>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x20a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4a      	ldr	r2, [pc, #296]	; (8002714 <HAL_GPIO_Init+0x31c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x206>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a49      	ldr	r2, [pc, #292]	; (8002718 <HAL_GPIO_Init+0x320>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x202>
 80025f6:	2306      	movs	r3, #6
 80025f8:	e00c      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e00a      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 80025fe:	2305      	movs	r3, #5
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 8002602:	2304      	movs	r3, #4
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x21c>
 8002612:	2300      	movs	r3, #0
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002624:	4935      	ldr	r1, [pc, #212]	; (80026fc <HAL_GPIO_Init+0x304>)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b3a      	ldr	r3, [pc, #232]	; (800271c <HAL_GPIO_Init+0x324>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a31      	ldr	r2, [pc, #196]	; (800271c <HAL_GPIO_Init+0x324>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_GPIO_Init+0x324>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a26      	ldr	r2, [pc, #152]	; (800271c <HAL_GPIO_Init+0x324>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <HAL_GPIO_Init+0x324>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026aa:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_GPIO_Init+0x324>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_GPIO_Init+0x324>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <HAL_GPIO_Init+0x324>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	f67f ae96 	bls.w	8002414 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40021400 	.word	0x40021400
 8002718:	40021800 	.word	0x40021800
 800271c:	40013c00 	.word	0x40013c00

08002720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
 800272c:	4613      	mov	r3, r2
 800272e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002730:	787b      	ldrb	r3, [r7, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800273c:	e003      	b.n	8002746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273e:	887b      	ldrh	r3, [r7, #2]
 8002740:	041a      	lsls	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	619a      	str	r2, [r3, #24]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0cc      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002768:	4b68      	ldr	r3, [pc, #416]	; (800290c <HAL_RCC_ClockConfig+0x1b8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d90c      	bls.n	8002790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b65      	ldr	r3, [pc, #404]	; (800290c <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b63      	ldr	r3, [pc, #396]	; (800290c <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0b8      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a58      	ldr	r2, [pc, #352]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c0:	4b53      	ldr	r3, [pc, #332]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a52      	ldr	r2, [pc, #328]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	494d      	ldr	r1, [pc, #308]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d044      	beq.n	8002874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d119      	bne.n	8002832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e07f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d003      	beq.n	8002812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800280e:	2b03      	cmp	r3, #3
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002812:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e06f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002822:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e067      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002832:	4b37      	ldr	r3, [pc, #220]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f023 0203 	bic.w	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4934      	ldr	r1, [pc, #208]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	4313      	orrs	r3, r2
 8002842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002844:	f7fe fff4 	bl	8001830 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	e00a      	b.n	8002862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284c:	f7fe fff0 	bl	8001830 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	; 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e04f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 020c 	and.w	r2, r3, #12
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	429a      	cmp	r2, r3
 8002872:	d1eb      	bne.n	800284c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <HAL_RCC_ClockConfig+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d20c      	bcs.n	800289c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b22      	ldr	r3, [pc, #136]	; (800290c <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e032      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4916      	ldr	r1, [pc, #88]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	490e      	ldr	r1, [pc, #56]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028da:	f000 f855 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 80028de:	4602      	mov	r2, r0
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	490a      	ldr	r1, [pc, #40]	; (8002914 <HAL_RCC_ClockConfig+0x1c0>)
 80028ec:	5ccb      	ldrb	r3, [r1, r3]
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	4a09      	ldr	r2, [pc, #36]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe ff54 	bl	80017a8 <HAL_InitTick>

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023c00 	.word	0x40023c00
 8002910:	40023800 	.word	0x40023800
 8002914:	08007080 	.word	0x08007080
 8002918:	20000000 	.word	0x20000000
 800291c:	20000004 	.word	0x20000004

08002920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_RCC_GetHCLKFreq+0x14>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000000 	.word	0x20000000

08002938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800293c:	f7ff fff0 	bl	8002920 <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	0a9b      	lsrs	r3, r3, #10
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4903      	ldr	r1, [pc, #12]	; (800295c <HAL_RCC_GetPCLK1Freq+0x24>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40023800 	.word	0x40023800
 800295c:	08007090 	.word	0x08007090

08002960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002964:	f7ff ffdc 	bl	8002920 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	0b5b      	lsrs	r3, r3, #13
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4903      	ldr	r1, [pc, #12]	; (8002984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	08007090 	.word	0x08007090

08002988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800298c:	b0ae      	sub	sp, #184	; 0xb8
 800298e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ae:	4bcb      	ldr	r3, [pc, #812]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	f200 8206 	bhi.w	8002dc8 <HAL_RCC_GetSysClockFreq+0x440>
 80029bc:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80029be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c2:	bf00      	nop
 80029c4:	080029f9 	.word	0x080029f9
 80029c8:	08002dc9 	.word	0x08002dc9
 80029cc:	08002dc9 	.word	0x08002dc9
 80029d0:	08002dc9 	.word	0x08002dc9
 80029d4:	08002a01 	.word	0x08002a01
 80029d8:	08002dc9 	.word	0x08002dc9
 80029dc:	08002dc9 	.word	0x08002dc9
 80029e0:	08002dc9 	.word	0x08002dc9
 80029e4:	08002a09 	.word	0x08002a09
 80029e8:	08002dc9 	.word	0x08002dc9
 80029ec:	08002dc9 	.word	0x08002dc9
 80029f0:	08002dc9 	.word	0x08002dc9
 80029f4:	08002bf9 	.word	0x08002bf9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f8:	4bb9      	ldr	r3, [pc, #740]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x358>)
 80029fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80029fe:	e1e7      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a00:	4bb8      	ldr	r3, [pc, #736]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a06:	e1e3      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a08:	4bb4      	ldr	r3, [pc, #720]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a14:	4bb1      	ldr	r3, [pc, #708]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d071      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a20:	4bae      	ldr	r3, [pc, #696]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a2c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a46:	4622      	mov	r2, r4
 8002a48:	462b      	mov	r3, r5
 8002a4a:	f04f 0000 	mov.w	r0, #0
 8002a4e:	f04f 0100 	mov.w	r1, #0
 8002a52:	0159      	lsls	r1, r3, #5
 8002a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a58:	0150      	lsls	r0, r2, #5
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4621      	mov	r1, r4
 8002a60:	1a51      	subs	r1, r2, r1
 8002a62:	6439      	str	r1, [r7, #64]	; 0x40
 8002a64:	4629      	mov	r1, r5
 8002a66:	eb63 0301 	sbc.w	r3, r3, r1
 8002a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002a78:	4649      	mov	r1, r9
 8002a7a:	018b      	lsls	r3, r1, #6
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a82:	4641      	mov	r1, r8
 8002a84:	018a      	lsls	r2, r1, #6
 8002a86:	4641      	mov	r1, r8
 8002a88:	1a51      	subs	r1, r2, r1
 8002a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a8c:	4649      	mov	r1, r9
 8002a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	00cb      	lsls	r3, r1, #3
 8002aa4:	4641      	mov	r1, r8
 8002aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aaa:	4641      	mov	r1, r8
 8002aac:	00ca      	lsls	r2, r1, #3
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	189b      	adds	r3, r3, r2
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aba:	462b      	mov	r3, r5
 8002abc:	460a      	mov	r2, r1
 8002abe:	eb42 0303 	adc.w	r3, r2, r3
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	024b      	lsls	r3, r1, #9
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ada:	4621      	mov	r1, r4
 8002adc:	024a      	lsls	r2, r1, #9
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002aec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002af0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002af4:	f7fe f8c8 	bl	8000c88 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4613      	mov	r3, r2
 8002afe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b02:	e067      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b04:	4b75      	ldr	r3, [pc, #468]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b10:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b1e:	2300      	movs	r3, #0
 8002b20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	f04f 0000 	mov.w	r0, #0
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	0159      	lsls	r1, r3, #5
 8002b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b38:	0150      	lsls	r0, r2, #5
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4621      	mov	r1, r4
 8002b40:	1a51      	subs	r1, r2, r1
 8002b42:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b44:	4629      	mov	r1, r5
 8002b46:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002b58:	4649      	mov	r1, r9
 8002b5a:	018b      	lsls	r3, r1, #6
 8002b5c:	4641      	mov	r1, r8
 8002b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b62:	4641      	mov	r1, r8
 8002b64:	018a      	lsls	r2, r1, #6
 8002b66:	4641      	mov	r1, r8
 8002b68:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b86:	4692      	mov	sl, r2
 8002b88:	469b      	mov	fp, r3
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	eb1a 0303 	adds.w	r3, sl, r3
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	462b      	mov	r3, r5
 8002b94:	eb4b 0303 	adc.w	r3, fp, r3
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	028b      	lsls	r3, r1, #10
 8002baa:	4621      	mov	r1, r4
 8002bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	028a      	lsls	r2, r1, #10
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	673b      	str	r3, [r7, #112]	; 0x70
 8002bc0:	677a      	str	r2, [r7, #116]	; 0x74
 8002bc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002bc6:	f7fe f85f 	bl	8000c88 <__aeabi_uldivmod>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4613      	mov	r3, r2
 8002bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bd4:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bf6:	e0eb      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf8:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c04:	4b35      	ldr	r3, [pc, #212]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d06b      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c10:	4b32      	ldr	r3, [pc, #200]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x354>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	2200      	movs	r2, #0
 8002c18:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c22:	663b      	str	r3, [r7, #96]	; 0x60
 8002c24:	2300      	movs	r3, #0
 8002c26:	667b      	str	r3, [r7, #100]	; 0x64
 8002c28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	462b      	mov	r3, r5
 8002c30:	f04f 0000 	mov.w	r0, #0
 8002c34:	f04f 0100 	mov.w	r1, #0
 8002c38:	0159      	lsls	r1, r3, #5
 8002c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c3e:	0150      	lsls	r0, r2, #5
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4621      	mov	r1, r4
 8002c46:	1a51      	subs	r1, r2, r1
 8002c48:	61b9      	str	r1, [r7, #24]
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c5e:	4659      	mov	r1, fp
 8002c60:	018b      	lsls	r3, r1, #6
 8002c62:	4651      	mov	r1, sl
 8002c64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c68:	4651      	mov	r1, sl
 8002c6a:	018a      	lsls	r2, r1, #6
 8002c6c:	4651      	mov	r1, sl
 8002c6e:	ebb2 0801 	subs.w	r8, r2, r1
 8002c72:	4659      	mov	r1, fp
 8002c74:	eb63 0901 	sbc.w	r9, r3, r1
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c8c:	4690      	mov	r8, r2
 8002c8e:	4699      	mov	r9, r3
 8002c90:	4623      	mov	r3, r4
 8002c92:	eb18 0303 	adds.w	r3, r8, r3
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	462b      	mov	r3, r5
 8002c9a:	eb49 0303 	adc.w	r3, r9, r3
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cac:	4629      	mov	r1, r5
 8002cae:	024b      	lsls	r3, r1, #9
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	024a      	lsls	r2, r1, #9
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cc6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002cc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ccc:	f7fd ffdc 	bl	8000c88 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cda:	e065      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x420>
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	00f42400 	.word	0x00f42400
 8002ce4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce8:	4b3d      	ldr	r3, [pc, #244]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cf8:	653b      	str	r3, [r7, #80]	; 0x50
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	657b      	str	r3, [r7, #84]	; 0x54
 8002cfe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002d02:	4642      	mov	r2, r8
 8002d04:	464b      	mov	r3, r9
 8002d06:	f04f 0000 	mov.w	r0, #0
 8002d0a:	f04f 0100 	mov.w	r1, #0
 8002d0e:	0159      	lsls	r1, r3, #5
 8002d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d14:	0150      	lsls	r0, r2, #5
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4641      	mov	r1, r8
 8002d1c:	1a51      	subs	r1, r2, r1
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	4649      	mov	r1, r9
 8002d22:	eb63 0301 	sbc.w	r3, r3, r1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d34:	4659      	mov	r1, fp
 8002d36:	018b      	lsls	r3, r1, #6
 8002d38:	4651      	mov	r1, sl
 8002d3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3e:	4651      	mov	r1, sl
 8002d40:	018a      	lsls	r2, r1, #6
 8002d42:	4651      	mov	r1, sl
 8002d44:	1a54      	subs	r4, r2, r1
 8002d46:	4659      	mov	r1, fp
 8002d48:	eb63 0501 	sbc.w	r5, r3, r1
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	00eb      	lsls	r3, r5, #3
 8002d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d5a:	00e2      	lsls	r2, r4, #3
 8002d5c:	4614      	mov	r4, r2
 8002d5e:	461d      	mov	r5, r3
 8002d60:	4643      	mov	r3, r8
 8002d62:	18e3      	adds	r3, r4, r3
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	464b      	mov	r3, r9
 8002d68:	eb45 0303 	adc.w	r3, r5, r3
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	028b      	lsls	r3, r1, #10
 8002d7e:	4621      	mov	r1, r4
 8002d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d84:	4621      	mov	r1, r4
 8002d86:	028a      	lsls	r2, r1, #10
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d90:	2200      	movs	r2, #0
 8002d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d94:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d9a:	f7fd ff75 	bl	8000c88 <__aeabi_uldivmod>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4613      	mov	r3, r2
 8002da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0f1b      	lsrs	r3, r3, #28
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dc6:	e003      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002dca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	37b8      	adds	r7, #184	; 0xb8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	00f42400 	.word	0x00f42400

08002de8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e28d      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8083 	beq.w	8002f0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e08:	4b94      	ldr	r3, [pc, #592]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d019      	beq.n	8002e48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e14:	4b91      	ldr	r3, [pc, #580]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e20:	4b8e      	ldr	r3, [pc, #568]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e2c:	d00c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2e:	4b8b      	ldr	r3, [pc, #556]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d112      	bne.n	8002e60 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3a:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e46:	d10b      	bne.n	8002e60 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	4b84      	ldr	r3, [pc, #528]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d05b      	beq.n	8002f0c <HAL_RCC_OscConfig+0x124>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d157      	bne.n	8002f0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e25a      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e68:	d106      	bne.n	8002e78 <HAL_RCC_OscConfig+0x90>
 8002e6a:	4b7c      	ldr	r3, [pc, #496]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a7b      	ldr	r2, [pc, #492]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e01d      	b.n	8002eb4 <HAL_RCC_OscConfig+0xcc>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0xb4>
 8002e82:	4b76      	ldr	r3, [pc, #472]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a75      	ldr	r2, [pc, #468]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b73      	ldr	r3, [pc, #460]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a72      	ldr	r2, [pc, #456]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCC_OscConfig+0xcc>
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a6e      	ldr	r2, [pc, #440]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b6c      	ldr	r3, [pc, #432]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a6b      	ldr	r2, [pc, #428]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fcb8 	bl	8001830 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fe fcb4 	bl	8001830 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e21f      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b61      	ldr	r3, [pc, #388]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xdc>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fca4 	bl	8001830 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fe fca0 	bl	8001830 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e20b      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efe:	4b57      	ldr	r3, [pc, #348]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x104>
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d06f      	beq.n	8002ffa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f1a:	4b50      	ldr	r3, [pc, #320]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d017      	beq.n	8002f56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f26:	4b4d      	ldr	r3, [pc, #308]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d105      	bne.n	8002f3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f32:	4b4a      	ldr	r3, [pc, #296]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3e:	4b47      	ldr	r3, [pc, #284]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d11c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b44      	ldr	r3, [pc, #272]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d116      	bne.n	8002f84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_RCC_OscConfig+0x186>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e1d3      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4937      	ldr	r1, [pc, #220]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	e03a      	b.n	8002ffa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	4b34      	ldr	r3, [pc, #208]	; (8003060 <HAL_RCC_OscConfig+0x278>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fe fc4d 	bl	8001830 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fe fc49 	bl	8001830 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e1b4      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	4b2b      	ldr	r3, [pc, #172]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4925      	ldr	r1, [pc, #148]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e015      	b.n	8002ffa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCC_OscConfig+0x278>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fc2c 	bl	8001830 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fc28 	bl	8001830 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e193      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d036      	beq.n	8003074 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_RCC_OscConfig+0x27c>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe fc0c 	bl	8001830 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301c:	f7fe fc08 	bl	8001830 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e173      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_OscConfig+0x274>)
 8003030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x234>
 800303a:	e01b      	b.n	8003074 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RCC_OscConfig+0x27c>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003042:	f7fe fbf5 	bl	8001830 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	e00e      	b.n	8003068 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304a:	f7fe fbf1 	bl	8001830 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d907      	bls.n	8003068 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e15c      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
 800305c:	40023800 	.word	0x40023800
 8003060:	42470000 	.word	0x42470000
 8003064:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	4b8a      	ldr	r3, [pc, #552]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ea      	bne.n	800304a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8097 	beq.w	80031b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003086:	4b83      	ldr	r3, [pc, #524]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10f      	bne.n	80030b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	4b7f      	ldr	r3, [pc, #508]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a7e      	ldr	r2, [pc, #504]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b7c      	ldr	r3, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b79      	ldr	r3, [pc, #484]	; (8003298 <HAL_RCC_OscConfig+0x4b0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030be:	4b76      	ldr	r3, [pc, #472]	; (8003298 <HAL_RCC_OscConfig+0x4b0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a75      	ldr	r2, [pc, #468]	; (8003298 <HAL_RCC_OscConfig+0x4b0>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fbb1 	bl	8001830 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fe fbad 	bl	8001830 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e118      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	4b6c      	ldr	r3, [pc, #432]	; (8003298 <HAL_RCC_OscConfig+0x4b0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x31e>
 80030f8:	4b66      	ldr	r3, [pc, #408]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a65      	ldr	r2, [pc, #404]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
 8003104:	e01c      	b.n	8003140 <HAL_RCC_OscConfig+0x358>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x340>
 800310e:	4b61      	ldr	r3, [pc, #388]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a60      	ldr	r2, [pc, #384]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
 800311a:	4b5e      	ldr	r3, [pc, #376]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a5d      	ldr	r2, [pc, #372]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0x358>
 8003128:	4b5a      	ldr	r3, [pc, #360]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4a59      	ldr	r2, [pc, #356]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	; 0x70
 8003134:	4b57      	ldr	r3, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a56      	ldr	r2, [pc, #344]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800313a:	f023 0304 	bic.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d015      	beq.n	8003174 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe fb72 	bl	8001830 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7fe fb6e 	bl	8001830 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e0d7      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	4b4b      	ldr	r3, [pc, #300]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ee      	beq.n	8003150 <HAL_RCC_OscConfig+0x368>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe fb5c 	bl	8001830 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe fb58 	bl	8001830 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e0c1      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	4b40      	ldr	r3, [pc, #256]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ee      	bne.n	800317c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800319e:	7dfb      	ldrb	r3, [r7, #23]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a4:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	4a3a      	ldr	r2, [pc, #232]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80031aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80ad 	beq.w	8003314 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ba:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d060      	beq.n	8003288 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d145      	bne.n	800325a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	4b33      	ldr	r3, [pc, #204]	; (800329c <HAL_RCC_OscConfig+0x4b4>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe fb2c 	bl	8001830 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe fb28 	bl	8001830 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e093      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	019b      	lsls	r3, r3, #6
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	3b01      	subs	r3, #1
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	071b      	lsls	r3, r3, #28
 8003226:	491b      	ldr	r1, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x4b4>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fe fafd 	bl	8001830 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe faf9 	bl	8001830 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e064      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x452>
 8003258:	e05c      	b.n	8003314 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCC_OscConfig+0x4b4>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fae6 	bl	8001830 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fae2 	bl	8001830 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e04d      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_OscConfig+0x4ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x480>
 8003286:	e045      	b.n	8003314 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e040      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000
 800329c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a0:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <HAL_RCC_OscConfig+0x538>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d030      	beq.n	8003310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d129      	bne.n	8003310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d122      	bne.n	8003310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d8:	4293      	cmp	r3, r2
 80032da:	d119      	bne.n	8003310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d10f      	bne.n	8003310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800

08003324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e03f      	b.n	80033b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe f884 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2224      	movs	r2, #36	; 0x24
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fd7b 	bl	8003e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800337c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800338c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800339c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b08a      	sub	sp, #40	; 0x28
 80033c2:	af02      	add	r7, sp, #8
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	4613      	mov	r3, r2
 80033cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d17c      	bne.n	80034d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_UART_Transmit+0x2c>
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e075      	b.n	80034da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_UART_Transmit+0x3e>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e06e      	b.n	80034da <HAL_UART_Transmit+0x11c>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2221      	movs	r2, #33	; 0x21
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003412:	f7fe fa0d 	bl	8001830 <HAL_GetTick>
 8003416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	88fa      	ldrh	r2, [r7, #6]
 800341c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	88fa      	ldrh	r2, [r7, #6]
 8003422:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342c:	d108      	bne.n	8003440 <HAL_UART_Transmit+0x82>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	e003      	b.n	8003448 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003444:	2300      	movs	r3, #0
 8003446:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003450:	e02a      	b.n	80034a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2200      	movs	r2, #0
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 faf9 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e036      	b.n	80034da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	3302      	adds	r3, #2
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e007      	b.n	800349a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	3301      	adds	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1cf      	bne.n	8003452 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2140      	movs	r1, #64	; 0x40
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 fac9 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e006      	b.n	80034da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e000      	b.n	80034da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034d8:	2302      	movs	r3, #2
  }
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b0ba      	sub	sp, #232	; 0xe8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800352a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_UART_IRQHandler+0x66>
 8003536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fbd3 	bl	8003cee <UART_Receive_IT>
      return;
 8003548:	e256      	b.n	80039f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800354a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80de 	beq.w	8003710 <HAL_UART_IRQHandler+0x22c>
 8003554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003564:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80d1 	beq.w	8003710 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <HAL_UART_IRQHandler+0xae>
 800357a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f043 0201 	orr.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_UART_IRQHandler+0xd2>
 800359e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0202 	orr.w	r2, r3, #2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_UART_IRQHandler+0xf6>
 80035c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f043 0204 	orr.w	r2, r3, #4
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d011      	beq.n	800360a <HAL_UART_IRQHandler+0x126>
 80035e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d105      	bne.n	80035fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f043 0208 	orr.w	r2, r3, #8
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 81ed 	beq.w	80039ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_UART_IRQHandler+0x14e>
 8003620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fb5e 	bl	8003cee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d103      	bne.n	800365e <HAL_UART_IRQHandler+0x17a>
 8003656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d04f      	beq.n	80036fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fa66 	bl	8003b30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d141      	bne.n	80036f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3314      	adds	r3, #20
 8003678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800368c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3314      	adds	r3, #20
 800369a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800369e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1d9      	bne.n	8003672 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d013      	beq.n	80036ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	4a7d      	ldr	r2, [pc, #500]	; (80038c0 <HAL_UART_IRQHandler+0x3dc>)
 80036cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe fe6d 	bl	80023b2 <HAL_DMA_Abort_IT>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036e8:	4610      	mov	r0, r2
 80036ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	e00e      	b.n	800370c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f99a 	bl	8003a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	e00a      	b.n	800370c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f996 	bl	8003a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	e006      	b.n	800370c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f992 	bl	8003a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800370a:	e170      	b.n	80039ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	bf00      	nop
    return;
 800370e:	e16e      	b.n	80039ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	2b01      	cmp	r3, #1
 8003716:	f040 814a 	bne.w	80039ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800371a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8143 	beq.w	80039ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 813c 	beq.w	80039ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	f040 80b4 	bne.w	80038c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003768:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8140 	beq.w	80039f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800377a:	429a      	cmp	r2, r3
 800377c:	f080 8139 	bcs.w	80039f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003786:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003792:	f000 8088 	beq.w	80038a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1d9      	bne.n	8003796 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3314      	adds	r3, #20
 80037e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3314      	adds	r3, #20
 8003802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003806:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800380a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800380e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e1      	bne.n	80037e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3314      	adds	r3, #20
 8003824:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800382e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3314      	adds	r3, #20
 800383e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003842:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003844:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003848:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e3      	bne.n	800381e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003876:	f023 0310 	bic.w	r3, r3, #16
 800387a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	330c      	adds	r3, #12
 8003884:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003888:	65ba      	str	r2, [r7, #88]	; 0x58
 800388a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800388e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e3      	bne.n	8003864 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe fd16 	bl	80022d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8c0 	bl	8003a3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038bc:	e099      	b.n	80039f2 <HAL_UART_IRQHandler+0x50e>
 80038be:	bf00      	nop
 80038c0:	08003bf7 	.word	0x08003bf7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 808b 	beq.w	80039f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80038e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8086 	beq.w	80039f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800390e:	647a      	str	r2, [r7, #68]	; 0x44
 8003910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800391c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e3      	bne.n	80038ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3314      	adds	r3, #20
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	623b      	str	r3, [r7, #32]
   return(result);
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3314      	adds	r3, #20
 8003942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003946:	633a      	str	r2, [r7, #48]	; 0x30
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800394c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e3      	bne.n	8003922 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	60fb      	str	r3, [r7, #12]
   return(result);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0310 	bic.w	r3, r3, #16
 800397e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800398c:	61fa      	str	r2, [r7, #28]
 800398e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	69b9      	ldr	r1, [r7, #24]
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	617b      	str	r3, [r7, #20]
   return(result);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e3      	bne.n	8003968 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039a4:	4619      	mov	r1, r3
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f848 	bl	8003a3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039ac:	e023      	b.n	80039f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_UART_IRQHandler+0x4ea>
 80039ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f929 	bl	8003c1e <UART_Transmit_IT>
    return;
 80039cc:	e014      	b.n	80039f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00e      	beq.n	80039f8 <HAL_UART_IRQHandler+0x514>
 80039da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f969 	bl	8003cbe <UART_EndTransmit_IT>
    return;
 80039ec:	e004      	b.n	80039f8 <HAL_UART_IRQHandler+0x514>
    return;
 80039ee:	bf00      	nop
 80039f0:	e002      	b.n	80039f8 <HAL_UART_IRQHandler+0x514>
      return;
 80039f2:	bf00      	nop
 80039f4:	e000      	b.n	80039f8 <HAL_UART_IRQHandler+0x514>
      return;
 80039f6:	bf00      	nop
  }
}
 80039f8:	37e8      	adds	r7, #232	; 0xe8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop

08003a00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b090      	sub	sp, #64	; 0x40
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a64:	e050      	b.n	8003b08 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d04c      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a74:	f7fd fedc 	bl	8001830 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d241      	bcs.n	8003b08 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	330c      	adds	r3, #12
 8003aa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aa4:	637a      	str	r2, [r7, #52]	; 0x34
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e5      	bne.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3314      	adds	r3, #20
 8003abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ad8:	623a      	str	r2, [r7, #32]
 8003ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	69f9      	ldr	r1, [r7, #28]
 8003ade:	6a3a      	ldr	r2, [r7, #32]
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e5      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e00f      	b.n	8003b28 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d09f      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3740      	adds	r7, #64	; 0x40
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b095      	sub	sp, #84	; 0x54
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b58:	643a      	str	r2, [r7, #64]	; 0x40
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e5      	bne.n	8003b38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3314      	adds	r3, #20
 8003b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e5      	bne.n	8003b6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d119      	bne.n	8003bdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f023 0310 	bic.w	r3, r3, #16
 8003bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bc8:	61ba      	str	r2, [r7, #24]
 8003bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6979      	ldr	r1, [r7, #20]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e5      	bne.n	8003ba8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bea:	bf00      	nop
 8003bec:	3754      	adds	r7, #84	; 0x54
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff ff09 	bl	8003a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b21      	cmp	r3, #33	; 0x21
 8003c30:	d13e      	bne.n	8003cb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3a:	d114      	bne.n	8003c66 <UART_Transmit_IT+0x48>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d110      	bne.n	8003c66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	1c9a      	adds	r2, r3, #2
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	621a      	str	r2, [r3, #32]
 8003c64:	e008      	b.n	8003c78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	1c59      	adds	r1, r3, #1
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6211      	str	r1, [r2, #32]
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	4619      	mov	r1, r3
 8003c86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10f      	bne.n	8003cac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003caa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e000      	b.n	8003cb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff fe8e 	bl	8003a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b08c      	sub	sp, #48	; 0x30
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b22      	cmp	r3, #34	; 0x22
 8003d00:	f040 80ab 	bne.w	8003e5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0c:	d117      	bne.n	8003d3e <UART_Receive_IT+0x50>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d113      	bne.n	8003d3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	1c9a      	adds	r2, r3, #2
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d3c:	e026      	b.n	8003d8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d007      	beq.n	8003d62 <UART_Receive_IT+0x74>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <UART_Receive_IT+0x82>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e008      	b.n	8003d82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d15a      	bne.n	8003e56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0220 	bic.w	r2, r2, #32
 8003dae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d135      	bne.n	8003e4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	613b      	str	r3, [r7, #16]
   return(result);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f023 0310 	bic.w	r3, r3, #16
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	623a      	str	r2, [r7, #32]
 8003e08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	69f9      	ldr	r1, [r7, #28]
 8003e0c:	6a3a      	ldr	r2, [r7, #32]
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e5      	bne.n	8003de6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d10a      	bne.n	8003e3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff fdf9 	bl	8003a3c <HAL_UARTEx_RxEventCallback>
 8003e4a:	e002      	b.n	8003e52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fde1 	bl	8003a14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e002      	b.n	8003e5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e000      	b.n	8003e5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
  }
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3730      	adds	r7, #48	; 0x30
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e68:	b0c0      	sub	sp, #256	; 0x100
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	68d9      	ldr	r1, [r3, #12]
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	ea40 0301 	orr.w	r3, r0, r1
 8003e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ebc:	f021 010c 	bic.w	r1, r1, #12
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ede:	6999      	ldr	r1, [r3, #24]
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	ea40 0301 	orr.w	r3, r0, r1
 8003eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b8f      	ldr	r3, [pc, #572]	; (8004130 <UART_SetConfig+0x2cc>)
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d005      	beq.n	8003f04 <UART_SetConfig+0xa0>
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b8d      	ldr	r3, [pc, #564]	; (8004134 <UART_SetConfig+0x2d0>)
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d104      	bne.n	8003f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7fe fd2c 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8003f08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f0c:	e003      	b.n	8003f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f0e:	f7fe fd13 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 8003f12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f20:	f040 810c 	bne.w	800413c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f36:	4622      	mov	r2, r4
 8003f38:	462b      	mov	r3, r5
 8003f3a:	1891      	adds	r1, r2, r2
 8003f3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f3e:	415b      	adcs	r3, r3
 8003f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f46:	4621      	mov	r1, r4
 8003f48:	eb12 0801 	adds.w	r8, r2, r1
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	eb43 0901 	adc.w	r9, r3, r1
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f66:	4690      	mov	r8, r2
 8003f68:	4699      	mov	r9, r3
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	eb18 0303 	adds.w	r3, r8, r3
 8003f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f74:	462b      	mov	r3, r5
 8003f76:	eb49 0303 	adc.w	r3, r9, r3
 8003f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f92:	460b      	mov	r3, r1
 8003f94:	18db      	adds	r3, r3, r3
 8003f96:	653b      	str	r3, [r7, #80]	; 0x50
 8003f98:	4613      	mov	r3, r2
 8003f9a:	eb42 0303 	adc.w	r3, r2, r3
 8003f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fa8:	f7fc fe6e 	bl	8000c88 <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4b61      	ldr	r3, [pc, #388]	; (8004138 <UART_SetConfig+0x2d4>)
 8003fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	011c      	lsls	r4, r3, #4
 8003fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fcc:	4642      	mov	r2, r8
 8003fce:	464b      	mov	r3, r9
 8003fd0:	1891      	adds	r1, r2, r2
 8003fd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fd4:	415b      	adcs	r3, r3
 8003fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fdc:	4641      	mov	r1, r8
 8003fde:	eb12 0a01 	adds.w	sl, r2, r1
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ffc:	4692      	mov	sl, r2
 8003ffe:	469b      	mov	fp, r3
 8004000:	4643      	mov	r3, r8
 8004002:	eb1a 0303 	adds.w	r3, sl, r3
 8004006:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800400a:	464b      	mov	r3, r9
 800400c:	eb4b 0303 	adc.w	r3, fp, r3
 8004010:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004020:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004028:	460b      	mov	r3, r1
 800402a:	18db      	adds	r3, r3, r3
 800402c:	643b      	str	r3, [r7, #64]	; 0x40
 800402e:	4613      	mov	r3, r2
 8004030:	eb42 0303 	adc.w	r3, r2, r3
 8004034:	647b      	str	r3, [r7, #68]	; 0x44
 8004036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800403a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800403e:	f7fc fe23 	bl	8000c88 <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4611      	mov	r1, r2
 8004048:	4b3b      	ldr	r3, [pc, #236]	; (8004138 <UART_SetConfig+0x2d4>)
 800404a:	fba3 2301 	umull	r2, r3, r3, r1
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2264      	movs	r2, #100	; 0x64
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	1acb      	subs	r3, r1, r3
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800405e:	4b36      	ldr	r3, [pc, #216]	; (8004138 <UART_SetConfig+0x2d4>)
 8004060:	fba3 2302 	umull	r2, r3, r3, r2
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800406c:	441c      	add	r4, r3
 800406e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004072:	2200      	movs	r2, #0
 8004074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004078:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800407c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004080:	4642      	mov	r2, r8
 8004082:	464b      	mov	r3, r9
 8004084:	1891      	adds	r1, r2, r2
 8004086:	63b9      	str	r1, [r7, #56]	; 0x38
 8004088:	415b      	adcs	r3, r3
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800408c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004090:	4641      	mov	r1, r8
 8004092:	1851      	adds	r1, r2, r1
 8004094:	6339      	str	r1, [r7, #48]	; 0x30
 8004096:	4649      	mov	r1, r9
 8004098:	414b      	adcs	r3, r1
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040a8:	4659      	mov	r1, fp
 80040aa:	00cb      	lsls	r3, r1, #3
 80040ac:	4651      	mov	r1, sl
 80040ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b2:	4651      	mov	r1, sl
 80040b4:	00ca      	lsls	r2, r1, #3
 80040b6:	4610      	mov	r0, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	4642      	mov	r2, r8
 80040be:	189b      	adds	r3, r3, r2
 80040c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040c4:	464b      	mov	r3, r9
 80040c6:	460a      	mov	r2, r1
 80040c8:	eb42 0303 	adc.w	r3, r2, r3
 80040cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040e4:	460b      	mov	r3, r1
 80040e6:	18db      	adds	r3, r3, r3
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ea:	4613      	mov	r3, r2
 80040ec:	eb42 0303 	adc.w	r3, r2, r3
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040fa:	f7fc fdc5 	bl	8000c88 <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <UART_SetConfig+0x2d4>)
 8004104:	fba3 1302 	umull	r1, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	2164      	movs	r1, #100	; 0x64
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	3332      	adds	r3, #50	; 0x32
 8004116:	4a08      	ldr	r2, [pc, #32]	; (8004138 <UART_SetConfig+0x2d4>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	f003 0207 	and.w	r2, r3, #7
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4422      	add	r2, r4
 800412a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800412c:	e106      	b.n	800433c <UART_SetConfig+0x4d8>
 800412e:	bf00      	nop
 8004130:	40011000 	.word	0x40011000
 8004134:	40011400 	.word	0x40011400
 8004138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800413c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004140:	2200      	movs	r2, #0
 8004142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004146:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800414a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800414e:	4642      	mov	r2, r8
 8004150:	464b      	mov	r3, r9
 8004152:	1891      	adds	r1, r2, r2
 8004154:	6239      	str	r1, [r7, #32]
 8004156:	415b      	adcs	r3, r3
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
 800415a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800415e:	4641      	mov	r1, r8
 8004160:	1854      	adds	r4, r2, r1
 8004162:	4649      	mov	r1, r9
 8004164:	eb43 0501 	adc.w	r5, r3, r1
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	00eb      	lsls	r3, r5, #3
 8004172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004176:	00e2      	lsls	r2, r4, #3
 8004178:	4614      	mov	r4, r2
 800417a:	461d      	mov	r5, r3
 800417c:	4643      	mov	r3, r8
 800417e:	18e3      	adds	r3, r4, r3
 8004180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004184:	464b      	mov	r3, r9
 8004186:	eb45 0303 	adc.w	r3, r5, r3
 800418a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800419a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041aa:	4629      	mov	r1, r5
 80041ac:	008b      	lsls	r3, r1, #2
 80041ae:	4621      	mov	r1, r4
 80041b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b4:	4621      	mov	r1, r4
 80041b6:	008a      	lsls	r2, r1, #2
 80041b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041bc:	f7fc fd64 	bl	8000c88 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4b60      	ldr	r3, [pc, #384]	; (8004348 <UART_SetConfig+0x4e4>)
 80041c6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	011c      	lsls	r4, r3, #4
 80041ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	1891      	adds	r1, r2, r2
 80041e6:	61b9      	str	r1, [r7, #24]
 80041e8:	415b      	adcs	r3, r3
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f0:	4641      	mov	r1, r8
 80041f2:	1851      	adds	r1, r2, r1
 80041f4:	6139      	str	r1, [r7, #16]
 80041f6:	4649      	mov	r1, r9
 80041f8:	414b      	adcs	r3, r1
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004208:	4659      	mov	r1, fp
 800420a:	00cb      	lsls	r3, r1, #3
 800420c:	4651      	mov	r1, sl
 800420e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004212:	4651      	mov	r1, sl
 8004214:	00ca      	lsls	r2, r1, #3
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	4603      	mov	r3, r0
 800421c:	4642      	mov	r2, r8
 800421e:	189b      	adds	r3, r3, r2
 8004220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004224:	464b      	mov	r3, r9
 8004226:	460a      	mov	r2, r1
 8004228:	eb42 0303 	adc.w	r3, r2, r3
 800422c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	67bb      	str	r3, [r7, #120]	; 0x78
 800423a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004248:	4649      	mov	r1, r9
 800424a:	008b      	lsls	r3, r1, #2
 800424c:	4641      	mov	r1, r8
 800424e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004252:	4641      	mov	r1, r8
 8004254:	008a      	lsls	r2, r1, #2
 8004256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800425a:	f7fc fd15 	bl	8000c88 <__aeabi_uldivmod>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4611      	mov	r1, r2
 8004264:	4b38      	ldr	r3, [pc, #224]	; (8004348 <UART_SetConfig+0x4e4>)
 8004266:	fba3 2301 	umull	r2, r3, r3, r1
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2264      	movs	r2, #100	; 0x64
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	1acb      	subs	r3, r1, r3
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	3332      	adds	r3, #50	; 0x32
 8004278:	4a33      	ldr	r2, [pc, #204]	; (8004348 <UART_SetConfig+0x4e4>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004284:	441c      	add	r4, r3
 8004286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800428a:	2200      	movs	r2, #0
 800428c:	673b      	str	r3, [r7, #112]	; 0x70
 800428e:	677a      	str	r2, [r7, #116]	; 0x74
 8004290:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004294:	4642      	mov	r2, r8
 8004296:	464b      	mov	r3, r9
 8004298:	1891      	adds	r1, r2, r2
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	415b      	adcs	r3, r3
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042a4:	4641      	mov	r1, r8
 80042a6:	1851      	adds	r1, r2, r1
 80042a8:	6039      	str	r1, [r7, #0]
 80042aa:	4649      	mov	r1, r9
 80042ac:	414b      	adcs	r3, r1
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042bc:	4659      	mov	r1, fp
 80042be:	00cb      	lsls	r3, r1, #3
 80042c0:	4651      	mov	r1, sl
 80042c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042c6:	4651      	mov	r1, sl
 80042c8:	00ca      	lsls	r2, r1, #3
 80042ca:	4610      	mov	r0, r2
 80042cc:	4619      	mov	r1, r3
 80042ce:	4603      	mov	r3, r0
 80042d0:	4642      	mov	r2, r8
 80042d2:	189b      	adds	r3, r3, r2
 80042d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80042d6:	464b      	mov	r3, r9
 80042d8:	460a      	mov	r2, r1
 80042da:	eb42 0303 	adc.w	r3, r2, r3
 80042de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	663b      	str	r3, [r7, #96]	; 0x60
 80042ea:	667a      	str	r2, [r7, #100]	; 0x64
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042f8:	4649      	mov	r1, r9
 80042fa:	008b      	lsls	r3, r1, #2
 80042fc:	4641      	mov	r1, r8
 80042fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004302:	4641      	mov	r1, r8
 8004304:	008a      	lsls	r2, r1, #2
 8004306:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800430a:	f7fc fcbd 	bl	8000c88 <__aeabi_uldivmod>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <UART_SetConfig+0x4e4>)
 8004314:	fba3 1302 	umull	r1, r3, r3, r2
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	2164      	movs	r1, #100	; 0x64
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	3332      	adds	r3, #50	; 0x32
 8004326:	4a08      	ldr	r2, [pc, #32]	; (8004348 <UART_SetConfig+0x4e4>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4422      	add	r2, r4
 800433a:	609a      	str	r2, [r3, #8]
}
 800433c:	bf00      	nop
 800433e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004342:	46bd      	mov	sp, r7
 8004344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004348:	51eb851f 	.word	0x51eb851f

0800434c <__cvt>:
 800434c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004350:	ec55 4b10 	vmov	r4, r5, d0
 8004354:	2d00      	cmp	r5, #0
 8004356:	460e      	mov	r6, r1
 8004358:	4619      	mov	r1, r3
 800435a:	462b      	mov	r3, r5
 800435c:	bfbb      	ittet	lt
 800435e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004362:	461d      	movlt	r5, r3
 8004364:	2300      	movge	r3, #0
 8004366:	232d      	movlt	r3, #45	; 0x2d
 8004368:	700b      	strb	r3, [r1, #0]
 800436a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800436c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004370:	4691      	mov	r9, r2
 8004372:	f023 0820 	bic.w	r8, r3, #32
 8004376:	bfbc      	itt	lt
 8004378:	4622      	movlt	r2, r4
 800437a:	4614      	movlt	r4, r2
 800437c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004380:	d005      	beq.n	800438e <__cvt+0x42>
 8004382:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004386:	d100      	bne.n	800438a <__cvt+0x3e>
 8004388:	3601      	adds	r6, #1
 800438a:	2102      	movs	r1, #2
 800438c:	e000      	b.n	8004390 <__cvt+0x44>
 800438e:	2103      	movs	r1, #3
 8004390:	ab03      	add	r3, sp, #12
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	ab02      	add	r3, sp, #8
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	ec45 4b10 	vmov	d0, r4, r5
 800439c:	4653      	mov	r3, sl
 800439e:	4632      	mov	r2, r6
 80043a0:	f000 fe6a 	bl	8005078 <_dtoa_r>
 80043a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043a8:	4607      	mov	r7, r0
 80043aa:	d102      	bne.n	80043b2 <__cvt+0x66>
 80043ac:	f019 0f01 	tst.w	r9, #1
 80043b0:	d022      	beq.n	80043f8 <__cvt+0xac>
 80043b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043b6:	eb07 0906 	add.w	r9, r7, r6
 80043ba:	d110      	bne.n	80043de <__cvt+0x92>
 80043bc:	783b      	ldrb	r3, [r7, #0]
 80043be:	2b30      	cmp	r3, #48	; 0x30
 80043c0:	d10a      	bne.n	80043d8 <__cvt+0x8c>
 80043c2:	2200      	movs	r2, #0
 80043c4:	2300      	movs	r3, #0
 80043c6:	4620      	mov	r0, r4
 80043c8:	4629      	mov	r1, r5
 80043ca:	f7fc fb9d 	bl	8000b08 <__aeabi_dcmpeq>
 80043ce:	b918      	cbnz	r0, 80043d8 <__cvt+0x8c>
 80043d0:	f1c6 0601 	rsb	r6, r6, #1
 80043d4:	f8ca 6000 	str.w	r6, [sl]
 80043d8:	f8da 3000 	ldr.w	r3, [sl]
 80043dc:	4499      	add	r9, r3
 80043de:	2200      	movs	r2, #0
 80043e0:	2300      	movs	r3, #0
 80043e2:	4620      	mov	r0, r4
 80043e4:	4629      	mov	r1, r5
 80043e6:	f7fc fb8f 	bl	8000b08 <__aeabi_dcmpeq>
 80043ea:	b108      	cbz	r0, 80043f0 <__cvt+0xa4>
 80043ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80043f0:	2230      	movs	r2, #48	; 0x30
 80043f2:	9b03      	ldr	r3, [sp, #12]
 80043f4:	454b      	cmp	r3, r9
 80043f6:	d307      	bcc.n	8004408 <__cvt+0xbc>
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043fc:	1bdb      	subs	r3, r3, r7
 80043fe:	4638      	mov	r0, r7
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	b004      	add	sp, #16
 8004404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004408:	1c59      	adds	r1, r3, #1
 800440a:	9103      	str	r1, [sp, #12]
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e7f0      	b.n	80043f2 <__cvt+0xa6>

08004410 <__exponent>:
 8004410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004412:	4603      	mov	r3, r0
 8004414:	2900      	cmp	r1, #0
 8004416:	bfb8      	it	lt
 8004418:	4249      	neglt	r1, r1
 800441a:	f803 2b02 	strb.w	r2, [r3], #2
 800441e:	bfb4      	ite	lt
 8004420:	222d      	movlt	r2, #45	; 0x2d
 8004422:	222b      	movge	r2, #43	; 0x2b
 8004424:	2909      	cmp	r1, #9
 8004426:	7042      	strb	r2, [r0, #1]
 8004428:	dd2a      	ble.n	8004480 <__exponent+0x70>
 800442a:	f10d 0207 	add.w	r2, sp, #7
 800442e:	4617      	mov	r7, r2
 8004430:	260a      	movs	r6, #10
 8004432:	4694      	mov	ip, r2
 8004434:	fb91 f5f6 	sdiv	r5, r1, r6
 8004438:	fb06 1415 	mls	r4, r6, r5, r1
 800443c:	3430      	adds	r4, #48	; 0x30
 800443e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004442:	460c      	mov	r4, r1
 8004444:	2c63      	cmp	r4, #99	; 0x63
 8004446:	f102 32ff 	add.w	r2, r2, #4294967295
 800444a:	4629      	mov	r1, r5
 800444c:	dcf1      	bgt.n	8004432 <__exponent+0x22>
 800444e:	3130      	adds	r1, #48	; 0x30
 8004450:	f1ac 0402 	sub.w	r4, ip, #2
 8004454:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004458:	1c41      	adds	r1, r0, #1
 800445a:	4622      	mov	r2, r4
 800445c:	42ba      	cmp	r2, r7
 800445e:	d30a      	bcc.n	8004476 <__exponent+0x66>
 8004460:	f10d 0209 	add.w	r2, sp, #9
 8004464:	eba2 020c 	sub.w	r2, r2, ip
 8004468:	42bc      	cmp	r4, r7
 800446a:	bf88      	it	hi
 800446c:	2200      	movhi	r2, #0
 800446e:	4413      	add	r3, r2
 8004470:	1a18      	subs	r0, r3, r0
 8004472:	b003      	add	sp, #12
 8004474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004476:	f812 5b01 	ldrb.w	r5, [r2], #1
 800447a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800447e:	e7ed      	b.n	800445c <__exponent+0x4c>
 8004480:	2330      	movs	r3, #48	; 0x30
 8004482:	3130      	adds	r1, #48	; 0x30
 8004484:	7083      	strb	r3, [r0, #2]
 8004486:	70c1      	strb	r1, [r0, #3]
 8004488:	1d03      	adds	r3, r0, #4
 800448a:	e7f1      	b.n	8004470 <__exponent+0x60>

0800448c <_printf_float>:
 800448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004490:	ed2d 8b02 	vpush	{d8}
 8004494:	b08d      	sub	sp, #52	; 0x34
 8004496:	460c      	mov	r4, r1
 8004498:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800449c:	4616      	mov	r6, r2
 800449e:	461f      	mov	r7, r3
 80044a0:	4605      	mov	r5, r0
 80044a2:	f000 fce9 	bl	8004e78 <_localeconv_r>
 80044a6:	f8d0 a000 	ldr.w	sl, [r0]
 80044aa:	4650      	mov	r0, sl
 80044ac:	f7fb ff00 	bl	80002b0 <strlen>
 80044b0:	2300      	movs	r3, #0
 80044b2:	930a      	str	r3, [sp, #40]	; 0x28
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	9305      	str	r3, [sp, #20]
 80044b8:	f8d8 3000 	ldr.w	r3, [r8]
 80044bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80044c0:	3307      	adds	r3, #7
 80044c2:	f023 0307 	bic.w	r3, r3, #7
 80044c6:	f103 0208 	add.w	r2, r3, #8
 80044ca:	f8c8 2000 	str.w	r2, [r8]
 80044ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80044d6:	9307      	str	r3, [sp, #28]
 80044d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80044dc:	ee08 0a10 	vmov	s16, r0
 80044e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80044e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044e8:	4b9e      	ldr	r3, [pc, #632]	; (8004764 <_printf_float+0x2d8>)
 80044ea:	f04f 32ff 	mov.w	r2, #4294967295
 80044ee:	f7fc fb3d 	bl	8000b6c <__aeabi_dcmpun>
 80044f2:	bb88      	cbnz	r0, 8004558 <_printf_float+0xcc>
 80044f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044f8:	4b9a      	ldr	r3, [pc, #616]	; (8004764 <_printf_float+0x2d8>)
 80044fa:	f04f 32ff 	mov.w	r2, #4294967295
 80044fe:	f7fc fb17 	bl	8000b30 <__aeabi_dcmple>
 8004502:	bb48      	cbnz	r0, 8004558 <_printf_float+0xcc>
 8004504:	2200      	movs	r2, #0
 8004506:	2300      	movs	r3, #0
 8004508:	4640      	mov	r0, r8
 800450a:	4649      	mov	r1, r9
 800450c:	f7fc fb06 	bl	8000b1c <__aeabi_dcmplt>
 8004510:	b110      	cbz	r0, 8004518 <_printf_float+0x8c>
 8004512:	232d      	movs	r3, #45	; 0x2d
 8004514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004518:	4a93      	ldr	r2, [pc, #588]	; (8004768 <_printf_float+0x2dc>)
 800451a:	4b94      	ldr	r3, [pc, #592]	; (800476c <_printf_float+0x2e0>)
 800451c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004520:	bf94      	ite	ls
 8004522:	4690      	movls	r8, r2
 8004524:	4698      	movhi	r8, r3
 8004526:	2303      	movs	r3, #3
 8004528:	6123      	str	r3, [r4, #16]
 800452a:	9b05      	ldr	r3, [sp, #20]
 800452c:	f023 0304 	bic.w	r3, r3, #4
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	f04f 0900 	mov.w	r9, #0
 8004536:	9700      	str	r7, [sp, #0]
 8004538:	4633      	mov	r3, r6
 800453a:	aa0b      	add	r2, sp, #44	; 0x2c
 800453c:	4621      	mov	r1, r4
 800453e:	4628      	mov	r0, r5
 8004540:	f000 f9da 	bl	80048f8 <_printf_common>
 8004544:	3001      	adds	r0, #1
 8004546:	f040 8090 	bne.w	800466a <_printf_float+0x1de>
 800454a:	f04f 30ff 	mov.w	r0, #4294967295
 800454e:	b00d      	add	sp, #52	; 0x34
 8004550:	ecbd 8b02 	vpop	{d8}
 8004554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004558:	4642      	mov	r2, r8
 800455a:	464b      	mov	r3, r9
 800455c:	4640      	mov	r0, r8
 800455e:	4649      	mov	r1, r9
 8004560:	f7fc fb04 	bl	8000b6c <__aeabi_dcmpun>
 8004564:	b140      	cbz	r0, 8004578 <_printf_float+0xec>
 8004566:	464b      	mov	r3, r9
 8004568:	2b00      	cmp	r3, #0
 800456a:	bfbc      	itt	lt
 800456c:	232d      	movlt	r3, #45	; 0x2d
 800456e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004572:	4a7f      	ldr	r2, [pc, #508]	; (8004770 <_printf_float+0x2e4>)
 8004574:	4b7f      	ldr	r3, [pc, #508]	; (8004774 <_printf_float+0x2e8>)
 8004576:	e7d1      	b.n	800451c <_printf_float+0x90>
 8004578:	6863      	ldr	r3, [r4, #4]
 800457a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800457e:	9206      	str	r2, [sp, #24]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	d13f      	bne.n	8004604 <_printf_float+0x178>
 8004584:	2306      	movs	r3, #6
 8004586:	6063      	str	r3, [r4, #4]
 8004588:	9b05      	ldr	r3, [sp, #20]
 800458a:	6861      	ldr	r1, [r4, #4]
 800458c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004590:	2300      	movs	r3, #0
 8004592:	9303      	str	r3, [sp, #12]
 8004594:	ab0a      	add	r3, sp, #40	; 0x28
 8004596:	e9cd b301 	strd	fp, r3, [sp, #4]
 800459a:	ab09      	add	r3, sp, #36	; 0x24
 800459c:	ec49 8b10 	vmov	d0, r8, r9
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	6022      	str	r2, [r4, #0]
 80045a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80045a8:	4628      	mov	r0, r5
 80045aa:	f7ff fecf 	bl	800434c <__cvt>
 80045ae:	9b06      	ldr	r3, [sp, #24]
 80045b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045b2:	2b47      	cmp	r3, #71	; 0x47
 80045b4:	4680      	mov	r8, r0
 80045b6:	d108      	bne.n	80045ca <_printf_float+0x13e>
 80045b8:	1cc8      	adds	r0, r1, #3
 80045ba:	db02      	blt.n	80045c2 <_printf_float+0x136>
 80045bc:	6863      	ldr	r3, [r4, #4]
 80045be:	4299      	cmp	r1, r3
 80045c0:	dd41      	ble.n	8004646 <_printf_float+0x1ba>
 80045c2:	f1ab 0302 	sub.w	r3, fp, #2
 80045c6:	fa5f fb83 	uxtb.w	fp, r3
 80045ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80045ce:	d820      	bhi.n	8004612 <_printf_float+0x186>
 80045d0:	3901      	subs	r1, #1
 80045d2:	465a      	mov	r2, fp
 80045d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045d8:	9109      	str	r1, [sp, #36]	; 0x24
 80045da:	f7ff ff19 	bl	8004410 <__exponent>
 80045de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045e0:	1813      	adds	r3, r2, r0
 80045e2:	2a01      	cmp	r2, #1
 80045e4:	4681      	mov	r9, r0
 80045e6:	6123      	str	r3, [r4, #16]
 80045e8:	dc02      	bgt.n	80045f0 <_printf_float+0x164>
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	07d2      	lsls	r2, r2, #31
 80045ee:	d501      	bpl.n	80045f4 <_printf_float+0x168>
 80045f0:	3301      	adds	r3, #1
 80045f2:	6123      	str	r3, [r4, #16]
 80045f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d09c      	beq.n	8004536 <_printf_float+0xaa>
 80045fc:	232d      	movs	r3, #45	; 0x2d
 80045fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004602:	e798      	b.n	8004536 <_printf_float+0xaa>
 8004604:	9a06      	ldr	r2, [sp, #24]
 8004606:	2a47      	cmp	r2, #71	; 0x47
 8004608:	d1be      	bne.n	8004588 <_printf_float+0xfc>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1bc      	bne.n	8004588 <_printf_float+0xfc>
 800460e:	2301      	movs	r3, #1
 8004610:	e7b9      	b.n	8004586 <_printf_float+0xfa>
 8004612:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004616:	d118      	bne.n	800464a <_printf_float+0x1be>
 8004618:	2900      	cmp	r1, #0
 800461a:	6863      	ldr	r3, [r4, #4]
 800461c:	dd0b      	ble.n	8004636 <_printf_float+0x1aa>
 800461e:	6121      	str	r1, [r4, #16]
 8004620:	b913      	cbnz	r3, 8004628 <_printf_float+0x19c>
 8004622:	6822      	ldr	r2, [r4, #0]
 8004624:	07d0      	lsls	r0, r2, #31
 8004626:	d502      	bpl.n	800462e <_printf_float+0x1a2>
 8004628:	3301      	adds	r3, #1
 800462a:	440b      	add	r3, r1
 800462c:	6123      	str	r3, [r4, #16]
 800462e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004630:	f04f 0900 	mov.w	r9, #0
 8004634:	e7de      	b.n	80045f4 <_printf_float+0x168>
 8004636:	b913      	cbnz	r3, 800463e <_printf_float+0x1b2>
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	07d2      	lsls	r2, r2, #31
 800463c:	d501      	bpl.n	8004642 <_printf_float+0x1b6>
 800463e:	3302      	adds	r3, #2
 8004640:	e7f4      	b.n	800462c <_printf_float+0x1a0>
 8004642:	2301      	movs	r3, #1
 8004644:	e7f2      	b.n	800462c <_printf_float+0x1a0>
 8004646:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800464a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800464c:	4299      	cmp	r1, r3
 800464e:	db05      	blt.n	800465c <_printf_float+0x1d0>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	6121      	str	r1, [r4, #16]
 8004654:	07d8      	lsls	r0, r3, #31
 8004656:	d5ea      	bpl.n	800462e <_printf_float+0x1a2>
 8004658:	1c4b      	adds	r3, r1, #1
 800465a:	e7e7      	b.n	800462c <_printf_float+0x1a0>
 800465c:	2900      	cmp	r1, #0
 800465e:	bfd4      	ite	le
 8004660:	f1c1 0202 	rsble	r2, r1, #2
 8004664:	2201      	movgt	r2, #1
 8004666:	4413      	add	r3, r2
 8004668:	e7e0      	b.n	800462c <_printf_float+0x1a0>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	055a      	lsls	r2, r3, #21
 800466e:	d407      	bmi.n	8004680 <_printf_float+0x1f4>
 8004670:	6923      	ldr	r3, [r4, #16]
 8004672:	4642      	mov	r2, r8
 8004674:	4631      	mov	r1, r6
 8004676:	4628      	mov	r0, r5
 8004678:	47b8      	blx	r7
 800467a:	3001      	adds	r0, #1
 800467c:	d12c      	bne.n	80046d8 <_printf_float+0x24c>
 800467e:	e764      	b.n	800454a <_printf_float+0xbe>
 8004680:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004684:	f240 80e0 	bls.w	8004848 <_printf_float+0x3bc>
 8004688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800468c:	2200      	movs	r2, #0
 800468e:	2300      	movs	r3, #0
 8004690:	f7fc fa3a 	bl	8000b08 <__aeabi_dcmpeq>
 8004694:	2800      	cmp	r0, #0
 8004696:	d034      	beq.n	8004702 <_printf_float+0x276>
 8004698:	4a37      	ldr	r2, [pc, #220]	; (8004778 <_printf_float+0x2ec>)
 800469a:	2301      	movs	r3, #1
 800469c:	4631      	mov	r1, r6
 800469e:	4628      	mov	r0, r5
 80046a0:	47b8      	blx	r7
 80046a2:	3001      	adds	r0, #1
 80046a4:	f43f af51 	beq.w	800454a <_printf_float+0xbe>
 80046a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046ac:	429a      	cmp	r2, r3
 80046ae:	db02      	blt.n	80046b6 <_printf_float+0x22a>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	07d8      	lsls	r0, r3, #31
 80046b4:	d510      	bpl.n	80046d8 <_printf_float+0x24c>
 80046b6:	ee18 3a10 	vmov	r3, s16
 80046ba:	4652      	mov	r2, sl
 80046bc:	4631      	mov	r1, r6
 80046be:	4628      	mov	r0, r5
 80046c0:	47b8      	blx	r7
 80046c2:	3001      	adds	r0, #1
 80046c4:	f43f af41 	beq.w	800454a <_printf_float+0xbe>
 80046c8:	f04f 0800 	mov.w	r8, #0
 80046cc:	f104 091a 	add.w	r9, r4, #26
 80046d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046d2:	3b01      	subs	r3, #1
 80046d4:	4543      	cmp	r3, r8
 80046d6:	dc09      	bgt.n	80046ec <_printf_float+0x260>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	079b      	lsls	r3, r3, #30
 80046dc:	f100 8107 	bmi.w	80048ee <_printf_float+0x462>
 80046e0:	68e0      	ldr	r0, [r4, #12]
 80046e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046e4:	4298      	cmp	r0, r3
 80046e6:	bfb8      	it	lt
 80046e8:	4618      	movlt	r0, r3
 80046ea:	e730      	b.n	800454e <_printf_float+0xc2>
 80046ec:	2301      	movs	r3, #1
 80046ee:	464a      	mov	r2, r9
 80046f0:	4631      	mov	r1, r6
 80046f2:	4628      	mov	r0, r5
 80046f4:	47b8      	blx	r7
 80046f6:	3001      	adds	r0, #1
 80046f8:	f43f af27 	beq.w	800454a <_printf_float+0xbe>
 80046fc:	f108 0801 	add.w	r8, r8, #1
 8004700:	e7e6      	b.n	80046d0 <_printf_float+0x244>
 8004702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004704:	2b00      	cmp	r3, #0
 8004706:	dc39      	bgt.n	800477c <_printf_float+0x2f0>
 8004708:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <_printf_float+0x2ec>)
 800470a:	2301      	movs	r3, #1
 800470c:	4631      	mov	r1, r6
 800470e:	4628      	mov	r0, r5
 8004710:	47b8      	blx	r7
 8004712:	3001      	adds	r0, #1
 8004714:	f43f af19 	beq.w	800454a <_printf_float+0xbe>
 8004718:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800471c:	4313      	orrs	r3, r2
 800471e:	d102      	bne.n	8004726 <_printf_float+0x29a>
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	07d9      	lsls	r1, r3, #31
 8004724:	d5d8      	bpl.n	80046d8 <_printf_float+0x24c>
 8004726:	ee18 3a10 	vmov	r3, s16
 800472a:	4652      	mov	r2, sl
 800472c:	4631      	mov	r1, r6
 800472e:	4628      	mov	r0, r5
 8004730:	47b8      	blx	r7
 8004732:	3001      	adds	r0, #1
 8004734:	f43f af09 	beq.w	800454a <_printf_float+0xbe>
 8004738:	f04f 0900 	mov.w	r9, #0
 800473c:	f104 0a1a 	add.w	sl, r4, #26
 8004740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004742:	425b      	negs	r3, r3
 8004744:	454b      	cmp	r3, r9
 8004746:	dc01      	bgt.n	800474c <_printf_float+0x2c0>
 8004748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800474a:	e792      	b.n	8004672 <_printf_float+0x1e6>
 800474c:	2301      	movs	r3, #1
 800474e:	4652      	mov	r2, sl
 8004750:	4631      	mov	r1, r6
 8004752:	4628      	mov	r0, r5
 8004754:	47b8      	blx	r7
 8004756:	3001      	adds	r0, #1
 8004758:	f43f aef7 	beq.w	800454a <_printf_float+0xbe>
 800475c:	f109 0901 	add.w	r9, r9, #1
 8004760:	e7ee      	b.n	8004740 <_printf_float+0x2b4>
 8004762:	bf00      	nop
 8004764:	7fefffff 	.word	0x7fefffff
 8004768:	08007098 	.word	0x08007098
 800476c:	0800709c 	.word	0x0800709c
 8004770:	080070a0 	.word	0x080070a0
 8004774:	080070a4 	.word	0x080070a4
 8004778:	080070a8 	.word	0x080070a8
 800477c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800477e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004780:	429a      	cmp	r2, r3
 8004782:	bfa8      	it	ge
 8004784:	461a      	movge	r2, r3
 8004786:	2a00      	cmp	r2, #0
 8004788:	4691      	mov	r9, r2
 800478a:	dc37      	bgt.n	80047fc <_printf_float+0x370>
 800478c:	f04f 0b00 	mov.w	fp, #0
 8004790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004794:	f104 021a 	add.w	r2, r4, #26
 8004798:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800479a:	9305      	str	r3, [sp, #20]
 800479c:	eba3 0309 	sub.w	r3, r3, r9
 80047a0:	455b      	cmp	r3, fp
 80047a2:	dc33      	bgt.n	800480c <_printf_float+0x380>
 80047a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047a8:	429a      	cmp	r2, r3
 80047aa:	db3b      	blt.n	8004824 <_printf_float+0x398>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	07da      	lsls	r2, r3, #31
 80047b0:	d438      	bmi.n	8004824 <_printf_float+0x398>
 80047b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80047b6:	eba2 0903 	sub.w	r9, r2, r3
 80047ba:	9b05      	ldr	r3, [sp, #20]
 80047bc:	1ad2      	subs	r2, r2, r3
 80047be:	4591      	cmp	r9, r2
 80047c0:	bfa8      	it	ge
 80047c2:	4691      	movge	r9, r2
 80047c4:	f1b9 0f00 	cmp.w	r9, #0
 80047c8:	dc35      	bgt.n	8004836 <_printf_float+0x3aa>
 80047ca:	f04f 0800 	mov.w	r8, #0
 80047ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047d2:	f104 0a1a 	add.w	sl, r4, #26
 80047d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	eba3 0309 	sub.w	r3, r3, r9
 80047e0:	4543      	cmp	r3, r8
 80047e2:	f77f af79 	ble.w	80046d8 <_printf_float+0x24c>
 80047e6:	2301      	movs	r3, #1
 80047e8:	4652      	mov	r2, sl
 80047ea:	4631      	mov	r1, r6
 80047ec:	4628      	mov	r0, r5
 80047ee:	47b8      	blx	r7
 80047f0:	3001      	adds	r0, #1
 80047f2:	f43f aeaa 	beq.w	800454a <_printf_float+0xbe>
 80047f6:	f108 0801 	add.w	r8, r8, #1
 80047fa:	e7ec      	b.n	80047d6 <_printf_float+0x34a>
 80047fc:	4613      	mov	r3, r2
 80047fe:	4631      	mov	r1, r6
 8004800:	4642      	mov	r2, r8
 8004802:	4628      	mov	r0, r5
 8004804:	47b8      	blx	r7
 8004806:	3001      	adds	r0, #1
 8004808:	d1c0      	bne.n	800478c <_printf_float+0x300>
 800480a:	e69e      	b.n	800454a <_printf_float+0xbe>
 800480c:	2301      	movs	r3, #1
 800480e:	4631      	mov	r1, r6
 8004810:	4628      	mov	r0, r5
 8004812:	9205      	str	r2, [sp, #20]
 8004814:	47b8      	blx	r7
 8004816:	3001      	adds	r0, #1
 8004818:	f43f ae97 	beq.w	800454a <_printf_float+0xbe>
 800481c:	9a05      	ldr	r2, [sp, #20]
 800481e:	f10b 0b01 	add.w	fp, fp, #1
 8004822:	e7b9      	b.n	8004798 <_printf_float+0x30c>
 8004824:	ee18 3a10 	vmov	r3, s16
 8004828:	4652      	mov	r2, sl
 800482a:	4631      	mov	r1, r6
 800482c:	4628      	mov	r0, r5
 800482e:	47b8      	blx	r7
 8004830:	3001      	adds	r0, #1
 8004832:	d1be      	bne.n	80047b2 <_printf_float+0x326>
 8004834:	e689      	b.n	800454a <_printf_float+0xbe>
 8004836:	9a05      	ldr	r2, [sp, #20]
 8004838:	464b      	mov	r3, r9
 800483a:	4442      	add	r2, r8
 800483c:	4631      	mov	r1, r6
 800483e:	4628      	mov	r0, r5
 8004840:	47b8      	blx	r7
 8004842:	3001      	adds	r0, #1
 8004844:	d1c1      	bne.n	80047ca <_printf_float+0x33e>
 8004846:	e680      	b.n	800454a <_printf_float+0xbe>
 8004848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800484a:	2a01      	cmp	r2, #1
 800484c:	dc01      	bgt.n	8004852 <_printf_float+0x3c6>
 800484e:	07db      	lsls	r3, r3, #31
 8004850:	d53a      	bpl.n	80048c8 <_printf_float+0x43c>
 8004852:	2301      	movs	r3, #1
 8004854:	4642      	mov	r2, r8
 8004856:	4631      	mov	r1, r6
 8004858:	4628      	mov	r0, r5
 800485a:	47b8      	blx	r7
 800485c:	3001      	adds	r0, #1
 800485e:	f43f ae74 	beq.w	800454a <_printf_float+0xbe>
 8004862:	ee18 3a10 	vmov	r3, s16
 8004866:	4652      	mov	r2, sl
 8004868:	4631      	mov	r1, r6
 800486a:	4628      	mov	r0, r5
 800486c:	47b8      	blx	r7
 800486e:	3001      	adds	r0, #1
 8004870:	f43f ae6b 	beq.w	800454a <_printf_float+0xbe>
 8004874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004878:	2200      	movs	r2, #0
 800487a:	2300      	movs	r3, #0
 800487c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004880:	f7fc f942 	bl	8000b08 <__aeabi_dcmpeq>
 8004884:	b9d8      	cbnz	r0, 80048be <_printf_float+0x432>
 8004886:	f10a 33ff 	add.w	r3, sl, #4294967295
 800488a:	f108 0201 	add.w	r2, r8, #1
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	47b8      	blx	r7
 8004894:	3001      	adds	r0, #1
 8004896:	d10e      	bne.n	80048b6 <_printf_float+0x42a>
 8004898:	e657      	b.n	800454a <_printf_float+0xbe>
 800489a:	2301      	movs	r3, #1
 800489c:	4652      	mov	r2, sl
 800489e:	4631      	mov	r1, r6
 80048a0:	4628      	mov	r0, r5
 80048a2:	47b8      	blx	r7
 80048a4:	3001      	adds	r0, #1
 80048a6:	f43f ae50 	beq.w	800454a <_printf_float+0xbe>
 80048aa:	f108 0801 	add.w	r8, r8, #1
 80048ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048b0:	3b01      	subs	r3, #1
 80048b2:	4543      	cmp	r3, r8
 80048b4:	dcf1      	bgt.n	800489a <_printf_float+0x40e>
 80048b6:	464b      	mov	r3, r9
 80048b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048bc:	e6da      	b.n	8004674 <_printf_float+0x1e8>
 80048be:	f04f 0800 	mov.w	r8, #0
 80048c2:	f104 0a1a 	add.w	sl, r4, #26
 80048c6:	e7f2      	b.n	80048ae <_printf_float+0x422>
 80048c8:	2301      	movs	r3, #1
 80048ca:	4642      	mov	r2, r8
 80048cc:	e7df      	b.n	800488e <_printf_float+0x402>
 80048ce:	2301      	movs	r3, #1
 80048d0:	464a      	mov	r2, r9
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b8      	blx	r7
 80048d8:	3001      	adds	r0, #1
 80048da:	f43f ae36 	beq.w	800454a <_printf_float+0xbe>
 80048de:	f108 0801 	add.w	r8, r8, #1
 80048e2:	68e3      	ldr	r3, [r4, #12]
 80048e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048e6:	1a5b      	subs	r3, r3, r1
 80048e8:	4543      	cmp	r3, r8
 80048ea:	dcf0      	bgt.n	80048ce <_printf_float+0x442>
 80048ec:	e6f8      	b.n	80046e0 <_printf_float+0x254>
 80048ee:	f04f 0800 	mov.w	r8, #0
 80048f2:	f104 0919 	add.w	r9, r4, #25
 80048f6:	e7f4      	b.n	80048e2 <_printf_float+0x456>

080048f8 <_printf_common>:
 80048f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048fc:	4616      	mov	r6, r2
 80048fe:	4699      	mov	r9, r3
 8004900:	688a      	ldr	r2, [r1, #8]
 8004902:	690b      	ldr	r3, [r1, #16]
 8004904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004908:	4293      	cmp	r3, r2
 800490a:	bfb8      	it	lt
 800490c:	4613      	movlt	r3, r2
 800490e:	6033      	str	r3, [r6, #0]
 8004910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004914:	4607      	mov	r7, r0
 8004916:	460c      	mov	r4, r1
 8004918:	b10a      	cbz	r2, 800491e <_printf_common+0x26>
 800491a:	3301      	adds	r3, #1
 800491c:	6033      	str	r3, [r6, #0]
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	0699      	lsls	r1, r3, #26
 8004922:	bf42      	ittt	mi
 8004924:	6833      	ldrmi	r3, [r6, #0]
 8004926:	3302      	addmi	r3, #2
 8004928:	6033      	strmi	r3, [r6, #0]
 800492a:	6825      	ldr	r5, [r4, #0]
 800492c:	f015 0506 	ands.w	r5, r5, #6
 8004930:	d106      	bne.n	8004940 <_printf_common+0x48>
 8004932:	f104 0a19 	add.w	sl, r4, #25
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	6832      	ldr	r2, [r6, #0]
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	42ab      	cmp	r3, r5
 800493e:	dc26      	bgt.n	800498e <_printf_common+0x96>
 8004940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004944:	1e13      	subs	r3, r2, #0
 8004946:	6822      	ldr	r2, [r4, #0]
 8004948:	bf18      	it	ne
 800494a:	2301      	movne	r3, #1
 800494c:	0692      	lsls	r2, r2, #26
 800494e:	d42b      	bmi.n	80049a8 <_printf_common+0xb0>
 8004950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004954:	4649      	mov	r1, r9
 8004956:	4638      	mov	r0, r7
 8004958:	47c0      	blx	r8
 800495a:	3001      	adds	r0, #1
 800495c:	d01e      	beq.n	800499c <_printf_common+0xa4>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	6922      	ldr	r2, [r4, #16]
 8004962:	f003 0306 	and.w	r3, r3, #6
 8004966:	2b04      	cmp	r3, #4
 8004968:	bf02      	ittt	eq
 800496a:	68e5      	ldreq	r5, [r4, #12]
 800496c:	6833      	ldreq	r3, [r6, #0]
 800496e:	1aed      	subeq	r5, r5, r3
 8004970:	68a3      	ldr	r3, [r4, #8]
 8004972:	bf0c      	ite	eq
 8004974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004978:	2500      	movne	r5, #0
 800497a:	4293      	cmp	r3, r2
 800497c:	bfc4      	itt	gt
 800497e:	1a9b      	subgt	r3, r3, r2
 8004980:	18ed      	addgt	r5, r5, r3
 8004982:	2600      	movs	r6, #0
 8004984:	341a      	adds	r4, #26
 8004986:	42b5      	cmp	r5, r6
 8004988:	d11a      	bne.n	80049c0 <_printf_common+0xc8>
 800498a:	2000      	movs	r0, #0
 800498c:	e008      	b.n	80049a0 <_printf_common+0xa8>
 800498e:	2301      	movs	r3, #1
 8004990:	4652      	mov	r2, sl
 8004992:	4649      	mov	r1, r9
 8004994:	4638      	mov	r0, r7
 8004996:	47c0      	blx	r8
 8004998:	3001      	adds	r0, #1
 800499a:	d103      	bne.n	80049a4 <_printf_common+0xac>
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a4:	3501      	adds	r5, #1
 80049a6:	e7c6      	b.n	8004936 <_printf_common+0x3e>
 80049a8:	18e1      	adds	r1, r4, r3
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	2030      	movs	r0, #48	; 0x30
 80049ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049b2:	4422      	add	r2, r4
 80049b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049bc:	3302      	adds	r3, #2
 80049be:	e7c7      	b.n	8004950 <_printf_common+0x58>
 80049c0:	2301      	movs	r3, #1
 80049c2:	4622      	mov	r2, r4
 80049c4:	4649      	mov	r1, r9
 80049c6:	4638      	mov	r0, r7
 80049c8:	47c0      	blx	r8
 80049ca:	3001      	adds	r0, #1
 80049cc:	d0e6      	beq.n	800499c <_printf_common+0xa4>
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7d9      	b.n	8004986 <_printf_common+0x8e>
	...

080049d4 <_printf_i>:
 80049d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049d8:	7e0f      	ldrb	r7, [r1, #24]
 80049da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049dc:	2f78      	cmp	r7, #120	; 0x78
 80049de:	4691      	mov	r9, r2
 80049e0:	4680      	mov	r8, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	469a      	mov	sl, r3
 80049e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ea:	d807      	bhi.n	80049fc <_printf_i+0x28>
 80049ec:	2f62      	cmp	r7, #98	; 0x62
 80049ee:	d80a      	bhi.n	8004a06 <_printf_i+0x32>
 80049f0:	2f00      	cmp	r7, #0
 80049f2:	f000 80d4 	beq.w	8004b9e <_printf_i+0x1ca>
 80049f6:	2f58      	cmp	r7, #88	; 0x58
 80049f8:	f000 80c0 	beq.w	8004b7c <_printf_i+0x1a8>
 80049fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a04:	e03a      	b.n	8004a7c <_printf_i+0xa8>
 8004a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a0a:	2b15      	cmp	r3, #21
 8004a0c:	d8f6      	bhi.n	80049fc <_printf_i+0x28>
 8004a0e:	a101      	add	r1, pc, #4	; (adr r1, 8004a14 <_printf_i+0x40>)
 8004a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a14:	08004a6d 	.word	0x08004a6d
 8004a18:	08004a81 	.word	0x08004a81
 8004a1c:	080049fd 	.word	0x080049fd
 8004a20:	080049fd 	.word	0x080049fd
 8004a24:	080049fd 	.word	0x080049fd
 8004a28:	080049fd 	.word	0x080049fd
 8004a2c:	08004a81 	.word	0x08004a81
 8004a30:	080049fd 	.word	0x080049fd
 8004a34:	080049fd 	.word	0x080049fd
 8004a38:	080049fd 	.word	0x080049fd
 8004a3c:	080049fd 	.word	0x080049fd
 8004a40:	08004b85 	.word	0x08004b85
 8004a44:	08004aad 	.word	0x08004aad
 8004a48:	08004b3f 	.word	0x08004b3f
 8004a4c:	080049fd 	.word	0x080049fd
 8004a50:	080049fd 	.word	0x080049fd
 8004a54:	08004ba7 	.word	0x08004ba7
 8004a58:	080049fd 	.word	0x080049fd
 8004a5c:	08004aad 	.word	0x08004aad
 8004a60:	080049fd 	.word	0x080049fd
 8004a64:	080049fd 	.word	0x080049fd
 8004a68:	08004b47 	.word	0x08004b47
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	1d1a      	adds	r2, r3, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	602a      	str	r2, [r5, #0]
 8004a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e09f      	b.n	8004bc0 <_printf_i+0x1ec>
 8004a80:	6820      	ldr	r0, [r4, #0]
 8004a82:	682b      	ldr	r3, [r5, #0]
 8004a84:	0607      	lsls	r7, r0, #24
 8004a86:	f103 0104 	add.w	r1, r3, #4
 8004a8a:	6029      	str	r1, [r5, #0]
 8004a8c:	d501      	bpl.n	8004a92 <_printf_i+0xbe>
 8004a8e:	681e      	ldr	r6, [r3, #0]
 8004a90:	e003      	b.n	8004a9a <_printf_i+0xc6>
 8004a92:	0646      	lsls	r6, r0, #25
 8004a94:	d5fb      	bpl.n	8004a8e <_printf_i+0xba>
 8004a96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a9a:	2e00      	cmp	r6, #0
 8004a9c:	da03      	bge.n	8004aa6 <_printf_i+0xd2>
 8004a9e:	232d      	movs	r3, #45	; 0x2d
 8004aa0:	4276      	negs	r6, r6
 8004aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa6:	485a      	ldr	r0, [pc, #360]	; (8004c10 <_printf_i+0x23c>)
 8004aa8:	230a      	movs	r3, #10
 8004aaa:	e012      	b.n	8004ad2 <_printf_i+0xfe>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	6820      	ldr	r0, [r4, #0]
 8004ab0:	1d19      	adds	r1, r3, #4
 8004ab2:	6029      	str	r1, [r5, #0]
 8004ab4:	0605      	lsls	r5, r0, #24
 8004ab6:	d501      	bpl.n	8004abc <_printf_i+0xe8>
 8004ab8:	681e      	ldr	r6, [r3, #0]
 8004aba:	e002      	b.n	8004ac2 <_printf_i+0xee>
 8004abc:	0641      	lsls	r1, r0, #25
 8004abe:	d5fb      	bpl.n	8004ab8 <_printf_i+0xe4>
 8004ac0:	881e      	ldrh	r6, [r3, #0]
 8004ac2:	4853      	ldr	r0, [pc, #332]	; (8004c10 <_printf_i+0x23c>)
 8004ac4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2308      	moveq	r3, #8
 8004aca:	230a      	movne	r3, #10
 8004acc:	2100      	movs	r1, #0
 8004ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ad2:	6865      	ldr	r5, [r4, #4]
 8004ad4:	60a5      	str	r5, [r4, #8]
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	bfa2      	ittt	ge
 8004ada:	6821      	ldrge	r1, [r4, #0]
 8004adc:	f021 0104 	bicge.w	r1, r1, #4
 8004ae0:	6021      	strge	r1, [r4, #0]
 8004ae2:	b90e      	cbnz	r6, 8004ae8 <_printf_i+0x114>
 8004ae4:	2d00      	cmp	r5, #0
 8004ae6:	d04b      	beq.n	8004b80 <_printf_i+0x1ac>
 8004ae8:	4615      	mov	r5, r2
 8004aea:	fbb6 f1f3 	udiv	r1, r6, r3
 8004aee:	fb03 6711 	mls	r7, r3, r1, r6
 8004af2:	5dc7      	ldrb	r7, [r0, r7]
 8004af4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004af8:	4637      	mov	r7, r6
 8004afa:	42bb      	cmp	r3, r7
 8004afc:	460e      	mov	r6, r1
 8004afe:	d9f4      	bls.n	8004aea <_printf_i+0x116>
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d10b      	bne.n	8004b1c <_printf_i+0x148>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	07de      	lsls	r6, r3, #31
 8004b08:	d508      	bpl.n	8004b1c <_printf_i+0x148>
 8004b0a:	6923      	ldr	r3, [r4, #16]
 8004b0c:	6861      	ldr	r1, [r4, #4]
 8004b0e:	4299      	cmp	r1, r3
 8004b10:	bfde      	ittt	le
 8004b12:	2330      	movle	r3, #48	; 0x30
 8004b14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b1c:	1b52      	subs	r2, r2, r5
 8004b1e:	6122      	str	r2, [r4, #16]
 8004b20:	f8cd a000 	str.w	sl, [sp]
 8004b24:	464b      	mov	r3, r9
 8004b26:	aa03      	add	r2, sp, #12
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	f7ff fee4 	bl	80048f8 <_printf_common>
 8004b30:	3001      	adds	r0, #1
 8004b32:	d14a      	bne.n	8004bca <_printf_i+0x1f6>
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	b004      	add	sp, #16
 8004b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	f043 0320 	orr.w	r3, r3, #32
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	4833      	ldr	r0, [pc, #204]	; (8004c14 <_printf_i+0x240>)
 8004b48:	2778      	movs	r7, #120	; 0x78
 8004b4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	6829      	ldr	r1, [r5, #0]
 8004b52:	061f      	lsls	r7, r3, #24
 8004b54:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b58:	d402      	bmi.n	8004b60 <_printf_i+0x18c>
 8004b5a:	065f      	lsls	r7, r3, #25
 8004b5c:	bf48      	it	mi
 8004b5e:	b2b6      	uxthmi	r6, r6
 8004b60:	07df      	lsls	r7, r3, #31
 8004b62:	bf48      	it	mi
 8004b64:	f043 0320 	orrmi.w	r3, r3, #32
 8004b68:	6029      	str	r1, [r5, #0]
 8004b6a:	bf48      	it	mi
 8004b6c:	6023      	strmi	r3, [r4, #0]
 8004b6e:	b91e      	cbnz	r6, 8004b78 <_printf_i+0x1a4>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	f023 0320 	bic.w	r3, r3, #32
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	2310      	movs	r3, #16
 8004b7a:	e7a7      	b.n	8004acc <_printf_i+0xf8>
 8004b7c:	4824      	ldr	r0, [pc, #144]	; (8004c10 <_printf_i+0x23c>)
 8004b7e:	e7e4      	b.n	8004b4a <_printf_i+0x176>
 8004b80:	4615      	mov	r5, r2
 8004b82:	e7bd      	b.n	8004b00 <_printf_i+0x12c>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	6826      	ldr	r6, [r4, #0]
 8004b88:	6961      	ldr	r1, [r4, #20]
 8004b8a:	1d18      	adds	r0, r3, #4
 8004b8c:	6028      	str	r0, [r5, #0]
 8004b8e:	0635      	lsls	r5, r6, #24
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	d501      	bpl.n	8004b98 <_printf_i+0x1c4>
 8004b94:	6019      	str	r1, [r3, #0]
 8004b96:	e002      	b.n	8004b9e <_printf_i+0x1ca>
 8004b98:	0670      	lsls	r0, r6, #25
 8004b9a:	d5fb      	bpl.n	8004b94 <_printf_i+0x1c0>
 8004b9c:	8019      	strh	r1, [r3, #0]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	6123      	str	r3, [r4, #16]
 8004ba2:	4615      	mov	r5, r2
 8004ba4:	e7bc      	b.n	8004b20 <_printf_i+0x14c>
 8004ba6:	682b      	ldr	r3, [r5, #0]
 8004ba8:	1d1a      	adds	r2, r3, #4
 8004baa:	602a      	str	r2, [r5, #0]
 8004bac:	681d      	ldr	r5, [r3, #0]
 8004bae:	6862      	ldr	r2, [r4, #4]
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f7fb fb2c 	bl	8000210 <memchr>
 8004bb8:	b108      	cbz	r0, 8004bbe <_printf_i+0x1ea>
 8004bba:	1b40      	subs	r0, r0, r5
 8004bbc:	6060      	str	r0, [r4, #4]
 8004bbe:	6863      	ldr	r3, [r4, #4]
 8004bc0:	6123      	str	r3, [r4, #16]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bc8:	e7aa      	b.n	8004b20 <_printf_i+0x14c>
 8004bca:	6923      	ldr	r3, [r4, #16]
 8004bcc:	462a      	mov	r2, r5
 8004bce:	4649      	mov	r1, r9
 8004bd0:	4640      	mov	r0, r8
 8004bd2:	47d0      	blx	sl
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d0ad      	beq.n	8004b34 <_printf_i+0x160>
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	079b      	lsls	r3, r3, #30
 8004bdc:	d413      	bmi.n	8004c06 <_printf_i+0x232>
 8004bde:	68e0      	ldr	r0, [r4, #12]
 8004be0:	9b03      	ldr	r3, [sp, #12]
 8004be2:	4298      	cmp	r0, r3
 8004be4:	bfb8      	it	lt
 8004be6:	4618      	movlt	r0, r3
 8004be8:	e7a6      	b.n	8004b38 <_printf_i+0x164>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4632      	mov	r2, r6
 8004bee:	4649      	mov	r1, r9
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	47d0      	blx	sl
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d09d      	beq.n	8004b34 <_printf_i+0x160>
 8004bf8:	3501      	adds	r5, #1
 8004bfa:	68e3      	ldr	r3, [r4, #12]
 8004bfc:	9903      	ldr	r1, [sp, #12]
 8004bfe:	1a5b      	subs	r3, r3, r1
 8004c00:	42ab      	cmp	r3, r5
 8004c02:	dcf2      	bgt.n	8004bea <_printf_i+0x216>
 8004c04:	e7eb      	b.n	8004bde <_printf_i+0x20a>
 8004c06:	2500      	movs	r5, #0
 8004c08:	f104 0619 	add.w	r6, r4, #25
 8004c0c:	e7f5      	b.n	8004bfa <_printf_i+0x226>
 8004c0e:	bf00      	nop
 8004c10:	080070aa 	.word	0x080070aa
 8004c14:	080070bb 	.word	0x080070bb

08004c18 <std>:
 8004c18:	2300      	movs	r3, #0
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c26:	6083      	str	r3, [r0, #8]
 8004c28:	8181      	strh	r1, [r0, #12]
 8004c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c2c:	81c2      	strh	r2, [r0, #14]
 8004c2e:	6183      	str	r3, [r0, #24]
 8004c30:	4619      	mov	r1, r3
 8004c32:	2208      	movs	r2, #8
 8004c34:	305c      	adds	r0, #92	; 0x5c
 8004c36:	f000 f916 	bl	8004e66 <memset>
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <std+0x38>)
 8004c3c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <std+0x3c>)
 8004c40:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <std+0x40>)
 8004c44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <std+0x44>)
 8004c48:	6224      	str	r4, [r4, #32]
 8004c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c4c:	bd10      	pop	{r4, pc}
 8004c4e:	bf00      	nop
 8004c50:	08004de1 	.word	0x08004de1
 8004c54:	08004e03 	.word	0x08004e03
 8004c58:	08004e3b 	.word	0x08004e3b
 8004c5c:	08004e5f 	.word	0x08004e5f

08004c60 <stdio_exit_handler>:
 8004c60:	4a02      	ldr	r2, [pc, #8]	; (8004c6c <stdio_exit_handler+0xc>)
 8004c62:	4903      	ldr	r1, [pc, #12]	; (8004c70 <stdio_exit_handler+0x10>)
 8004c64:	4803      	ldr	r0, [pc, #12]	; (8004c74 <stdio_exit_handler+0x14>)
 8004c66:	f000 b869 	b.w	8004d3c <_fwalk_sglue>
 8004c6a:	bf00      	nop
 8004c6c:	2000000c 	.word	0x2000000c
 8004c70:	08006911 	.word	0x08006911
 8004c74:	20000018 	.word	0x20000018

08004c78 <cleanup_stdio>:
 8004c78:	6841      	ldr	r1, [r0, #4]
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <cleanup_stdio+0x34>)
 8004c7c:	4299      	cmp	r1, r3
 8004c7e:	b510      	push	{r4, lr}
 8004c80:	4604      	mov	r4, r0
 8004c82:	d001      	beq.n	8004c88 <cleanup_stdio+0x10>
 8004c84:	f001 fe44 	bl	8006910 <_fflush_r>
 8004c88:	68a1      	ldr	r1, [r4, #8]
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <cleanup_stdio+0x38>)
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	d002      	beq.n	8004c96 <cleanup_stdio+0x1e>
 8004c90:	4620      	mov	r0, r4
 8004c92:	f001 fe3d 	bl	8006910 <_fflush_r>
 8004c96:	68e1      	ldr	r1, [r4, #12]
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <cleanup_stdio+0x3c>)
 8004c9a:	4299      	cmp	r1, r3
 8004c9c:	d004      	beq.n	8004ca8 <cleanup_stdio+0x30>
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca4:	f001 be34 	b.w	8006910 <_fflush_r>
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	bf00      	nop
 8004cac:	2000028c 	.word	0x2000028c
 8004cb0:	200002f4 	.word	0x200002f4
 8004cb4:	2000035c 	.word	0x2000035c

08004cb8 <global_stdio_init.part.0>:
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <global_stdio_init.part.0+0x30>)
 8004cbc:	4c0b      	ldr	r4, [pc, #44]	; (8004cec <global_stdio_init.part.0+0x34>)
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	; (8004cf0 <global_stdio_init.part.0+0x38>)
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2104      	movs	r1, #4
 8004cc8:	f7ff ffa6 	bl	8004c18 <std>
 8004ccc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	2109      	movs	r1, #9
 8004cd4:	f7ff ffa0 	bl	8004c18 <std>
 8004cd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004cdc:	2202      	movs	r2, #2
 8004cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce2:	2112      	movs	r1, #18
 8004ce4:	f7ff bf98 	b.w	8004c18 <std>
 8004ce8:	200003c4 	.word	0x200003c4
 8004cec:	2000028c 	.word	0x2000028c
 8004cf0:	08004c61 	.word	0x08004c61

08004cf4 <__sfp_lock_acquire>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	; (8004cfc <__sfp_lock_acquire+0x8>)
 8004cf6:	f000 b933 	b.w	8004f60 <__retarget_lock_acquire_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	200003cd 	.word	0x200003cd

08004d00 <__sfp_lock_release>:
 8004d00:	4801      	ldr	r0, [pc, #4]	; (8004d08 <__sfp_lock_release+0x8>)
 8004d02:	f000 b92e 	b.w	8004f62 <__retarget_lock_release_recursive>
 8004d06:	bf00      	nop
 8004d08:	200003cd 	.word	0x200003cd

08004d0c <__sinit>:
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	4604      	mov	r4, r0
 8004d10:	f7ff fff0 	bl	8004cf4 <__sfp_lock_acquire>
 8004d14:	6a23      	ldr	r3, [r4, #32]
 8004d16:	b11b      	cbz	r3, 8004d20 <__sinit+0x14>
 8004d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d1c:	f7ff bff0 	b.w	8004d00 <__sfp_lock_release>
 8004d20:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <__sinit+0x28>)
 8004d22:	6223      	str	r3, [r4, #32]
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <__sinit+0x2c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f5      	bne.n	8004d18 <__sinit+0xc>
 8004d2c:	f7ff ffc4 	bl	8004cb8 <global_stdio_init.part.0>
 8004d30:	e7f2      	b.n	8004d18 <__sinit+0xc>
 8004d32:	bf00      	nop
 8004d34:	08004c79 	.word	0x08004c79
 8004d38:	200003c4 	.word	0x200003c4

08004d3c <_fwalk_sglue>:
 8004d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d40:	4607      	mov	r7, r0
 8004d42:	4688      	mov	r8, r1
 8004d44:	4614      	mov	r4, r2
 8004d46:	2600      	movs	r6, #0
 8004d48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d4c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d50:	d505      	bpl.n	8004d5e <_fwalk_sglue+0x22>
 8004d52:	6824      	ldr	r4, [r4, #0]
 8004d54:	2c00      	cmp	r4, #0
 8004d56:	d1f7      	bne.n	8004d48 <_fwalk_sglue+0xc>
 8004d58:	4630      	mov	r0, r6
 8004d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d5e:	89ab      	ldrh	r3, [r5, #12]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d907      	bls.n	8004d74 <_fwalk_sglue+0x38>
 8004d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	d003      	beq.n	8004d74 <_fwalk_sglue+0x38>
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	4638      	mov	r0, r7
 8004d70:	47c0      	blx	r8
 8004d72:	4306      	orrs	r6, r0
 8004d74:	3568      	adds	r5, #104	; 0x68
 8004d76:	e7e9      	b.n	8004d4c <_fwalk_sglue+0x10>

08004d78 <sniprintf>:
 8004d78:	b40c      	push	{r2, r3}
 8004d7a:	b530      	push	{r4, r5, lr}
 8004d7c:	4b17      	ldr	r3, [pc, #92]	; (8004ddc <sniprintf+0x64>)
 8004d7e:	1e0c      	subs	r4, r1, #0
 8004d80:	681d      	ldr	r5, [r3, #0]
 8004d82:	b09d      	sub	sp, #116	; 0x74
 8004d84:	da08      	bge.n	8004d98 <sniprintf+0x20>
 8004d86:	238b      	movs	r3, #139	; 0x8b
 8004d88:	602b      	str	r3, [r5, #0]
 8004d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8e:	b01d      	add	sp, #116	; 0x74
 8004d90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d94:	b002      	add	sp, #8
 8004d96:	4770      	bx	lr
 8004d98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004d9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004da0:	bf14      	ite	ne
 8004da2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004da6:	4623      	moveq	r3, r4
 8004da8:	9304      	str	r3, [sp, #16]
 8004daa:	9307      	str	r3, [sp, #28]
 8004dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004db0:	9002      	str	r0, [sp, #8]
 8004db2:	9006      	str	r0, [sp, #24]
 8004db4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004db8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004dba:	ab21      	add	r3, sp, #132	; 0x84
 8004dbc:	a902      	add	r1, sp, #8
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	f001 fc21 	bl	8006608 <_svfiprintf_r>
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	bfbc      	itt	lt
 8004dca:	238b      	movlt	r3, #139	; 0x8b
 8004dcc:	602b      	strlt	r3, [r5, #0]
 8004dce:	2c00      	cmp	r4, #0
 8004dd0:	d0dd      	beq.n	8004d8e <sniprintf+0x16>
 8004dd2:	9b02      	ldr	r3, [sp, #8]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e7d9      	b.n	8004d8e <sniprintf+0x16>
 8004dda:	bf00      	nop
 8004ddc:	20000064 	.word	0x20000064

08004de0 <__sread>:
 8004de0:	b510      	push	{r4, lr}
 8004de2:	460c      	mov	r4, r1
 8004de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de8:	f000 f86c 	bl	8004ec4 <_read_r>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	bfab      	itete	ge
 8004df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004df2:	89a3      	ldrhlt	r3, [r4, #12]
 8004df4:	181b      	addge	r3, r3, r0
 8004df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dfa:	bfac      	ite	ge
 8004dfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dfe:	81a3      	strhlt	r3, [r4, #12]
 8004e00:	bd10      	pop	{r4, pc}

08004e02 <__swrite>:
 8004e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e06:	461f      	mov	r7, r3
 8004e08:	898b      	ldrh	r3, [r1, #12]
 8004e0a:	05db      	lsls	r3, r3, #23
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	4616      	mov	r6, r2
 8004e12:	d505      	bpl.n	8004e20 <__swrite+0x1e>
 8004e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e18:	2302      	movs	r3, #2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f000 f840 	bl	8004ea0 <_lseek_r>
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e2a:	81a3      	strh	r3, [r4, #12]
 8004e2c:	4632      	mov	r2, r6
 8004e2e:	463b      	mov	r3, r7
 8004e30:	4628      	mov	r0, r5
 8004e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e36:	f000 b857 	b.w	8004ee8 <_write_r>

08004e3a <__sseek>:
 8004e3a:	b510      	push	{r4, lr}
 8004e3c:	460c      	mov	r4, r1
 8004e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e42:	f000 f82d 	bl	8004ea0 <_lseek_r>
 8004e46:	1c43      	adds	r3, r0, #1
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	bf15      	itete	ne
 8004e4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e56:	81a3      	strheq	r3, [r4, #12]
 8004e58:	bf18      	it	ne
 8004e5a:	81a3      	strhne	r3, [r4, #12]
 8004e5c:	bd10      	pop	{r4, pc}

08004e5e <__sclose>:
 8004e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e62:	f000 b80d 	b.w	8004e80 <_close_r>

08004e66 <memset>:
 8004e66:	4402      	add	r2, r0
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d100      	bne.n	8004e70 <memset+0xa>
 8004e6e:	4770      	bx	lr
 8004e70:	f803 1b01 	strb.w	r1, [r3], #1
 8004e74:	e7f9      	b.n	8004e6a <memset+0x4>
	...

08004e78 <_localeconv_r>:
 8004e78:	4800      	ldr	r0, [pc, #0]	; (8004e7c <_localeconv_r+0x4>)
 8004e7a:	4770      	bx	lr
 8004e7c:	20000158 	.word	0x20000158

08004e80 <_close_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	4d06      	ldr	r5, [pc, #24]	; (8004e9c <_close_r+0x1c>)
 8004e84:	2300      	movs	r3, #0
 8004e86:	4604      	mov	r4, r0
 8004e88:	4608      	mov	r0, r1
 8004e8a:	602b      	str	r3, [r5, #0]
 8004e8c:	f7fc fbc3 	bl	8001616 <_close>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d102      	bne.n	8004e9a <_close_r+0x1a>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	b103      	cbz	r3, 8004e9a <_close_r+0x1a>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	200003c8 	.word	0x200003c8

08004ea0 <_lseek_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4d07      	ldr	r5, [pc, #28]	; (8004ec0 <_lseek_r+0x20>)
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	4608      	mov	r0, r1
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	2200      	movs	r2, #0
 8004eac:	602a      	str	r2, [r5, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f7fc fbd8 	bl	8001664 <_lseek>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d102      	bne.n	8004ebe <_lseek_r+0x1e>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	b103      	cbz	r3, 8004ebe <_lseek_r+0x1e>
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	200003c8 	.word	0x200003c8

08004ec4 <_read_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4d07      	ldr	r5, [pc, #28]	; (8004ee4 <_read_r+0x20>)
 8004ec8:	4604      	mov	r4, r0
 8004eca:	4608      	mov	r0, r1
 8004ecc:	4611      	mov	r1, r2
 8004ece:	2200      	movs	r2, #0
 8004ed0:	602a      	str	r2, [r5, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f7fc fb66 	bl	80015a4 <_read>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d102      	bne.n	8004ee2 <_read_r+0x1e>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	b103      	cbz	r3, 8004ee2 <_read_r+0x1e>
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	200003c8 	.word	0x200003c8

08004ee8 <_write_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4d07      	ldr	r5, [pc, #28]	; (8004f08 <_write_r+0x20>)
 8004eec:	4604      	mov	r4, r0
 8004eee:	4608      	mov	r0, r1
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	602a      	str	r2, [r5, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f7fc fb71 	bl	80015de <_write>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_write_r+0x1e>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_write_r+0x1e>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	200003c8 	.word	0x200003c8

08004f0c <__errno>:
 8004f0c:	4b01      	ldr	r3, [pc, #4]	; (8004f14 <__errno+0x8>)
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000064 	.word	0x20000064

08004f18 <__libc_init_array>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	4d0d      	ldr	r5, [pc, #52]	; (8004f50 <__libc_init_array+0x38>)
 8004f1c:	4c0d      	ldr	r4, [pc, #52]	; (8004f54 <__libc_init_array+0x3c>)
 8004f1e:	1b64      	subs	r4, r4, r5
 8004f20:	10a4      	asrs	r4, r4, #2
 8004f22:	2600      	movs	r6, #0
 8004f24:	42a6      	cmp	r6, r4
 8004f26:	d109      	bne.n	8004f3c <__libc_init_array+0x24>
 8004f28:	4d0b      	ldr	r5, [pc, #44]	; (8004f58 <__libc_init_array+0x40>)
 8004f2a:	4c0c      	ldr	r4, [pc, #48]	; (8004f5c <__libc_init_array+0x44>)
 8004f2c:	f002 f894 	bl	8007058 <_init>
 8004f30:	1b64      	subs	r4, r4, r5
 8004f32:	10a4      	asrs	r4, r4, #2
 8004f34:	2600      	movs	r6, #0
 8004f36:	42a6      	cmp	r6, r4
 8004f38:	d105      	bne.n	8004f46 <__libc_init_array+0x2e>
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f40:	4798      	blx	r3
 8004f42:	3601      	adds	r6, #1
 8004f44:	e7ee      	b.n	8004f24 <__libc_init_array+0xc>
 8004f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4a:	4798      	blx	r3
 8004f4c:	3601      	adds	r6, #1
 8004f4e:	e7f2      	b.n	8004f36 <__libc_init_array+0x1e>
 8004f50:	08007414 	.word	0x08007414
 8004f54:	08007414 	.word	0x08007414
 8004f58:	08007414 	.word	0x08007414
 8004f5c:	08007418 	.word	0x08007418

08004f60 <__retarget_lock_acquire_recursive>:
 8004f60:	4770      	bx	lr

08004f62 <__retarget_lock_release_recursive>:
 8004f62:	4770      	bx	lr

08004f64 <quorem>:
 8004f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f68:	6903      	ldr	r3, [r0, #16]
 8004f6a:	690c      	ldr	r4, [r1, #16]
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	4607      	mov	r7, r0
 8004f70:	db7e      	blt.n	8005070 <quorem+0x10c>
 8004f72:	3c01      	subs	r4, #1
 8004f74:	f101 0814 	add.w	r8, r1, #20
 8004f78:	f100 0514 	add.w	r5, r0, #20
 8004f7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f96:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f9a:	d331      	bcc.n	8005000 <quorem+0x9c>
 8004f9c:	f04f 0e00 	mov.w	lr, #0
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	46ac      	mov	ip, r5
 8004fa4:	46f2      	mov	sl, lr
 8004fa6:	f850 2b04 	ldr.w	r2, [r0], #4
 8004faa:	b293      	uxth	r3, r2
 8004fac:	fb06 e303 	mla	r3, r6, r3, lr
 8004fb0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004fb4:	0c1a      	lsrs	r2, r3, #16
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	ebaa 0303 	sub.w	r3, sl, r3
 8004fbc:	f8dc a000 	ldr.w	sl, [ip]
 8004fc0:	fa13 f38a 	uxtah	r3, r3, sl
 8004fc4:	fb06 220e 	mla	r2, r6, lr, r2
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	9b00      	ldr	r3, [sp, #0]
 8004fcc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004fd0:	b292      	uxth	r2, r2
 8004fd2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004fd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fda:	f8bd 3000 	ldrh.w	r3, [sp]
 8004fde:	4581      	cmp	r9, r0
 8004fe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fe4:	f84c 3b04 	str.w	r3, [ip], #4
 8004fe8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004fec:	d2db      	bcs.n	8004fa6 <quorem+0x42>
 8004fee:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ff2:	b92b      	cbnz	r3, 8005000 <quorem+0x9c>
 8004ff4:	9b01      	ldr	r3, [sp, #4]
 8004ff6:	3b04      	subs	r3, #4
 8004ff8:	429d      	cmp	r5, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	d32c      	bcc.n	8005058 <quorem+0xf4>
 8004ffe:	613c      	str	r4, [r7, #16]
 8005000:	4638      	mov	r0, r7
 8005002:	f001 f9a7 	bl	8006354 <__mcmp>
 8005006:	2800      	cmp	r0, #0
 8005008:	db22      	blt.n	8005050 <quorem+0xec>
 800500a:	3601      	adds	r6, #1
 800500c:	4629      	mov	r1, r5
 800500e:	2000      	movs	r0, #0
 8005010:	f858 2b04 	ldr.w	r2, [r8], #4
 8005014:	f8d1 c000 	ldr.w	ip, [r1]
 8005018:	b293      	uxth	r3, r2
 800501a:	1ac3      	subs	r3, r0, r3
 800501c:	0c12      	lsrs	r2, r2, #16
 800501e:	fa13 f38c 	uxtah	r3, r3, ip
 8005022:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005026:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800502a:	b29b      	uxth	r3, r3
 800502c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005030:	45c1      	cmp	r9, r8
 8005032:	f841 3b04 	str.w	r3, [r1], #4
 8005036:	ea4f 4022 	mov.w	r0, r2, asr #16
 800503a:	d2e9      	bcs.n	8005010 <quorem+0xac>
 800503c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005040:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005044:	b922      	cbnz	r2, 8005050 <quorem+0xec>
 8005046:	3b04      	subs	r3, #4
 8005048:	429d      	cmp	r5, r3
 800504a:	461a      	mov	r2, r3
 800504c:	d30a      	bcc.n	8005064 <quorem+0x100>
 800504e:	613c      	str	r4, [r7, #16]
 8005050:	4630      	mov	r0, r6
 8005052:	b003      	add	sp, #12
 8005054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	3b04      	subs	r3, #4
 800505c:	2a00      	cmp	r2, #0
 800505e:	d1ce      	bne.n	8004ffe <quorem+0x9a>
 8005060:	3c01      	subs	r4, #1
 8005062:	e7c9      	b.n	8004ff8 <quorem+0x94>
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	3b04      	subs	r3, #4
 8005068:	2a00      	cmp	r2, #0
 800506a:	d1f0      	bne.n	800504e <quorem+0xea>
 800506c:	3c01      	subs	r4, #1
 800506e:	e7eb      	b.n	8005048 <quorem+0xe4>
 8005070:	2000      	movs	r0, #0
 8005072:	e7ee      	b.n	8005052 <quorem+0xee>
 8005074:	0000      	movs	r0, r0
	...

08005078 <_dtoa_r>:
 8005078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	ed2d 8b04 	vpush	{d8-d9}
 8005080:	69c5      	ldr	r5, [r0, #28]
 8005082:	b093      	sub	sp, #76	; 0x4c
 8005084:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005088:	ec57 6b10 	vmov	r6, r7, d0
 800508c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005090:	9107      	str	r1, [sp, #28]
 8005092:	4604      	mov	r4, r0
 8005094:	920a      	str	r2, [sp, #40]	; 0x28
 8005096:	930d      	str	r3, [sp, #52]	; 0x34
 8005098:	b975      	cbnz	r5, 80050b8 <_dtoa_r+0x40>
 800509a:	2010      	movs	r0, #16
 800509c:	f000 fe2a 	bl	8005cf4 <malloc>
 80050a0:	4602      	mov	r2, r0
 80050a2:	61e0      	str	r0, [r4, #28]
 80050a4:	b920      	cbnz	r0, 80050b0 <_dtoa_r+0x38>
 80050a6:	4bae      	ldr	r3, [pc, #696]	; (8005360 <_dtoa_r+0x2e8>)
 80050a8:	21ef      	movs	r1, #239	; 0xef
 80050aa:	48ae      	ldr	r0, [pc, #696]	; (8005364 <_dtoa_r+0x2ec>)
 80050ac:	f001 fc90 	bl	80069d0 <__assert_func>
 80050b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80050b4:	6005      	str	r5, [r0, #0]
 80050b6:	60c5      	str	r5, [r0, #12]
 80050b8:	69e3      	ldr	r3, [r4, #28]
 80050ba:	6819      	ldr	r1, [r3, #0]
 80050bc:	b151      	cbz	r1, 80050d4 <_dtoa_r+0x5c>
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	604a      	str	r2, [r1, #4]
 80050c2:	2301      	movs	r3, #1
 80050c4:	4093      	lsls	r3, r2
 80050c6:	608b      	str	r3, [r1, #8]
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 ff07 	bl	8005edc <_Bfree>
 80050ce:	69e3      	ldr	r3, [r4, #28]
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	1e3b      	subs	r3, r7, #0
 80050d6:	bfbb      	ittet	lt
 80050d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80050dc:	9303      	strlt	r3, [sp, #12]
 80050de:	2300      	movge	r3, #0
 80050e0:	2201      	movlt	r2, #1
 80050e2:	bfac      	ite	ge
 80050e4:	f8c8 3000 	strge.w	r3, [r8]
 80050e8:	f8c8 2000 	strlt.w	r2, [r8]
 80050ec:	4b9e      	ldr	r3, [pc, #632]	; (8005368 <_dtoa_r+0x2f0>)
 80050ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80050f2:	ea33 0308 	bics.w	r3, r3, r8
 80050f6:	d11b      	bne.n	8005130 <_dtoa_r+0xb8>
 80050f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80050fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005104:	4333      	orrs	r3, r6
 8005106:	f000 8593 	beq.w	8005c30 <_dtoa_r+0xbb8>
 800510a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800510c:	b963      	cbnz	r3, 8005128 <_dtoa_r+0xb0>
 800510e:	4b97      	ldr	r3, [pc, #604]	; (800536c <_dtoa_r+0x2f4>)
 8005110:	e027      	b.n	8005162 <_dtoa_r+0xea>
 8005112:	4b97      	ldr	r3, [pc, #604]	; (8005370 <_dtoa_r+0x2f8>)
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	3308      	adds	r3, #8
 8005118:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	9800      	ldr	r0, [sp, #0]
 800511e:	b013      	add	sp, #76	; 0x4c
 8005120:	ecbd 8b04 	vpop	{d8-d9}
 8005124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005128:	4b90      	ldr	r3, [pc, #576]	; (800536c <_dtoa_r+0x2f4>)
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	3303      	adds	r3, #3
 800512e:	e7f3      	b.n	8005118 <_dtoa_r+0xa0>
 8005130:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005134:	2200      	movs	r2, #0
 8005136:	ec51 0b17 	vmov	r0, r1, d7
 800513a:	eeb0 8a47 	vmov.f32	s16, s14
 800513e:	eef0 8a67 	vmov.f32	s17, s15
 8005142:	2300      	movs	r3, #0
 8005144:	f7fb fce0 	bl	8000b08 <__aeabi_dcmpeq>
 8005148:	4681      	mov	r9, r0
 800514a:	b160      	cbz	r0, 8005166 <_dtoa_r+0xee>
 800514c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800514e:	2301      	movs	r3, #1
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 8568 	beq.w	8005c2a <_dtoa_r+0xbb2>
 800515a:	4b86      	ldr	r3, [pc, #536]	; (8005374 <_dtoa_r+0x2fc>)
 800515c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	3b01      	subs	r3, #1
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	e7da      	b.n	800511c <_dtoa_r+0xa4>
 8005166:	aa10      	add	r2, sp, #64	; 0x40
 8005168:	a911      	add	r1, sp, #68	; 0x44
 800516a:	4620      	mov	r0, r4
 800516c:	eeb0 0a48 	vmov.f32	s0, s16
 8005170:	eef0 0a68 	vmov.f32	s1, s17
 8005174:	f001 f994 	bl	80064a0 <__d2b>
 8005178:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800517c:	4682      	mov	sl, r0
 800517e:	2d00      	cmp	r5, #0
 8005180:	d07f      	beq.n	8005282 <_dtoa_r+0x20a>
 8005182:	ee18 3a90 	vmov	r3, s17
 8005186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800518a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800518e:	ec51 0b18 	vmov	r0, r1, d8
 8005192:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005196:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800519a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800519e:	4619      	mov	r1, r3
 80051a0:	2200      	movs	r2, #0
 80051a2:	4b75      	ldr	r3, [pc, #468]	; (8005378 <_dtoa_r+0x300>)
 80051a4:	f7fb f890 	bl	80002c8 <__aeabi_dsub>
 80051a8:	a367      	add	r3, pc, #412	; (adr r3, 8005348 <_dtoa_r+0x2d0>)
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f7fb fa43 	bl	8000638 <__aeabi_dmul>
 80051b2:	a367      	add	r3, pc, #412	; (adr r3, 8005350 <_dtoa_r+0x2d8>)
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f7fb f888 	bl	80002cc <__adddf3>
 80051bc:	4606      	mov	r6, r0
 80051be:	4628      	mov	r0, r5
 80051c0:	460f      	mov	r7, r1
 80051c2:	f7fb f9cf 	bl	8000564 <__aeabi_i2d>
 80051c6:	a364      	add	r3, pc, #400	; (adr r3, 8005358 <_dtoa_r+0x2e0>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f7fb fa34 	bl	8000638 <__aeabi_dmul>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4630      	mov	r0, r6
 80051d6:	4639      	mov	r1, r7
 80051d8:	f7fb f878 	bl	80002cc <__adddf3>
 80051dc:	4606      	mov	r6, r0
 80051de:	460f      	mov	r7, r1
 80051e0:	f7fb fcda 	bl	8000b98 <__aeabi_d2iz>
 80051e4:	2200      	movs	r2, #0
 80051e6:	4683      	mov	fp, r0
 80051e8:	2300      	movs	r3, #0
 80051ea:	4630      	mov	r0, r6
 80051ec:	4639      	mov	r1, r7
 80051ee:	f7fb fc95 	bl	8000b1c <__aeabi_dcmplt>
 80051f2:	b148      	cbz	r0, 8005208 <_dtoa_r+0x190>
 80051f4:	4658      	mov	r0, fp
 80051f6:	f7fb f9b5 	bl	8000564 <__aeabi_i2d>
 80051fa:	4632      	mov	r2, r6
 80051fc:	463b      	mov	r3, r7
 80051fe:	f7fb fc83 	bl	8000b08 <__aeabi_dcmpeq>
 8005202:	b908      	cbnz	r0, 8005208 <_dtoa_r+0x190>
 8005204:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005208:	f1bb 0f16 	cmp.w	fp, #22
 800520c:	d857      	bhi.n	80052be <_dtoa_r+0x246>
 800520e:	4b5b      	ldr	r3, [pc, #364]	; (800537c <_dtoa_r+0x304>)
 8005210:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	ec51 0b18 	vmov	r0, r1, d8
 800521c:	f7fb fc7e 	bl	8000b1c <__aeabi_dcmplt>
 8005220:	2800      	cmp	r0, #0
 8005222:	d04e      	beq.n	80052c2 <_dtoa_r+0x24a>
 8005224:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005228:	2300      	movs	r3, #0
 800522a:	930c      	str	r3, [sp, #48]	; 0x30
 800522c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800522e:	1b5b      	subs	r3, r3, r5
 8005230:	1e5a      	subs	r2, r3, #1
 8005232:	bf45      	ittet	mi
 8005234:	f1c3 0301 	rsbmi	r3, r3, #1
 8005238:	9305      	strmi	r3, [sp, #20]
 800523a:	2300      	movpl	r3, #0
 800523c:	2300      	movmi	r3, #0
 800523e:	9206      	str	r2, [sp, #24]
 8005240:	bf54      	ite	pl
 8005242:	9305      	strpl	r3, [sp, #20]
 8005244:	9306      	strmi	r3, [sp, #24]
 8005246:	f1bb 0f00 	cmp.w	fp, #0
 800524a:	db3c      	blt.n	80052c6 <_dtoa_r+0x24e>
 800524c:	9b06      	ldr	r3, [sp, #24]
 800524e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005252:	445b      	add	r3, fp
 8005254:	9306      	str	r3, [sp, #24]
 8005256:	2300      	movs	r3, #0
 8005258:	9308      	str	r3, [sp, #32]
 800525a:	9b07      	ldr	r3, [sp, #28]
 800525c:	2b09      	cmp	r3, #9
 800525e:	d868      	bhi.n	8005332 <_dtoa_r+0x2ba>
 8005260:	2b05      	cmp	r3, #5
 8005262:	bfc4      	itt	gt
 8005264:	3b04      	subgt	r3, #4
 8005266:	9307      	strgt	r3, [sp, #28]
 8005268:	9b07      	ldr	r3, [sp, #28]
 800526a:	f1a3 0302 	sub.w	r3, r3, #2
 800526e:	bfcc      	ite	gt
 8005270:	2500      	movgt	r5, #0
 8005272:	2501      	movle	r5, #1
 8005274:	2b03      	cmp	r3, #3
 8005276:	f200 8085 	bhi.w	8005384 <_dtoa_r+0x30c>
 800527a:	e8df f003 	tbb	[pc, r3]
 800527e:	3b2e      	.short	0x3b2e
 8005280:	5839      	.short	0x5839
 8005282:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005286:	441d      	add	r5, r3
 8005288:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800528c:	2b20      	cmp	r3, #32
 800528e:	bfc1      	itttt	gt
 8005290:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005294:	fa08 f803 	lslgt.w	r8, r8, r3
 8005298:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800529c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80052a0:	bfd6      	itet	le
 80052a2:	f1c3 0320 	rsble	r3, r3, #32
 80052a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80052aa:	fa06 f003 	lslle.w	r0, r6, r3
 80052ae:	f7fb f949 	bl	8000544 <__aeabi_ui2d>
 80052b2:	2201      	movs	r2, #1
 80052b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80052b8:	3d01      	subs	r5, #1
 80052ba:	920e      	str	r2, [sp, #56]	; 0x38
 80052bc:	e76f      	b.n	800519e <_dtoa_r+0x126>
 80052be:	2301      	movs	r3, #1
 80052c0:	e7b3      	b.n	800522a <_dtoa_r+0x1b2>
 80052c2:	900c      	str	r0, [sp, #48]	; 0x30
 80052c4:	e7b2      	b.n	800522c <_dtoa_r+0x1b4>
 80052c6:	9b05      	ldr	r3, [sp, #20]
 80052c8:	eba3 030b 	sub.w	r3, r3, fp
 80052cc:	9305      	str	r3, [sp, #20]
 80052ce:	f1cb 0300 	rsb	r3, fp, #0
 80052d2:	9308      	str	r3, [sp, #32]
 80052d4:	2300      	movs	r3, #0
 80052d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80052d8:	e7bf      	b.n	800525a <_dtoa_r+0x1e2>
 80052da:	2300      	movs	r3, #0
 80052dc:	9309      	str	r3, [sp, #36]	; 0x24
 80052de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	dc52      	bgt.n	800538a <_dtoa_r+0x312>
 80052e4:	2301      	movs	r3, #1
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	9304      	str	r3, [sp, #16]
 80052ea:	461a      	mov	r2, r3
 80052ec:	920a      	str	r2, [sp, #40]	; 0x28
 80052ee:	e00b      	b.n	8005308 <_dtoa_r+0x290>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e7f3      	b.n	80052dc <_dtoa_r+0x264>
 80052f4:	2300      	movs	r3, #0
 80052f6:	9309      	str	r3, [sp, #36]	; 0x24
 80052f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052fa:	445b      	add	r3, fp
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	3301      	adds	r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	9304      	str	r3, [sp, #16]
 8005304:	bfb8      	it	lt
 8005306:	2301      	movlt	r3, #1
 8005308:	69e0      	ldr	r0, [r4, #28]
 800530a:	2100      	movs	r1, #0
 800530c:	2204      	movs	r2, #4
 800530e:	f102 0614 	add.w	r6, r2, #20
 8005312:	429e      	cmp	r6, r3
 8005314:	d93d      	bls.n	8005392 <_dtoa_r+0x31a>
 8005316:	6041      	str	r1, [r0, #4]
 8005318:	4620      	mov	r0, r4
 800531a:	f000 fd9f 	bl	8005e5c <_Balloc>
 800531e:	9000      	str	r0, [sp, #0]
 8005320:	2800      	cmp	r0, #0
 8005322:	d139      	bne.n	8005398 <_dtoa_r+0x320>
 8005324:	4b16      	ldr	r3, [pc, #88]	; (8005380 <_dtoa_r+0x308>)
 8005326:	4602      	mov	r2, r0
 8005328:	f240 11af 	movw	r1, #431	; 0x1af
 800532c:	e6bd      	b.n	80050aa <_dtoa_r+0x32>
 800532e:	2301      	movs	r3, #1
 8005330:	e7e1      	b.n	80052f6 <_dtoa_r+0x27e>
 8005332:	2501      	movs	r5, #1
 8005334:	2300      	movs	r3, #0
 8005336:	9307      	str	r3, [sp, #28]
 8005338:	9509      	str	r5, [sp, #36]	; 0x24
 800533a:	f04f 33ff 	mov.w	r3, #4294967295
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	9304      	str	r3, [sp, #16]
 8005342:	2200      	movs	r2, #0
 8005344:	2312      	movs	r3, #18
 8005346:	e7d1      	b.n	80052ec <_dtoa_r+0x274>
 8005348:	636f4361 	.word	0x636f4361
 800534c:	3fd287a7 	.word	0x3fd287a7
 8005350:	8b60c8b3 	.word	0x8b60c8b3
 8005354:	3fc68a28 	.word	0x3fc68a28
 8005358:	509f79fb 	.word	0x509f79fb
 800535c:	3fd34413 	.word	0x3fd34413
 8005360:	080070d9 	.word	0x080070d9
 8005364:	080070f0 	.word	0x080070f0
 8005368:	7ff00000 	.word	0x7ff00000
 800536c:	080070d5 	.word	0x080070d5
 8005370:	080070cc 	.word	0x080070cc
 8005374:	080070a9 	.word	0x080070a9
 8005378:	3ff80000 	.word	0x3ff80000
 800537c:	080071e0 	.word	0x080071e0
 8005380:	08007148 	.word	0x08007148
 8005384:	2301      	movs	r3, #1
 8005386:	9309      	str	r3, [sp, #36]	; 0x24
 8005388:	e7d7      	b.n	800533a <_dtoa_r+0x2c2>
 800538a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	e7ba      	b.n	8005308 <_dtoa_r+0x290>
 8005392:	3101      	adds	r1, #1
 8005394:	0052      	lsls	r2, r2, #1
 8005396:	e7ba      	b.n	800530e <_dtoa_r+0x296>
 8005398:	69e3      	ldr	r3, [r4, #28]
 800539a:	9a00      	ldr	r2, [sp, #0]
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	9b04      	ldr	r3, [sp, #16]
 80053a0:	2b0e      	cmp	r3, #14
 80053a2:	f200 80a8 	bhi.w	80054f6 <_dtoa_r+0x47e>
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	f000 80a5 	beq.w	80054f6 <_dtoa_r+0x47e>
 80053ac:	f1bb 0f00 	cmp.w	fp, #0
 80053b0:	dd38      	ble.n	8005424 <_dtoa_r+0x3ac>
 80053b2:	4bc0      	ldr	r3, [pc, #768]	; (80056b4 <_dtoa_r+0x63c>)
 80053b4:	f00b 020f 	and.w	r2, fp, #15
 80053b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80053c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80053c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80053c8:	d019      	beq.n	80053fe <_dtoa_r+0x386>
 80053ca:	4bbb      	ldr	r3, [pc, #748]	; (80056b8 <_dtoa_r+0x640>)
 80053cc:	ec51 0b18 	vmov	r0, r1, d8
 80053d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053d4:	f7fb fa5a 	bl	800088c <__aeabi_ddiv>
 80053d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053dc:	f008 080f 	and.w	r8, r8, #15
 80053e0:	2503      	movs	r5, #3
 80053e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80056b8 <_dtoa_r+0x640>
 80053e6:	f1b8 0f00 	cmp.w	r8, #0
 80053ea:	d10a      	bne.n	8005402 <_dtoa_r+0x38a>
 80053ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053f0:	4632      	mov	r2, r6
 80053f2:	463b      	mov	r3, r7
 80053f4:	f7fb fa4a 	bl	800088c <__aeabi_ddiv>
 80053f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053fc:	e02b      	b.n	8005456 <_dtoa_r+0x3de>
 80053fe:	2502      	movs	r5, #2
 8005400:	e7ef      	b.n	80053e2 <_dtoa_r+0x36a>
 8005402:	f018 0f01 	tst.w	r8, #1
 8005406:	d008      	beq.n	800541a <_dtoa_r+0x3a2>
 8005408:	4630      	mov	r0, r6
 800540a:	4639      	mov	r1, r7
 800540c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005410:	f7fb f912 	bl	8000638 <__aeabi_dmul>
 8005414:	3501      	adds	r5, #1
 8005416:	4606      	mov	r6, r0
 8005418:	460f      	mov	r7, r1
 800541a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800541e:	f109 0908 	add.w	r9, r9, #8
 8005422:	e7e0      	b.n	80053e6 <_dtoa_r+0x36e>
 8005424:	f000 809f 	beq.w	8005566 <_dtoa_r+0x4ee>
 8005428:	f1cb 0600 	rsb	r6, fp, #0
 800542c:	4ba1      	ldr	r3, [pc, #644]	; (80056b4 <_dtoa_r+0x63c>)
 800542e:	4fa2      	ldr	r7, [pc, #648]	; (80056b8 <_dtoa_r+0x640>)
 8005430:	f006 020f 	and.w	r2, r6, #15
 8005434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	ec51 0b18 	vmov	r0, r1, d8
 8005440:	f7fb f8fa 	bl	8000638 <__aeabi_dmul>
 8005444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005448:	1136      	asrs	r6, r6, #4
 800544a:	2300      	movs	r3, #0
 800544c:	2502      	movs	r5, #2
 800544e:	2e00      	cmp	r6, #0
 8005450:	d17e      	bne.n	8005550 <_dtoa_r+0x4d8>
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1d0      	bne.n	80053f8 <_dtoa_r+0x380>
 8005456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005458:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8084 	beq.w	800556a <_dtoa_r+0x4f2>
 8005462:	4b96      	ldr	r3, [pc, #600]	; (80056bc <_dtoa_r+0x644>)
 8005464:	2200      	movs	r2, #0
 8005466:	4640      	mov	r0, r8
 8005468:	4649      	mov	r1, r9
 800546a:	f7fb fb57 	bl	8000b1c <__aeabi_dcmplt>
 800546e:	2800      	cmp	r0, #0
 8005470:	d07b      	beq.n	800556a <_dtoa_r+0x4f2>
 8005472:	9b04      	ldr	r3, [sp, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d078      	beq.n	800556a <_dtoa_r+0x4f2>
 8005478:	9b01      	ldr	r3, [sp, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	dd39      	ble.n	80054f2 <_dtoa_r+0x47a>
 800547e:	4b90      	ldr	r3, [pc, #576]	; (80056c0 <_dtoa_r+0x648>)
 8005480:	2200      	movs	r2, #0
 8005482:	4640      	mov	r0, r8
 8005484:	4649      	mov	r1, r9
 8005486:	f7fb f8d7 	bl	8000638 <__aeabi_dmul>
 800548a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800548e:	9e01      	ldr	r6, [sp, #4]
 8005490:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005494:	3501      	adds	r5, #1
 8005496:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800549a:	4628      	mov	r0, r5
 800549c:	f7fb f862 	bl	8000564 <__aeabi_i2d>
 80054a0:	4642      	mov	r2, r8
 80054a2:	464b      	mov	r3, r9
 80054a4:	f7fb f8c8 	bl	8000638 <__aeabi_dmul>
 80054a8:	4b86      	ldr	r3, [pc, #536]	; (80056c4 <_dtoa_r+0x64c>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	f7fa ff0e 	bl	80002cc <__adddf3>
 80054b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80054b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b8:	9303      	str	r3, [sp, #12]
 80054ba:	2e00      	cmp	r6, #0
 80054bc:	d158      	bne.n	8005570 <_dtoa_r+0x4f8>
 80054be:	4b82      	ldr	r3, [pc, #520]	; (80056c8 <_dtoa_r+0x650>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	4640      	mov	r0, r8
 80054c4:	4649      	mov	r1, r9
 80054c6:	f7fa feff 	bl	80002c8 <__aeabi_dsub>
 80054ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054ce:	4680      	mov	r8, r0
 80054d0:	4689      	mov	r9, r1
 80054d2:	f7fb fb41 	bl	8000b58 <__aeabi_dcmpgt>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	f040 8296 	bne.w	8005a08 <_dtoa_r+0x990>
 80054dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80054e0:	4640      	mov	r0, r8
 80054e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054e6:	4649      	mov	r1, r9
 80054e8:	f7fb fb18 	bl	8000b1c <__aeabi_dcmplt>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	f040 8289 	bne.w	8005a04 <_dtoa_r+0x98c>
 80054f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80054f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f2c0 814e 	blt.w	800579a <_dtoa_r+0x722>
 80054fe:	f1bb 0f0e 	cmp.w	fp, #14
 8005502:	f300 814a 	bgt.w	800579a <_dtoa_r+0x722>
 8005506:	4b6b      	ldr	r3, [pc, #428]	; (80056b4 <_dtoa_r+0x63c>)
 8005508:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800550c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005512:	2b00      	cmp	r3, #0
 8005514:	f280 80dc 	bge.w	80056d0 <_dtoa_r+0x658>
 8005518:	9b04      	ldr	r3, [sp, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f300 80d8 	bgt.w	80056d0 <_dtoa_r+0x658>
 8005520:	f040 826f 	bne.w	8005a02 <_dtoa_r+0x98a>
 8005524:	4b68      	ldr	r3, [pc, #416]	; (80056c8 <_dtoa_r+0x650>)
 8005526:	2200      	movs	r2, #0
 8005528:	4640      	mov	r0, r8
 800552a:	4649      	mov	r1, r9
 800552c:	f7fb f884 	bl	8000638 <__aeabi_dmul>
 8005530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005534:	f7fb fb06 	bl	8000b44 <__aeabi_dcmpge>
 8005538:	9e04      	ldr	r6, [sp, #16]
 800553a:	4637      	mov	r7, r6
 800553c:	2800      	cmp	r0, #0
 800553e:	f040 8245 	bne.w	80059cc <_dtoa_r+0x954>
 8005542:	9d00      	ldr	r5, [sp, #0]
 8005544:	2331      	movs	r3, #49	; 0x31
 8005546:	f805 3b01 	strb.w	r3, [r5], #1
 800554a:	f10b 0b01 	add.w	fp, fp, #1
 800554e:	e241      	b.n	80059d4 <_dtoa_r+0x95c>
 8005550:	07f2      	lsls	r2, r6, #31
 8005552:	d505      	bpl.n	8005560 <_dtoa_r+0x4e8>
 8005554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005558:	f7fb f86e 	bl	8000638 <__aeabi_dmul>
 800555c:	3501      	adds	r5, #1
 800555e:	2301      	movs	r3, #1
 8005560:	1076      	asrs	r6, r6, #1
 8005562:	3708      	adds	r7, #8
 8005564:	e773      	b.n	800544e <_dtoa_r+0x3d6>
 8005566:	2502      	movs	r5, #2
 8005568:	e775      	b.n	8005456 <_dtoa_r+0x3de>
 800556a:	9e04      	ldr	r6, [sp, #16]
 800556c:	465f      	mov	r7, fp
 800556e:	e792      	b.n	8005496 <_dtoa_r+0x41e>
 8005570:	9900      	ldr	r1, [sp, #0]
 8005572:	4b50      	ldr	r3, [pc, #320]	; (80056b4 <_dtoa_r+0x63c>)
 8005574:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005578:	4431      	add	r1, r6
 800557a:	9102      	str	r1, [sp, #8]
 800557c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800557e:	eeb0 9a47 	vmov.f32	s18, s14
 8005582:	eef0 9a67 	vmov.f32	s19, s15
 8005586:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800558a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800558e:	2900      	cmp	r1, #0
 8005590:	d044      	beq.n	800561c <_dtoa_r+0x5a4>
 8005592:	494e      	ldr	r1, [pc, #312]	; (80056cc <_dtoa_r+0x654>)
 8005594:	2000      	movs	r0, #0
 8005596:	f7fb f979 	bl	800088c <__aeabi_ddiv>
 800559a:	ec53 2b19 	vmov	r2, r3, d9
 800559e:	f7fa fe93 	bl	80002c8 <__aeabi_dsub>
 80055a2:	9d00      	ldr	r5, [sp, #0]
 80055a4:	ec41 0b19 	vmov	d9, r0, r1
 80055a8:	4649      	mov	r1, r9
 80055aa:	4640      	mov	r0, r8
 80055ac:	f7fb faf4 	bl	8000b98 <__aeabi_d2iz>
 80055b0:	4606      	mov	r6, r0
 80055b2:	f7fa ffd7 	bl	8000564 <__aeabi_i2d>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4640      	mov	r0, r8
 80055bc:	4649      	mov	r1, r9
 80055be:	f7fa fe83 	bl	80002c8 <__aeabi_dsub>
 80055c2:	3630      	adds	r6, #48	; 0x30
 80055c4:	f805 6b01 	strb.w	r6, [r5], #1
 80055c8:	ec53 2b19 	vmov	r2, r3, d9
 80055cc:	4680      	mov	r8, r0
 80055ce:	4689      	mov	r9, r1
 80055d0:	f7fb faa4 	bl	8000b1c <__aeabi_dcmplt>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d164      	bne.n	80056a2 <_dtoa_r+0x62a>
 80055d8:	4642      	mov	r2, r8
 80055da:	464b      	mov	r3, r9
 80055dc:	4937      	ldr	r1, [pc, #220]	; (80056bc <_dtoa_r+0x644>)
 80055de:	2000      	movs	r0, #0
 80055e0:	f7fa fe72 	bl	80002c8 <__aeabi_dsub>
 80055e4:	ec53 2b19 	vmov	r2, r3, d9
 80055e8:	f7fb fa98 	bl	8000b1c <__aeabi_dcmplt>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	f040 80b6 	bne.w	800575e <_dtoa_r+0x6e6>
 80055f2:	9b02      	ldr	r3, [sp, #8]
 80055f4:	429d      	cmp	r5, r3
 80055f6:	f43f af7c 	beq.w	80054f2 <_dtoa_r+0x47a>
 80055fa:	4b31      	ldr	r3, [pc, #196]	; (80056c0 <_dtoa_r+0x648>)
 80055fc:	ec51 0b19 	vmov	r0, r1, d9
 8005600:	2200      	movs	r2, #0
 8005602:	f7fb f819 	bl	8000638 <__aeabi_dmul>
 8005606:	4b2e      	ldr	r3, [pc, #184]	; (80056c0 <_dtoa_r+0x648>)
 8005608:	ec41 0b19 	vmov	d9, r0, r1
 800560c:	2200      	movs	r2, #0
 800560e:	4640      	mov	r0, r8
 8005610:	4649      	mov	r1, r9
 8005612:	f7fb f811 	bl	8000638 <__aeabi_dmul>
 8005616:	4680      	mov	r8, r0
 8005618:	4689      	mov	r9, r1
 800561a:	e7c5      	b.n	80055a8 <_dtoa_r+0x530>
 800561c:	ec51 0b17 	vmov	r0, r1, d7
 8005620:	f7fb f80a 	bl	8000638 <__aeabi_dmul>
 8005624:	9b02      	ldr	r3, [sp, #8]
 8005626:	9d00      	ldr	r5, [sp, #0]
 8005628:	930f      	str	r3, [sp, #60]	; 0x3c
 800562a:	ec41 0b19 	vmov	d9, r0, r1
 800562e:	4649      	mov	r1, r9
 8005630:	4640      	mov	r0, r8
 8005632:	f7fb fab1 	bl	8000b98 <__aeabi_d2iz>
 8005636:	4606      	mov	r6, r0
 8005638:	f7fa ff94 	bl	8000564 <__aeabi_i2d>
 800563c:	3630      	adds	r6, #48	; 0x30
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4640      	mov	r0, r8
 8005644:	4649      	mov	r1, r9
 8005646:	f7fa fe3f 	bl	80002c8 <__aeabi_dsub>
 800564a:	f805 6b01 	strb.w	r6, [r5], #1
 800564e:	9b02      	ldr	r3, [sp, #8]
 8005650:	429d      	cmp	r5, r3
 8005652:	4680      	mov	r8, r0
 8005654:	4689      	mov	r9, r1
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	d124      	bne.n	80056a6 <_dtoa_r+0x62e>
 800565c:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <_dtoa_r+0x654>)
 800565e:	ec51 0b19 	vmov	r0, r1, d9
 8005662:	f7fa fe33 	bl	80002cc <__adddf3>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4640      	mov	r0, r8
 800566c:	4649      	mov	r1, r9
 800566e:	f7fb fa73 	bl	8000b58 <__aeabi_dcmpgt>
 8005672:	2800      	cmp	r0, #0
 8005674:	d173      	bne.n	800575e <_dtoa_r+0x6e6>
 8005676:	ec53 2b19 	vmov	r2, r3, d9
 800567a:	4914      	ldr	r1, [pc, #80]	; (80056cc <_dtoa_r+0x654>)
 800567c:	2000      	movs	r0, #0
 800567e:	f7fa fe23 	bl	80002c8 <__aeabi_dsub>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4640      	mov	r0, r8
 8005688:	4649      	mov	r1, r9
 800568a:	f7fb fa47 	bl	8000b1c <__aeabi_dcmplt>
 800568e:	2800      	cmp	r0, #0
 8005690:	f43f af2f 	beq.w	80054f2 <_dtoa_r+0x47a>
 8005694:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005696:	1e6b      	subs	r3, r5, #1
 8005698:	930f      	str	r3, [sp, #60]	; 0x3c
 800569a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800569e:	2b30      	cmp	r3, #48	; 0x30
 80056a0:	d0f8      	beq.n	8005694 <_dtoa_r+0x61c>
 80056a2:	46bb      	mov	fp, r7
 80056a4:	e04a      	b.n	800573c <_dtoa_r+0x6c4>
 80056a6:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <_dtoa_r+0x648>)
 80056a8:	f7fa ffc6 	bl	8000638 <__aeabi_dmul>
 80056ac:	4680      	mov	r8, r0
 80056ae:	4689      	mov	r9, r1
 80056b0:	e7bd      	b.n	800562e <_dtoa_r+0x5b6>
 80056b2:	bf00      	nop
 80056b4:	080071e0 	.word	0x080071e0
 80056b8:	080071b8 	.word	0x080071b8
 80056bc:	3ff00000 	.word	0x3ff00000
 80056c0:	40240000 	.word	0x40240000
 80056c4:	401c0000 	.word	0x401c0000
 80056c8:	40140000 	.word	0x40140000
 80056cc:	3fe00000 	.word	0x3fe00000
 80056d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056d4:	9d00      	ldr	r5, [sp, #0]
 80056d6:	4642      	mov	r2, r8
 80056d8:	464b      	mov	r3, r9
 80056da:	4630      	mov	r0, r6
 80056dc:	4639      	mov	r1, r7
 80056de:	f7fb f8d5 	bl	800088c <__aeabi_ddiv>
 80056e2:	f7fb fa59 	bl	8000b98 <__aeabi_d2iz>
 80056e6:	9001      	str	r0, [sp, #4]
 80056e8:	f7fa ff3c 	bl	8000564 <__aeabi_i2d>
 80056ec:	4642      	mov	r2, r8
 80056ee:	464b      	mov	r3, r9
 80056f0:	f7fa ffa2 	bl	8000638 <__aeabi_dmul>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4630      	mov	r0, r6
 80056fa:	4639      	mov	r1, r7
 80056fc:	f7fa fde4 	bl	80002c8 <__aeabi_dsub>
 8005700:	9e01      	ldr	r6, [sp, #4]
 8005702:	9f04      	ldr	r7, [sp, #16]
 8005704:	3630      	adds	r6, #48	; 0x30
 8005706:	f805 6b01 	strb.w	r6, [r5], #1
 800570a:	9e00      	ldr	r6, [sp, #0]
 800570c:	1bae      	subs	r6, r5, r6
 800570e:	42b7      	cmp	r7, r6
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	d134      	bne.n	8005780 <_dtoa_r+0x708>
 8005716:	f7fa fdd9 	bl	80002cc <__adddf3>
 800571a:	4642      	mov	r2, r8
 800571c:	464b      	mov	r3, r9
 800571e:	4606      	mov	r6, r0
 8005720:	460f      	mov	r7, r1
 8005722:	f7fb fa19 	bl	8000b58 <__aeabi_dcmpgt>
 8005726:	b9c8      	cbnz	r0, 800575c <_dtoa_r+0x6e4>
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	4630      	mov	r0, r6
 800572e:	4639      	mov	r1, r7
 8005730:	f7fb f9ea 	bl	8000b08 <__aeabi_dcmpeq>
 8005734:	b110      	cbz	r0, 800573c <_dtoa_r+0x6c4>
 8005736:	9b01      	ldr	r3, [sp, #4]
 8005738:	07db      	lsls	r3, r3, #31
 800573a:	d40f      	bmi.n	800575c <_dtoa_r+0x6e4>
 800573c:	4651      	mov	r1, sl
 800573e:	4620      	mov	r0, r4
 8005740:	f000 fbcc 	bl	8005edc <_Bfree>
 8005744:	2300      	movs	r3, #0
 8005746:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005748:	702b      	strb	r3, [r5, #0]
 800574a:	f10b 0301 	add.w	r3, fp, #1
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005752:	2b00      	cmp	r3, #0
 8005754:	f43f ace2 	beq.w	800511c <_dtoa_r+0xa4>
 8005758:	601d      	str	r5, [r3, #0]
 800575a:	e4df      	b.n	800511c <_dtoa_r+0xa4>
 800575c:	465f      	mov	r7, fp
 800575e:	462b      	mov	r3, r5
 8005760:	461d      	mov	r5, r3
 8005762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005766:	2a39      	cmp	r2, #57	; 0x39
 8005768:	d106      	bne.n	8005778 <_dtoa_r+0x700>
 800576a:	9a00      	ldr	r2, [sp, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d1f7      	bne.n	8005760 <_dtoa_r+0x6e8>
 8005770:	9900      	ldr	r1, [sp, #0]
 8005772:	2230      	movs	r2, #48	; 0x30
 8005774:	3701      	adds	r7, #1
 8005776:	700a      	strb	r2, [r1, #0]
 8005778:	781a      	ldrb	r2, [r3, #0]
 800577a:	3201      	adds	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e790      	b.n	80056a2 <_dtoa_r+0x62a>
 8005780:	4ba3      	ldr	r3, [pc, #652]	; (8005a10 <_dtoa_r+0x998>)
 8005782:	2200      	movs	r2, #0
 8005784:	f7fa ff58 	bl	8000638 <__aeabi_dmul>
 8005788:	2200      	movs	r2, #0
 800578a:	2300      	movs	r3, #0
 800578c:	4606      	mov	r6, r0
 800578e:	460f      	mov	r7, r1
 8005790:	f7fb f9ba 	bl	8000b08 <__aeabi_dcmpeq>
 8005794:	2800      	cmp	r0, #0
 8005796:	d09e      	beq.n	80056d6 <_dtoa_r+0x65e>
 8005798:	e7d0      	b.n	800573c <_dtoa_r+0x6c4>
 800579a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800579c:	2a00      	cmp	r2, #0
 800579e:	f000 80ca 	beq.w	8005936 <_dtoa_r+0x8be>
 80057a2:	9a07      	ldr	r2, [sp, #28]
 80057a4:	2a01      	cmp	r2, #1
 80057a6:	f300 80ad 	bgt.w	8005904 <_dtoa_r+0x88c>
 80057aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057ac:	2a00      	cmp	r2, #0
 80057ae:	f000 80a5 	beq.w	80058fc <_dtoa_r+0x884>
 80057b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057b6:	9e08      	ldr	r6, [sp, #32]
 80057b8:	9d05      	ldr	r5, [sp, #20]
 80057ba:	9a05      	ldr	r2, [sp, #20]
 80057bc:	441a      	add	r2, r3
 80057be:	9205      	str	r2, [sp, #20]
 80057c0:	9a06      	ldr	r2, [sp, #24]
 80057c2:	2101      	movs	r1, #1
 80057c4:	441a      	add	r2, r3
 80057c6:	4620      	mov	r0, r4
 80057c8:	9206      	str	r2, [sp, #24]
 80057ca:	f000 fc3d 	bl	8006048 <__i2b>
 80057ce:	4607      	mov	r7, r0
 80057d0:	b165      	cbz	r5, 80057ec <_dtoa_r+0x774>
 80057d2:	9b06      	ldr	r3, [sp, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	dd09      	ble.n	80057ec <_dtoa_r+0x774>
 80057d8:	42ab      	cmp	r3, r5
 80057da:	9a05      	ldr	r2, [sp, #20]
 80057dc:	bfa8      	it	ge
 80057de:	462b      	movge	r3, r5
 80057e0:	1ad2      	subs	r2, r2, r3
 80057e2:	9205      	str	r2, [sp, #20]
 80057e4:	9a06      	ldr	r2, [sp, #24]
 80057e6:	1aed      	subs	r5, r5, r3
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	9306      	str	r3, [sp, #24]
 80057ec:	9b08      	ldr	r3, [sp, #32]
 80057ee:	b1f3      	cbz	r3, 800582e <_dtoa_r+0x7b6>
 80057f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 80a3 	beq.w	800593e <_dtoa_r+0x8c6>
 80057f8:	2e00      	cmp	r6, #0
 80057fa:	dd10      	ble.n	800581e <_dtoa_r+0x7a6>
 80057fc:	4639      	mov	r1, r7
 80057fe:	4632      	mov	r2, r6
 8005800:	4620      	mov	r0, r4
 8005802:	f000 fce1 	bl	80061c8 <__pow5mult>
 8005806:	4652      	mov	r2, sl
 8005808:	4601      	mov	r1, r0
 800580a:	4607      	mov	r7, r0
 800580c:	4620      	mov	r0, r4
 800580e:	f000 fc31 	bl	8006074 <__multiply>
 8005812:	4651      	mov	r1, sl
 8005814:	4680      	mov	r8, r0
 8005816:	4620      	mov	r0, r4
 8005818:	f000 fb60 	bl	8005edc <_Bfree>
 800581c:	46c2      	mov	sl, r8
 800581e:	9b08      	ldr	r3, [sp, #32]
 8005820:	1b9a      	subs	r2, r3, r6
 8005822:	d004      	beq.n	800582e <_dtoa_r+0x7b6>
 8005824:	4651      	mov	r1, sl
 8005826:	4620      	mov	r0, r4
 8005828:	f000 fcce 	bl	80061c8 <__pow5mult>
 800582c:	4682      	mov	sl, r0
 800582e:	2101      	movs	r1, #1
 8005830:	4620      	mov	r0, r4
 8005832:	f000 fc09 	bl	8006048 <__i2b>
 8005836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005838:	2b00      	cmp	r3, #0
 800583a:	4606      	mov	r6, r0
 800583c:	f340 8081 	ble.w	8005942 <_dtoa_r+0x8ca>
 8005840:	461a      	mov	r2, r3
 8005842:	4601      	mov	r1, r0
 8005844:	4620      	mov	r0, r4
 8005846:	f000 fcbf 	bl	80061c8 <__pow5mult>
 800584a:	9b07      	ldr	r3, [sp, #28]
 800584c:	2b01      	cmp	r3, #1
 800584e:	4606      	mov	r6, r0
 8005850:	dd7a      	ble.n	8005948 <_dtoa_r+0x8d0>
 8005852:	f04f 0800 	mov.w	r8, #0
 8005856:	6933      	ldr	r3, [r6, #16]
 8005858:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800585c:	6918      	ldr	r0, [r3, #16]
 800585e:	f000 fba5 	bl	8005fac <__hi0bits>
 8005862:	f1c0 0020 	rsb	r0, r0, #32
 8005866:	9b06      	ldr	r3, [sp, #24]
 8005868:	4418      	add	r0, r3
 800586a:	f010 001f 	ands.w	r0, r0, #31
 800586e:	f000 8094 	beq.w	800599a <_dtoa_r+0x922>
 8005872:	f1c0 0320 	rsb	r3, r0, #32
 8005876:	2b04      	cmp	r3, #4
 8005878:	f340 8085 	ble.w	8005986 <_dtoa_r+0x90e>
 800587c:	9b05      	ldr	r3, [sp, #20]
 800587e:	f1c0 001c 	rsb	r0, r0, #28
 8005882:	4403      	add	r3, r0
 8005884:	9305      	str	r3, [sp, #20]
 8005886:	9b06      	ldr	r3, [sp, #24]
 8005888:	4403      	add	r3, r0
 800588a:	4405      	add	r5, r0
 800588c:	9306      	str	r3, [sp, #24]
 800588e:	9b05      	ldr	r3, [sp, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	dd05      	ble.n	80058a0 <_dtoa_r+0x828>
 8005894:	4651      	mov	r1, sl
 8005896:	461a      	mov	r2, r3
 8005898:	4620      	mov	r0, r4
 800589a:	f000 fcef 	bl	800627c <__lshift>
 800589e:	4682      	mov	sl, r0
 80058a0:	9b06      	ldr	r3, [sp, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	dd05      	ble.n	80058b2 <_dtoa_r+0x83a>
 80058a6:	4631      	mov	r1, r6
 80058a8:	461a      	mov	r2, r3
 80058aa:	4620      	mov	r0, r4
 80058ac:	f000 fce6 	bl	800627c <__lshift>
 80058b0:	4606      	mov	r6, r0
 80058b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d072      	beq.n	800599e <_dtoa_r+0x926>
 80058b8:	4631      	mov	r1, r6
 80058ba:	4650      	mov	r0, sl
 80058bc:	f000 fd4a 	bl	8006354 <__mcmp>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	da6c      	bge.n	800599e <_dtoa_r+0x926>
 80058c4:	2300      	movs	r3, #0
 80058c6:	4651      	mov	r1, sl
 80058c8:	220a      	movs	r2, #10
 80058ca:	4620      	mov	r0, r4
 80058cc:	f000 fb28 	bl	8005f20 <__multadd>
 80058d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058d6:	4682      	mov	sl, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 81b0 	beq.w	8005c3e <_dtoa_r+0xbc6>
 80058de:	2300      	movs	r3, #0
 80058e0:	4639      	mov	r1, r7
 80058e2:	220a      	movs	r2, #10
 80058e4:	4620      	mov	r0, r4
 80058e6:	f000 fb1b 	bl	8005f20 <__multadd>
 80058ea:	9b01      	ldr	r3, [sp, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	4607      	mov	r7, r0
 80058f0:	f300 8096 	bgt.w	8005a20 <_dtoa_r+0x9a8>
 80058f4:	9b07      	ldr	r3, [sp, #28]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	dc59      	bgt.n	80059ae <_dtoa_r+0x936>
 80058fa:	e091      	b.n	8005a20 <_dtoa_r+0x9a8>
 80058fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005902:	e758      	b.n	80057b6 <_dtoa_r+0x73e>
 8005904:	9b04      	ldr	r3, [sp, #16]
 8005906:	1e5e      	subs	r6, r3, #1
 8005908:	9b08      	ldr	r3, [sp, #32]
 800590a:	42b3      	cmp	r3, r6
 800590c:	bfbf      	itttt	lt
 800590e:	9b08      	ldrlt	r3, [sp, #32]
 8005910:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005912:	9608      	strlt	r6, [sp, #32]
 8005914:	1af3      	sublt	r3, r6, r3
 8005916:	bfb4      	ite	lt
 8005918:	18d2      	addlt	r2, r2, r3
 800591a:	1b9e      	subge	r6, r3, r6
 800591c:	9b04      	ldr	r3, [sp, #16]
 800591e:	bfbc      	itt	lt
 8005920:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005922:	2600      	movlt	r6, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	bfb7      	itett	lt
 8005928:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800592c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005930:	1a9d      	sublt	r5, r3, r2
 8005932:	2300      	movlt	r3, #0
 8005934:	e741      	b.n	80057ba <_dtoa_r+0x742>
 8005936:	9e08      	ldr	r6, [sp, #32]
 8005938:	9d05      	ldr	r5, [sp, #20]
 800593a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800593c:	e748      	b.n	80057d0 <_dtoa_r+0x758>
 800593e:	9a08      	ldr	r2, [sp, #32]
 8005940:	e770      	b.n	8005824 <_dtoa_r+0x7ac>
 8005942:	9b07      	ldr	r3, [sp, #28]
 8005944:	2b01      	cmp	r3, #1
 8005946:	dc19      	bgt.n	800597c <_dtoa_r+0x904>
 8005948:	9b02      	ldr	r3, [sp, #8]
 800594a:	b9bb      	cbnz	r3, 800597c <_dtoa_r+0x904>
 800594c:	9b03      	ldr	r3, [sp, #12]
 800594e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005952:	b99b      	cbnz	r3, 800597c <_dtoa_r+0x904>
 8005954:	9b03      	ldr	r3, [sp, #12]
 8005956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800595a:	0d1b      	lsrs	r3, r3, #20
 800595c:	051b      	lsls	r3, r3, #20
 800595e:	b183      	cbz	r3, 8005982 <_dtoa_r+0x90a>
 8005960:	9b05      	ldr	r3, [sp, #20]
 8005962:	3301      	adds	r3, #1
 8005964:	9305      	str	r3, [sp, #20]
 8005966:	9b06      	ldr	r3, [sp, #24]
 8005968:	3301      	adds	r3, #1
 800596a:	9306      	str	r3, [sp, #24]
 800596c:	f04f 0801 	mov.w	r8, #1
 8005970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005972:	2b00      	cmp	r3, #0
 8005974:	f47f af6f 	bne.w	8005856 <_dtoa_r+0x7de>
 8005978:	2001      	movs	r0, #1
 800597a:	e774      	b.n	8005866 <_dtoa_r+0x7ee>
 800597c:	f04f 0800 	mov.w	r8, #0
 8005980:	e7f6      	b.n	8005970 <_dtoa_r+0x8f8>
 8005982:	4698      	mov	r8, r3
 8005984:	e7f4      	b.n	8005970 <_dtoa_r+0x8f8>
 8005986:	d082      	beq.n	800588e <_dtoa_r+0x816>
 8005988:	9a05      	ldr	r2, [sp, #20]
 800598a:	331c      	adds	r3, #28
 800598c:	441a      	add	r2, r3
 800598e:	9205      	str	r2, [sp, #20]
 8005990:	9a06      	ldr	r2, [sp, #24]
 8005992:	441a      	add	r2, r3
 8005994:	441d      	add	r5, r3
 8005996:	9206      	str	r2, [sp, #24]
 8005998:	e779      	b.n	800588e <_dtoa_r+0x816>
 800599a:	4603      	mov	r3, r0
 800599c:	e7f4      	b.n	8005988 <_dtoa_r+0x910>
 800599e:	9b04      	ldr	r3, [sp, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	dc37      	bgt.n	8005a14 <_dtoa_r+0x99c>
 80059a4:	9b07      	ldr	r3, [sp, #28]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	dd34      	ble.n	8005a14 <_dtoa_r+0x99c>
 80059aa:	9b04      	ldr	r3, [sp, #16]
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	9b01      	ldr	r3, [sp, #4]
 80059b0:	b963      	cbnz	r3, 80059cc <_dtoa_r+0x954>
 80059b2:	4631      	mov	r1, r6
 80059b4:	2205      	movs	r2, #5
 80059b6:	4620      	mov	r0, r4
 80059b8:	f000 fab2 	bl	8005f20 <__multadd>
 80059bc:	4601      	mov	r1, r0
 80059be:	4606      	mov	r6, r0
 80059c0:	4650      	mov	r0, sl
 80059c2:	f000 fcc7 	bl	8006354 <__mcmp>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	f73f adbb 	bgt.w	8005542 <_dtoa_r+0x4ca>
 80059cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ce:	9d00      	ldr	r5, [sp, #0]
 80059d0:	ea6f 0b03 	mvn.w	fp, r3
 80059d4:	f04f 0800 	mov.w	r8, #0
 80059d8:	4631      	mov	r1, r6
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 fa7e 	bl	8005edc <_Bfree>
 80059e0:	2f00      	cmp	r7, #0
 80059e2:	f43f aeab 	beq.w	800573c <_dtoa_r+0x6c4>
 80059e6:	f1b8 0f00 	cmp.w	r8, #0
 80059ea:	d005      	beq.n	80059f8 <_dtoa_r+0x980>
 80059ec:	45b8      	cmp	r8, r7
 80059ee:	d003      	beq.n	80059f8 <_dtoa_r+0x980>
 80059f0:	4641      	mov	r1, r8
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fa72 	bl	8005edc <_Bfree>
 80059f8:	4639      	mov	r1, r7
 80059fa:	4620      	mov	r0, r4
 80059fc:	f000 fa6e 	bl	8005edc <_Bfree>
 8005a00:	e69c      	b.n	800573c <_dtoa_r+0x6c4>
 8005a02:	2600      	movs	r6, #0
 8005a04:	4637      	mov	r7, r6
 8005a06:	e7e1      	b.n	80059cc <_dtoa_r+0x954>
 8005a08:	46bb      	mov	fp, r7
 8005a0a:	4637      	mov	r7, r6
 8005a0c:	e599      	b.n	8005542 <_dtoa_r+0x4ca>
 8005a0e:	bf00      	nop
 8005a10:	40240000 	.word	0x40240000
 8005a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 80c8 	beq.w	8005bac <_dtoa_r+0xb34>
 8005a1c:	9b04      	ldr	r3, [sp, #16]
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	dd05      	ble.n	8005a30 <_dtoa_r+0x9b8>
 8005a24:	4639      	mov	r1, r7
 8005a26:	462a      	mov	r2, r5
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 fc27 	bl	800627c <__lshift>
 8005a2e:	4607      	mov	r7, r0
 8005a30:	f1b8 0f00 	cmp.w	r8, #0
 8005a34:	d05b      	beq.n	8005aee <_dtoa_r+0xa76>
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 fa0f 	bl	8005e5c <_Balloc>
 8005a3e:	4605      	mov	r5, r0
 8005a40:	b928      	cbnz	r0, 8005a4e <_dtoa_r+0x9d6>
 8005a42:	4b83      	ldr	r3, [pc, #524]	; (8005c50 <_dtoa_r+0xbd8>)
 8005a44:	4602      	mov	r2, r0
 8005a46:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005a4a:	f7ff bb2e 	b.w	80050aa <_dtoa_r+0x32>
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	3202      	adds	r2, #2
 8005a52:	0092      	lsls	r2, r2, #2
 8005a54:	f107 010c 	add.w	r1, r7, #12
 8005a58:	300c      	adds	r0, #12
 8005a5a:	f000 ffab 	bl	80069b4 <memcpy>
 8005a5e:	2201      	movs	r2, #1
 8005a60:	4629      	mov	r1, r5
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 fc0a 	bl	800627c <__lshift>
 8005a68:	9b00      	ldr	r3, [sp, #0]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a72:	4413      	add	r3, r2
 8005a74:	9308      	str	r3, [sp, #32]
 8005a76:	9b02      	ldr	r3, [sp, #8]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	46b8      	mov	r8, r7
 8005a7e:	9306      	str	r3, [sp, #24]
 8005a80:	4607      	mov	r7, r0
 8005a82:	9b04      	ldr	r3, [sp, #16]
 8005a84:	4631      	mov	r1, r6
 8005a86:	3b01      	subs	r3, #1
 8005a88:	4650      	mov	r0, sl
 8005a8a:	9301      	str	r3, [sp, #4]
 8005a8c:	f7ff fa6a 	bl	8004f64 <quorem>
 8005a90:	4641      	mov	r1, r8
 8005a92:	9002      	str	r0, [sp, #8]
 8005a94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a98:	4650      	mov	r0, sl
 8005a9a:	f000 fc5b 	bl	8006354 <__mcmp>
 8005a9e:	463a      	mov	r2, r7
 8005aa0:	9005      	str	r0, [sp, #20]
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f000 fc71 	bl	800638c <__mdiff>
 8005aaa:	68c2      	ldr	r2, [r0, #12]
 8005aac:	4605      	mov	r5, r0
 8005aae:	bb02      	cbnz	r2, 8005af2 <_dtoa_r+0xa7a>
 8005ab0:	4601      	mov	r1, r0
 8005ab2:	4650      	mov	r0, sl
 8005ab4:	f000 fc4e 	bl	8006354 <__mcmp>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	4629      	mov	r1, r5
 8005abc:	4620      	mov	r0, r4
 8005abe:	9209      	str	r2, [sp, #36]	; 0x24
 8005ac0:	f000 fa0c 	bl	8005edc <_Bfree>
 8005ac4:	9b07      	ldr	r3, [sp, #28]
 8005ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ac8:	9d04      	ldr	r5, [sp, #16]
 8005aca:	ea43 0102 	orr.w	r1, r3, r2
 8005ace:	9b06      	ldr	r3, [sp, #24]
 8005ad0:	4319      	orrs	r1, r3
 8005ad2:	d110      	bne.n	8005af6 <_dtoa_r+0xa7e>
 8005ad4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ad8:	d029      	beq.n	8005b2e <_dtoa_r+0xab6>
 8005ada:	9b05      	ldr	r3, [sp, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dd02      	ble.n	8005ae6 <_dtoa_r+0xa6e>
 8005ae0:	9b02      	ldr	r3, [sp, #8]
 8005ae2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005ae6:	9b01      	ldr	r3, [sp, #4]
 8005ae8:	f883 9000 	strb.w	r9, [r3]
 8005aec:	e774      	b.n	80059d8 <_dtoa_r+0x960>
 8005aee:	4638      	mov	r0, r7
 8005af0:	e7ba      	b.n	8005a68 <_dtoa_r+0x9f0>
 8005af2:	2201      	movs	r2, #1
 8005af4:	e7e1      	b.n	8005aba <_dtoa_r+0xa42>
 8005af6:	9b05      	ldr	r3, [sp, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	db04      	blt.n	8005b06 <_dtoa_r+0xa8e>
 8005afc:	9907      	ldr	r1, [sp, #28]
 8005afe:	430b      	orrs	r3, r1
 8005b00:	9906      	ldr	r1, [sp, #24]
 8005b02:	430b      	orrs	r3, r1
 8005b04:	d120      	bne.n	8005b48 <_dtoa_r+0xad0>
 8005b06:	2a00      	cmp	r2, #0
 8005b08:	dded      	ble.n	8005ae6 <_dtoa_r+0xa6e>
 8005b0a:	4651      	mov	r1, sl
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 fbb4 	bl	800627c <__lshift>
 8005b14:	4631      	mov	r1, r6
 8005b16:	4682      	mov	sl, r0
 8005b18:	f000 fc1c 	bl	8006354 <__mcmp>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	dc03      	bgt.n	8005b28 <_dtoa_r+0xab0>
 8005b20:	d1e1      	bne.n	8005ae6 <_dtoa_r+0xa6e>
 8005b22:	f019 0f01 	tst.w	r9, #1
 8005b26:	d0de      	beq.n	8005ae6 <_dtoa_r+0xa6e>
 8005b28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b2c:	d1d8      	bne.n	8005ae0 <_dtoa_r+0xa68>
 8005b2e:	9a01      	ldr	r2, [sp, #4]
 8005b30:	2339      	movs	r3, #57	; 0x39
 8005b32:	7013      	strb	r3, [r2, #0]
 8005b34:	462b      	mov	r3, r5
 8005b36:	461d      	mov	r5, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005b3e:	2a39      	cmp	r2, #57	; 0x39
 8005b40:	d06c      	beq.n	8005c1c <_dtoa_r+0xba4>
 8005b42:	3201      	adds	r2, #1
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	e747      	b.n	80059d8 <_dtoa_r+0x960>
 8005b48:	2a00      	cmp	r2, #0
 8005b4a:	dd07      	ble.n	8005b5c <_dtoa_r+0xae4>
 8005b4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b50:	d0ed      	beq.n	8005b2e <_dtoa_r+0xab6>
 8005b52:	9a01      	ldr	r2, [sp, #4]
 8005b54:	f109 0301 	add.w	r3, r9, #1
 8005b58:	7013      	strb	r3, [r2, #0]
 8005b5a:	e73d      	b.n	80059d8 <_dtoa_r+0x960>
 8005b5c:	9b04      	ldr	r3, [sp, #16]
 8005b5e:	9a08      	ldr	r2, [sp, #32]
 8005b60:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d043      	beq.n	8005bf0 <_dtoa_r+0xb78>
 8005b68:	4651      	mov	r1, sl
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	220a      	movs	r2, #10
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f000 f9d6 	bl	8005f20 <__multadd>
 8005b74:	45b8      	cmp	r8, r7
 8005b76:	4682      	mov	sl, r0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	f04f 020a 	mov.w	r2, #10
 8005b80:	4641      	mov	r1, r8
 8005b82:	4620      	mov	r0, r4
 8005b84:	d107      	bne.n	8005b96 <_dtoa_r+0xb1e>
 8005b86:	f000 f9cb 	bl	8005f20 <__multadd>
 8005b8a:	4680      	mov	r8, r0
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	9b04      	ldr	r3, [sp, #16]
 8005b90:	3301      	adds	r3, #1
 8005b92:	9304      	str	r3, [sp, #16]
 8005b94:	e775      	b.n	8005a82 <_dtoa_r+0xa0a>
 8005b96:	f000 f9c3 	bl	8005f20 <__multadd>
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	4680      	mov	r8, r0
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	220a      	movs	r2, #10
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f000 f9bc 	bl	8005f20 <__multadd>
 8005ba8:	4607      	mov	r7, r0
 8005baa:	e7f0      	b.n	8005b8e <_dtoa_r+0xb16>
 8005bac:	9b04      	ldr	r3, [sp, #16]
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	9d00      	ldr	r5, [sp, #0]
 8005bb2:	4631      	mov	r1, r6
 8005bb4:	4650      	mov	r0, sl
 8005bb6:	f7ff f9d5 	bl	8004f64 <quorem>
 8005bba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005bbe:	9b00      	ldr	r3, [sp, #0]
 8005bc0:	f805 9b01 	strb.w	r9, [r5], #1
 8005bc4:	1aea      	subs	r2, r5, r3
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	dd07      	ble.n	8005bdc <_dtoa_r+0xb64>
 8005bcc:	4651      	mov	r1, sl
 8005bce:	2300      	movs	r3, #0
 8005bd0:	220a      	movs	r2, #10
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f000 f9a4 	bl	8005f20 <__multadd>
 8005bd8:	4682      	mov	sl, r0
 8005bda:	e7ea      	b.n	8005bb2 <_dtoa_r+0xb3a>
 8005bdc:	9b01      	ldr	r3, [sp, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bfc8      	it	gt
 8005be2:	461d      	movgt	r5, r3
 8005be4:	9b00      	ldr	r3, [sp, #0]
 8005be6:	bfd8      	it	le
 8005be8:	2501      	movle	r5, #1
 8005bea:	441d      	add	r5, r3
 8005bec:	f04f 0800 	mov.w	r8, #0
 8005bf0:	4651      	mov	r1, sl
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f000 fb41 	bl	800627c <__lshift>
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4682      	mov	sl, r0
 8005bfe:	f000 fba9 	bl	8006354 <__mcmp>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	dc96      	bgt.n	8005b34 <_dtoa_r+0xabc>
 8005c06:	d102      	bne.n	8005c0e <_dtoa_r+0xb96>
 8005c08:	f019 0f01 	tst.w	r9, #1
 8005c0c:	d192      	bne.n	8005b34 <_dtoa_r+0xabc>
 8005c0e:	462b      	mov	r3, r5
 8005c10:	461d      	mov	r5, r3
 8005c12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c16:	2a30      	cmp	r2, #48	; 0x30
 8005c18:	d0fa      	beq.n	8005c10 <_dtoa_r+0xb98>
 8005c1a:	e6dd      	b.n	80059d8 <_dtoa_r+0x960>
 8005c1c:	9a00      	ldr	r2, [sp, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d189      	bne.n	8005b36 <_dtoa_r+0xabe>
 8005c22:	f10b 0b01 	add.w	fp, fp, #1
 8005c26:	2331      	movs	r3, #49	; 0x31
 8005c28:	e796      	b.n	8005b58 <_dtoa_r+0xae0>
 8005c2a:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <_dtoa_r+0xbdc>)
 8005c2c:	f7ff ba99 	b.w	8005162 <_dtoa_r+0xea>
 8005c30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f47f aa6d 	bne.w	8005112 <_dtoa_r+0x9a>
 8005c38:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <_dtoa_r+0xbe0>)
 8005c3a:	f7ff ba92 	b.w	8005162 <_dtoa_r+0xea>
 8005c3e:	9b01      	ldr	r3, [sp, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	dcb5      	bgt.n	8005bb0 <_dtoa_r+0xb38>
 8005c44:	9b07      	ldr	r3, [sp, #28]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	f73f aeb1 	bgt.w	80059ae <_dtoa_r+0x936>
 8005c4c:	e7b0      	b.n	8005bb0 <_dtoa_r+0xb38>
 8005c4e:	bf00      	nop
 8005c50:	08007148 	.word	0x08007148
 8005c54:	080070a8 	.word	0x080070a8
 8005c58:	080070cc 	.word	0x080070cc

08005c5c <_free_r>:
 8005c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c5e:	2900      	cmp	r1, #0
 8005c60:	d044      	beq.n	8005cec <_free_r+0x90>
 8005c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c66:	9001      	str	r0, [sp, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c6e:	bfb8      	it	lt
 8005c70:	18e4      	addlt	r4, r4, r3
 8005c72:	f000 f8e7 	bl	8005e44 <__malloc_lock>
 8005c76:	4a1e      	ldr	r2, [pc, #120]	; (8005cf0 <_free_r+0x94>)
 8005c78:	9801      	ldr	r0, [sp, #4]
 8005c7a:	6813      	ldr	r3, [r2, #0]
 8005c7c:	b933      	cbnz	r3, 8005c8c <_free_r+0x30>
 8005c7e:	6063      	str	r3, [r4, #4]
 8005c80:	6014      	str	r4, [r2, #0]
 8005c82:	b003      	add	sp, #12
 8005c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c88:	f000 b8e2 	b.w	8005e50 <__malloc_unlock>
 8005c8c:	42a3      	cmp	r3, r4
 8005c8e:	d908      	bls.n	8005ca2 <_free_r+0x46>
 8005c90:	6825      	ldr	r5, [r4, #0]
 8005c92:	1961      	adds	r1, r4, r5
 8005c94:	428b      	cmp	r3, r1
 8005c96:	bf01      	itttt	eq
 8005c98:	6819      	ldreq	r1, [r3, #0]
 8005c9a:	685b      	ldreq	r3, [r3, #4]
 8005c9c:	1949      	addeq	r1, r1, r5
 8005c9e:	6021      	streq	r1, [r4, #0]
 8005ca0:	e7ed      	b.n	8005c7e <_free_r+0x22>
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	b10b      	cbz	r3, 8005cac <_free_r+0x50>
 8005ca8:	42a3      	cmp	r3, r4
 8005caa:	d9fa      	bls.n	8005ca2 <_free_r+0x46>
 8005cac:	6811      	ldr	r1, [r2, #0]
 8005cae:	1855      	adds	r5, r2, r1
 8005cb0:	42a5      	cmp	r5, r4
 8005cb2:	d10b      	bne.n	8005ccc <_free_r+0x70>
 8005cb4:	6824      	ldr	r4, [r4, #0]
 8005cb6:	4421      	add	r1, r4
 8005cb8:	1854      	adds	r4, r2, r1
 8005cba:	42a3      	cmp	r3, r4
 8005cbc:	6011      	str	r1, [r2, #0]
 8005cbe:	d1e0      	bne.n	8005c82 <_free_r+0x26>
 8005cc0:	681c      	ldr	r4, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	6053      	str	r3, [r2, #4]
 8005cc6:	440c      	add	r4, r1
 8005cc8:	6014      	str	r4, [r2, #0]
 8005cca:	e7da      	b.n	8005c82 <_free_r+0x26>
 8005ccc:	d902      	bls.n	8005cd4 <_free_r+0x78>
 8005cce:	230c      	movs	r3, #12
 8005cd0:	6003      	str	r3, [r0, #0]
 8005cd2:	e7d6      	b.n	8005c82 <_free_r+0x26>
 8005cd4:	6825      	ldr	r5, [r4, #0]
 8005cd6:	1961      	adds	r1, r4, r5
 8005cd8:	428b      	cmp	r3, r1
 8005cda:	bf04      	itt	eq
 8005cdc:	6819      	ldreq	r1, [r3, #0]
 8005cde:	685b      	ldreq	r3, [r3, #4]
 8005ce0:	6063      	str	r3, [r4, #4]
 8005ce2:	bf04      	itt	eq
 8005ce4:	1949      	addeq	r1, r1, r5
 8005ce6:	6021      	streq	r1, [r4, #0]
 8005ce8:	6054      	str	r4, [r2, #4]
 8005cea:	e7ca      	b.n	8005c82 <_free_r+0x26>
 8005cec:	b003      	add	sp, #12
 8005cee:	bd30      	pop	{r4, r5, pc}
 8005cf0:	200003d0 	.word	0x200003d0

08005cf4 <malloc>:
 8005cf4:	4b02      	ldr	r3, [pc, #8]	; (8005d00 <malloc+0xc>)
 8005cf6:	4601      	mov	r1, r0
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	f000 b823 	b.w	8005d44 <_malloc_r>
 8005cfe:	bf00      	nop
 8005d00:	20000064 	.word	0x20000064

08005d04 <sbrk_aligned>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	4e0e      	ldr	r6, [pc, #56]	; (8005d40 <sbrk_aligned+0x3c>)
 8005d08:	460c      	mov	r4, r1
 8005d0a:	6831      	ldr	r1, [r6, #0]
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	b911      	cbnz	r1, 8005d16 <sbrk_aligned+0x12>
 8005d10:	f000 fe40 	bl	8006994 <_sbrk_r>
 8005d14:	6030      	str	r0, [r6, #0]
 8005d16:	4621      	mov	r1, r4
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 fe3b 	bl	8006994 <_sbrk_r>
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	d00a      	beq.n	8005d38 <sbrk_aligned+0x34>
 8005d22:	1cc4      	adds	r4, r0, #3
 8005d24:	f024 0403 	bic.w	r4, r4, #3
 8005d28:	42a0      	cmp	r0, r4
 8005d2a:	d007      	beq.n	8005d3c <sbrk_aligned+0x38>
 8005d2c:	1a21      	subs	r1, r4, r0
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 fe30 	bl	8006994 <_sbrk_r>
 8005d34:	3001      	adds	r0, #1
 8005d36:	d101      	bne.n	8005d3c <sbrk_aligned+0x38>
 8005d38:	f04f 34ff 	mov.w	r4, #4294967295
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	200003d4 	.word	0x200003d4

08005d44 <_malloc_r>:
 8005d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d48:	1ccd      	adds	r5, r1, #3
 8005d4a:	f025 0503 	bic.w	r5, r5, #3
 8005d4e:	3508      	adds	r5, #8
 8005d50:	2d0c      	cmp	r5, #12
 8005d52:	bf38      	it	cc
 8005d54:	250c      	movcc	r5, #12
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	4607      	mov	r7, r0
 8005d5a:	db01      	blt.n	8005d60 <_malloc_r+0x1c>
 8005d5c:	42a9      	cmp	r1, r5
 8005d5e:	d905      	bls.n	8005d6c <_malloc_r+0x28>
 8005d60:	230c      	movs	r3, #12
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	2600      	movs	r6, #0
 8005d66:	4630      	mov	r0, r6
 8005d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e40 <_malloc_r+0xfc>
 8005d70:	f000 f868 	bl	8005e44 <__malloc_lock>
 8005d74:	f8d8 3000 	ldr.w	r3, [r8]
 8005d78:	461c      	mov	r4, r3
 8005d7a:	bb5c      	cbnz	r4, 8005dd4 <_malloc_r+0x90>
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	4638      	mov	r0, r7
 8005d80:	f7ff ffc0 	bl	8005d04 <sbrk_aligned>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	4604      	mov	r4, r0
 8005d88:	d155      	bne.n	8005e36 <_malloc_r+0xf2>
 8005d8a:	f8d8 4000 	ldr.w	r4, [r8]
 8005d8e:	4626      	mov	r6, r4
 8005d90:	2e00      	cmp	r6, #0
 8005d92:	d145      	bne.n	8005e20 <_malloc_r+0xdc>
 8005d94:	2c00      	cmp	r4, #0
 8005d96:	d048      	beq.n	8005e2a <_malloc_r+0xe6>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	eb04 0903 	add.w	r9, r4, r3
 8005da2:	f000 fdf7 	bl	8006994 <_sbrk_r>
 8005da6:	4581      	cmp	r9, r0
 8005da8:	d13f      	bne.n	8005e2a <_malloc_r+0xe6>
 8005daa:	6821      	ldr	r1, [r4, #0]
 8005dac:	1a6d      	subs	r5, r5, r1
 8005dae:	4629      	mov	r1, r5
 8005db0:	4638      	mov	r0, r7
 8005db2:	f7ff ffa7 	bl	8005d04 <sbrk_aligned>
 8005db6:	3001      	adds	r0, #1
 8005db8:	d037      	beq.n	8005e2a <_malloc_r+0xe6>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	442b      	add	r3, r5
 8005dbe:	6023      	str	r3, [r4, #0]
 8005dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d038      	beq.n	8005e3a <_malloc_r+0xf6>
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	42a2      	cmp	r2, r4
 8005dcc:	d12b      	bne.n	8005e26 <_malloc_r+0xe2>
 8005dce:	2200      	movs	r2, #0
 8005dd0:	605a      	str	r2, [r3, #4]
 8005dd2:	e00f      	b.n	8005df4 <_malloc_r+0xb0>
 8005dd4:	6822      	ldr	r2, [r4, #0]
 8005dd6:	1b52      	subs	r2, r2, r5
 8005dd8:	d41f      	bmi.n	8005e1a <_malloc_r+0xd6>
 8005dda:	2a0b      	cmp	r2, #11
 8005ddc:	d917      	bls.n	8005e0e <_malloc_r+0xca>
 8005dde:	1961      	adds	r1, r4, r5
 8005de0:	42a3      	cmp	r3, r4
 8005de2:	6025      	str	r5, [r4, #0]
 8005de4:	bf18      	it	ne
 8005de6:	6059      	strne	r1, [r3, #4]
 8005de8:	6863      	ldr	r3, [r4, #4]
 8005dea:	bf08      	it	eq
 8005dec:	f8c8 1000 	streq.w	r1, [r8]
 8005df0:	5162      	str	r2, [r4, r5]
 8005df2:	604b      	str	r3, [r1, #4]
 8005df4:	4638      	mov	r0, r7
 8005df6:	f104 060b 	add.w	r6, r4, #11
 8005dfa:	f000 f829 	bl	8005e50 <__malloc_unlock>
 8005dfe:	f026 0607 	bic.w	r6, r6, #7
 8005e02:	1d23      	adds	r3, r4, #4
 8005e04:	1af2      	subs	r2, r6, r3
 8005e06:	d0ae      	beq.n	8005d66 <_malloc_r+0x22>
 8005e08:	1b9b      	subs	r3, r3, r6
 8005e0a:	50a3      	str	r3, [r4, r2]
 8005e0c:	e7ab      	b.n	8005d66 <_malloc_r+0x22>
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	6862      	ldr	r2, [r4, #4]
 8005e12:	d1dd      	bne.n	8005dd0 <_malloc_r+0x8c>
 8005e14:	f8c8 2000 	str.w	r2, [r8]
 8005e18:	e7ec      	b.n	8005df4 <_malloc_r+0xb0>
 8005e1a:	4623      	mov	r3, r4
 8005e1c:	6864      	ldr	r4, [r4, #4]
 8005e1e:	e7ac      	b.n	8005d7a <_malloc_r+0x36>
 8005e20:	4634      	mov	r4, r6
 8005e22:	6876      	ldr	r6, [r6, #4]
 8005e24:	e7b4      	b.n	8005d90 <_malloc_r+0x4c>
 8005e26:	4613      	mov	r3, r2
 8005e28:	e7cc      	b.n	8005dc4 <_malloc_r+0x80>
 8005e2a:	230c      	movs	r3, #12
 8005e2c:	603b      	str	r3, [r7, #0]
 8005e2e:	4638      	mov	r0, r7
 8005e30:	f000 f80e 	bl	8005e50 <__malloc_unlock>
 8005e34:	e797      	b.n	8005d66 <_malloc_r+0x22>
 8005e36:	6025      	str	r5, [r4, #0]
 8005e38:	e7dc      	b.n	8005df4 <_malloc_r+0xb0>
 8005e3a:	605b      	str	r3, [r3, #4]
 8005e3c:	deff      	udf	#255	; 0xff
 8005e3e:	bf00      	nop
 8005e40:	200003d0 	.word	0x200003d0

08005e44 <__malloc_lock>:
 8005e44:	4801      	ldr	r0, [pc, #4]	; (8005e4c <__malloc_lock+0x8>)
 8005e46:	f7ff b88b 	b.w	8004f60 <__retarget_lock_acquire_recursive>
 8005e4a:	bf00      	nop
 8005e4c:	200003cc 	.word	0x200003cc

08005e50 <__malloc_unlock>:
 8005e50:	4801      	ldr	r0, [pc, #4]	; (8005e58 <__malloc_unlock+0x8>)
 8005e52:	f7ff b886 	b.w	8004f62 <__retarget_lock_release_recursive>
 8005e56:	bf00      	nop
 8005e58:	200003cc 	.word	0x200003cc

08005e5c <_Balloc>:
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	69c6      	ldr	r6, [r0, #28]
 8005e60:	4604      	mov	r4, r0
 8005e62:	460d      	mov	r5, r1
 8005e64:	b976      	cbnz	r6, 8005e84 <_Balloc+0x28>
 8005e66:	2010      	movs	r0, #16
 8005e68:	f7ff ff44 	bl	8005cf4 <malloc>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	61e0      	str	r0, [r4, #28]
 8005e70:	b920      	cbnz	r0, 8005e7c <_Balloc+0x20>
 8005e72:	4b18      	ldr	r3, [pc, #96]	; (8005ed4 <_Balloc+0x78>)
 8005e74:	4818      	ldr	r0, [pc, #96]	; (8005ed8 <_Balloc+0x7c>)
 8005e76:	216b      	movs	r1, #107	; 0x6b
 8005e78:	f000 fdaa 	bl	80069d0 <__assert_func>
 8005e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e80:	6006      	str	r6, [r0, #0]
 8005e82:	60c6      	str	r6, [r0, #12]
 8005e84:	69e6      	ldr	r6, [r4, #28]
 8005e86:	68f3      	ldr	r3, [r6, #12]
 8005e88:	b183      	cbz	r3, 8005eac <_Balloc+0x50>
 8005e8a:	69e3      	ldr	r3, [r4, #28]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e92:	b9b8      	cbnz	r0, 8005ec4 <_Balloc+0x68>
 8005e94:	2101      	movs	r1, #1
 8005e96:	fa01 f605 	lsl.w	r6, r1, r5
 8005e9a:	1d72      	adds	r2, r6, #5
 8005e9c:	0092      	lsls	r2, r2, #2
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 fdb4 	bl	8006a0c <_calloc_r>
 8005ea4:	b160      	cbz	r0, 8005ec0 <_Balloc+0x64>
 8005ea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005eaa:	e00e      	b.n	8005eca <_Balloc+0x6e>
 8005eac:	2221      	movs	r2, #33	; 0x21
 8005eae:	2104      	movs	r1, #4
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 fdab 	bl	8006a0c <_calloc_r>
 8005eb6:	69e3      	ldr	r3, [r4, #28]
 8005eb8:	60f0      	str	r0, [r6, #12]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1e4      	bne.n	8005e8a <_Balloc+0x2e>
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	bd70      	pop	{r4, r5, r6, pc}
 8005ec4:	6802      	ldr	r2, [r0, #0]
 8005ec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ed0:	e7f7      	b.n	8005ec2 <_Balloc+0x66>
 8005ed2:	bf00      	nop
 8005ed4:	080070d9 	.word	0x080070d9
 8005ed8:	08007159 	.word	0x08007159

08005edc <_Bfree>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	69c6      	ldr	r6, [r0, #28]
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	b976      	cbnz	r6, 8005f04 <_Bfree+0x28>
 8005ee6:	2010      	movs	r0, #16
 8005ee8:	f7ff ff04 	bl	8005cf4 <malloc>
 8005eec:	4602      	mov	r2, r0
 8005eee:	61e8      	str	r0, [r5, #28]
 8005ef0:	b920      	cbnz	r0, 8005efc <_Bfree+0x20>
 8005ef2:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <_Bfree+0x3c>)
 8005ef4:	4809      	ldr	r0, [pc, #36]	; (8005f1c <_Bfree+0x40>)
 8005ef6:	218f      	movs	r1, #143	; 0x8f
 8005ef8:	f000 fd6a 	bl	80069d0 <__assert_func>
 8005efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f00:	6006      	str	r6, [r0, #0]
 8005f02:	60c6      	str	r6, [r0, #12]
 8005f04:	b13c      	cbz	r4, 8005f16 <_Bfree+0x3a>
 8005f06:	69eb      	ldr	r3, [r5, #28]
 8005f08:	6862      	ldr	r2, [r4, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f10:	6021      	str	r1, [r4, #0]
 8005f12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	080070d9 	.word	0x080070d9
 8005f1c:	08007159 	.word	0x08007159

08005f20 <__multadd>:
 8005f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f24:	690d      	ldr	r5, [r1, #16]
 8005f26:	4607      	mov	r7, r0
 8005f28:	460c      	mov	r4, r1
 8005f2a:	461e      	mov	r6, r3
 8005f2c:	f101 0c14 	add.w	ip, r1, #20
 8005f30:	2000      	movs	r0, #0
 8005f32:	f8dc 3000 	ldr.w	r3, [ip]
 8005f36:	b299      	uxth	r1, r3
 8005f38:	fb02 6101 	mla	r1, r2, r1, r6
 8005f3c:	0c1e      	lsrs	r6, r3, #16
 8005f3e:	0c0b      	lsrs	r3, r1, #16
 8005f40:	fb02 3306 	mla	r3, r2, r6, r3
 8005f44:	b289      	uxth	r1, r1
 8005f46:	3001      	adds	r0, #1
 8005f48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f4c:	4285      	cmp	r5, r0
 8005f4e:	f84c 1b04 	str.w	r1, [ip], #4
 8005f52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f56:	dcec      	bgt.n	8005f32 <__multadd+0x12>
 8005f58:	b30e      	cbz	r6, 8005f9e <__multadd+0x7e>
 8005f5a:	68a3      	ldr	r3, [r4, #8]
 8005f5c:	42ab      	cmp	r3, r5
 8005f5e:	dc19      	bgt.n	8005f94 <__multadd+0x74>
 8005f60:	6861      	ldr	r1, [r4, #4]
 8005f62:	4638      	mov	r0, r7
 8005f64:	3101      	adds	r1, #1
 8005f66:	f7ff ff79 	bl	8005e5c <_Balloc>
 8005f6a:	4680      	mov	r8, r0
 8005f6c:	b928      	cbnz	r0, 8005f7a <__multadd+0x5a>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	4b0c      	ldr	r3, [pc, #48]	; (8005fa4 <__multadd+0x84>)
 8005f72:	480d      	ldr	r0, [pc, #52]	; (8005fa8 <__multadd+0x88>)
 8005f74:	21ba      	movs	r1, #186	; 0xba
 8005f76:	f000 fd2b 	bl	80069d0 <__assert_func>
 8005f7a:	6922      	ldr	r2, [r4, #16]
 8005f7c:	3202      	adds	r2, #2
 8005f7e:	f104 010c 	add.w	r1, r4, #12
 8005f82:	0092      	lsls	r2, r2, #2
 8005f84:	300c      	adds	r0, #12
 8005f86:	f000 fd15 	bl	80069b4 <memcpy>
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f7ff ffa5 	bl	8005edc <_Bfree>
 8005f92:	4644      	mov	r4, r8
 8005f94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f98:	3501      	adds	r5, #1
 8005f9a:	615e      	str	r6, [r3, #20]
 8005f9c:	6125      	str	r5, [r4, #16]
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa4:	08007148 	.word	0x08007148
 8005fa8:	08007159 	.word	0x08007159

08005fac <__hi0bits>:
 8005fac:	0c03      	lsrs	r3, r0, #16
 8005fae:	041b      	lsls	r3, r3, #16
 8005fb0:	b9d3      	cbnz	r3, 8005fe8 <__hi0bits+0x3c>
 8005fb2:	0400      	lsls	r0, r0, #16
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005fba:	bf04      	itt	eq
 8005fbc:	0200      	lsleq	r0, r0, #8
 8005fbe:	3308      	addeq	r3, #8
 8005fc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005fc4:	bf04      	itt	eq
 8005fc6:	0100      	lsleq	r0, r0, #4
 8005fc8:	3304      	addeq	r3, #4
 8005fca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005fce:	bf04      	itt	eq
 8005fd0:	0080      	lsleq	r0, r0, #2
 8005fd2:	3302      	addeq	r3, #2
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	db05      	blt.n	8005fe4 <__hi0bits+0x38>
 8005fd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005fdc:	f103 0301 	add.w	r3, r3, #1
 8005fe0:	bf08      	it	eq
 8005fe2:	2320      	moveq	r3, #32
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	4770      	bx	lr
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e7e4      	b.n	8005fb6 <__hi0bits+0xa>

08005fec <__lo0bits>:
 8005fec:	6803      	ldr	r3, [r0, #0]
 8005fee:	f013 0207 	ands.w	r2, r3, #7
 8005ff2:	d00c      	beq.n	800600e <__lo0bits+0x22>
 8005ff4:	07d9      	lsls	r1, r3, #31
 8005ff6:	d422      	bmi.n	800603e <__lo0bits+0x52>
 8005ff8:	079a      	lsls	r2, r3, #30
 8005ffa:	bf49      	itett	mi
 8005ffc:	085b      	lsrmi	r3, r3, #1
 8005ffe:	089b      	lsrpl	r3, r3, #2
 8006000:	6003      	strmi	r3, [r0, #0]
 8006002:	2201      	movmi	r2, #1
 8006004:	bf5c      	itt	pl
 8006006:	6003      	strpl	r3, [r0, #0]
 8006008:	2202      	movpl	r2, #2
 800600a:	4610      	mov	r0, r2
 800600c:	4770      	bx	lr
 800600e:	b299      	uxth	r1, r3
 8006010:	b909      	cbnz	r1, 8006016 <__lo0bits+0x2a>
 8006012:	0c1b      	lsrs	r3, r3, #16
 8006014:	2210      	movs	r2, #16
 8006016:	b2d9      	uxtb	r1, r3
 8006018:	b909      	cbnz	r1, 800601e <__lo0bits+0x32>
 800601a:	3208      	adds	r2, #8
 800601c:	0a1b      	lsrs	r3, r3, #8
 800601e:	0719      	lsls	r1, r3, #28
 8006020:	bf04      	itt	eq
 8006022:	091b      	lsreq	r3, r3, #4
 8006024:	3204      	addeq	r2, #4
 8006026:	0799      	lsls	r1, r3, #30
 8006028:	bf04      	itt	eq
 800602a:	089b      	lsreq	r3, r3, #2
 800602c:	3202      	addeq	r2, #2
 800602e:	07d9      	lsls	r1, r3, #31
 8006030:	d403      	bmi.n	800603a <__lo0bits+0x4e>
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	f102 0201 	add.w	r2, r2, #1
 8006038:	d003      	beq.n	8006042 <__lo0bits+0x56>
 800603a:	6003      	str	r3, [r0, #0]
 800603c:	e7e5      	b.n	800600a <__lo0bits+0x1e>
 800603e:	2200      	movs	r2, #0
 8006040:	e7e3      	b.n	800600a <__lo0bits+0x1e>
 8006042:	2220      	movs	r2, #32
 8006044:	e7e1      	b.n	800600a <__lo0bits+0x1e>
	...

08006048 <__i2b>:
 8006048:	b510      	push	{r4, lr}
 800604a:	460c      	mov	r4, r1
 800604c:	2101      	movs	r1, #1
 800604e:	f7ff ff05 	bl	8005e5c <_Balloc>
 8006052:	4602      	mov	r2, r0
 8006054:	b928      	cbnz	r0, 8006062 <__i2b+0x1a>
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <__i2b+0x24>)
 8006058:	4805      	ldr	r0, [pc, #20]	; (8006070 <__i2b+0x28>)
 800605a:	f240 1145 	movw	r1, #325	; 0x145
 800605e:	f000 fcb7 	bl	80069d0 <__assert_func>
 8006062:	2301      	movs	r3, #1
 8006064:	6144      	str	r4, [r0, #20]
 8006066:	6103      	str	r3, [r0, #16]
 8006068:	bd10      	pop	{r4, pc}
 800606a:	bf00      	nop
 800606c:	08007148 	.word	0x08007148
 8006070:	08007159 	.word	0x08007159

08006074 <__multiply>:
 8006074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006078:	4691      	mov	r9, r2
 800607a:	690a      	ldr	r2, [r1, #16]
 800607c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006080:	429a      	cmp	r2, r3
 8006082:	bfb8      	it	lt
 8006084:	460b      	movlt	r3, r1
 8006086:	460c      	mov	r4, r1
 8006088:	bfbc      	itt	lt
 800608a:	464c      	movlt	r4, r9
 800608c:	4699      	movlt	r9, r3
 800608e:	6927      	ldr	r7, [r4, #16]
 8006090:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006094:	68a3      	ldr	r3, [r4, #8]
 8006096:	6861      	ldr	r1, [r4, #4]
 8006098:	eb07 060a 	add.w	r6, r7, sl
 800609c:	42b3      	cmp	r3, r6
 800609e:	b085      	sub	sp, #20
 80060a0:	bfb8      	it	lt
 80060a2:	3101      	addlt	r1, #1
 80060a4:	f7ff feda 	bl	8005e5c <_Balloc>
 80060a8:	b930      	cbnz	r0, 80060b8 <__multiply+0x44>
 80060aa:	4602      	mov	r2, r0
 80060ac:	4b44      	ldr	r3, [pc, #272]	; (80061c0 <__multiply+0x14c>)
 80060ae:	4845      	ldr	r0, [pc, #276]	; (80061c4 <__multiply+0x150>)
 80060b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80060b4:	f000 fc8c 	bl	80069d0 <__assert_func>
 80060b8:	f100 0514 	add.w	r5, r0, #20
 80060bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060c0:	462b      	mov	r3, r5
 80060c2:	2200      	movs	r2, #0
 80060c4:	4543      	cmp	r3, r8
 80060c6:	d321      	bcc.n	800610c <__multiply+0x98>
 80060c8:	f104 0314 	add.w	r3, r4, #20
 80060cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80060d0:	f109 0314 	add.w	r3, r9, #20
 80060d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80060d8:	9202      	str	r2, [sp, #8]
 80060da:	1b3a      	subs	r2, r7, r4
 80060dc:	3a15      	subs	r2, #21
 80060de:	f022 0203 	bic.w	r2, r2, #3
 80060e2:	3204      	adds	r2, #4
 80060e4:	f104 0115 	add.w	r1, r4, #21
 80060e8:	428f      	cmp	r7, r1
 80060ea:	bf38      	it	cc
 80060ec:	2204      	movcc	r2, #4
 80060ee:	9201      	str	r2, [sp, #4]
 80060f0:	9a02      	ldr	r2, [sp, #8]
 80060f2:	9303      	str	r3, [sp, #12]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d80c      	bhi.n	8006112 <__multiply+0x9e>
 80060f8:	2e00      	cmp	r6, #0
 80060fa:	dd03      	ble.n	8006104 <__multiply+0x90>
 80060fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006100:	2b00      	cmp	r3, #0
 8006102:	d05b      	beq.n	80061bc <__multiply+0x148>
 8006104:	6106      	str	r6, [r0, #16]
 8006106:	b005      	add	sp, #20
 8006108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610c:	f843 2b04 	str.w	r2, [r3], #4
 8006110:	e7d8      	b.n	80060c4 <__multiply+0x50>
 8006112:	f8b3 a000 	ldrh.w	sl, [r3]
 8006116:	f1ba 0f00 	cmp.w	sl, #0
 800611a:	d024      	beq.n	8006166 <__multiply+0xf2>
 800611c:	f104 0e14 	add.w	lr, r4, #20
 8006120:	46a9      	mov	r9, r5
 8006122:	f04f 0c00 	mov.w	ip, #0
 8006126:	f85e 2b04 	ldr.w	r2, [lr], #4
 800612a:	f8d9 1000 	ldr.w	r1, [r9]
 800612e:	fa1f fb82 	uxth.w	fp, r2
 8006132:	b289      	uxth	r1, r1
 8006134:	fb0a 110b 	mla	r1, sl, fp, r1
 8006138:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800613c:	f8d9 2000 	ldr.w	r2, [r9]
 8006140:	4461      	add	r1, ip
 8006142:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006146:	fb0a c20b 	mla	r2, sl, fp, ip
 800614a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800614e:	b289      	uxth	r1, r1
 8006150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006154:	4577      	cmp	r7, lr
 8006156:	f849 1b04 	str.w	r1, [r9], #4
 800615a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800615e:	d8e2      	bhi.n	8006126 <__multiply+0xb2>
 8006160:	9a01      	ldr	r2, [sp, #4]
 8006162:	f845 c002 	str.w	ip, [r5, r2]
 8006166:	9a03      	ldr	r2, [sp, #12]
 8006168:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800616c:	3304      	adds	r3, #4
 800616e:	f1b9 0f00 	cmp.w	r9, #0
 8006172:	d021      	beq.n	80061b8 <__multiply+0x144>
 8006174:	6829      	ldr	r1, [r5, #0]
 8006176:	f104 0c14 	add.w	ip, r4, #20
 800617a:	46ae      	mov	lr, r5
 800617c:	f04f 0a00 	mov.w	sl, #0
 8006180:	f8bc b000 	ldrh.w	fp, [ip]
 8006184:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006188:	fb09 220b 	mla	r2, r9, fp, r2
 800618c:	4452      	add	r2, sl
 800618e:	b289      	uxth	r1, r1
 8006190:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006194:	f84e 1b04 	str.w	r1, [lr], #4
 8006198:	f85c 1b04 	ldr.w	r1, [ip], #4
 800619c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061a0:	f8be 1000 	ldrh.w	r1, [lr]
 80061a4:	fb09 110a 	mla	r1, r9, sl, r1
 80061a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80061ac:	4567      	cmp	r7, ip
 80061ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061b2:	d8e5      	bhi.n	8006180 <__multiply+0x10c>
 80061b4:	9a01      	ldr	r2, [sp, #4]
 80061b6:	50a9      	str	r1, [r5, r2]
 80061b8:	3504      	adds	r5, #4
 80061ba:	e799      	b.n	80060f0 <__multiply+0x7c>
 80061bc:	3e01      	subs	r6, #1
 80061be:	e79b      	b.n	80060f8 <__multiply+0x84>
 80061c0:	08007148 	.word	0x08007148
 80061c4:	08007159 	.word	0x08007159

080061c8 <__pow5mult>:
 80061c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061cc:	4615      	mov	r5, r2
 80061ce:	f012 0203 	ands.w	r2, r2, #3
 80061d2:	4606      	mov	r6, r0
 80061d4:	460f      	mov	r7, r1
 80061d6:	d007      	beq.n	80061e8 <__pow5mult+0x20>
 80061d8:	4c25      	ldr	r4, [pc, #148]	; (8006270 <__pow5mult+0xa8>)
 80061da:	3a01      	subs	r2, #1
 80061dc:	2300      	movs	r3, #0
 80061de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061e2:	f7ff fe9d 	bl	8005f20 <__multadd>
 80061e6:	4607      	mov	r7, r0
 80061e8:	10ad      	asrs	r5, r5, #2
 80061ea:	d03d      	beq.n	8006268 <__pow5mult+0xa0>
 80061ec:	69f4      	ldr	r4, [r6, #28]
 80061ee:	b97c      	cbnz	r4, 8006210 <__pow5mult+0x48>
 80061f0:	2010      	movs	r0, #16
 80061f2:	f7ff fd7f 	bl	8005cf4 <malloc>
 80061f6:	4602      	mov	r2, r0
 80061f8:	61f0      	str	r0, [r6, #28]
 80061fa:	b928      	cbnz	r0, 8006208 <__pow5mult+0x40>
 80061fc:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <__pow5mult+0xac>)
 80061fe:	481e      	ldr	r0, [pc, #120]	; (8006278 <__pow5mult+0xb0>)
 8006200:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006204:	f000 fbe4 	bl	80069d0 <__assert_func>
 8006208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800620c:	6004      	str	r4, [r0, #0]
 800620e:	60c4      	str	r4, [r0, #12]
 8006210:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006218:	b94c      	cbnz	r4, 800622e <__pow5mult+0x66>
 800621a:	f240 2171 	movw	r1, #625	; 0x271
 800621e:	4630      	mov	r0, r6
 8006220:	f7ff ff12 	bl	8006048 <__i2b>
 8006224:	2300      	movs	r3, #0
 8006226:	f8c8 0008 	str.w	r0, [r8, #8]
 800622a:	4604      	mov	r4, r0
 800622c:	6003      	str	r3, [r0, #0]
 800622e:	f04f 0900 	mov.w	r9, #0
 8006232:	07eb      	lsls	r3, r5, #31
 8006234:	d50a      	bpl.n	800624c <__pow5mult+0x84>
 8006236:	4639      	mov	r1, r7
 8006238:	4622      	mov	r2, r4
 800623a:	4630      	mov	r0, r6
 800623c:	f7ff ff1a 	bl	8006074 <__multiply>
 8006240:	4639      	mov	r1, r7
 8006242:	4680      	mov	r8, r0
 8006244:	4630      	mov	r0, r6
 8006246:	f7ff fe49 	bl	8005edc <_Bfree>
 800624a:	4647      	mov	r7, r8
 800624c:	106d      	asrs	r5, r5, #1
 800624e:	d00b      	beq.n	8006268 <__pow5mult+0xa0>
 8006250:	6820      	ldr	r0, [r4, #0]
 8006252:	b938      	cbnz	r0, 8006264 <__pow5mult+0x9c>
 8006254:	4622      	mov	r2, r4
 8006256:	4621      	mov	r1, r4
 8006258:	4630      	mov	r0, r6
 800625a:	f7ff ff0b 	bl	8006074 <__multiply>
 800625e:	6020      	str	r0, [r4, #0]
 8006260:	f8c0 9000 	str.w	r9, [r0]
 8006264:	4604      	mov	r4, r0
 8006266:	e7e4      	b.n	8006232 <__pow5mult+0x6a>
 8006268:	4638      	mov	r0, r7
 800626a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800626e:	bf00      	nop
 8006270:	080072a8 	.word	0x080072a8
 8006274:	080070d9 	.word	0x080070d9
 8006278:	08007159 	.word	0x08007159

0800627c <__lshift>:
 800627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006280:	460c      	mov	r4, r1
 8006282:	6849      	ldr	r1, [r1, #4]
 8006284:	6923      	ldr	r3, [r4, #16]
 8006286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800628a:	68a3      	ldr	r3, [r4, #8]
 800628c:	4607      	mov	r7, r0
 800628e:	4691      	mov	r9, r2
 8006290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006294:	f108 0601 	add.w	r6, r8, #1
 8006298:	42b3      	cmp	r3, r6
 800629a:	db0b      	blt.n	80062b4 <__lshift+0x38>
 800629c:	4638      	mov	r0, r7
 800629e:	f7ff fddd 	bl	8005e5c <_Balloc>
 80062a2:	4605      	mov	r5, r0
 80062a4:	b948      	cbnz	r0, 80062ba <__lshift+0x3e>
 80062a6:	4602      	mov	r2, r0
 80062a8:	4b28      	ldr	r3, [pc, #160]	; (800634c <__lshift+0xd0>)
 80062aa:	4829      	ldr	r0, [pc, #164]	; (8006350 <__lshift+0xd4>)
 80062ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80062b0:	f000 fb8e 	bl	80069d0 <__assert_func>
 80062b4:	3101      	adds	r1, #1
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	e7ee      	b.n	8006298 <__lshift+0x1c>
 80062ba:	2300      	movs	r3, #0
 80062bc:	f100 0114 	add.w	r1, r0, #20
 80062c0:	f100 0210 	add.w	r2, r0, #16
 80062c4:	4618      	mov	r0, r3
 80062c6:	4553      	cmp	r3, sl
 80062c8:	db33      	blt.n	8006332 <__lshift+0xb6>
 80062ca:	6920      	ldr	r0, [r4, #16]
 80062cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062d0:	f104 0314 	add.w	r3, r4, #20
 80062d4:	f019 091f 	ands.w	r9, r9, #31
 80062d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062e0:	d02b      	beq.n	800633a <__lshift+0xbe>
 80062e2:	f1c9 0e20 	rsb	lr, r9, #32
 80062e6:	468a      	mov	sl, r1
 80062e8:	2200      	movs	r2, #0
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	fa00 f009 	lsl.w	r0, r0, r9
 80062f0:	4310      	orrs	r0, r2
 80062f2:	f84a 0b04 	str.w	r0, [sl], #4
 80062f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80062fa:	459c      	cmp	ip, r3
 80062fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006300:	d8f3      	bhi.n	80062ea <__lshift+0x6e>
 8006302:	ebac 0304 	sub.w	r3, ip, r4
 8006306:	3b15      	subs	r3, #21
 8006308:	f023 0303 	bic.w	r3, r3, #3
 800630c:	3304      	adds	r3, #4
 800630e:	f104 0015 	add.w	r0, r4, #21
 8006312:	4584      	cmp	ip, r0
 8006314:	bf38      	it	cc
 8006316:	2304      	movcc	r3, #4
 8006318:	50ca      	str	r2, [r1, r3]
 800631a:	b10a      	cbz	r2, 8006320 <__lshift+0xa4>
 800631c:	f108 0602 	add.w	r6, r8, #2
 8006320:	3e01      	subs	r6, #1
 8006322:	4638      	mov	r0, r7
 8006324:	612e      	str	r6, [r5, #16]
 8006326:	4621      	mov	r1, r4
 8006328:	f7ff fdd8 	bl	8005edc <_Bfree>
 800632c:	4628      	mov	r0, r5
 800632e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006332:	f842 0f04 	str.w	r0, [r2, #4]!
 8006336:	3301      	adds	r3, #1
 8006338:	e7c5      	b.n	80062c6 <__lshift+0x4a>
 800633a:	3904      	subs	r1, #4
 800633c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006340:	f841 2f04 	str.w	r2, [r1, #4]!
 8006344:	459c      	cmp	ip, r3
 8006346:	d8f9      	bhi.n	800633c <__lshift+0xc0>
 8006348:	e7ea      	b.n	8006320 <__lshift+0xa4>
 800634a:	bf00      	nop
 800634c:	08007148 	.word	0x08007148
 8006350:	08007159 	.word	0x08007159

08006354 <__mcmp>:
 8006354:	b530      	push	{r4, r5, lr}
 8006356:	6902      	ldr	r2, [r0, #16]
 8006358:	690c      	ldr	r4, [r1, #16]
 800635a:	1b12      	subs	r2, r2, r4
 800635c:	d10e      	bne.n	800637c <__mcmp+0x28>
 800635e:	f100 0314 	add.w	r3, r0, #20
 8006362:	3114      	adds	r1, #20
 8006364:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006368:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800636c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006370:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006374:	42a5      	cmp	r5, r4
 8006376:	d003      	beq.n	8006380 <__mcmp+0x2c>
 8006378:	d305      	bcc.n	8006386 <__mcmp+0x32>
 800637a:	2201      	movs	r2, #1
 800637c:	4610      	mov	r0, r2
 800637e:	bd30      	pop	{r4, r5, pc}
 8006380:	4283      	cmp	r3, r0
 8006382:	d3f3      	bcc.n	800636c <__mcmp+0x18>
 8006384:	e7fa      	b.n	800637c <__mcmp+0x28>
 8006386:	f04f 32ff 	mov.w	r2, #4294967295
 800638a:	e7f7      	b.n	800637c <__mcmp+0x28>

0800638c <__mdiff>:
 800638c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006390:	460c      	mov	r4, r1
 8006392:	4606      	mov	r6, r0
 8006394:	4611      	mov	r1, r2
 8006396:	4620      	mov	r0, r4
 8006398:	4690      	mov	r8, r2
 800639a:	f7ff ffdb 	bl	8006354 <__mcmp>
 800639e:	1e05      	subs	r5, r0, #0
 80063a0:	d110      	bne.n	80063c4 <__mdiff+0x38>
 80063a2:	4629      	mov	r1, r5
 80063a4:	4630      	mov	r0, r6
 80063a6:	f7ff fd59 	bl	8005e5c <_Balloc>
 80063aa:	b930      	cbnz	r0, 80063ba <__mdiff+0x2e>
 80063ac:	4b3a      	ldr	r3, [pc, #232]	; (8006498 <__mdiff+0x10c>)
 80063ae:	4602      	mov	r2, r0
 80063b0:	f240 2137 	movw	r1, #567	; 0x237
 80063b4:	4839      	ldr	r0, [pc, #228]	; (800649c <__mdiff+0x110>)
 80063b6:	f000 fb0b 	bl	80069d0 <__assert_func>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80063c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c4:	bfa4      	itt	ge
 80063c6:	4643      	movge	r3, r8
 80063c8:	46a0      	movge	r8, r4
 80063ca:	4630      	mov	r0, r6
 80063cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80063d0:	bfa6      	itte	ge
 80063d2:	461c      	movge	r4, r3
 80063d4:	2500      	movge	r5, #0
 80063d6:	2501      	movlt	r5, #1
 80063d8:	f7ff fd40 	bl	8005e5c <_Balloc>
 80063dc:	b920      	cbnz	r0, 80063e8 <__mdiff+0x5c>
 80063de:	4b2e      	ldr	r3, [pc, #184]	; (8006498 <__mdiff+0x10c>)
 80063e0:	4602      	mov	r2, r0
 80063e2:	f240 2145 	movw	r1, #581	; 0x245
 80063e6:	e7e5      	b.n	80063b4 <__mdiff+0x28>
 80063e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80063ec:	6926      	ldr	r6, [r4, #16]
 80063ee:	60c5      	str	r5, [r0, #12]
 80063f0:	f104 0914 	add.w	r9, r4, #20
 80063f4:	f108 0514 	add.w	r5, r8, #20
 80063f8:	f100 0e14 	add.w	lr, r0, #20
 80063fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006400:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006404:	f108 0210 	add.w	r2, r8, #16
 8006408:	46f2      	mov	sl, lr
 800640a:	2100      	movs	r1, #0
 800640c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006410:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006414:	fa11 f88b 	uxtah	r8, r1, fp
 8006418:	b299      	uxth	r1, r3
 800641a:	0c1b      	lsrs	r3, r3, #16
 800641c:	eba8 0801 	sub.w	r8, r8, r1
 8006420:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006424:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006428:	fa1f f888 	uxth.w	r8, r8
 800642c:	1419      	asrs	r1, r3, #16
 800642e:	454e      	cmp	r6, r9
 8006430:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006434:	f84a 3b04 	str.w	r3, [sl], #4
 8006438:	d8e8      	bhi.n	800640c <__mdiff+0x80>
 800643a:	1b33      	subs	r3, r6, r4
 800643c:	3b15      	subs	r3, #21
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	3304      	adds	r3, #4
 8006444:	3415      	adds	r4, #21
 8006446:	42a6      	cmp	r6, r4
 8006448:	bf38      	it	cc
 800644a:	2304      	movcc	r3, #4
 800644c:	441d      	add	r5, r3
 800644e:	4473      	add	r3, lr
 8006450:	469e      	mov	lr, r3
 8006452:	462e      	mov	r6, r5
 8006454:	4566      	cmp	r6, ip
 8006456:	d30e      	bcc.n	8006476 <__mdiff+0xea>
 8006458:	f10c 0203 	add.w	r2, ip, #3
 800645c:	1b52      	subs	r2, r2, r5
 800645e:	f022 0203 	bic.w	r2, r2, #3
 8006462:	3d03      	subs	r5, #3
 8006464:	45ac      	cmp	ip, r5
 8006466:	bf38      	it	cc
 8006468:	2200      	movcc	r2, #0
 800646a:	4413      	add	r3, r2
 800646c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006470:	b17a      	cbz	r2, 8006492 <__mdiff+0x106>
 8006472:	6107      	str	r7, [r0, #16]
 8006474:	e7a4      	b.n	80063c0 <__mdiff+0x34>
 8006476:	f856 8b04 	ldr.w	r8, [r6], #4
 800647a:	fa11 f288 	uxtah	r2, r1, r8
 800647e:	1414      	asrs	r4, r2, #16
 8006480:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006484:	b292      	uxth	r2, r2
 8006486:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800648a:	f84e 2b04 	str.w	r2, [lr], #4
 800648e:	1421      	asrs	r1, r4, #16
 8006490:	e7e0      	b.n	8006454 <__mdiff+0xc8>
 8006492:	3f01      	subs	r7, #1
 8006494:	e7ea      	b.n	800646c <__mdiff+0xe0>
 8006496:	bf00      	nop
 8006498:	08007148 	.word	0x08007148
 800649c:	08007159 	.word	0x08007159

080064a0 <__d2b>:
 80064a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064a4:	460f      	mov	r7, r1
 80064a6:	2101      	movs	r1, #1
 80064a8:	ec59 8b10 	vmov	r8, r9, d0
 80064ac:	4616      	mov	r6, r2
 80064ae:	f7ff fcd5 	bl	8005e5c <_Balloc>
 80064b2:	4604      	mov	r4, r0
 80064b4:	b930      	cbnz	r0, 80064c4 <__d2b+0x24>
 80064b6:	4602      	mov	r2, r0
 80064b8:	4b24      	ldr	r3, [pc, #144]	; (800654c <__d2b+0xac>)
 80064ba:	4825      	ldr	r0, [pc, #148]	; (8006550 <__d2b+0xb0>)
 80064bc:	f240 310f 	movw	r1, #783	; 0x30f
 80064c0:	f000 fa86 	bl	80069d0 <__assert_func>
 80064c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064cc:	bb2d      	cbnz	r5, 800651a <__d2b+0x7a>
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	f1b8 0300 	subs.w	r3, r8, #0
 80064d4:	d026      	beq.n	8006524 <__d2b+0x84>
 80064d6:	4668      	mov	r0, sp
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	f7ff fd87 	bl	8005fec <__lo0bits>
 80064de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064e2:	b1e8      	cbz	r0, 8006520 <__d2b+0x80>
 80064e4:	f1c0 0320 	rsb	r3, r0, #32
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	430b      	orrs	r3, r1
 80064ee:	40c2      	lsrs	r2, r0
 80064f0:	6163      	str	r3, [r4, #20]
 80064f2:	9201      	str	r2, [sp, #4]
 80064f4:	9b01      	ldr	r3, [sp, #4]
 80064f6:	61a3      	str	r3, [r4, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bf14      	ite	ne
 80064fc:	2202      	movne	r2, #2
 80064fe:	2201      	moveq	r2, #1
 8006500:	6122      	str	r2, [r4, #16]
 8006502:	b1bd      	cbz	r5, 8006534 <__d2b+0x94>
 8006504:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006508:	4405      	add	r5, r0
 800650a:	603d      	str	r5, [r7, #0]
 800650c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006510:	6030      	str	r0, [r6, #0]
 8006512:	4620      	mov	r0, r4
 8006514:	b003      	add	sp, #12
 8006516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800651a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800651e:	e7d6      	b.n	80064ce <__d2b+0x2e>
 8006520:	6161      	str	r1, [r4, #20]
 8006522:	e7e7      	b.n	80064f4 <__d2b+0x54>
 8006524:	a801      	add	r0, sp, #4
 8006526:	f7ff fd61 	bl	8005fec <__lo0bits>
 800652a:	9b01      	ldr	r3, [sp, #4]
 800652c:	6163      	str	r3, [r4, #20]
 800652e:	3020      	adds	r0, #32
 8006530:	2201      	movs	r2, #1
 8006532:	e7e5      	b.n	8006500 <__d2b+0x60>
 8006534:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006538:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800653c:	6038      	str	r0, [r7, #0]
 800653e:	6918      	ldr	r0, [r3, #16]
 8006540:	f7ff fd34 	bl	8005fac <__hi0bits>
 8006544:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006548:	e7e2      	b.n	8006510 <__d2b+0x70>
 800654a:	bf00      	nop
 800654c:	08007148 	.word	0x08007148
 8006550:	08007159 	.word	0x08007159

08006554 <__ssputs_r>:
 8006554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	688e      	ldr	r6, [r1, #8]
 800655a:	461f      	mov	r7, r3
 800655c:	42be      	cmp	r6, r7
 800655e:	680b      	ldr	r3, [r1, #0]
 8006560:	4682      	mov	sl, r0
 8006562:	460c      	mov	r4, r1
 8006564:	4690      	mov	r8, r2
 8006566:	d82c      	bhi.n	80065c2 <__ssputs_r+0x6e>
 8006568:	898a      	ldrh	r2, [r1, #12]
 800656a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800656e:	d026      	beq.n	80065be <__ssputs_r+0x6a>
 8006570:	6965      	ldr	r5, [r4, #20]
 8006572:	6909      	ldr	r1, [r1, #16]
 8006574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006578:	eba3 0901 	sub.w	r9, r3, r1
 800657c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006580:	1c7b      	adds	r3, r7, #1
 8006582:	444b      	add	r3, r9
 8006584:	106d      	asrs	r5, r5, #1
 8006586:	429d      	cmp	r5, r3
 8006588:	bf38      	it	cc
 800658a:	461d      	movcc	r5, r3
 800658c:	0553      	lsls	r3, r2, #21
 800658e:	d527      	bpl.n	80065e0 <__ssputs_r+0x8c>
 8006590:	4629      	mov	r1, r5
 8006592:	f7ff fbd7 	bl	8005d44 <_malloc_r>
 8006596:	4606      	mov	r6, r0
 8006598:	b360      	cbz	r0, 80065f4 <__ssputs_r+0xa0>
 800659a:	6921      	ldr	r1, [r4, #16]
 800659c:	464a      	mov	r2, r9
 800659e:	f000 fa09 	bl	80069b4 <memcpy>
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ac:	81a3      	strh	r3, [r4, #12]
 80065ae:	6126      	str	r6, [r4, #16]
 80065b0:	6165      	str	r5, [r4, #20]
 80065b2:	444e      	add	r6, r9
 80065b4:	eba5 0509 	sub.w	r5, r5, r9
 80065b8:	6026      	str	r6, [r4, #0]
 80065ba:	60a5      	str	r5, [r4, #8]
 80065bc:	463e      	mov	r6, r7
 80065be:	42be      	cmp	r6, r7
 80065c0:	d900      	bls.n	80065c4 <__ssputs_r+0x70>
 80065c2:	463e      	mov	r6, r7
 80065c4:	6820      	ldr	r0, [r4, #0]
 80065c6:	4632      	mov	r2, r6
 80065c8:	4641      	mov	r1, r8
 80065ca:	f000 f9c9 	bl	8006960 <memmove>
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	1b9b      	subs	r3, r3, r6
 80065d2:	60a3      	str	r3, [r4, #8]
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	4433      	add	r3, r6
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	2000      	movs	r0, #0
 80065dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e0:	462a      	mov	r2, r5
 80065e2:	f000 fa3b 	bl	8006a5c <_realloc_r>
 80065e6:	4606      	mov	r6, r0
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d1e0      	bne.n	80065ae <__ssputs_r+0x5a>
 80065ec:	6921      	ldr	r1, [r4, #16]
 80065ee:	4650      	mov	r0, sl
 80065f0:	f7ff fb34 	bl	8005c5c <_free_r>
 80065f4:	230c      	movs	r3, #12
 80065f6:	f8ca 3000 	str.w	r3, [sl]
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006600:	81a3      	strh	r3, [r4, #12]
 8006602:	f04f 30ff 	mov.w	r0, #4294967295
 8006606:	e7e9      	b.n	80065dc <__ssputs_r+0x88>

08006608 <_svfiprintf_r>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	4698      	mov	r8, r3
 800660e:	898b      	ldrh	r3, [r1, #12]
 8006610:	061b      	lsls	r3, r3, #24
 8006612:	b09d      	sub	sp, #116	; 0x74
 8006614:	4607      	mov	r7, r0
 8006616:	460d      	mov	r5, r1
 8006618:	4614      	mov	r4, r2
 800661a:	d50e      	bpl.n	800663a <_svfiprintf_r+0x32>
 800661c:	690b      	ldr	r3, [r1, #16]
 800661e:	b963      	cbnz	r3, 800663a <_svfiprintf_r+0x32>
 8006620:	2140      	movs	r1, #64	; 0x40
 8006622:	f7ff fb8f 	bl	8005d44 <_malloc_r>
 8006626:	6028      	str	r0, [r5, #0]
 8006628:	6128      	str	r0, [r5, #16]
 800662a:	b920      	cbnz	r0, 8006636 <_svfiprintf_r+0x2e>
 800662c:	230c      	movs	r3, #12
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	e0d0      	b.n	80067d8 <_svfiprintf_r+0x1d0>
 8006636:	2340      	movs	r3, #64	; 0x40
 8006638:	616b      	str	r3, [r5, #20]
 800663a:	2300      	movs	r3, #0
 800663c:	9309      	str	r3, [sp, #36]	; 0x24
 800663e:	2320      	movs	r3, #32
 8006640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006644:	f8cd 800c 	str.w	r8, [sp, #12]
 8006648:	2330      	movs	r3, #48	; 0x30
 800664a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80067f0 <_svfiprintf_r+0x1e8>
 800664e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006652:	f04f 0901 	mov.w	r9, #1
 8006656:	4623      	mov	r3, r4
 8006658:	469a      	mov	sl, r3
 800665a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800665e:	b10a      	cbz	r2, 8006664 <_svfiprintf_r+0x5c>
 8006660:	2a25      	cmp	r2, #37	; 0x25
 8006662:	d1f9      	bne.n	8006658 <_svfiprintf_r+0x50>
 8006664:	ebba 0b04 	subs.w	fp, sl, r4
 8006668:	d00b      	beq.n	8006682 <_svfiprintf_r+0x7a>
 800666a:	465b      	mov	r3, fp
 800666c:	4622      	mov	r2, r4
 800666e:	4629      	mov	r1, r5
 8006670:	4638      	mov	r0, r7
 8006672:	f7ff ff6f 	bl	8006554 <__ssputs_r>
 8006676:	3001      	adds	r0, #1
 8006678:	f000 80a9 	beq.w	80067ce <_svfiprintf_r+0x1c6>
 800667c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800667e:	445a      	add	r2, fp
 8006680:	9209      	str	r2, [sp, #36]	; 0x24
 8006682:	f89a 3000 	ldrb.w	r3, [sl]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 80a1 	beq.w	80067ce <_svfiprintf_r+0x1c6>
 800668c:	2300      	movs	r3, #0
 800668e:	f04f 32ff 	mov.w	r2, #4294967295
 8006692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006696:	f10a 0a01 	add.w	sl, sl, #1
 800669a:	9304      	str	r3, [sp, #16]
 800669c:	9307      	str	r3, [sp, #28]
 800669e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066a2:	931a      	str	r3, [sp, #104]	; 0x68
 80066a4:	4654      	mov	r4, sl
 80066a6:	2205      	movs	r2, #5
 80066a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ac:	4850      	ldr	r0, [pc, #320]	; (80067f0 <_svfiprintf_r+0x1e8>)
 80066ae:	f7f9 fdaf 	bl	8000210 <memchr>
 80066b2:	9a04      	ldr	r2, [sp, #16]
 80066b4:	b9d8      	cbnz	r0, 80066ee <_svfiprintf_r+0xe6>
 80066b6:	06d0      	lsls	r0, r2, #27
 80066b8:	bf44      	itt	mi
 80066ba:	2320      	movmi	r3, #32
 80066bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066c0:	0711      	lsls	r1, r2, #28
 80066c2:	bf44      	itt	mi
 80066c4:	232b      	movmi	r3, #43	; 0x2b
 80066c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066ca:	f89a 3000 	ldrb.w	r3, [sl]
 80066ce:	2b2a      	cmp	r3, #42	; 0x2a
 80066d0:	d015      	beq.n	80066fe <_svfiprintf_r+0xf6>
 80066d2:	9a07      	ldr	r2, [sp, #28]
 80066d4:	4654      	mov	r4, sl
 80066d6:	2000      	movs	r0, #0
 80066d8:	f04f 0c0a 	mov.w	ip, #10
 80066dc:	4621      	mov	r1, r4
 80066de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066e2:	3b30      	subs	r3, #48	; 0x30
 80066e4:	2b09      	cmp	r3, #9
 80066e6:	d94d      	bls.n	8006784 <_svfiprintf_r+0x17c>
 80066e8:	b1b0      	cbz	r0, 8006718 <_svfiprintf_r+0x110>
 80066ea:	9207      	str	r2, [sp, #28]
 80066ec:	e014      	b.n	8006718 <_svfiprintf_r+0x110>
 80066ee:	eba0 0308 	sub.w	r3, r0, r8
 80066f2:	fa09 f303 	lsl.w	r3, r9, r3
 80066f6:	4313      	orrs	r3, r2
 80066f8:	9304      	str	r3, [sp, #16]
 80066fa:	46a2      	mov	sl, r4
 80066fc:	e7d2      	b.n	80066a4 <_svfiprintf_r+0x9c>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	1d19      	adds	r1, r3, #4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	9103      	str	r1, [sp, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	bfbb      	ittet	lt
 800670a:	425b      	neglt	r3, r3
 800670c:	f042 0202 	orrlt.w	r2, r2, #2
 8006710:	9307      	strge	r3, [sp, #28]
 8006712:	9307      	strlt	r3, [sp, #28]
 8006714:	bfb8      	it	lt
 8006716:	9204      	strlt	r2, [sp, #16]
 8006718:	7823      	ldrb	r3, [r4, #0]
 800671a:	2b2e      	cmp	r3, #46	; 0x2e
 800671c:	d10c      	bne.n	8006738 <_svfiprintf_r+0x130>
 800671e:	7863      	ldrb	r3, [r4, #1]
 8006720:	2b2a      	cmp	r3, #42	; 0x2a
 8006722:	d134      	bne.n	800678e <_svfiprintf_r+0x186>
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	1d1a      	adds	r2, r3, #4
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	9203      	str	r2, [sp, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	bfb8      	it	lt
 8006730:	f04f 33ff 	movlt.w	r3, #4294967295
 8006734:	3402      	adds	r4, #2
 8006736:	9305      	str	r3, [sp, #20]
 8006738:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006800 <_svfiprintf_r+0x1f8>
 800673c:	7821      	ldrb	r1, [r4, #0]
 800673e:	2203      	movs	r2, #3
 8006740:	4650      	mov	r0, sl
 8006742:	f7f9 fd65 	bl	8000210 <memchr>
 8006746:	b138      	cbz	r0, 8006758 <_svfiprintf_r+0x150>
 8006748:	9b04      	ldr	r3, [sp, #16]
 800674a:	eba0 000a 	sub.w	r0, r0, sl
 800674e:	2240      	movs	r2, #64	; 0x40
 8006750:	4082      	lsls	r2, r0
 8006752:	4313      	orrs	r3, r2
 8006754:	3401      	adds	r4, #1
 8006756:	9304      	str	r3, [sp, #16]
 8006758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800675c:	4825      	ldr	r0, [pc, #148]	; (80067f4 <_svfiprintf_r+0x1ec>)
 800675e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006762:	2206      	movs	r2, #6
 8006764:	f7f9 fd54 	bl	8000210 <memchr>
 8006768:	2800      	cmp	r0, #0
 800676a:	d038      	beq.n	80067de <_svfiprintf_r+0x1d6>
 800676c:	4b22      	ldr	r3, [pc, #136]	; (80067f8 <_svfiprintf_r+0x1f0>)
 800676e:	bb1b      	cbnz	r3, 80067b8 <_svfiprintf_r+0x1b0>
 8006770:	9b03      	ldr	r3, [sp, #12]
 8006772:	3307      	adds	r3, #7
 8006774:	f023 0307 	bic.w	r3, r3, #7
 8006778:	3308      	adds	r3, #8
 800677a:	9303      	str	r3, [sp, #12]
 800677c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800677e:	4433      	add	r3, r6
 8006780:	9309      	str	r3, [sp, #36]	; 0x24
 8006782:	e768      	b.n	8006656 <_svfiprintf_r+0x4e>
 8006784:	fb0c 3202 	mla	r2, ip, r2, r3
 8006788:	460c      	mov	r4, r1
 800678a:	2001      	movs	r0, #1
 800678c:	e7a6      	b.n	80066dc <_svfiprintf_r+0xd4>
 800678e:	2300      	movs	r3, #0
 8006790:	3401      	adds	r4, #1
 8006792:	9305      	str	r3, [sp, #20]
 8006794:	4619      	mov	r1, r3
 8006796:	f04f 0c0a 	mov.w	ip, #10
 800679a:	4620      	mov	r0, r4
 800679c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067a0:	3a30      	subs	r2, #48	; 0x30
 80067a2:	2a09      	cmp	r2, #9
 80067a4:	d903      	bls.n	80067ae <_svfiprintf_r+0x1a6>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0c6      	beq.n	8006738 <_svfiprintf_r+0x130>
 80067aa:	9105      	str	r1, [sp, #20]
 80067ac:	e7c4      	b.n	8006738 <_svfiprintf_r+0x130>
 80067ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80067b2:	4604      	mov	r4, r0
 80067b4:	2301      	movs	r3, #1
 80067b6:	e7f0      	b.n	800679a <_svfiprintf_r+0x192>
 80067b8:	ab03      	add	r3, sp, #12
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	462a      	mov	r2, r5
 80067be:	4b0f      	ldr	r3, [pc, #60]	; (80067fc <_svfiprintf_r+0x1f4>)
 80067c0:	a904      	add	r1, sp, #16
 80067c2:	4638      	mov	r0, r7
 80067c4:	f7fd fe62 	bl	800448c <_printf_float>
 80067c8:	1c42      	adds	r2, r0, #1
 80067ca:	4606      	mov	r6, r0
 80067cc:	d1d6      	bne.n	800677c <_svfiprintf_r+0x174>
 80067ce:	89ab      	ldrh	r3, [r5, #12]
 80067d0:	065b      	lsls	r3, r3, #25
 80067d2:	f53f af2d 	bmi.w	8006630 <_svfiprintf_r+0x28>
 80067d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067d8:	b01d      	add	sp, #116	; 0x74
 80067da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067de:	ab03      	add	r3, sp, #12
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	462a      	mov	r2, r5
 80067e4:	4b05      	ldr	r3, [pc, #20]	; (80067fc <_svfiprintf_r+0x1f4>)
 80067e6:	a904      	add	r1, sp, #16
 80067e8:	4638      	mov	r0, r7
 80067ea:	f7fe f8f3 	bl	80049d4 <_printf_i>
 80067ee:	e7eb      	b.n	80067c8 <_svfiprintf_r+0x1c0>
 80067f0:	080072b4 	.word	0x080072b4
 80067f4:	080072be 	.word	0x080072be
 80067f8:	0800448d 	.word	0x0800448d
 80067fc:	08006555 	.word	0x08006555
 8006800:	080072ba 	.word	0x080072ba

08006804 <__sflush_r>:
 8006804:	898a      	ldrh	r2, [r1, #12]
 8006806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800680a:	4605      	mov	r5, r0
 800680c:	0710      	lsls	r0, r2, #28
 800680e:	460c      	mov	r4, r1
 8006810:	d458      	bmi.n	80068c4 <__sflush_r+0xc0>
 8006812:	684b      	ldr	r3, [r1, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	dc05      	bgt.n	8006824 <__sflush_r+0x20>
 8006818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	dc02      	bgt.n	8006824 <__sflush_r+0x20>
 800681e:	2000      	movs	r0, #0
 8006820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006826:	2e00      	cmp	r6, #0
 8006828:	d0f9      	beq.n	800681e <__sflush_r+0x1a>
 800682a:	2300      	movs	r3, #0
 800682c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006830:	682f      	ldr	r7, [r5, #0]
 8006832:	6a21      	ldr	r1, [r4, #32]
 8006834:	602b      	str	r3, [r5, #0]
 8006836:	d032      	beq.n	800689e <__sflush_r+0x9a>
 8006838:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	075a      	lsls	r2, r3, #29
 800683e:	d505      	bpl.n	800684c <__sflush_r+0x48>
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	1ac0      	subs	r0, r0, r3
 8006844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006846:	b10b      	cbz	r3, 800684c <__sflush_r+0x48>
 8006848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800684a:	1ac0      	subs	r0, r0, r3
 800684c:	2300      	movs	r3, #0
 800684e:	4602      	mov	r2, r0
 8006850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006852:	6a21      	ldr	r1, [r4, #32]
 8006854:	4628      	mov	r0, r5
 8006856:	47b0      	blx	r6
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	89a3      	ldrh	r3, [r4, #12]
 800685c:	d106      	bne.n	800686c <__sflush_r+0x68>
 800685e:	6829      	ldr	r1, [r5, #0]
 8006860:	291d      	cmp	r1, #29
 8006862:	d82b      	bhi.n	80068bc <__sflush_r+0xb8>
 8006864:	4a29      	ldr	r2, [pc, #164]	; (800690c <__sflush_r+0x108>)
 8006866:	410a      	asrs	r2, r1
 8006868:	07d6      	lsls	r6, r2, #31
 800686a:	d427      	bmi.n	80068bc <__sflush_r+0xb8>
 800686c:	2200      	movs	r2, #0
 800686e:	6062      	str	r2, [r4, #4]
 8006870:	04d9      	lsls	r1, r3, #19
 8006872:	6922      	ldr	r2, [r4, #16]
 8006874:	6022      	str	r2, [r4, #0]
 8006876:	d504      	bpl.n	8006882 <__sflush_r+0x7e>
 8006878:	1c42      	adds	r2, r0, #1
 800687a:	d101      	bne.n	8006880 <__sflush_r+0x7c>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	b903      	cbnz	r3, 8006882 <__sflush_r+0x7e>
 8006880:	6560      	str	r0, [r4, #84]	; 0x54
 8006882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006884:	602f      	str	r7, [r5, #0]
 8006886:	2900      	cmp	r1, #0
 8006888:	d0c9      	beq.n	800681e <__sflush_r+0x1a>
 800688a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800688e:	4299      	cmp	r1, r3
 8006890:	d002      	beq.n	8006898 <__sflush_r+0x94>
 8006892:	4628      	mov	r0, r5
 8006894:	f7ff f9e2 	bl	8005c5c <_free_r>
 8006898:	2000      	movs	r0, #0
 800689a:	6360      	str	r0, [r4, #52]	; 0x34
 800689c:	e7c0      	b.n	8006820 <__sflush_r+0x1c>
 800689e:	2301      	movs	r3, #1
 80068a0:	4628      	mov	r0, r5
 80068a2:	47b0      	blx	r6
 80068a4:	1c41      	adds	r1, r0, #1
 80068a6:	d1c8      	bne.n	800683a <__sflush_r+0x36>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0c5      	beq.n	800683a <__sflush_r+0x36>
 80068ae:	2b1d      	cmp	r3, #29
 80068b0:	d001      	beq.n	80068b6 <__sflush_r+0xb2>
 80068b2:	2b16      	cmp	r3, #22
 80068b4:	d101      	bne.n	80068ba <__sflush_r+0xb6>
 80068b6:	602f      	str	r7, [r5, #0]
 80068b8:	e7b1      	b.n	800681e <__sflush_r+0x1a>
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c0:	81a3      	strh	r3, [r4, #12]
 80068c2:	e7ad      	b.n	8006820 <__sflush_r+0x1c>
 80068c4:	690f      	ldr	r7, [r1, #16]
 80068c6:	2f00      	cmp	r7, #0
 80068c8:	d0a9      	beq.n	800681e <__sflush_r+0x1a>
 80068ca:	0793      	lsls	r3, r2, #30
 80068cc:	680e      	ldr	r6, [r1, #0]
 80068ce:	bf08      	it	eq
 80068d0:	694b      	ldreq	r3, [r1, #20]
 80068d2:	600f      	str	r7, [r1, #0]
 80068d4:	bf18      	it	ne
 80068d6:	2300      	movne	r3, #0
 80068d8:	eba6 0807 	sub.w	r8, r6, r7
 80068dc:	608b      	str	r3, [r1, #8]
 80068de:	f1b8 0f00 	cmp.w	r8, #0
 80068e2:	dd9c      	ble.n	800681e <__sflush_r+0x1a>
 80068e4:	6a21      	ldr	r1, [r4, #32]
 80068e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068e8:	4643      	mov	r3, r8
 80068ea:	463a      	mov	r2, r7
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b0      	blx	r6
 80068f0:	2800      	cmp	r0, #0
 80068f2:	dc06      	bgt.n	8006902 <__sflush_r+0xfe>
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068fa:	81a3      	strh	r3, [r4, #12]
 80068fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006900:	e78e      	b.n	8006820 <__sflush_r+0x1c>
 8006902:	4407      	add	r7, r0
 8006904:	eba8 0800 	sub.w	r8, r8, r0
 8006908:	e7e9      	b.n	80068de <__sflush_r+0xda>
 800690a:	bf00      	nop
 800690c:	dfbffffe 	.word	0xdfbffffe

08006910 <_fflush_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	690b      	ldr	r3, [r1, #16]
 8006914:	4605      	mov	r5, r0
 8006916:	460c      	mov	r4, r1
 8006918:	b913      	cbnz	r3, 8006920 <_fflush_r+0x10>
 800691a:	2500      	movs	r5, #0
 800691c:	4628      	mov	r0, r5
 800691e:	bd38      	pop	{r3, r4, r5, pc}
 8006920:	b118      	cbz	r0, 800692a <_fflush_r+0x1a>
 8006922:	6a03      	ldr	r3, [r0, #32]
 8006924:	b90b      	cbnz	r3, 800692a <_fflush_r+0x1a>
 8006926:	f7fe f9f1 	bl	8004d0c <__sinit>
 800692a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0f3      	beq.n	800691a <_fflush_r+0xa>
 8006932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006934:	07d0      	lsls	r0, r2, #31
 8006936:	d404      	bmi.n	8006942 <_fflush_r+0x32>
 8006938:	0599      	lsls	r1, r3, #22
 800693a:	d402      	bmi.n	8006942 <_fflush_r+0x32>
 800693c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800693e:	f7fe fb0f 	bl	8004f60 <__retarget_lock_acquire_recursive>
 8006942:	4628      	mov	r0, r5
 8006944:	4621      	mov	r1, r4
 8006946:	f7ff ff5d 	bl	8006804 <__sflush_r>
 800694a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800694c:	07da      	lsls	r2, r3, #31
 800694e:	4605      	mov	r5, r0
 8006950:	d4e4      	bmi.n	800691c <_fflush_r+0xc>
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	059b      	lsls	r3, r3, #22
 8006956:	d4e1      	bmi.n	800691c <_fflush_r+0xc>
 8006958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800695a:	f7fe fb02 	bl	8004f62 <__retarget_lock_release_recursive>
 800695e:	e7dd      	b.n	800691c <_fflush_r+0xc>

08006960 <memmove>:
 8006960:	4288      	cmp	r0, r1
 8006962:	b510      	push	{r4, lr}
 8006964:	eb01 0402 	add.w	r4, r1, r2
 8006968:	d902      	bls.n	8006970 <memmove+0x10>
 800696a:	4284      	cmp	r4, r0
 800696c:	4623      	mov	r3, r4
 800696e:	d807      	bhi.n	8006980 <memmove+0x20>
 8006970:	1e43      	subs	r3, r0, #1
 8006972:	42a1      	cmp	r1, r4
 8006974:	d008      	beq.n	8006988 <memmove+0x28>
 8006976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800697a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800697e:	e7f8      	b.n	8006972 <memmove+0x12>
 8006980:	4402      	add	r2, r0
 8006982:	4601      	mov	r1, r0
 8006984:	428a      	cmp	r2, r1
 8006986:	d100      	bne.n	800698a <memmove+0x2a>
 8006988:	bd10      	pop	{r4, pc}
 800698a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800698e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006992:	e7f7      	b.n	8006984 <memmove+0x24>

08006994 <_sbrk_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4d06      	ldr	r5, [pc, #24]	; (80069b0 <_sbrk_r+0x1c>)
 8006998:	2300      	movs	r3, #0
 800699a:	4604      	mov	r4, r0
 800699c:	4608      	mov	r0, r1
 800699e:	602b      	str	r3, [r5, #0]
 80069a0:	f7fa fe6e 	bl	8001680 <_sbrk>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d102      	bne.n	80069ae <_sbrk_r+0x1a>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	b103      	cbz	r3, 80069ae <_sbrk_r+0x1a>
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	200003c8 	.word	0x200003c8

080069b4 <memcpy>:
 80069b4:	440a      	add	r2, r1
 80069b6:	4291      	cmp	r1, r2
 80069b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069bc:	d100      	bne.n	80069c0 <memcpy+0xc>
 80069be:	4770      	bx	lr
 80069c0:	b510      	push	{r4, lr}
 80069c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ca:	4291      	cmp	r1, r2
 80069cc:	d1f9      	bne.n	80069c2 <memcpy+0xe>
 80069ce:	bd10      	pop	{r4, pc}

080069d0 <__assert_func>:
 80069d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069d2:	4614      	mov	r4, r2
 80069d4:	461a      	mov	r2, r3
 80069d6:	4b09      	ldr	r3, [pc, #36]	; (80069fc <__assert_func+0x2c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4605      	mov	r5, r0
 80069dc:	68d8      	ldr	r0, [r3, #12]
 80069de:	b14c      	cbz	r4, 80069f4 <__assert_func+0x24>
 80069e0:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <__assert_func+0x30>)
 80069e2:	9100      	str	r1, [sp, #0]
 80069e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069e8:	4906      	ldr	r1, [pc, #24]	; (8006a04 <__assert_func+0x34>)
 80069ea:	462b      	mov	r3, r5
 80069ec:	f000 f872 	bl	8006ad4 <fiprintf>
 80069f0:	f000 f882 	bl	8006af8 <abort>
 80069f4:	4b04      	ldr	r3, [pc, #16]	; (8006a08 <__assert_func+0x38>)
 80069f6:	461c      	mov	r4, r3
 80069f8:	e7f3      	b.n	80069e2 <__assert_func+0x12>
 80069fa:	bf00      	nop
 80069fc:	20000064 	.word	0x20000064
 8006a00:	080072cf 	.word	0x080072cf
 8006a04:	080072dc 	.word	0x080072dc
 8006a08:	0800730a 	.word	0x0800730a

08006a0c <_calloc_r>:
 8006a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a0e:	fba1 2402 	umull	r2, r4, r1, r2
 8006a12:	b94c      	cbnz	r4, 8006a28 <_calloc_r+0x1c>
 8006a14:	4611      	mov	r1, r2
 8006a16:	9201      	str	r2, [sp, #4]
 8006a18:	f7ff f994 	bl	8005d44 <_malloc_r>
 8006a1c:	9a01      	ldr	r2, [sp, #4]
 8006a1e:	4605      	mov	r5, r0
 8006a20:	b930      	cbnz	r0, 8006a30 <_calloc_r+0x24>
 8006a22:	4628      	mov	r0, r5
 8006a24:	b003      	add	sp, #12
 8006a26:	bd30      	pop	{r4, r5, pc}
 8006a28:	220c      	movs	r2, #12
 8006a2a:	6002      	str	r2, [r0, #0]
 8006a2c:	2500      	movs	r5, #0
 8006a2e:	e7f8      	b.n	8006a22 <_calloc_r+0x16>
 8006a30:	4621      	mov	r1, r4
 8006a32:	f7fe fa18 	bl	8004e66 <memset>
 8006a36:	e7f4      	b.n	8006a22 <_calloc_r+0x16>

08006a38 <__ascii_mbtowc>:
 8006a38:	b082      	sub	sp, #8
 8006a3a:	b901      	cbnz	r1, 8006a3e <__ascii_mbtowc+0x6>
 8006a3c:	a901      	add	r1, sp, #4
 8006a3e:	b142      	cbz	r2, 8006a52 <__ascii_mbtowc+0x1a>
 8006a40:	b14b      	cbz	r3, 8006a56 <__ascii_mbtowc+0x1e>
 8006a42:	7813      	ldrb	r3, [r2, #0]
 8006a44:	600b      	str	r3, [r1, #0]
 8006a46:	7812      	ldrb	r2, [r2, #0]
 8006a48:	1e10      	subs	r0, r2, #0
 8006a4a:	bf18      	it	ne
 8006a4c:	2001      	movne	r0, #1
 8006a4e:	b002      	add	sp, #8
 8006a50:	4770      	bx	lr
 8006a52:	4610      	mov	r0, r2
 8006a54:	e7fb      	b.n	8006a4e <__ascii_mbtowc+0x16>
 8006a56:	f06f 0001 	mvn.w	r0, #1
 8006a5a:	e7f8      	b.n	8006a4e <__ascii_mbtowc+0x16>

08006a5c <_realloc_r>:
 8006a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a60:	4680      	mov	r8, r0
 8006a62:	4614      	mov	r4, r2
 8006a64:	460e      	mov	r6, r1
 8006a66:	b921      	cbnz	r1, 8006a72 <_realloc_r+0x16>
 8006a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	f7ff b969 	b.w	8005d44 <_malloc_r>
 8006a72:	b92a      	cbnz	r2, 8006a80 <_realloc_r+0x24>
 8006a74:	f7ff f8f2 	bl	8005c5c <_free_r>
 8006a78:	4625      	mov	r5, r4
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a80:	f000 f841 	bl	8006b06 <_malloc_usable_size_r>
 8006a84:	4284      	cmp	r4, r0
 8006a86:	4607      	mov	r7, r0
 8006a88:	d802      	bhi.n	8006a90 <_realloc_r+0x34>
 8006a8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a8e:	d812      	bhi.n	8006ab6 <_realloc_r+0x5a>
 8006a90:	4621      	mov	r1, r4
 8006a92:	4640      	mov	r0, r8
 8006a94:	f7ff f956 	bl	8005d44 <_malloc_r>
 8006a98:	4605      	mov	r5, r0
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d0ed      	beq.n	8006a7a <_realloc_r+0x1e>
 8006a9e:	42bc      	cmp	r4, r7
 8006aa0:	4622      	mov	r2, r4
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	bf28      	it	cs
 8006aa6:	463a      	movcs	r2, r7
 8006aa8:	f7ff ff84 	bl	80069b4 <memcpy>
 8006aac:	4631      	mov	r1, r6
 8006aae:	4640      	mov	r0, r8
 8006ab0:	f7ff f8d4 	bl	8005c5c <_free_r>
 8006ab4:	e7e1      	b.n	8006a7a <_realloc_r+0x1e>
 8006ab6:	4635      	mov	r5, r6
 8006ab8:	e7df      	b.n	8006a7a <_realloc_r+0x1e>

08006aba <__ascii_wctomb>:
 8006aba:	b149      	cbz	r1, 8006ad0 <__ascii_wctomb+0x16>
 8006abc:	2aff      	cmp	r2, #255	; 0xff
 8006abe:	bf85      	ittet	hi
 8006ac0:	238a      	movhi	r3, #138	; 0x8a
 8006ac2:	6003      	strhi	r3, [r0, #0]
 8006ac4:	700a      	strbls	r2, [r1, #0]
 8006ac6:	f04f 30ff 	movhi.w	r0, #4294967295
 8006aca:	bf98      	it	ls
 8006acc:	2001      	movls	r0, #1
 8006ace:	4770      	bx	lr
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	4770      	bx	lr

08006ad4 <fiprintf>:
 8006ad4:	b40e      	push	{r1, r2, r3}
 8006ad6:	b503      	push	{r0, r1, lr}
 8006ad8:	4601      	mov	r1, r0
 8006ada:	ab03      	add	r3, sp, #12
 8006adc:	4805      	ldr	r0, [pc, #20]	; (8006af4 <fiprintf+0x20>)
 8006ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ae2:	6800      	ldr	r0, [r0, #0]
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	f000 f83f 	bl	8006b68 <_vfiprintf_r>
 8006aea:	b002      	add	sp, #8
 8006aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006af0:	b003      	add	sp, #12
 8006af2:	4770      	bx	lr
 8006af4:	20000064 	.word	0x20000064

08006af8 <abort>:
 8006af8:	b508      	push	{r3, lr}
 8006afa:	2006      	movs	r0, #6
 8006afc:	f000 fa0c 	bl	8006f18 <raise>
 8006b00:	2001      	movs	r0, #1
 8006b02:	f7fa fd45 	bl	8001590 <_exit>

08006b06 <_malloc_usable_size_r>:
 8006b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b0a:	1f18      	subs	r0, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bfbc      	itt	lt
 8006b10:	580b      	ldrlt	r3, [r1, r0]
 8006b12:	18c0      	addlt	r0, r0, r3
 8006b14:	4770      	bx	lr

08006b16 <__sfputc_r>:
 8006b16:	6893      	ldr	r3, [r2, #8]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	b410      	push	{r4}
 8006b1e:	6093      	str	r3, [r2, #8]
 8006b20:	da08      	bge.n	8006b34 <__sfputc_r+0x1e>
 8006b22:	6994      	ldr	r4, [r2, #24]
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	db01      	blt.n	8006b2c <__sfputc_r+0x16>
 8006b28:	290a      	cmp	r1, #10
 8006b2a:	d103      	bne.n	8006b34 <__sfputc_r+0x1e>
 8006b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b30:	f000 b934 	b.w	8006d9c <__swbuf_r>
 8006b34:	6813      	ldr	r3, [r2, #0]
 8006b36:	1c58      	adds	r0, r3, #1
 8006b38:	6010      	str	r0, [r2, #0]
 8006b3a:	7019      	strb	r1, [r3, #0]
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <__sfputs_r>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	4606      	mov	r6, r0
 8006b48:	460f      	mov	r7, r1
 8006b4a:	4614      	mov	r4, r2
 8006b4c:	18d5      	adds	r5, r2, r3
 8006b4e:	42ac      	cmp	r4, r5
 8006b50:	d101      	bne.n	8006b56 <__sfputs_r+0x12>
 8006b52:	2000      	movs	r0, #0
 8006b54:	e007      	b.n	8006b66 <__sfputs_r+0x22>
 8006b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b5a:	463a      	mov	r2, r7
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f7ff ffda 	bl	8006b16 <__sfputc_r>
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	d1f3      	bne.n	8006b4e <__sfputs_r+0xa>
 8006b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b68 <_vfiprintf_r>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	460d      	mov	r5, r1
 8006b6e:	b09d      	sub	sp, #116	; 0x74
 8006b70:	4614      	mov	r4, r2
 8006b72:	4698      	mov	r8, r3
 8006b74:	4606      	mov	r6, r0
 8006b76:	b118      	cbz	r0, 8006b80 <_vfiprintf_r+0x18>
 8006b78:	6a03      	ldr	r3, [r0, #32]
 8006b7a:	b90b      	cbnz	r3, 8006b80 <_vfiprintf_r+0x18>
 8006b7c:	f7fe f8c6 	bl	8004d0c <__sinit>
 8006b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b82:	07d9      	lsls	r1, r3, #31
 8006b84:	d405      	bmi.n	8006b92 <_vfiprintf_r+0x2a>
 8006b86:	89ab      	ldrh	r3, [r5, #12]
 8006b88:	059a      	lsls	r2, r3, #22
 8006b8a:	d402      	bmi.n	8006b92 <_vfiprintf_r+0x2a>
 8006b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b8e:	f7fe f9e7 	bl	8004f60 <__retarget_lock_acquire_recursive>
 8006b92:	89ab      	ldrh	r3, [r5, #12]
 8006b94:	071b      	lsls	r3, r3, #28
 8006b96:	d501      	bpl.n	8006b9c <_vfiprintf_r+0x34>
 8006b98:	692b      	ldr	r3, [r5, #16]
 8006b9a:	b99b      	cbnz	r3, 8006bc4 <_vfiprintf_r+0x5c>
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f000 f93a 	bl	8006e18 <__swsetup_r>
 8006ba4:	b170      	cbz	r0, 8006bc4 <_vfiprintf_r+0x5c>
 8006ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ba8:	07dc      	lsls	r4, r3, #31
 8006baa:	d504      	bpl.n	8006bb6 <_vfiprintf_r+0x4e>
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb0:	b01d      	add	sp, #116	; 0x74
 8006bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb6:	89ab      	ldrh	r3, [r5, #12]
 8006bb8:	0598      	lsls	r0, r3, #22
 8006bba:	d4f7      	bmi.n	8006bac <_vfiprintf_r+0x44>
 8006bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bbe:	f7fe f9d0 	bl	8004f62 <__retarget_lock_release_recursive>
 8006bc2:	e7f3      	b.n	8006bac <_vfiprintf_r+0x44>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc8:	2320      	movs	r3, #32
 8006bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bd2:	2330      	movs	r3, #48	; 0x30
 8006bd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006d88 <_vfiprintf_r+0x220>
 8006bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bdc:	f04f 0901 	mov.w	r9, #1
 8006be0:	4623      	mov	r3, r4
 8006be2:	469a      	mov	sl, r3
 8006be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006be8:	b10a      	cbz	r2, 8006bee <_vfiprintf_r+0x86>
 8006bea:	2a25      	cmp	r2, #37	; 0x25
 8006bec:	d1f9      	bne.n	8006be2 <_vfiprintf_r+0x7a>
 8006bee:	ebba 0b04 	subs.w	fp, sl, r4
 8006bf2:	d00b      	beq.n	8006c0c <_vfiprintf_r+0xa4>
 8006bf4:	465b      	mov	r3, fp
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f7ff ffa2 	bl	8006b44 <__sfputs_r>
 8006c00:	3001      	adds	r0, #1
 8006c02:	f000 80a9 	beq.w	8006d58 <_vfiprintf_r+0x1f0>
 8006c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c08:	445a      	add	r2, fp
 8006c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80a1 	beq.w	8006d58 <_vfiprintf_r+0x1f0>
 8006c16:	2300      	movs	r3, #0
 8006c18:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c20:	f10a 0a01 	add.w	sl, sl, #1
 8006c24:	9304      	str	r3, [sp, #16]
 8006c26:	9307      	str	r3, [sp, #28]
 8006c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c2e:	4654      	mov	r4, sl
 8006c30:	2205      	movs	r2, #5
 8006c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c36:	4854      	ldr	r0, [pc, #336]	; (8006d88 <_vfiprintf_r+0x220>)
 8006c38:	f7f9 faea 	bl	8000210 <memchr>
 8006c3c:	9a04      	ldr	r2, [sp, #16]
 8006c3e:	b9d8      	cbnz	r0, 8006c78 <_vfiprintf_r+0x110>
 8006c40:	06d1      	lsls	r1, r2, #27
 8006c42:	bf44      	itt	mi
 8006c44:	2320      	movmi	r3, #32
 8006c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c4a:	0713      	lsls	r3, r2, #28
 8006c4c:	bf44      	itt	mi
 8006c4e:	232b      	movmi	r3, #43	; 0x2b
 8006c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c54:	f89a 3000 	ldrb.w	r3, [sl]
 8006c58:	2b2a      	cmp	r3, #42	; 0x2a
 8006c5a:	d015      	beq.n	8006c88 <_vfiprintf_r+0x120>
 8006c5c:	9a07      	ldr	r2, [sp, #28]
 8006c5e:	4654      	mov	r4, sl
 8006c60:	2000      	movs	r0, #0
 8006c62:	f04f 0c0a 	mov.w	ip, #10
 8006c66:	4621      	mov	r1, r4
 8006c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c6c:	3b30      	subs	r3, #48	; 0x30
 8006c6e:	2b09      	cmp	r3, #9
 8006c70:	d94d      	bls.n	8006d0e <_vfiprintf_r+0x1a6>
 8006c72:	b1b0      	cbz	r0, 8006ca2 <_vfiprintf_r+0x13a>
 8006c74:	9207      	str	r2, [sp, #28]
 8006c76:	e014      	b.n	8006ca2 <_vfiprintf_r+0x13a>
 8006c78:	eba0 0308 	sub.w	r3, r0, r8
 8006c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c80:	4313      	orrs	r3, r2
 8006c82:	9304      	str	r3, [sp, #16]
 8006c84:	46a2      	mov	sl, r4
 8006c86:	e7d2      	b.n	8006c2e <_vfiprintf_r+0xc6>
 8006c88:	9b03      	ldr	r3, [sp, #12]
 8006c8a:	1d19      	adds	r1, r3, #4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	9103      	str	r1, [sp, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	bfbb      	ittet	lt
 8006c94:	425b      	neglt	r3, r3
 8006c96:	f042 0202 	orrlt.w	r2, r2, #2
 8006c9a:	9307      	strge	r3, [sp, #28]
 8006c9c:	9307      	strlt	r3, [sp, #28]
 8006c9e:	bfb8      	it	lt
 8006ca0:	9204      	strlt	r2, [sp, #16]
 8006ca2:	7823      	ldrb	r3, [r4, #0]
 8006ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ca6:	d10c      	bne.n	8006cc2 <_vfiprintf_r+0x15a>
 8006ca8:	7863      	ldrb	r3, [r4, #1]
 8006caa:	2b2a      	cmp	r3, #42	; 0x2a
 8006cac:	d134      	bne.n	8006d18 <_vfiprintf_r+0x1b0>
 8006cae:	9b03      	ldr	r3, [sp, #12]
 8006cb0:	1d1a      	adds	r2, r3, #4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	9203      	str	r2, [sp, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	bfb8      	it	lt
 8006cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cbe:	3402      	adds	r4, #2
 8006cc0:	9305      	str	r3, [sp, #20]
 8006cc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006d98 <_vfiprintf_r+0x230>
 8006cc6:	7821      	ldrb	r1, [r4, #0]
 8006cc8:	2203      	movs	r2, #3
 8006cca:	4650      	mov	r0, sl
 8006ccc:	f7f9 faa0 	bl	8000210 <memchr>
 8006cd0:	b138      	cbz	r0, 8006ce2 <_vfiprintf_r+0x17a>
 8006cd2:	9b04      	ldr	r3, [sp, #16]
 8006cd4:	eba0 000a 	sub.w	r0, r0, sl
 8006cd8:	2240      	movs	r2, #64	; 0x40
 8006cda:	4082      	lsls	r2, r0
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	3401      	adds	r4, #1
 8006ce0:	9304      	str	r3, [sp, #16]
 8006ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce6:	4829      	ldr	r0, [pc, #164]	; (8006d8c <_vfiprintf_r+0x224>)
 8006ce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cec:	2206      	movs	r2, #6
 8006cee:	f7f9 fa8f 	bl	8000210 <memchr>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d03f      	beq.n	8006d76 <_vfiprintf_r+0x20e>
 8006cf6:	4b26      	ldr	r3, [pc, #152]	; (8006d90 <_vfiprintf_r+0x228>)
 8006cf8:	bb1b      	cbnz	r3, 8006d42 <_vfiprintf_r+0x1da>
 8006cfa:	9b03      	ldr	r3, [sp, #12]
 8006cfc:	3307      	adds	r3, #7
 8006cfe:	f023 0307 	bic.w	r3, r3, #7
 8006d02:	3308      	adds	r3, #8
 8006d04:	9303      	str	r3, [sp, #12]
 8006d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d08:	443b      	add	r3, r7
 8006d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0c:	e768      	b.n	8006be0 <_vfiprintf_r+0x78>
 8006d0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d12:	460c      	mov	r4, r1
 8006d14:	2001      	movs	r0, #1
 8006d16:	e7a6      	b.n	8006c66 <_vfiprintf_r+0xfe>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	3401      	adds	r4, #1
 8006d1c:	9305      	str	r3, [sp, #20]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	f04f 0c0a 	mov.w	ip, #10
 8006d24:	4620      	mov	r0, r4
 8006d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d2a:	3a30      	subs	r2, #48	; 0x30
 8006d2c:	2a09      	cmp	r2, #9
 8006d2e:	d903      	bls.n	8006d38 <_vfiprintf_r+0x1d0>
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d0c6      	beq.n	8006cc2 <_vfiprintf_r+0x15a>
 8006d34:	9105      	str	r1, [sp, #20]
 8006d36:	e7c4      	b.n	8006cc2 <_vfiprintf_r+0x15a>
 8006d38:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e7f0      	b.n	8006d24 <_vfiprintf_r+0x1bc>
 8006d42:	ab03      	add	r3, sp, #12
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	462a      	mov	r2, r5
 8006d48:	4b12      	ldr	r3, [pc, #72]	; (8006d94 <_vfiprintf_r+0x22c>)
 8006d4a:	a904      	add	r1, sp, #16
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	f7fd fb9d 	bl	800448c <_printf_float>
 8006d52:	4607      	mov	r7, r0
 8006d54:	1c78      	adds	r0, r7, #1
 8006d56:	d1d6      	bne.n	8006d06 <_vfiprintf_r+0x19e>
 8006d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d5a:	07d9      	lsls	r1, r3, #31
 8006d5c:	d405      	bmi.n	8006d6a <_vfiprintf_r+0x202>
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	059a      	lsls	r2, r3, #22
 8006d62:	d402      	bmi.n	8006d6a <_vfiprintf_r+0x202>
 8006d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d66:	f7fe f8fc 	bl	8004f62 <__retarget_lock_release_recursive>
 8006d6a:	89ab      	ldrh	r3, [r5, #12]
 8006d6c:	065b      	lsls	r3, r3, #25
 8006d6e:	f53f af1d 	bmi.w	8006bac <_vfiprintf_r+0x44>
 8006d72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d74:	e71c      	b.n	8006bb0 <_vfiprintf_r+0x48>
 8006d76:	ab03      	add	r3, sp, #12
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	462a      	mov	r2, r5
 8006d7c:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <_vfiprintf_r+0x22c>)
 8006d7e:	a904      	add	r1, sp, #16
 8006d80:	4630      	mov	r0, r6
 8006d82:	f7fd fe27 	bl	80049d4 <_printf_i>
 8006d86:	e7e4      	b.n	8006d52 <_vfiprintf_r+0x1ea>
 8006d88:	080072b4 	.word	0x080072b4
 8006d8c:	080072be 	.word	0x080072be
 8006d90:	0800448d 	.word	0x0800448d
 8006d94:	08006b45 	.word	0x08006b45
 8006d98:	080072ba 	.word	0x080072ba

08006d9c <__swbuf_r>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	460e      	mov	r6, r1
 8006da0:	4614      	mov	r4, r2
 8006da2:	4605      	mov	r5, r0
 8006da4:	b118      	cbz	r0, 8006dae <__swbuf_r+0x12>
 8006da6:	6a03      	ldr	r3, [r0, #32]
 8006da8:	b90b      	cbnz	r3, 8006dae <__swbuf_r+0x12>
 8006daa:	f7fd ffaf 	bl	8004d0c <__sinit>
 8006dae:	69a3      	ldr	r3, [r4, #24]
 8006db0:	60a3      	str	r3, [r4, #8]
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	071a      	lsls	r2, r3, #28
 8006db6:	d525      	bpl.n	8006e04 <__swbuf_r+0x68>
 8006db8:	6923      	ldr	r3, [r4, #16]
 8006dba:	b31b      	cbz	r3, 8006e04 <__swbuf_r+0x68>
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	6922      	ldr	r2, [r4, #16]
 8006dc0:	1a98      	subs	r0, r3, r2
 8006dc2:	6963      	ldr	r3, [r4, #20]
 8006dc4:	b2f6      	uxtb	r6, r6
 8006dc6:	4283      	cmp	r3, r0
 8006dc8:	4637      	mov	r7, r6
 8006dca:	dc04      	bgt.n	8006dd6 <__swbuf_r+0x3a>
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f7ff fd9e 	bl	8006910 <_fflush_r>
 8006dd4:	b9e0      	cbnz	r0, 8006e10 <__swbuf_r+0x74>
 8006dd6:	68a3      	ldr	r3, [r4, #8]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	60a3      	str	r3, [r4, #8]
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	6022      	str	r2, [r4, #0]
 8006de2:	701e      	strb	r6, [r3, #0]
 8006de4:	6962      	ldr	r2, [r4, #20]
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d004      	beq.n	8006df6 <__swbuf_r+0x5a>
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	07db      	lsls	r3, r3, #31
 8006df0:	d506      	bpl.n	8006e00 <__swbuf_r+0x64>
 8006df2:	2e0a      	cmp	r6, #10
 8006df4:	d104      	bne.n	8006e00 <__swbuf_r+0x64>
 8006df6:	4621      	mov	r1, r4
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f7ff fd89 	bl	8006910 <_fflush_r>
 8006dfe:	b938      	cbnz	r0, 8006e10 <__swbuf_r+0x74>
 8006e00:	4638      	mov	r0, r7
 8006e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e04:	4621      	mov	r1, r4
 8006e06:	4628      	mov	r0, r5
 8006e08:	f000 f806 	bl	8006e18 <__swsetup_r>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d0d5      	beq.n	8006dbc <__swbuf_r+0x20>
 8006e10:	f04f 37ff 	mov.w	r7, #4294967295
 8006e14:	e7f4      	b.n	8006e00 <__swbuf_r+0x64>
	...

08006e18 <__swsetup_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4b2a      	ldr	r3, [pc, #168]	; (8006ec4 <__swsetup_r+0xac>)
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	460c      	mov	r4, r1
 8006e22:	b118      	cbz	r0, 8006e2c <__swsetup_r+0x14>
 8006e24:	6a03      	ldr	r3, [r0, #32]
 8006e26:	b90b      	cbnz	r3, 8006e2c <__swsetup_r+0x14>
 8006e28:	f7fd ff70 	bl	8004d0c <__sinit>
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e32:	0718      	lsls	r0, r3, #28
 8006e34:	d422      	bmi.n	8006e7c <__swsetup_r+0x64>
 8006e36:	06d9      	lsls	r1, r3, #27
 8006e38:	d407      	bmi.n	8006e4a <__swsetup_r+0x32>
 8006e3a:	2309      	movs	r3, #9
 8006e3c:	602b      	str	r3, [r5, #0]
 8006e3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e42:	81a3      	strh	r3, [r4, #12]
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	e034      	b.n	8006eb4 <__swsetup_r+0x9c>
 8006e4a:	0758      	lsls	r0, r3, #29
 8006e4c:	d512      	bpl.n	8006e74 <__swsetup_r+0x5c>
 8006e4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e50:	b141      	cbz	r1, 8006e64 <__swsetup_r+0x4c>
 8006e52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e56:	4299      	cmp	r1, r3
 8006e58:	d002      	beq.n	8006e60 <__swsetup_r+0x48>
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f7fe fefe 	bl	8005c5c <_free_r>
 8006e60:	2300      	movs	r3, #0
 8006e62:	6363      	str	r3, [r4, #52]	; 0x34
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e6a:	81a3      	strh	r3, [r4, #12]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	6063      	str	r3, [r4, #4]
 8006e70:	6923      	ldr	r3, [r4, #16]
 8006e72:	6023      	str	r3, [r4, #0]
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	f043 0308 	orr.w	r3, r3, #8
 8006e7a:	81a3      	strh	r3, [r4, #12]
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	b94b      	cbnz	r3, 8006e94 <__swsetup_r+0x7c>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e8a:	d003      	beq.n	8006e94 <__swsetup_r+0x7c>
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 f884 	bl	8006f9c <__smakebuf_r>
 8006e94:	89a0      	ldrh	r0, [r4, #12]
 8006e96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e9a:	f010 0301 	ands.w	r3, r0, #1
 8006e9e:	d00a      	beq.n	8006eb6 <__swsetup_r+0x9e>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60a3      	str	r3, [r4, #8]
 8006ea4:	6963      	ldr	r3, [r4, #20]
 8006ea6:	425b      	negs	r3, r3
 8006ea8:	61a3      	str	r3, [r4, #24]
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	b943      	cbnz	r3, 8006ec0 <__swsetup_r+0xa8>
 8006eae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006eb2:	d1c4      	bne.n	8006e3e <__swsetup_r+0x26>
 8006eb4:	bd38      	pop	{r3, r4, r5, pc}
 8006eb6:	0781      	lsls	r1, r0, #30
 8006eb8:	bf58      	it	pl
 8006eba:	6963      	ldrpl	r3, [r4, #20]
 8006ebc:	60a3      	str	r3, [r4, #8]
 8006ebe:	e7f4      	b.n	8006eaa <__swsetup_r+0x92>
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	e7f7      	b.n	8006eb4 <__swsetup_r+0x9c>
 8006ec4:	20000064 	.word	0x20000064

08006ec8 <_raise_r>:
 8006ec8:	291f      	cmp	r1, #31
 8006eca:	b538      	push	{r3, r4, r5, lr}
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	d904      	bls.n	8006edc <_raise_r+0x14>
 8006ed2:	2316      	movs	r3, #22
 8006ed4:	6003      	str	r3, [r0, #0]
 8006ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006ede:	b112      	cbz	r2, 8006ee6 <_raise_r+0x1e>
 8006ee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ee4:	b94b      	cbnz	r3, 8006efa <_raise_r+0x32>
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 f830 	bl	8006f4c <_getpid_r>
 8006eec:	462a      	mov	r2, r5
 8006eee:	4601      	mov	r1, r0
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ef6:	f000 b817 	b.w	8006f28 <_kill_r>
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d00a      	beq.n	8006f14 <_raise_r+0x4c>
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	d103      	bne.n	8006f0a <_raise_r+0x42>
 8006f02:	2316      	movs	r3, #22
 8006f04:	6003      	str	r3, [r0, #0]
 8006f06:	2001      	movs	r0, #1
 8006f08:	e7e7      	b.n	8006eda <_raise_r+0x12>
 8006f0a:	2400      	movs	r4, #0
 8006f0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f10:	4628      	mov	r0, r5
 8006f12:	4798      	blx	r3
 8006f14:	2000      	movs	r0, #0
 8006f16:	e7e0      	b.n	8006eda <_raise_r+0x12>

08006f18 <raise>:
 8006f18:	4b02      	ldr	r3, [pc, #8]	; (8006f24 <raise+0xc>)
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	f7ff bfd3 	b.w	8006ec8 <_raise_r>
 8006f22:	bf00      	nop
 8006f24:	20000064 	.word	0x20000064

08006f28 <_kill_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d07      	ldr	r5, [pc, #28]	; (8006f48 <_kill_r+0x20>)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4608      	mov	r0, r1
 8006f32:	4611      	mov	r1, r2
 8006f34:	602b      	str	r3, [r5, #0]
 8006f36:	f7fa fb1b 	bl	8001570 <_kill>
 8006f3a:	1c43      	adds	r3, r0, #1
 8006f3c:	d102      	bne.n	8006f44 <_kill_r+0x1c>
 8006f3e:	682b      	ldr	r3, [r5, #0]
 8006f40:	b103      	cbz	r3, 8006f44 <_kill_r+0x1c>
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	bd38      	pop	{r3, r4, r5, pc}
 8006f46:	bf00      	nop
 8006f48:	200003c8 	.word	0x200003c8

08006f4c <_getpid_r>:
 8006f4c:	f7fa bb08 	b.w	8001560 <_getpid>

08006f50 <__swhatbuf_r>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	460c      	mov	r4, r1
 8006f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	b096      	sub	sp, #88	; 0x58
 8006f5c:	4615      	mov	r5, r2
 8006f5e:	461e      	mov	r6, r3
 8006f60:	da0d      	bge.n	8006f7e <__swhatbuf_r+0x2e>
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f68:	f04f 0100 	mov.w	r1, #0
 8006f6c:	bf0c      	ite	eq
 8006f6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006f72:	2340      	movne	r3, #64	; 0x40
 8006f74:	2000      	movs	r0, #0
 8006f76:	6031      	str	r1, [r6, #0]
 8006f78:	602b      	str	r3, [r5, #0]
 8006f7a:	b016      	add	sp, #88	; 0x58
 8006f7c:	bd70      	pop	{r4, r5, r6, pc}
 8006f7e:	466a      	mov	r2, sp
 8006f80:	f000 f848 	bl	8007014 <_fstat_r>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	dbec      	blt.n	8006f62 <__swhatbuf_r+0x12>
 8006f88:	9901      	ldr	r1, [sp, #4]
 8006f8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006f8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006f92:	4259      	negs	r1, r3
 8006f94:	4159      	adcs	r1, r3
 8006f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f9a:	e7eb      	b.n	8006f74 <__swhatbuf_r+0x24>

08006f9c <__smakebuf_r>:
 8006f9c:	898b      	ldrh	r3, [r1, #12]
 8006f9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fa0:	079d      	lsls	r5, r3, #30
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	d507      	bpl.n	8006fb8 <__smakebuf_r+0x1c>
 8006fa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	6163      	str	r3, [r4, #20]
 8006fb4:	b002      	add	sp, #8
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}
 8006fb8:	ab01      	add	r3, sp, #4
 8006fba:	466a      	mov	r2, sp
 8006fbc:	f7ff ffc8 	bl	8006f50 <__swhatbuf_r>
 8006fc0:	9900      	ldr	r1, [sp, #0]
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f7fe febd 	bl	8005d44 <_malloc_r>
 8006fca:	b948      	cbnz	r0, 8006fe0 <__smakebuf_r+0x44>
 8006fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fd0:	059a      	lsls	r2, r3, #22
 8006fd2:	d4ef      	bmi.n	8006fb4 <__smakebuf_r+0x18>
 8006fd4:	f023 0303 	bic.w	r3, r3, #3
 8006fd8:	f043 0302 	orr.w	r3, r3, #2
 8006fdc:	81a3      	strh	r3, [r4, #12]
 8006fde:	e7e3      	b.n	8006fa8 <__smakebuf_r+0xc>
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	6020      	str	r0, [r4, #0]
 8006fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe8:	81a3      	strh	r3, [r4, #12]
 8006fea:	9b00      	ldr	r3, [sp, #0]
 8006fec:	6163      	str	r3, [r4, #20]
 8006fee:	9b01      	ldr	r3, [sp, #4]
 8006ff0:	6120      	str	r0, [r4, #16]
 8006ff2:	b15b      	cbz	r3, 800700c <__smakebuf_r+0x70>
 8006ff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f000 f81d 	bl	8007038 <_isatty_r>
 8006ffe:	b128      	cbz	r0, 800700c <__smakebuf_r+0x70>
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	f043 0301 	orr.w	r3, r3, #1
 800700a:	81a3      	strh	r3, [r4, #12]
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	431d      	orrs	r5, r3
 8007010:	81a5      	strh	r5, [r4, #12]
 8007012:	e7cf      	b.n	8006fb4 <__smakebuf_r+0x18>

08007014 <_fstat_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d07      	ldr	r5, [pc, #28]	; (8007034 <_fstat_r+0x20>)
 8007018:	2300      	movs	r3, #0
 800701a:	4604      	mov	r4, r0
 800701c:	4608      	mov	r0, r1
 800701e:	4611      	mov	r1, r2
 8007020:	602b      	str	r3, [r5, #0]
 8007022:	f7fa fb04 	bl	800162e <_fstat>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	d102      	bne.n	8007030 <_fstat_r+0x1c>
 800702a:	682b      	ldr	r3, [r5, #0]
 800702c:	b103      	cbz	r3, 8007030 <_fstat_r+0x1c>
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	bd38      	pop	{r3, r4, r5, pc}
 8007032:	bf00      	nop
 8007034:	200003c8 	.word	0x200003c8

08007038 <_isatty_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d06      	ldr	r5, [pc, #24]	; (8007054 <_isatty_r+0x1c>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	f7fa fb03 	bl	800164e <_isatty>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_isatty_r+0x1a>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_isatty_r+0x1a>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	200003c8 	.word	0x200003c8

08007058 <_init>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr

08007064 <_fini>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr
