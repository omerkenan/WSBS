/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "i2c.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define MPU6050_ADDR 0xD0
#define MPU6050_ADDRES 0xD2


#define SMPLRT_DIV_REG 0x19
#define GYRO_CONFIG_REG 0x1B
#define ACCEL_CONFIG_REG 0x1C
#define ACCEL_XOUT_H_REG 0x3B
#define TEMP_OUT_H_REG 0x41
#define GYRO_XOUT_H_REG 0x43
#define PWR_MGMT_1_REG 0x6B
#define WHO_AM_I_REG 0x75
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint16_t ACCEL_XOUT, ACCEL_YOUT, ACCEL_ZOUT;

int16_t Accel_X_RAW = 0;
int16_t Accel_Y_RAW = 0;
int16_t Accel_Z_RAW = 0;

int16_t Gyro_X_RAW = 0;
int16_t Gyro_Y_RAW = 0;
int16_t Gyro_Z_RAW = 0;

int16_t Accel_X_RAW2 = 0;
int16_t Accel_Y_RAW2 = 0;
int16_t Accel_Z_RAW2 = 0;

int16_t Gyro_X_RAW2 = 0;
int16_t Gyro_Y_RAW2 = 0;
int16_t Gyro_Z_RAW2 = 0;
uint8_t data;
uint8_t Rec_Data[6], Rec_Data2[6];;
uint8_t buffer[2],tuffer[6],cuffer[6]; // ham gyro ve acc değerlerinin tutulduğu listeler
int16_t gyro_raw[3],acc_raw[3];        // anlamlandırılmış ham değerler
float gyro_cal1[3],gyro_cal2[3]; // kalibrasyon offsetlerini tutan liste
int16_t acc_total_vector1, acc_total_vector2;
float angle_pitch_gyro1, angle_roll_gyro1, angle_pitch_gyro2, angle_roll_gyro2;
float angle_pitch_acc1, angle_roll_acc1, angle_pitch_acc2, angle_roll_acc2, angle_pitch_acc_sum, angle_roll_acc_sum,acc_total_vector_sum;
float angle_pitch1,angle_roll1, angle_pitch2,angle_roll2;
int16_t raw_temp;
float temp;
int i,j;
float prevtime,prevtime1,time1,elapsedtime1,prevtime2,time2,elapsedtime2;
uint16_t flexADCvalue[5];
float Vflex[5];
float angles[5];
float Ax, Ay, Az, Gx, Gy, Gz;
float Ax2, Ay2, Az2, Gx2, Gy2, Gz2;
uint8_t Rx_data[1];
*Rx_data = 1;

float Rcc1 = 9.94;
float Rcc2 = 9.71;
float Rcc3 = 9.66;
float Rcc4 = 31.5;
float Rcc5 = 30.2;
float Rf1 = 0;
float Rf2 = 0;
float Rf3 = 0;
float Rf4 = 0;
float Rf5 = 0;
float Rf1b = 0;
float Rf2b = 0;
float Rf3b = 0;
float Rf4b = 0;
float Rf5b = 0;
float Rf1bb = 0;
float Rf2bb = 0;
float Rf3bb = 0;
float Rf4bb = 0;
float Rf5bb = 0;

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
ADC_ChannelConfTypeDef sConfig = {0};
void Read_ADC0(){
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.*/
	sConfig.Channel = ADC_CHANNEL_0;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
	HAL_ADC_Start(&hadc1);

	if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
		flexADCvalue[0] = HAL_ADC_GetValue(&hadc1);
		//Main aim is sending Vflex data from UART!
		Vflex[0] = 3.3 * flexADCvalue[0] / 4095;
	}

	HAL_ADC_Stop(&hadc1);
}
void Read_ADC1(){
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.*/
	sConfig.Channel = ADC_CHANNEL_1;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
	HAL_ADC_Start(&hadc1);

	if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
		flexADCvalue[1] = HAL_ADC_GetValue(&hadc1);
		//Main aim is sending Vflex data from UART!
		Vflex[1] = 3.3 * flexADCvalue[1] / 4095;
	}

	HAL_ADC_Stop(&hadc1);
}
void Read_ADC2(){
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.*/
	sConfig.Channel = ADC_CHANNEL_4;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
	HAL_ADC_Start(&hadc1);

	if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
		flexADCvalue[2] = HAL_ADC_GetValue(&hadc1);
		//Main aim is sending Vflex data from UART!
		Vflex[2] = 3.3 * flexADCvalue[2] / 4095;
	}

	HAL_ADC_Stop(&hadc1);
}
void Read_ADC3(){
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.*/
	sConfig.Channel = ADC_CHANNEL_8;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
	HAL_ADC_Start(&hadc1);

	if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
		flexADCvalue[3] = HAL_ADC_GetValue(&hadc1);
		//Main aim is sending Vflex data from UART!
		Vflex[3] = 3.3 * flexADCvalue[3] / 4095;
	}

	HAL_ADC_Stop(&hadc1);
}
void Read_ADC4(){
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.*/
	sConfig.Channel = ADC_CHANNEL_11;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
	HAL_ADC_Start(&hadc1);

	if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
		flexADCvalue[4] = HAL_ADC_GetValue(&hadc1);
		//Main aim is sending Vflex data from UART!
		Vflex[4] = 3.3 * flexADCvalue[4] / 4095;
	}

	HAL_ADC_Stop(&hadc1);
}
void floatToChar(float floatValue, char* charArray, int arraySize) {
  // Use snprintf to convert float to char array
  snprintf(charArray, arraySize, "%f", floatValue);
}
void MPU6050_Init (void)
{
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
	}


//	for(i=0; i<2000; i++)
//{
//	  	  prevtime2 = time2;
//	  	  time2 = HAL_GetTick();
//	  	  elapsedtime2=(time2-prevtime2)*1000;
//
//	  	  Rec_Data[0]=0x43;
//	  	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,Rec_Data,1,HAL_MAX_DELAY);
//	  	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,Rec_Data,6,HAL_MAX_DELAY);
//
//	  	  Gyro_X_RAW = (Rec_Data[0] << 8 | Rec_Data[1]);
//	  	  Gyro_Y_RAW = (Rec_Data[2] << 8 | Rec_Data[3]);
//	  	  Gyro_Z_RAW = (Rec_Data[4] << 8 | Rec_Data[5]);
//
//	  	  gyro_cal1[0] += Gyro_X_RAW;
//	  	  gyro_cal1[1] += Gyro_Y_RAW;
//	  	  gyro_cal1[2] += Gyro_Z_RAW;
//
//	  	  HAL_Delay(3);
//}

//	    gyro_cal1[0] /= 2000;
//	    gyro_cal1[1] /= 2000;
//	    gyro_cal1[2] /= 2000;
}
void flexAngle(float *result, float Rcc,float Rfb, float Vf) {
    float Rf = (Rcc * Vf) / (3.3 - Vf);
    float change = ((Rf - Rfb) / Rfb) * 100;
    float a = -0.0006;
    float b = 0.7623;
    float c = 4.4311;
    *result = a * change * change + b * change + c;
}

void flexAngleShort(float *result, float Rcc,float Rfb, float Vf) {
    float Rf = (Rcc * Vf) / (3.3 - Vf);
    float change = ((Rf - Rfb) / Rfb) * 100;
    float a = 0.0018;
    float b = 0.8698;
    float c = 1.0836;
    *result = a * change * change + b * change + c;
}

void MPU6050_Init_2 (void)
{
	uint8_t check1;
	uint8_t Data1;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDRES,WHO_AM_I_REG,1, &check1, 1, 1000);

	if (check1 == 104)  // 0x68 will be returned by the sensor if everything goes well
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data1 = 0;
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRES, PWR_MGMT_1_REG, 1,&Data1, 1, 1000);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data1 = 0x07;
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRES, SMPLRT_DIV_REG, 1, &Data1, 1, 1000);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data1 = 0x00;
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRES, ACCEL_CONFIG_REG, 1, &Data1, 1, 1000);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data1 = 0x00;
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRES, GYRO_CONFIG_REG, 1, &Data1, 1, 1000);
	}

//	for(j=0; j<2000; j++)
//	    {
//	  	  prevtime2 = time2;
//	  	  time2 = HAL_GetTick();
//	  	  elapsedtime2=(time2-prevtime2)*1000;
//
//	  	  Rec_Data2[0]=0x43;
//	  	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,Rec_Data2,1,HAL_MAX_DELAY);
//	  	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,Rec_Data2,6,HAL_MAX_DELAY);
//
//	  	  Gyro_X_RAW2 = (Rec_Data2[0] << 8 | Rec_Data2[1]);
//	  	  Gyro_Y_RAW2 = (Rec_Data2[2] << 8 | Rec_Data2[3]);
//	  	  Gyro_Z_RAW2 = (Rec_Data2[4] << 8 | Rec_Data2[5]);
//
//	  	  gyro_cal2[0] += Gyro_X_RAW;
//	  	  gyro_cal2[1] += Gyro_Y_RAW;
//	  	  gyro_cal2[2] += Gyro_Z_RAW;
//
//	  	  HAL_Delay(3);
//
//	    }
//
//	    gyro_cal2[0] /= 2000;
//	    gyro_cal2[1] /= 2000;
//	    gyro_cal2[2] /= 2000;
}


void MPU_6050_Read_Accel(void){

	uint8_t Read_Acc[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Read_Acc, 6, 100);
	Accel_X_RAW = (uint16_t)((Read_Acc[0] << 8 )| (Read_Acc[1]));
	Accel_Y_RAW = (uint16_t)((Read_Acc[2] << 8 )| (Read_Acc[3]));
	Accel_Z_RAW = (uint16_t)((Read_Acc[4] << 8 )| (Read_Acc[5]));

	Ax = Accel_X_RAW/16384.0;
	Ay = Accel_Y_RAW/16384.0;
	Az = Accel_Z_RAW/16384.0;

	acc_total_vector1 = sqrt((Accel_X_RAW*Accel_X_RAW)+(Accel_Y_RAW*Accel_Y_RAW)+(Accel_Z_RAW*Accel_Z_RAW));

	angle_pitch_acc1 = asin((float)Accel_Y_RAW/acc_total_vector1)* 57.296;
    angle_roll_acc1 = asin((float)Accel_X_RAW/acc_total_vector1)* -57.296;

    angle_pitch_acc1 -= 0;//0.05;
    angle_roll_acc1 -= 0;//-1.32;

    angle_roll1=atan(Ay/sqrt(Ax*Ax+Az*Az))*1/(3.142/180);
    angle_pitch1=-atan(Ax/sqrt(Ay*Ay+Az*Az))*1/(3.142/180);

}



	void MPU6050_Read_Gyro (void)
	{
		uint8_t Rec_Data[6];

		// Read 6 BYTES of data starting from GYRO_XOUT_H register

		HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);

		Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
		Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
		Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);

		/*** convert the RAW values into dps (°/s)
		     we have to divide according to the Full scale value set in FS_SEL
		     I have configured FS_SEL = 0. So I am dividing by 131.0
		     for more details check GYRO_CONFIG Register              ****/

//		Gx = Gyro_X_RAW/131.0;
//		Gy = Gyro_Y_RAW/131.0;
//		Gz = Gyro_Z_RAW/131.0;

		Gyro_X_RAW -= gyro_cal1[0];
		Gyro_Y_RAW -= gyro_cal1[1];
		Gyro_Z_RAW -= gyro_cal1[2];

		angle_pitch_gyro1 += Gyro_X_RAW * 0.0000611;
	    angle_roll_gyro1 += Gyro_Y_RAW * 0.0000611;

	    angle_pitch_gyro1 += angle_roll_gyro1 * sin(Gyro_Z_RAW  * 0.000001066);
	    angle_roll_gyro1 -= angle_pitch_gyro1 * sin(Gyro_Z_RAW  * 0.000001066);
	}



void MPU_6050_Read_Accel_2(void){

	uint8_t Read_Acc2[6];
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDRES, ACCEL_XOUT_H_REG, 1, Read_Acc2, 6, 100);
	Accel_X_RAW2 = (uint16_t)((Read_Acc2[0] << 8 )| (Read_Acc2[1]));
	Accel_Y_RAW2 = (uint16_t)((Read_Acc2[2] << 8 )| (Read_Acc2[3]));
	Accel_Z_RAW2 = (uint16_t)((Read_Acc2[4] << 8 )| (Read_Acc2[5]));

	Ax2 = Accel_X_RAW2/16384.0;
	Ay2 = Accel_Y_RAW2/16384.0;
	Az2 = Accel_Z_RAW2/16384.0;

	acc_total_vector2 = sqrt((Accel_X_RAW2*Accel_X_RAW2)+(Accel_Y_RAW2*Accel_Y_RAW2)+(Accel_Z_RAW2*Accel_Z_RAW2));

		angle_pitch_acc2 = asin((float)Accel_Y_RAW2/acc_total_vector2)* 57.296;
	    angle_roll_acc2 = asin((float)Accel_X_RAW2/acc_total_vector2)* -57.296;

	    angle_pitch_acc2 -= 0;//0.05;
	    angle_roll_acc2 -= 0;//-1.32;

	    angle_roll2=atan(Ay2/sqrt(Ax2*Ax2+Az2*Az2))*1/(3.142/180);
	    angle_pitch2=-atan(Ax2/sqrt(Ay2*Ay2+Az2*Az2))*1/(3.142/180);
}



	void MPU6050_Read_Gyro_2(void)
	{
		uint8_t Rec_Data2[6];

		// Read 6 BYTES of data starting from GYRO_XOUT_H register

		HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDRES, GYRO_XOUT_H_REG, 1, Rec_Data2, 6, 1000);

		Gyro_X_RAW2 = (int16_t)(Rec_Data2[0] << 8 | Rec_Data2 [1]);
		Gyro_Y_RAW2 = (int16_t)(Rec_Data2[2] << 8 | Rec_Data2 [3]);
		Gyro_Z_RAW2 = (int16_t)(Rec_Data2[4] << 8 | Rec_Data2 [5]);

		/*** convert the RAW values into dps (°/s)
		     we have to divide according to the Full scale value set in FS_SEL
		     I have configured FS_SEL = 0. So I am dividing by 131.0
		     for more details check GYRO_CONFIG Register              ****/

//		Gx2 = Gyro_X_RAW2/131.0;
//		Gy2 = Gyro_Y_RAW2/131.0;
//		Gz2 = Gyro_Z_RAW2/131.0;

		Gyro_X_RAW2 -= gyro_cal2[0];
		Gyro_Y_RAW2 -= gyro_cal2[1];
		Gyro_Z_RAW2 -= gyro_cal2[2];

		angle_pitch_gyro2 += Gyro_X_RAW2 * 0.0000611;
		angle_roll_gyro2 += Gyro_Y_RAW2 * 0.0000611;

        angle_pitch_gyro2 += angle_roll_gyro1 * sin(Gyro_Z_RAW2 * 0.000001066);
        angle_roll_gyro2 -= angle_pitch_gyro1 * sin(Gyro_Z_RAW2 * 0.000001066);
	}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_I2C2_Init();
  MX_USART1_UART_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
  MPU6050_Init_2();

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  prevtime1 = time1;
//	  time1 = HAL_GetTick();
//	  elapsedtime1=(time1-prevtime1)*1000;
	  /* UART RECİEVE */
	  HAL_UART_Receive(&huart1, Rx_data, 4, 100);

	  /* Transmit Config */
	  char pitch1[] = "                  ";
	  char pitch2[] = "                  ";
	  char roll1[] = "                  ";
	  char roll2[] = "                  ";
	  char sep[] = "|";


	  /* MPU Acceleration */
	  MPU_6050_Read_Accel();
	  MPU6050_Read_Gyro();
	  MPU_6050_Read_Accel_2();
	  MPU6050_Read_Gyro_2();
	  floatToChar(angle_pitch1, pitch1, sizeof(pitch1));
	  floatToChar(angle_pitch2, pitch2, sizeof(pitch2));
	  floatToChar(angle_roll1, roll1, sizeof(roll1));
	  floatToChar(angle_roll2, roll2, sizeof(roll2));


	  /* Flex Analog Read */
	  Read_ADC0();
	  Read_ADC1();
	  Read_ADC2();
	  Read_ADC3();
	  Read_ADC4();
	  char analog1[] = "                  ";
	  floatToChar(Vflex[0], analog1, sizeof(analog1));
	  char analog2[] = "                  ";
	  floatToChar(Vflex[1], analog2, sizeof(analog2));
	  char analog3[] = "                  ";
	  floatToChar(Vflex[2], analog3, sizeof(analog3));
	  char analog4[] = "                  ";
	  floatToChar(Vflex[3], analog4, sizeof(analog4));
	  char analog5[] = "                  ";
	  floatToChar(Vflex[4], analog5, sizeof(analog5));


	  /* Calibration */
	  if(*Rx_data == 6){
	  	for(i=0; i<3000; i++){
	  		Read_ADC0();
	  		Read_ADC1();
	  		Read_ADC2();
	  		Read_ADC3();
	  		Read_ADC4();
	  		Rf1 = (Rcc1 * Vflex[0]) / (3.3 - Vflex[0]);
	  		Rf2 = (Rcc2 * Vflex[1]) / (3.3 - Vflex[1]);
	  		Rf3 = (Rcc3 * Vflex[2]) / (3.3 - Vflex[2]);
	  		Rf4 = (Rcc4 * Vflex[3]) / (3.3 - Vflex[3]);
	  		Rf5 = (Rcc5 * Vflex[4]) / (3.3 - Vflex[4]);
	  		Rf1b = Rf1b + Rf1;
	  		Rf2b = Rf2b + Rf2;
	  		Rf3b = Rf3b + Rf3;
	  		Rf4b = Rf4b + Rf4;
	  		Rf5b = Rf5b + Rf5;
	  	}
	  	HAL_Delay(100);
	  	Rf1bb = Rf1b/3000;
	  	Rf2bb = Rf2b/3000;
	  	Rf3bb = Rf3b/3000;
	  	Rf4bb = Rf4b/3000;
	  	Rf5bb = Rf5b/3000;
	  	*Rx_data = 0;
	  }
	  else if()


	  /* Angle Calculation for Flex Sensors */
	  flexAngle(&angles[0],Rcc1,Rf1bb, Vflex[0]);
	  flexAngle(&angles[1],Rcc2,Rf2bb, Vflex[1]);
	  flexAngle(&angles[2],Rcc3,Rf3bb, Vflex[2]);
	  flexAngleShort(&angles[3],Rcc4,Rf4bb, Vflex[3]);
	  flexAngleShort(&angles[4],Rcc5,Rf5bb, Vflex[4]);

	  /* Angle Configuration */
	  char angle1[] = "                  ";
	  floatToChar(angles[0], angle1, sizeof(angle1));
	  char angle2[] = "                  ";
	  floatToChar(angles[1], angle2, sizeof(angle2));
	  char angle3[] = "                  ";
	  floatToChar(angles[2], angle3, sizeof(angle3));
	  char angle4[] = "                  ";
	  floatToChar(angles[3], angle4, sizeof(angle4));
	  char angle5[] = "                  ";
	  floatToChar(angles[4], angle5, sizeof(angle5));

	   /* UART Transmit */
	  HAL_UART_Transmit(&huart1, pitch1, sizeof(pitch1), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, pitch2, sizeof(pitch2), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, roll1, sizeof(roll1), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, roll2, sizeof(roll2), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, analog1, sizeof(analog1), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, angle1, sizeof(angle1), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, analog2, sizeof(analog2), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, angle2, sizeof(angle2), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, analog3, sizeof(analog3), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, angle3, sizeof(angle3), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, analog4, sizeof(analog4), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, angle4, sizeof(angle4), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, analog5, sizeof(analog5), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart1, angle5, sizeof(angle5), HAL_MAX_DELAY);


	  HAL_Delay(1000);

//	  angle_pitch1 = angle_pitch_gyro1 * 0.9996 + angle_pitch_acc1 * 0.0004;
//	  angle_roll1 = angle_roll_gyro1 * 0.9996 + angle_roll_acc1 * 0.0004;
//	  angle_pitch2 = angle_pitch_gyro2 * 0.9996 + angle_pitch_acc2 * 0.0004;
//	  angle_roll2 = angle_roll_gyro2 * 0.9996 + angle_roll_acc2 * 0.0004;
//
//	  while((HAL_GetTick() - prevtime)*1000 < 4000);
//	  prevtime = HAL_GetTick();

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
