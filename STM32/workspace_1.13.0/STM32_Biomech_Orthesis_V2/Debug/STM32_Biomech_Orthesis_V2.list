
STM32_Biomech_Orthesis_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c908  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800cad8  0800cad8  0001cad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d148  0800d148  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d148  0800d148  0001d148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d150  0800d150  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d150  0800d150  0001d150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d154  0800d154  0001d154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d158  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  200001f8  0800d350  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  0800d350  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df51  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002336  00000000  00000000  0002e1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  000304f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000939  00000000  00000000  000310d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024178  00000000  00000000  00031a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116a7  00000000  00000000  00055b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9b98  00000000  00000000  00067230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004930  00000000  00000000  00140dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001456f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cac0 	.word	0x0800cac0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800cac0 	.word	0x0800cac0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001042:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <MX_ADC1_Init+0x108>)
 8001044:	4a3d      	ldr	r2, [pc, #244]	; (800113c <MX_ADC1_Init+0x10c>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001048:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <MX_ADC1_Init+0x108>)
 800104a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001050:	4b39      	ldr	r3, [pc, #228]	; (8001138 <MX_ADC1_Init+0x108>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001056:	4b38      	ldr	r3, [pc, #224]	; (8001138 <MX_ADC1_Init+0x108>)
 8001058:	2201      	movs	r2, #1
 800105a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <MX_ADC1_Init+0x108>)
 800105e:	2201      	movs	r2, #1
 8001060:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001062:	4b35      	ldr	r3, [pc, #212]	; (8001138 <MX_ADC1_Init+0x108>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	4b33      	ldr	r3, [pc, #204]	; (8001138 <MX_ADC1_Init+0x108>)
 800106c:	2200      	movs	r2, #0
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <MX_ADC1_Init+0x108>)
 8001072:	4a33      	ldr	r2, [pc, #204]	; (8001140 <MX_ADC1_Init+0x110>)
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b30      	ldr	r3, [pc, #192]	; (8001138 <MX_ADC1_Init+0x108>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800107c:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <MX_ADC1_Init+0x108>)
 800107e:	2205      	movs	r2, #5
 8001080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <MX_ADC1_Init+0x108>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <MX_ADC1_Init+0x108>)
 800108c:	2201      	movs	r2, #1
 800108e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001090:	4829      	ldr	r0, [pc, #164]	; (8001138 <MX_ADC1_Init+0x108>)
 8001092:	f002 fb3b 	bl	800370c <HAL_ADC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800109c:	f002 f876 	bl	800318c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010a8:	2303      	movs	r3, #3
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4821      	ldr	r0, [pc, #132]	; (8001138 <MX_ADC1_Init+0x108>)
 80010b2:	f002 fd0d 	bl	8003ad0 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010bc:	f002 f866 	bl	800318c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	481a      	ldr	r0, [pc, #104]	; (8001138 <MX_ADC1_Init+0x108>)
 80010ce:	f002 fcff 	bl	8003ad0 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010d8:	f002 f858 	bl	800318c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010dc:	2304      	movs	r3, #4
 80010de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010e0:	2303      	movs	r3, #3
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <MX_ADC1_Init+0x108>)
 80010ea:	f002 fcf1 	bl	8003ad0 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010f4:	f002 f84a 	bl	800318c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010f8:	2308      	movs	r3, #8
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010fc:	2304      	movs	r3, #4
 80010fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_ADC1_Init+0x108>)
 8001106:	f002 fce3 	bl	8003ad0 <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001110:	f002 f83c 	bl	800318c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001114:	230b      	movs	r3, #11
 8001116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001118:	2305      	movs	r3, #5
 800111a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_ADC1_Init+0x108>)
 8001122:	f002 fcd5 	bl	8003ad0 <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800112c:	f002 f82e 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000214 	.word	0x20000214
 800113c:	40012000 	.word	0x40012000
 8001140:	0f000001 	.word	0x0f000001

08001144 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a31      	ldr	r2, [pc, #196]	; (8001228 <HAL_ADC_MspInit+0xe4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d15b      	bne.n	800121e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
 800116a:	4b30      	ldr	r3, [pc, #192]	; (800122c <HAL_ADC_MspInit+0xe8>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a2f      	ldr	r2, [pc, #188]	; (800122c <HAL_ADC_MspInit+0xe8>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <HAL_ADC_MspInit+0xe8>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117e:	61bb      	str	r3, [r7, #24]
 8001180:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <HAL_ADC_MspInit+0xe8>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a28      	ldr	r2, [pc, #160]	; (800122c <HAL_ADC_MspInit+0xe8>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_ADC_MspInit+0xe8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <HAL_ADC_MspInit+0xe8>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a21      	ldr	r2, [pc, #132]	; (800122c <HAL_ADC_MspInit+0xe8>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <HAL_ADC_MspInit+0xe8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_ADC_MspInit+0xe8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a1a      	ldr	r2, [pc, #104]	; (800122c <HAL_ADC_MspInit+0xe8>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_ADC_MspInit+0xe8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4811      	ldr	r0, [pc, #68]	; (8001230 <HAL_ADC_MspInit+0xec>)
 80011ea:	f002 ff85 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80011ee:	2313      	movs	r3, #19
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f2:	2303      	movs	r3, #3
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <HAL_ADC_MspInit+0xf0>)
 8001202:	f002 ff79 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001206:	2301      	movs	r3, #1
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <HAL_ADC_MspInit+0xf4>)
 800121a:	f002 ff6d 	bl	80040f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800121e:	bf00      	nop
 8001220:	3730      	adds	r7, #48	; 0x30
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40012000 	.word	0x40012000
 800122c:	40023800 	.word	0x40023800
 8001230:	40020800 	.word	0x40020800
 8001234:	40020000 	.word	0x40020000
 8001238:	40020400 	.word	0x40020400

0800123c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <MX_GPIO_Init+0xd0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a2c      	ldr	r2, [pc, #176]	; (800130c <MX_GPIO_Init+0xd0>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_GPIO_Init+0xd0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <MX_GPIO_Init+0xd0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a25      	ldr	r2, [pc, #148]	; (800130c <MX_GPIO_Init+0xd0>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <MX_GPIO_Init+0xd0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_GPIO_Init+0xd0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <MX_GPIO_Init+0xd0>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_GPIO_Init+0xd0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_GPIO_Init+0xd0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a17      	ldr	r2, [pc, #92]	; (800130c <MX_GPIO_Init+0xd0>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_GPIO_Init+0xd0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2120      	movs	r1, #32
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <MX_GPIO_Init+0xd4>)
 80012c8:	f003 f8aa 	bl	8004420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_GPIO_Init+0xd8>)
 80012e4:	f002 ff08 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012e8:	2320      	movs	r3, #32
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_GPIO_Init+0xd4>)
 8001300:	f002 fefa 	bl	80040f8 <HAL_GPIO_Init>

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020800 	.word	0x40020800

08001318 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_I2C1_Init+0x50>)
 800131e:	4a13      	ldr	r2, [pc, #76]	; (800136c <MX_I2C1_Init+0x54>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_I2C1_Init+0x50>)
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <MX_I2C1_Init+0x58>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_I2C1_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_I2C1_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_I2C1_Init+0x50>)
 8001336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_I2C1_Init+0x50>)
 8001356:	f003 f87d 	bl	8004454 <HAL_I2C_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001360:	f001 ff14 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	2000025c 	.word	0x2000025c
 800136c:	40005400 	.word	0x40005400
 8001370:	00061a80 	.word	0x00061a80

08001374 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_I2C2_Init+0x50>)
 800137a:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <MX_I2C2_Init+0x54>)
 800137c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_I2C2_Init+0x50>)
 8001380:	4a12      	ldr	r2, [pc, #72]	; (80013cc <MX_I2C2_Init+0x58>)
 8001382:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_I2C2_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_I2C2_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_I2C2_Init+0x50>)
 8001392:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001396:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <MX_I2C2_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_I2C2_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <MX_I2C2_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_I2C2_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <MX_I2C2_Init+0x50>)
 80013b2:	f003 f84f 	bl	8004454 <HAL_I2C_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013bc:	f001 fee6 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200002b0 	.word	0x200002b0
 80013c8:	40005800 	.word	0x40005800
 80013cc:	00061a80 	.word	0x00061a80

080013d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a42      	ldr	r2, [pc, #264]	; (80014f8 <HAL_I2C_MspInit+0x128>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12c      	bne.n	800144c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800140e:	23c0      	movs	r3, #192	; 0xc0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001412:	2312      	movs	r3, #18
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800141e:	2304      	movs	r3, #4
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	4835      	ldr	r0, [pc, #212]	; (8001500 <HAL_I2C_MspInit+0x130>)
 800142a:	f002 fe65 	bl	80040f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	4b32      	ldr	r3, [pc, #200]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a31      	ldr	r2, [pc, #196]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 8001438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800144a:	e050      	b.n	80014ee <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a2c      	ldr	r2, [pc, #176]	; (8001504 <HAL_I2C_MspInit+0x134>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d14b      	bne.n	80014ee <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a27      	ldr	r2, [pc, #156]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a20      	ldr	r2, [pc, #128]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800148e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001494:	2312      	movs	r3, #18
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014a0:	2304      	movs	r3, #4
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4815      	ldr	r0, [pc, #84]	; (8001500 <HAL_I2C_MspInit+0x130>)
 80014ac:	f002 fe24 	bl	80040f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b6:	2312      	movs	r3, #18
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014c2:	2304      	movs	r3, #4
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	480e      	ldr	r0, [pc, #56]	; (8001508 <HAL_I2C_MspInit+0x138>)
 80014ce:	f002 fe13 	bl	80040f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 80014dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_I2C_MspInit+0x12c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
}
 80014ee:	bf00      	nop
 80014f0:	3730      	adds	r7, #48	; 0x30
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40005400 	.word	0x40005400
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020400 	.word	0x40020400
 8001504:	40005800 	.word	0x40005800
 8001508:	40020800 	.word	0x40020800
 800150c:	00000000 	.word	0x00000000

08001510 <Read_ADC0>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
ADC_ChannelConfTypeDef sConfig = {0};
void Read_ADC0(){
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.*/
	sConfig.Channel = ADC_CHANNEL_0;
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <Read_ADC0+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <Read_ADC0+0x98>)
 800151c:	2201      	movs	r2, #1
 800151e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <Read_ADC0+0x98>)
 8001522:	2203      	movs	r2, #3
 8001524:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001526:	4920      	ldr	r1, [pc, #128]	; (80015a8 <Read_ADC0+0x98>)
 8001528:	4820      	ldr	r0, [pc, #128]	; (80015ac <Read_ADC0+0x9c>)
 800152a:	f002 fad1 	bl	8003ad0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 800152e:	481f      	ldr	r0, [pc, #124]	; (80015ac <Read_ADC0+0x9c>)
 8001530:	f002 f930 	bl	8003794 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
 8001534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001538:	481c      	ldr	r0, [pc, #112]	; (80015ac <Read_ADC0+0x9c>)
 800153a:	f002 fa30 	bl	800399e <HAL_ADC_PollForConversion>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d122      	bne.n	800158a <Read_ADC0+0x7a>
		flexADCvalue[0] = HAL_ADC_GetValue(&hadc1);
 8001544:	4819      	ldr	r0, [pc, #100]	; (80015ac <Read_ADC0+0x9c>)
 8001546:	f002 fab5 	bl	8003ab4 <HAL_ADC_GetValue>
 800154a:	4603      	mov	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <Read_ADC0+0xa0>)
 8001550:	801a      	strh	r2, [r3, #0]
		//Main aim is sending Vflex data from UART!
		Vflex[0] = 3.3 * flexADCvalue[0] / 4095;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <Read_ADC0+0xa0>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f804 	bl	8000564 <__aeabi_i2d>
 800155c:	a30e      	add	r3, pc, #56	; (adr r3, 8001598 <Read_ADC0+0x88>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f869 	bl	8000638 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	a30c      	add	r3, pc, #48	; (adr r3, 80015a0 <Read_ADC0+0x90>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f98a 	bl	800088c <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fb52 	bl	8000c28 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <Read_ADC0+0xa4>)
 8001588:	6013      	str	r3, [r2, #0]
	}

	HAL_ADC_Stop(&hadc1);
 800158a:	4808      	ldr	r0, [pc, #32]	; (80015ac <Read_ADC0+0x9c>)
 800158c:	f002 f9d4 	bl	8003938 <HAL_ADC_Stop>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	f3af 8000 	nop.w
 8001598:	66666666 	.word	0x66666666
 800159c:	400a6666 	.word	0x400a6666
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40affe00 	.word	0x40affe00
 80015a8:	200003f8 	.word	0x200003f8
 80015ac:	20000214 	.word	0x20000214
 80015b0:	2000036c 	.word	0x2000036c
 80015b4:	20000378 	.word	0x20000378

080015b8 <Read_ADC1>:
void Read_ADC1(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.*/
	sConfig.Channel = ADC_CHANNEL_1;
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <Read_ADC1+0x98>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <Read_ADC1+0x98>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <Read_ADC1+0x98>)
 80015ca:	2203      	movs	r2, #3
 80015cc:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80015ce:	4920      	ldr	r1, [pc, #128]	; (8001650 <Read_ADC1+0x98>)
 80015d0:	4820      	ldr	r0, [pc, #128]	; (8001654 <Read_ADC1+0x9c>)
 80015d2:	f002 fa7d 	bl	8003ad0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80015d6:	481f      	ldr	r0, [pc, #124]	; (8001654 <Read_ADC1+0x9c>)
 80015d8:	f002 f8dc 	bl	8003794 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
 80015dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015e0:	481c      	ldr	r0, [pc, #112]	; (8001654 <Read_ADC1+0x9c>)
 80015e2:	f002 f9dc 	bl	800399e <HAL_ADC_PollForConversion>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d122      	bne.n	8001632 <Read_ADC1+0x7a>
		flexADCvalue[1] = HAL_ADC_GetValue(&hadc1);
 80015ec:	4819      	ldr	r0, [pc, #100]	; (8001654 <Read_ADC1+0x9c>)
 80015ee:	f002 fa61 	bl	8003ab4 <HAL_ADC_GetValue>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <Read_ADC1+0xa0>)
 80015f8:	805a      	strh	r2, [r3, #2]
		//Main aim is sending Vflex data from UART!
		Vflex[1] = 3.3 * flexADCvalue[1] / 4095;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <Read_ADC1+0xa0>)
 80015fc:	885b      	ldrh	r3, [r3, #2]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffb0 	bl	8000564 <__aeabi_i2d>
 8001604:	a30e      	add	r3, pc, #56	; (adr r3, 8001640 <Read_ADC1+0x88>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7ff f815 	bl	8000638 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	a30c      	add	r3, pc, #48	; (adr r3, 8001648 <Read_ADC1+0x90>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7ff f936 	bl	800088c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fafe 	bl	8000c28 <__aeabi_d2f>
 800162c:	4603      	mov	r3, r0
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <Read_ADC1+0xa4>)
 8001630:	6053      	str	r3, [r2, #4]
	}

	HAL_ADC_Stop(&hadc1);
 8001632:	4808      	ldr	r0, [pc, #32]	; (8001654 <Read_ADC1+0x9c>)
 8001634:	f002 f980 	bl	8003938 <HAL_ADC_Stop>
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	f3af 8000 	nop.w
 8001640:	66666666 	.word	0x66666666
 8001644:	400a6666 	.word	0x400a6666
 8001648:	00000000 	.word	0x00000000
 800164c:	40affe00 	.word	0x40affe00
 8001650:	200003f8 	.word	0x200003f8
 8001654:	20000214 	.word	0x20000214
 8001658:	2000036c 	.word	0x2000036c
 800165c:	20000378 	.word	0x20000378

08001660 <Read_ADC2>:
void Read_ADC2(){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.*/
	sConfig.Channel = ADC_CHANNEL_4;
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <Read_ADC2+0x98>)
 8001666:	2204      	movs	r2, #4
 8001668:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <Read_ADC2+0x98>)
 800166c:	2201      	movs	r2, #1
 800166e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <Read_ADC2+0x98>)
 8001672:	2203      	movs	r2, #3
 8001674:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001676:	4920      	ldr	r1, [pc, #128]	; (80016f8 <Read_ADC2+0x98>)
 8001678:	4820      	ldr	r0, [pc, #128]	; (80016fc <Read_ADC2+0x9c>)
 800167a:	f002 fa29 	bl	8003ad0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 800167e:	481f      	ldr	r0, [pc, #124]	; (80016fc <Read_ADC2+0x9c>)
 8001680:	f002 f888 	bl	8003794 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
 8001684:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001688:	481c      	ldr	r0, [pc, #112]	; (80016fc <Read_ADC2+0x9c>)
 800168a:	f002 f988 	bl	800399e <HAL_ADC_PollForConversion>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d122      	bne.n	80016da <Read_ADC2+0x7a>
		flexADCvalue[2] = HAL_ADC_GetValue(&hadc1);
 8001694:	4819      	ldr	r0, [pc, #100]	; (80016fc <Read_ADC2+0x9c>)
 8001696:	f002 fa0d 	bl	8003ab4 <HAL_ADC_GetValue>
 800169a:	4603      	mov	r3, r0
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <Read_ADC2+0xa0>)
 80016a0:	809a      	strh	r2, [r3, #4]
		//Main aim is sending Vflex data from UART!
		Vflex[2] = 3.3 * flexADCvalue[2] / 4095;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <Read_ADC2+0xa0>)
 80016a4:	889b      	ldrh	r3, [r3, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff5c 	bl	8000564 <__aeabi_i2d>
 80016ac:	a30e      	add	r3, pc, #56	; (adr r3, 80016e8 <Read_ADC2+0x88>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7fe ffc1 	bl	8000638 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	a30c      	add	r3, pc, #48	; (adr r3, 80016f0 <Read_ADC2+0x90>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7ff f8e2 	bl	800088c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff faaa 	bl	8000c28 <__aeabi_d2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <Read_ADC2+0xa4>)
 80016d8:	6093      	str	r3, [r2, #8]
	}

	HAL_ADC_Stop(&hadc1);
 80016da:	4808      	ldr	r0, [pc, #32]	; (80016fc <Read_ADC2+0x9c>)
 80016dc:	f002 f92c 	bl	8003938 <HAL_ADC_Stop>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	f3af 8000 	nop.w
 80016e8:	66666666 	.word	0x66666666
 80016ec:	400a6666 	.word	0x400a6666
 80016f0:	00000000 	.word	0x00000000
 80016f4:	40affe00 	.word	0x40affe00
 80016f8:	200003f8 	.word	0x200003f8
 80016fc:	20000214 	.word	0x20000214
 8001700:	2000036c 	.word	0x2000036c
 8001704:	20000378 	.word	0x20000378

08001708 <Read_ADC3>:
void Read_ADC3(){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.*/
	sConfig.Channel = ADC_CHANNEL_8;
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <Read_ADC3+0x98>)
 800170e:	2208      	movs	r2, #8
 8001710:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <Read_ADC3+0x98>)
 8001714:	2201      	movs	r2, #1
 8001716:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <Read_ADC3+0x98>)
 800171a:	2203      	movs	r2, #3
 800171c:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800171e:	4920      	ldr	r1, [pc, #128]	; (80017a0 <Read_ADC3+0x98>)
 8001720:	4820      	ldr	r0, [pc, #128]	; (80017a4 <Read_ADC3+0x9c>)
 8001722:	f002 f9d5 	bl	8003ad0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001726:	481f      	ldr	r0, [pc, #124]	; (80017a4 <Read_ADC3+0x9c>)
 8001728:	f002 f834 	bl	8003794 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
 800172c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001730:	481c      	ldr	r0, [pc, #112]	; (80017a4 <Read_ADC3+0x9c>)
 8001732:	f002 f934 	bl	800399e <HAL_ADC_PollForConversion>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d122      	bne.n	8001782 <Read_ADC3+0x7a>
		flexADCvalue[3] = HAL_ADC_GetValue(&hadc1);
 800173c:	4819      	ldr	r0, [pc, #100]	; (80017a4 <Read_ADC3+0x9c>)
 800173e:	f002 f9b9 	bl	8003ab4 <HAL_ADC_GetValue>
 8001742:	4603      	mov	r3, r0
 8001744:	b29a      	uxth	r2, r3
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <Read_ADC3+0xa0>)
 8001748:	80da      	strh	r2, [r3, #6]
		//Main aim is sending Vflex data from UART!
		Vflex[3] = 3.3 * flexADCvalue[3] / 4095;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <Read_ADC3+0xa0>)
 800174c:	88db      	ldrh	r3, [r3, #6]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe ff08 	bl	8000564 <__aeabi_i2d>
 8001754:	a30e      	add	r3, pc, #56	; (adr r3, 8001790 <Read_ADC3+0x88>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe ff6d 	bl	8000638 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	a30c      	add	r3, pc, #48	; (adr r3, 8001798 <Read_ADC3+0x90>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7ff f88e 	bl	800088c <__aeabi_ddiv>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff fa56 	bl	8000c28 <__aeabi_d2f>
 800177c:	4603      	mov	r3, r0
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <Read_ADC3+0xa4>)
 8001780:	60d3      	str	r3, [r2, #12]
	}

	HAL_ADC_Stop(&hadc1);
 8001782:	4808      	ldr	r0, [pc, #32]	; (80017a4 <Read_ADC3+0x9c>)
 8001784:	f002 f8d8 	bl	8003938 <HAL_ADC_Stop>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	f3af 8000 	nop.w
 8001790:	66666666 	.word	0x66666666
 8001794:	400a6666 	.word	0x400a6666
 8001798:	00000000 	.word	0x00000000
 800179c:	40affe00 	.word	0x40affe00
 80017a0:	200003f8 	.word	0x200003f8
 80017a4:	20000214 	.word	0x20000214
 80017a8:	2000036c 	.word	0x2000036c
 80017ac:	20000378 	.word	0x20000378

080017b0 <Read_ADC4>:
void Read_ADC4(){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.*/
	sConfig.Channel = ADC_CHANNEL_11;
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <Read_ADC4+0x98>)
 80017b6:	220b      	movs	r2, #11
 80017b8:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <Read_ADC4+0x98>)
 80017bc:	2201      	movs	r2, #1
 80017be:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <Read_ADC4+0x98>)
 80017c2:	2203      	movs	r2, #3
 80017c4:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80017c6:	4920      	ldr	r1, [pc, #128]	; (8001848 <Read_ADC4+0x98>)
 80017c8:	4820      	ldr	r0, [pc, #128]	; (800184c <Read_ADC4+0x9c>)
 80017ca:	f002 f981 	bl	8003ad0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80017ce:	481f      	ldr	r0, [pc, #124]	; (800184c <Read_ADC4+0x9c>)
 80017d0:	f001 ffe0 	bl	8003794 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
 80017d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017d8:	481c      	ldr	r0, [pc, #112]	; (800184c <Read_ADC4+0x9c>)
 80017da:	f002 f8e0 	bl	800399e <HAL_ADC_PollForConversion>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d122      	bne.n	800182a <Read_ADC4+0x7a>
		flexADCvalue[4] = HAL_ADC_GetValue(&hadc1);
 80017e4:	4819      	ldr	r0, [pc, #100]	; (800184c <Read_ADC4+0x9c>)
 80017e6:	f002 f965 	bl	8003ab4 <HAL_ADC_GetValue>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <Read_ADC4+0xa0>)
 80017f0:	811a      	strh	r2, [r3, #8]
		//Main aim is sending Vflex data from UART!
		Vflex[4] = 3.3 * flexADCvalue[4] / 4095;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <Read_ADC4+0xa0>)
 80017f4:	891b      	ldrh	r3, [r3, #8]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe feb4 	bl	8000564 <__aeabi_i2d>
 80017fc:	a30e      	add	r3, pc, #56	; (adr r3, 8001838 <Read_ADC4+0x88>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7fe ff19 	bl	8000638 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	a30c      	add	r3, pc, #48	; (adr r3, 8001840 <Read_ADC4+0x90>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7ff f83a 	bl	800088c <__aeabi_ddiv>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff fa02 	bl	8000c28 <__aeabi_d2f>
 8001824:	4603      	mov	r3, r0
 8001826:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <Read_ADC4+0xa4>)
 8001828:	6113      	str	r3, [r2, #16]
	}

	HAL_ADC_Stop(&hadc1);
 800182a:	4808      	ldr	r0, [pc, #32]	; (800184c <Read_ADC4+0x9c>)
 800182c:	f002 f884 	bl	8003938 <HAL_ADC_Stop>
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	f3af 8000 	nop.w
 8001838:	66666666 	.word	0x66666666
 800183c:	400a6666 	.word	0x400a6666
 8001840:	00000000 	.word	0x00000000
 8001844:	40affe00 	.word	0x40affe00
 8001848:	200003f8 	.word	0x200003f8
 800184c:	20000214 	.word	0x20000214
 8001850:	2000036c 	.word	0x2000036c
 8001854:	20000378 	.word	0x20000378

08001858 <floatToChar>:
void floatToChar(float floatValue, char* charArray, int arraySize) {
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b087      	sub	sp, #28
 800185c:	af02      	add	r7, sp, #8
 800185e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001862:	60b8      	str	r0, [r7, #8]
 8001864:	6079      	str	r1, [r7, #4]
  // Use snprintf to convert float to char array
  snprintf(charArray, arraySize, "%f", floatValue);
 8001866:	687c      	ldr	r4, [r7, #4]
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f7fe fe8d 	bl	8000588 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	e9cd 2300 	strd	r2, r3, [sp]
 8001876:	4a04      	ldr	r2, [pc, #16]	; (8001888 <floatToChar+0x30>)
 8001878:	4621      	mov	r1, r4
 800187a:	68b8      	ldr	r0, [r7, #8]
 800187c:	f005 ff1c 	bl	80076b8 <sniprintf>
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	0800cad8 	.word	0x0800cad8

0800188c <MPU6050_Init>:
void MPU6050_Init (void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	9302      	str	r3, [sp, #8]
 8001898:	2301      	movs	r3, #1
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2301      	movs	r3, #1
 80018a2:	2275      	movs	r2, #117	; 0x75
 80018a4:	21d0      	movs	r1, #208	; 0xd0
 80018a6:	4823      	ldr	r0, [pc, #140]	; (8001934 <MPU6050_Init+0xa8>)
 80018a8:	f003 f812 	bl	80048d0 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b68      	cmp	r3, #104	; 0x68
 80018b0:	d13b      	bne.n	800192a <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	2301      	movs	r3, #1
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	1dbb      	adds	r3, r7, #6
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2301      	movs	r3, #1
 80018c6:	226b      	movs	r2, #107	; 0x6b
 80018c8:	21d0      	movs	r1, #208	; 0xd0
 80018ca:	481a      	ldr	r0, [pc, #104]	; (8001934 <MPU6050_Init+0xa8>)
 80018cc:	f002 ff06 	bl	80046dc <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80018d0:	2307      	movs	r3, #7
 80018d2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80018d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	2301      	movs	r3, #1
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	1dbb      	adds	r3, r7, #6
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2301      	movs	r3, #1
 80018e4:	2219      	movs	r2, #25
 80018e6:	21d0      	movs	r1, #208	; 0xd0
 80018e8:	4812      	ldr	r0, [pc, #72]	; (8001934 <MPU6050_Init+0xa8>)
 80018ea:	f002 fef7 	bl	80046dc <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 80018ee:	2300      	movs	r3, #0
 80018f0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	2301      	movs	r3, #1
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	1dbb      	adds	r3, r7, #6
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2301      	movs	r3, #1
 8001902:	221c      	movs	r2, #28
 8001904:	21d0      	movs	r1, #208	; 0xd0
 8001906:	480b      	ldr	r0, [pc, #44]	; (8001934 <MPU6050_Init+0xa8>)
 8001908:	f002 fee8 	bl	80046dc <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 800190c:	2300      	movs	r3, #0
 800190e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	2301      	movs	r3, #1
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	1dbb      	adds	r3, r7, #6
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2301      	movs	r3, #1
 8001920:	221b      	movs	r2, #27
 8001922:	21d0      	movs	r1, #208	; 0xd0
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <MPU6050_Init+0xa8>)
 8001926:	f002 fed9 	bl	80046dc <HAL_I2C_Mem_Write>
//}

//	    gyro_cal1[0] /= 2000;
//	    gyro_cal1[1] /= 2000;
//	    gyro_cal1[2] /= 2000;
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000025c 	.word	0x2000025c

08001938 <flexAngle>:
void flexAngle(float *result, float Rcc,float Rfb, float Vf) {
 8001938:	b5b0      	push	{r4, r5, r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	ed87 0a02 	vstr	s0, [r7, #8]
 8001944:	edc7 0a01 	vstr	s1, [r7, #4]
 8001948:	ed87 1a00 	vstr	s2, [r7]
    float Rf = (Rcc * Vf) / (3.3 - Vf);
 800194c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001950:	edd7 7a00 	vldr	s15, [r7]
 8001954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001958:	ee17 0a90 	vmov	r0, s15
 800195c:	f7fe fe14 	bl	8000588 <__aeabi_f2d>
 8001960:	4604      	mov	r4, r0
 8001962:	460d      	mov	r5, r1
 8001964:	6838      	ldr	r0, [r7, #0]
 8001966:	f7fe fe0f 	bl	8000588 <__aeabi_f2d>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	a128      	add	r1, pc, #160	; (adr r1, 8001a10 <flexAngle+0xd8>)
 8001970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001974:	f7fe fca8 	bl	80002c8 <__aeabi_dsub>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe ff84 	bl	800088c <__aeabi_ddiv>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff f94c 	bl	8000c28 <__aeabi_d2f>
 8001990:	4603      	mov	r3, r0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    float change = ((Rf - Rfb) / Rfb) * 100;
 8001994:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001998:	edd7 7a01 	vldr	s15, [r7, #4]
 800199c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80019a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001a00 <flexAngle+0xc8>
 80019ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b0:	edc7 7a08 	vstr	s15, [r7, #32]
    float a = -0.0006;
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <flexAngle+0xcc>)
 80019b6:	61fb      	str	r3, [r7, #28]
    float b = 0.7623;
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <flexAngle+0xd0>)
 80019ba:	61bb      	str	r3, [r7, #24]
    float c = 4.4311;
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <flexAngle+0xd4>)
 80019be:	617b      	str	r3, [r7, #20]
    *result = a * change * change + b * change + c;
 80019c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80019c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80019c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80019d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80019d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80019dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	edc3 7a00 	vstr	s15, [r3]
}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	; 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bdb0      	pop	{r4, r5, r7, pc}
 80019fa:	bf00      	nop
 80019fc:	f3af 8000 	nop.w
 8001a00:	42c80000 	.word	0x42c80000
 8001a04:	ba1d4952 	.word	0xba1d4952
 8001a08:	3f432618 	.word	0x3f432618
 8001a0c:	408dcb92 	.word	0x408dcb92
 8001a10:	66666666 	.word	0x66666666
 8001a14:	400a6666 	.word	0x400a6666

08001a18 <flexAngleShort>:

void flexAngleShort(float *result, float Rcc,float Rfb, float Vf) {
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a24:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a28:	ed87 1a00 	vstr	s2, [r7]
    float Rf = (Rcc * Vf) / (3.3 - Vf);
 8001a2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a30:	edd7 7a00 	vldr	s15, [r7]
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	ee17 0a90 	vmov	r0, s15
 8001a3c:	f7fe fda4 	bl	8000588 <__aeabi_f2d>
 8001a40:	4604      	mov	r4, r0
 8001a42:	460d      	mov	r5, r1
 8001a44:	6838      	ldr	r0, [r7, #0]
 8001a46:	f7fe fd9f 	bl	8000588 <__aeabi_f2d>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	a128      	add	r1, pc, #160	; (adr r1, 8001af0 <flexAngleShort+0xd8>)
 8001a50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a54:	f7fe fc38 	bl	80002c8 <__aeabi_dsub>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe ff14 	bl	800088c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff f8dc 	bl	8000c28 <__aeabi_d2f>
 8001a70:	4603      	mov	r3, r0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    float change = ((Rf - Rfb) / Rfb) * 100;
 8001a74:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a80:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a88:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001ae0 <flexAngleShort+0xc8>
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	edc7 7a08 	vstr	s15, [r7, #32]
    float a = 0.0018;
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <flexAngleShort+0xcc>)
 8001a96:	61fb      	str	r3, [r7, #28]
    float b = 0.8698;
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <flexAngleShort+0xd0>)
 8001a9a:	61bb      	str	r3, [r7, #24]
    float c = 1.0836;
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <flexAngleShort+0xd4>)
 8001a9e:	617b      	str	r3, [r7, #20]
    *result = a * change * change + b * change + c;
 8001aa0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aa4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aac:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab4:	edd7 6a06 	vldr	s13, [r7, #24]
 8001ab8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	edc3 7a00 	vstr	s15, [r3]
}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8001ada:	bf00      	nop
 8001adc:	f3af 8000 	nop.w
 8001ae0:	42c80000 	.word	0x42c80000
 8001ae4:	3aebedfa 	.word	0x3aebedfa
 8001ae8:	3f5eab36 	.word	0x3f5eab36
 8001aec:	3f8ab368 	.word	0x3f8ab368
 8001af0:	66666666 	.word	0x66666666
 8001af4:	400a6666 	.word	0x400a6666

08001af8 <MPU6050_Init_2>:

void MPU6050_Init_2 (void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af04      	add	r7, sp, #16
	uint8_t check1;
	uint8_t Data1;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDRES,WHO_AM_I_REG,1, &check1, 1, 1000);
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	9302      	str	r3, [sp, #8]
 8001b04:	2301      	movs	r3, #1
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	2275      	movs	r2, #117	; 0x75
 8001b10:	21d2      	movs	r1, #210	; 0xd2
 8001b12:	4823      	ldr	r0, [pc, #140]	; (8001ba0 <MPU6050_Init_2+0xa8>)
 8001b14:	f002 fedc 	bl	80048d0 <HAL_I2C_Mem_Read>

	if (check1 == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b68      	cmp	r3, #104	; 0x68
 8001b1c:	d13b      	bne.n	8001b96 <MPU6050_Init_2+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data1 = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRES, PWR_MGMT_1_REG, 1,&Data1, 1, 1000);
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	9302      	str	r3, [sp, #8]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	1dbb      	adds	r3, r7, #6
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2301      	movs	r3, #1
 8001b32:	226b      	movs	r2, #107	; 0x6b
 8001b34:	21d2      	movs	r1, #210	; 0xd2
 8001b36:	481a      	ldr	r0, [pc, #104]	; (8001ba0 <MPU6050_Init_2+0xa8>)
 8001b38:	f002 fdd0 	bl	80046dc <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data1 = 0x07;
 8001b3c:	2307      	movs	r3, #7
 8001b3e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRES, SMPLRT_DIV_REG, 1, &Data1, 1, 1000);
 8001b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	2301      	movs	r3, #1
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	1dbb      	adds	r3, r7, #6
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	2219      	movs	r2, #25
 8001b52:	21d2      	movs	r1, #210	; 0xd2
 8001b54:	4812      	ldr	r0, [pc, #72]	; (8001ba0 <MPU6050_Init_2+0xa8>)
 8001b56:	f002 fdc1 	bl	80046dc <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data1 = 0x00;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRES, ACCEL_CONFIG_REG, 1, &Data1, 1, 1000);
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	2301      	movs	r3, #1
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	1dbb      	adds	r3, r7, #6
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	221c      	movs	r2, #28
 8001b70:	21d2      	movs	r1, #210	; 0xd2
 8001b72:	480b      	ldr	r0, [pc, #44]	; (8001ba0 <MPU6050_Init_2+0xa8>)
 8001b74:	f002 fdb2 	bl	80046dc <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data1 = 0x00;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRES, GYRO_CONFIG_REG, 1, &Data1, 1, 1000);
 8001b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	2301      	movs	r3, #1
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	1dbb      	adds	r3, r7, #6
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	221b      	movs	r2, #27
 8001b8e:	21d2      	movs	r1, #210	; 0xd2
 8001b90:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <MPU6050_Init_2+0xa8>)
 8001b92:	f002 fda3 	bl	80046dc <HAL_I2C_Mem_Write>
//	    }
//
//	    gyro_cal2[0] /= 2000;
//	    gyro_cal2[1] /= 2000;
//	    gyro_cal2[2] /= 2000;
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200002b0 	.word	0x200002b0
 8001ba4:	00000000 	.word	0x00000000

08001ba8 <MPU_6050_Read_Accel>:


void MPU_6050_Read_Accel(void){
 8001ba8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af04      	add	r7, sp, #16

	uint8_t Read_Acc[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Read_Acc, 6, 100);
 8001bb0:	2364      	movs	r3, #100	; 0x64
 8001bb2:	9302      	str	r3, [sp, #8]
 8001bb4:	2306      	movs	r3, #6
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	463b      	mov	r3, r7
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	223b      	movs	r2, #59	; 0x3b
 8001bc0:	21d0      	movs	r1, #208	; 0xd0
 8001bc2:	48c1      	ldr	r0, [pc, #772]	; (8001ec8 <MPU_6050_Read_Accel+0x320>)
 8001bc4:	f002 fe84 	bl	80048d0 <HAL_I2C_Mem_Read>
	Accel_X_RAW = (uint16_t)((Read_Acc[0] << 8 )| (Read_Acc[1]));
 8001bc8:	783b      	ldrb	r3, [r7, #0]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	787b      	ldrb	r3, [r7, #1]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	4bbd      	ldr	r3, [pc, #756]	; (8001ecc <MPU_6050_Read_Accel+0x324>)
 8001bd8:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (uint16_t)((Read_Acc[2] << 8 )| (Read_Acc[3]));
 8001bda:	78bb      	ldrb	r3, [r7, #2]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	4bb9      	ldr	r3, [pc, #740]	; (8001ed0 <MPU_6050_Read_Accel+0x328>)
 8001bea:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (uint16_t)((Read_Acc[4] << 8 )| (Read_Acc[5]));
 8001bec:	793b      	ldrb	r3, [r7, #4]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	797b      	ldrb	r3, [r7, #5]
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	b21a      	sxth	r2, r3
 8001bfa:	4bb6      	ldr	r3, [pc, #728]	; (8001ed4 <MPU_6050_Read_Accel+0x32c>)
 8001bfc:	801a      	strh	r2, [r3, #0]

	Ax = Accel_X_RAW/16384.0;
 8001bfe:	4bb3      	ldr	r3, [pc, #716]	; (8001ecc <MPU_6050_Read_Accel+0x324>)
 8001c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fcad 	bl	8000564 <__aeabi_i2d>
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4bb2      	ldr	r3, [pc, #712]	; (8001ed8 <MPU_6050_Read_Accel+0x330>)
 8001c10:	f7fe fe3c 	bl	800088c <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7ff f804 	bl	8000c28 <__aeabi_d2f>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4aae      	ldr	r2, [pc, #696]	; (8001edc <MPU_6050_Read_Accel+0x334>)
 8001c24:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8001c26:	4baa      	ldr	r3, [pc, #680]	; (8001ed0 <MPU_6050_Read_Accel+0x328>)
 8001c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc99 	bl	8000564 <__aeabi_i2d>
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4ba8      	ldr	r3, [pc, #672]	; (8001ed8 <MPU_6050_Read_Accel+0x330>)
 8001c38:	f7fe fe28 	bl	800088c <__aeabi_ddiv>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	f7fe fff0 	bl	8000c28 <__aeabi_d2f>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4aa5      	ldr	r2, [pc, #660]	; (8001ee0 <MPU_6050_Read_Accel+0x338>)
 8001c4c:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8001c4e:	4ba1      	ldr	r3, [pc, #644]	; (8001ed4 <MPU_6050_Read_Accel+0x32c>)
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc85 	bl	8000564 <__aeabi_i2d>
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b9e      	ldr	r3, [pc, #632]	; (8001ed8 <MPU_6050_Read_Accel+0x330>)
 8001c60:	f7fe fe14 	bl	800088c <__aeabi_ddiv>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe ffdc 	bl	8000c28 <__aeabi_d2f>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a9c      	ldr	r2, [pc, #624]	; (8001ee4 <MPU_6050_Read_Accel+0x33c>)
 8001c74:	6013      	str	r3, [r2, #0]

	acc_total_vector1 = sqrt((Accel_X_RAW*Accel_X_RAW)+(Accel_Y_RAW*Accel_Y_RAW)+(Accel_Z_RAW*Accel_Z_RAW));
 8001c76:	4b95      	ldr	r3, [pc, #596]	; (8001ecc <MPU_6050_Read_Accel+0x324>)
 8001c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b93      	ldr	r3, [pc, #588]	; (8001ecc <MPU_6050_Read_Accel+0x324>)
 8001c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c84:	fb03 f202 	mul.w	r2, r3, r2
 8001c88:	4b91      	ldr	r3, [pc, #580]	; (8001ed0 <MPU_6050_Read_Accel+0x328>)
 8001c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4b8f      	ldr	r3, [pc, #572]	; (8001ed0 <MPU_6050_Read_Accel+0x328>)
 8001c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c96:	fb01 f303 	mul.w	r3, r1, r3
 8001c9a:	441a      	add	r2, r3
 8001c9c:	4b8d      	ldr	r3, [pc, #564]	; (8001ed4 <MPU_6050_Read_Accel+0x32c>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4b8b      	ldr	r3, [pc, #556]	; (8001ed4 <MPU_6050_Read_Accel+0x32c>)
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc57 	bl	8000564 <__aeabi_i2d>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	ec43 2b10 	vmov	d0, r2, r3
 8001cbe:	f009 f9ff 	bl	800b0c0 <sqrt>
 8001cc2:	ec53 2b10 	vmov	r2, r3, d0
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ff65 	bl	8000b98 <__aeabi_d2iz>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	4b85      	ldr	r3, [pc, #532]	; (8001ee8 <MPU_6050_Read_Accel+0x340>)
 8001cd4:	801a      	strh	r2, [r3, #0]

	angle_pitch_acc1 = asin((float)Accel_Y_RAW/acc_total_vector1)* 57.296;
 8001cd6:	4b7e      	ldr	r3, [pc, #504]	; (8001ed0 <MPU_6050_Read_Accel+0x328>)
 8001cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce4:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <MPU_6050_Read_Accel+0x340>)
 8001ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cf6:	ee16 0a90 	vmov	r0, s13
 8001cfa:	f7fe fc45 	bl	8000588 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	ec43 2b10 	vmov	d0, r2, r3
 8001d06:	f009 f9a7 	bl	800b058 <asin>
 8001d0a:	ec51 0b10 	vmov	r0, r1, d0
 8001d0e:	a368      	add	r3, pc, #416	; (adr r3, 8001eb0 <MPU_6050_Read_Accel+0x308>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fc90 	bl	8000638 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe ff82 	bl	8000c28 <__aeabi_d2f>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4a71      	ldr	r2, [pc, #452]	; (8001eec <MPU_6050_Read_Accel+0x344>)
 8001d28:	6013      	str	r3, [r2, #0]
    angle_roll_acc1 = asin((float)Accel_X_RAW/acc_total_vector1)* -57.296;
 8001d2a:	4b68      	ldr	r3, [pc, #416]	; (8001ecc <MPU_6050_Read_Accel+0x324>)
 8001d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d38:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <MPU_6050_Read_Accel+0x340>)
 8001d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d4a:	ee16 0a90 	vmov	r0, s13
 8001d4e:	f7fe fc1b 	bl	8000588 <__aeabi_f2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	ec43 2b10 	vmov	d0, r2, r3
 8001d5a:	f009 f97d 	bl	800b058 <asin>
 8001d5e:	ec51 0b10 	vmov	r0, r1, d0
 8001d62:	a355      	add	r3, pc, #340	; (adr r3, 8001eb8 <MPU_6050_Read_Accel+0x310>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fc66 	bl	8000638 <__aeabi_dmul>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7fe ff58 	bl	8000c28 <__aeabi_d2f>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4a5d      	ldr	r2, [pc, #372]	; (8001ef0 <MPU_6050_Read_Accel+0x348>)
 8001d7c:	6013      	str	r3, [r2, #0]

    angle_pitch_acc1 -= 0;//0.05;
 8001d7e:	4b5b      	ldr	r3, [pc, #364]	; (8001eec <MPU_6050_Read_Accel+0x344>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a5a      	ldr	r2, [pc, #360]	; (8001eec <MPU_6050_Read_Accel+0x344>)
 8001d84:	6013      	str	r3, [r2, #0]
    angle_roll_acc1 -= 0;//-1.32;
 8001d86:	4b5a      	ldr	r3, [pc, #360]	; (8001ef0 <MPU_6050_Read_Accel+0x348>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a59      	ldr	r2, [pc, #356]	; (8001ef0 <MPU_6050_Read_Accel+0x348>)
 8001d8c:	6013      	str	r3, [r2, #0]

    angle_roll1=atan(Ay/sqrt(Ax*Ax+Az*Az))*1/(3.142/180);
 8001d8e:	4b54      	ldr	r3, [pc, #336]	; (8001ee0 <MPU_6050_Read_Accel+0x338>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fbf8 	bl	8000588 <__aeabi_f2d>
 8001d98:	4680      	mov	r8, r0
 8001d9a:	4689      	mov	r9, r1
 8001d9c:	4b4f      	ldr	r3, [pc, #316]	; (8001edc <MPU_6050_Read_Accel+0x334>)
 8001d9e:	ed93 7a00 	vldr	s14, [r3]
 8001da2:	4b4e      	ldr	r3, [pc, #312]	; (8001edc <MPU_6050_Read_Accel+0x334>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dac:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <MPU_6050_Read_Accel+0x33c>)
 8001dae:	edd3 6a00 	vldr	s13, [r3]
 8001db2:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <MPU_6050_Read_Accel+0x33c>)
 8001db4:	edd3 7a00 	vldr	s15, [r3]
 8001db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc0:	ee17 0a90 	vmov	r0, s15
 8001dc4:	f7fe fbe0 	bl	8000588 <__aeabi_f2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	ec43 2b10 	vmov	d0, r2, r3
 8001dd0:	f009 f976 	bl	800b0c0 <sqrt>
 8001dd4:	ec53 2b10 	vmov	r2, r3, d0
 8001dd8:	4640      	mov	r0, r8
 8001dda:	4649      	mov	r1, r9
 8001ddc:	f7fe fd56 	bl	800088c <__aeabi_ddiv>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	ec43 2b17 	vmov	d7, r2, r3
 8001de8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dec:	eef0 0a67 	vmov.f32	s1, s15
 8001df0:	f009 f992 	bl	800b118 <atan>
 8001df4:	ec51 0b10 	vmov	r0, r1, d0
 8001df8:	a331      	add	r3, pc, #196	; (adr r3, 8001ec0 <MPU_6050_Read_Accel+0x318>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fd45 	bl	800088c <__aeabi_ddiv>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe ff0d 	bl	8000c28 <__aeabi_d2f>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4a38      	ldr	r2, [pc, #224]	; (8001ef4 <MPU_6050_Read_Accel+0x34c>)
 8001e12:	6013      	str	r3, [r2, #0]
    angle_pitch1=-atan(Ax/sqrt(Ay*Ay+Az*Az))*1/(3.142/180);
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <MPU_6050_Read_Accel+0x334>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fbb5 	bl	8000588 <__aeabi_f2d>
 8001e1e:	4680      	mov	r8, r0
 8001e20:	4689      	mov	r9, r1
 8001e22:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <MPU_6050_Read_Accel+0x338>)
 8001e24:	ed93 7a00 	vldr	s14, [r3]
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <MPU_6050_Read_Accel+0x338>)
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <MPU_6050_Read_Accel+0x33c>)
 8001e34:	edd3 6a00 	vldr	s13, [r3]
 8001e38:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <MPU_6050_Read_Accel+0x33c>)
 8001e3a:	edd3 7a00 	vldr	s15, [r3]
 8001e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e46:	ee17 0a90 	vmov	r0, s15
 8001e4a:	f7fe fb9d 	bl	8000588 <__aeabi_f2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	ec43 2b10 	vmov	d0, r2, r3
 8001e56:	f009 f933 	bl	800b0c0 <sqrt>
 8001e5a:	ec53 2b10 	vmov	r2, r3, d0
 8001e5e:	4640      	mov	r0, r8
 8001e60:	4649      	mov	r1, r9
 8001e62:	f7fe fd13 	bl	800088c <__aeabi_ddiv>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	ec43 2b17 	vmov	d7, r2, r3
 8001e6e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e72:	eef0 0a67 	vmov.f32	s1, s15
 8001e76:	f009 f94f 	bl	800b118 <atan>
 8001e7a:	ec53 2b10 	vmov	r2, r3, d0
 8001e7e:	4614      	mov	r4, r2
 8001e80:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e84:	a30e      	add	r3, pc, #56	; (adr r3, 8001ec0 <MPU_6050_Read_Accel+0x318>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	f7fe fcfd 	bl	800088c <__aeabi_ddiv>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fec5 	bl	8000c28 <__aeabi_d2f>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <MPU_6050_Read_Accel+0x350>)
 8001ea2:	6013      	str	r3, [r2, #0]

}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001eae:	bf00      	nop
 8001eb0:	53f7ced9 	.word	0x53f7ced9
 8001eb4:	404ca5e3 	.word	0x404ca5e3
 8001eb8:	53f7ced9 	.word	0x53f7ced9
 8001ebc:	c04ca5e3 	.word	0xc04ca5e3
 8001ec0:	80fa7e3f 	.word	0x80fa7e3f
 8001ec4:	3f91dfde 	.word	0x3f91dfde
 8001ec8:	2000025c 	.word	0x2000025c
 8001ecc:	20000304 	.word	0x20000304
 8001ed0:	20000306 	.word	0x20000306
 8001ed4:	20000308 	.word	0x20000308
 8001ed8:	40d00000 	.word	0x40d00000
 8001edc:	200003a0 	.word	0x200003a0
 8001ee0:	200003a4 	.word	0x200003a4
 8001ee4:	200003a8 	.word	0x200003a8
 8001ee8:	20000334 	.word	0x20000334
 8001eec:	20000348 	.word	0x20000348
 8001ef0:	2000034c 	.word	0x2000034c
 8001ef4:	2000035c 	.word	0x2000035c
 8001ef8:	20000358 	.word	0x20000358
 8001efc:	00000000 	.word	0x00000000

08001f00 <MPU6050_Read_Gyro>:



	void MPU6050_Read_Gyro (void)
	{
 8001f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af04      	add	r7, sp, #16
		uint8_t Rec_Data[6];

		// Read 6 BYTES of data starting from GYRO_XOUT_H register

		HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0c:	9302      	str	r3, [sp, #8]
 8001f0e:	2306      	movs	r3, #6
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	463b      	mov	r3, r7
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2301      	movs	r3, #1
 8001f18:	2243      	movs	r2, #67	; 0x43
 8001f1a:	21d0      	movs	r1, #208	; 0xd0
 8001f1c:	488a      	ldr	r0, [pc, #552]	; (8002148 <MPU6050_Read_Gyro+0x248>)
 8001f1e:	f002 fcd7 	bl	80048d0 <HAL_I2C_Mem_Read>

		Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001f22:	783b      	ldrb	r3, [r7, #0]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	4b86      	ldr	r3, [pc, #536]	; (800214c <MPU6050_Read_Gyro+0x24c>)
 8001f32:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001f34:	78bb      	ldrb	r3, [r7, #2]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	4b83      	ldr	r3, [pc, #524]	; (8002150 <MPU6050_Read_Gyro+0x250>)
 8001f44:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001f46:	793b      	ldrb	r3, [r7, #4]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	797b      	ldrb	r3, [r7, #5]
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <MPU6050_Read_Gyro+0x254>)
 8001f56:	801a      	strh	r2, [r3, #0]

//		Gx = Gyro_X_RAW/131.0;
//		Gy = Gyro_Y_RAW/131.0;
//		Gz = Gyro_Z_RAW/131.0;

		Gyro_X_RAW -= gyro_cal1[0];
 8001f58:	4b7c      	ldr	r3, [pc, #496]	; (800214c <MPU6050_Read_Gyro+0x24c>)
 8001f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f66:	4b7c      	ldr	r3, [pc, #496]	; (8002158 <MPU6050_Read_Gyro+0x258>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f74:	ee17 3a90 	vmov	r3, s15
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	4b74      	ldr	r3, [pc, #464]	; (800214c <MPU6050_Read_Gyro+0x24c>)
 8001f7c:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW -= gyro_cal1[1];
 8001f7e:	4b74      	ldr	r3, [pc, #464]	; (8002150 <MPU6050_Read_Gyro+0x250>)
 8001f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8c:	4b72      	ldr	r3, [pc, #456]	; (8002158 <MPU6050_Read_Gyro+0x258>)
 8001f8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f9a:	ee17 3a90 	vmov	r3, s15
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	4b6b      	ldr	r3, [pc, #428]	; (8002150 <MPU6050_Read_Gyro+0x250>)
 8001fa2:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW -= gyro_cal1[2];
 8001fa4:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <MPU6050_Read_Gyro+0x254>)
 8001fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb2:	4b69      	ldr	r3, [pc, #420]	; (8002158 <MPU6050_Read_Gyro+0x258>)
 8001fb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc0:	ee17 3a90 	vmov	r3, s15
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	4b63      	ldr	r3, [pc, #396]	; (8002154 <MPU6050_Read_Gyro+0x254>)
 8001fc8:	801a      	strh	r2, [r3, #0]

		angle_pitch_gyro1 += Gyro_X_RAW * 0.0000611;
 8001fca:	4b64      	ldr	r3, [pc, #400]	; (800215c <MPU6050_Read_Gyro+0x25c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fada 	bl	8000588 <__aeabi_f2d>
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	460d      	mov	r5, r1
 8001fd8:	4b5c      	ldr	r3, [pc, #368]	; (800214c <MPU6050_Read_Gyro+0x24c>)
 8001fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fac0 	bl	8000564 <__aeabi_i2d>
 8001fe4:	a354      	add	r3, pc, #336	; (adr r3, 8002138 <MPU6050_Read_Gyro+0x238>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe fb25 	bl	8000638 <__aeabi_dmul>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	f7fe f969 	bl	80002cc <__adddf3>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f7fe fe11 	bl	8000c28 <__aeabi_d2f>
 8002006:	4603      	mov	r3, r0
 8002008:	4a54      	ldr	r2, [pc, #336]	; (800215c <MPU6050_Read_Gyro+0x25c>)
 800200a:	6013      	str	r3, [r2, #0]
	    angle_roll_gyro1 += Gyro_Y_RAW * 0.0000611;
 800200c:	4b54      	ldr	r3, [pc, #336]	; (8002160 <MPU6050_Read_Gyro+0x260>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fab9 	bl	8000588 <__aeabi_f2d>
 8002016:	4604      	mov	r4, r0
 8002018:	460d      	mov	r5, r1
 800201a:	4b4d      	ldr	r3, [pc, #308]	; (8002150 <MPU6050_Read_Gyro+0x250>)
 800201c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fa9f 	bl	8000564 <__aeabi_i2d>
 8002026:	a344      	add	r3, pc, #272	; (adr r3, 8002138 <MPU6050_Read_Gyro+0x238>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	f7fe fb04 	bl	8000638 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f7fe f948 	bl	80002cc <__adddf3>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fdf0 	bl	8000c28 <__aeabi_d2f>
 8002048:	4603      	mov	r3, r0
 800204a:	4a45      	ldr	r2, [pc, #276]	; (8002160 <MPU6050_Read_Gyro+0x260>)
 800204c:	6013      	str	r3, [r2, #0]

	    angle_pitch_gyro1 += angle_roll_gyro1 * sin(Gyro_Z_RAW  * 0.000001066);
 800204e:	4b43      	ldr	r3, [pc, #268]	; (800215c <MPU6050_Read_Gyro+0x25c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa98 	bl	8000588 <__aeabi_f2d>
 8002058:	4604      	mov	r4, r0
 800205a:	460d      	mov	r5, r1
 800205c:	4b40      	ldr	r3, [pc, #256]	; (8002160 <MPU6050_Read_Gyro+0x260>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa91 	bl	8000588 <__aeabi_f2d>
 8002066:	4680      	mov	r8, r0
 8002068:	4689      	mov	r9, r1
 800206a:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <MPU6050_Read_Gyro+0x254>)
 800206c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa77 	bl	8000564 <__aeabi_i2d>
 8002076:	a332      	add	r3, pc, #200	; (adr r3, 8002140 <MPU6050_Read_Gyro+0x240>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fadc 	bl	8000638 <__aeabi_dmul>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	ec43 2b17 	vmov	d7, r2, r3
 8002088:	eeb0 0a47 	vmov.f32	s0, s14
 800208c:	eef0 0a67 	vmov.f32	s1, s15
 8002090:	f009 f9ee 	bl	800b470 <sin>
 8002094:	ec53 2b10 	vmov	r2, r3, d0
 8002098:	4640      	mov	r0, r8
 800209a:	4649      	mov	r1, r9
 800209c:	f7fe facc 	bl	8000638 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4620      	mov	r0, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	f7fe f910 	bl	80002cc <__adddf3>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fdb8 	bl	8000c28 <__aeabi_d2f>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4a28      	ldr	r2, [pc, #160]	; (800215c <MPU6050_Read_Gyro+0x25c>)
 80020bc:	6013      	str	r3, [r2, #0]
	    angle_roll_gyro1 -= angle_pitch_gyro1 * sin(Gyro_Z_RAW  * 0.000001066);
 80020be:	4b28      	ldr	r3, [pc, #160]	; (8002160 <MPU6050_Read_Gyro+0x260>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa60 	bl	8000588 <__aeabi_f2d>
 80020c8:	4604      	mov	r4, r0
 80020ca:	460d      	mov	r5, r1
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <MPU6050_Read_Gyro+0x25c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa59 	bl	8000588 <__aeabi_f2d>
 80020d6:	4680      	mov	r8, r0
 80020d8:	4689      	mov	r9, r1
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <MPU6050_Read_Gyro+0x254>)
 80020dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fa3f 	bl	8000564 <__aeabi_i2d>
 80020e6:	a316      	add	r3, pc, #88	; (adr r3, 8002140 <MPU6050_Read_Gyro+0x240>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe faa4 	bl	8000638 <__aeabi_dmul>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	ec43 2b17 	vmov	d7, r2, r3
 80020f8:	eeb0 0a47 	vmov.f32	s0, s14
 80020fc:	eef0 0a67 	vmov.f32	s1, s15
 8002100:	f009 f9b6 	bl	800b470 <sin>
 8002104:	ec53 2b10 	vmov	r2, r3, d0
 8002108:	4640      	mov	r0, r8
 800210a:	4649      	mov	r1, r9
 800210c:	f7fe fa94 	bl	8000638 <__aeabi_dmul>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4620      	mov	r0, r4
 8002116:	4629      	mov	r1, r5
 8002118:	f7fe f8d6 	bl	80002c8 <__aeabi_dsub>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4610      	mov	r0, r2
 8002122:	4619      	mov	r1, r3
 8002124:	f7fe fd80 	bl	8000c28 <__aeabi_d2f>
 8002128:	4603      	mov	r3, r0
 800212a:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <MPU6050_Read_Gyro+0x260>)
 800212c:	6013      	str	r3, [r2, #0]
	}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002138:	01d41596 	.word	0x01d41596
 800213c:	3f10045a 	.word	0x3f10045a
 8002140:	652c6e62 	.word	0x652c6e62
 8002144:	3eb1e26f 	.word	0x3eb1e26f
 8002148:	2000025c 	.word	0x2000025c
 800214c:	2000030a 	.word	0x2000030a
 8002150:	2000030c 	.word	0x2000030c
 8002154:	2000030e 	.word	0x2000030e
 8002158:	2000031c 	.word	0x2000031c
 800215c:	20000338 	.word	0x20000338
 8002160:	2000033c 	.word	0x2000033c
 8002164:	00000000 	.word	0x00000000

08002168 <MPU_6050_Read_Accel_2>:



void MPU_6050_Read_Accel_2(void){
 8002168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af04      	add	r7, sp, #16

	uint8_t Read_Acc2[6];
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDRES, ACCEL_XOUT_H_REG, 1, Read_Acc2, 6, 100);
 8002170:	2364      	movs	r3, #100	; 0x64
 8002172:	9302      	str	r3, [sp, #8]
 8002174:	2306      	movs	r3, #6
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	463b      	mov	r3, r7
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2301      	movs	r3, #1
 800217e:	223b      	movs	r2, #59	; 0x3b
 8002180:	21d2      	movs	r1, #210	; 0xd2
 8002182:	48c1      	ldr	r0, [pc, #772]	; (8002488 <MPU_6050_Read_Accel_2+0x320>)
 8002184:	f002 fba4 	bl	80048d0 <HAL_I2C_Mem_Read>
	Accel_X_RAW2 = (uint16_t)((Read_Acc2[0] << 8 )| (Read_Acc2[1]));
 8002188:	783b      	ldrb	r3, [r7, #0]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	b21a      	sxth	r2, r3
 800218e:	787b      	ldrb	r3, [r7, #1]
 8002190:	b21b      	sxth	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b21a      	sxth	r2, r3
 8002196:	4bbd      	ldr	r3, [pc, #756]	; (800248c <MPU_6050_Read_Accel_2+0x324>)
 8002198:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW2 = (uint16_t)((Read_Acc2[2] << 8 )| (Read_Acc2[3]));
 800219a:	78bb      	ldrb	r3, [r7, #2]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	4bb9      	ldr	r3, [pc, #740]	; (8002490 <MPU_6050_Read_Accel_2+0x328>)
 80021aa:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW2 = (uint16_t)((Read_Acc2[4] << 8 )| (Read_Acc2[5]));
 80021ac:	793b      	ldrb	r3, [r7, #4]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	797b      	ldrb	r3, [r7, #5]
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	4bb6      	ldr	r3, [pc, #728]	; (8002494 <MPU_6050_Read_Accel_2+0x32c>)
 80021bc:	801a      	strh	r2, [r3, #0]

	Ax2 = Accel_X_RAW2/16384.0;
 80021be:	4bb3      	ldr	r3, [pc, #716]	; (800248c <MPU_6050_Read_Accel_2+0x324>)
 80021c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f9cd 	bl	8000564 <__aeabi_i2d>
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	4bb2      	ldr	r3, [pc, #712]	; (8002498 <MPU_6050_Read_Accel_2+0x330>)
 80021d0:	f7fe fb5c 	bl	800088c <__aeabi_ddiv>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe fd24 	bl	8000c28 <__aeabi_d2f>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4aae      	ldr	r2, [pc, #696]	; (800249c <MPU_6050_Read_Accel_2+0x334>)
 80021e4:	6013      	str	r3, [r2, #0]
	Ay2 = Accel_Y_RAW2/16384.0;
 80021e6:	4baa      	ldr	r3, [pc, #680]	; (8002490 <MPU_6050_Read_Accel_2+0x328>)
 80021e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f9b9 	bl	8000564 <__aeabi_i2d>
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	4ba8      	ldr	r3, [pc, #672]	; (8002498 <MPU_6050_Read_Accel_2+0x330>)
 80021f8:	f7fe fb48 	bl	800088c <__aeabi_ddiv>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	f7fe fd10 	bl	8000c28 <__aeabi_d2f>
 8002208:	4603      	mov	r3, r0
 800220a:	4aa5      	ldr	r2, [pc, #660]	; (80024a0 <MPU_6050_Read_Accel_2+0x338>)
 800220c:	6013      	str	r3, [r2, #0]
	Az2 = Accel_Z_RAW2/16384.0;
 800220e:	4ba1      	ldr	r3, [pc, #644]	; (8002494 <MPU_6050_Read_Accel_2+0x32c>)
 8002210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f9a5 	bl	8000564 <__aeabi_i2d>
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b9e      	ldr	r3, [pc, #632]	; (8002498 <MPU_6050_Read_Accel_2+0x330>)
 8002220:	f7fe fb34 	bl	800088c <__aeabi_ddiv>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	f7fe fcfc 	bl	8000c28 <__aeabi_d2f>
 8002230:	4603      	mov	r3, r0
 8002232:	4a9c      	ldr	r2, [pc, #624]	; (80024a4 <MPU_6050_Read_Accel_2+0x33c>)
 8002234:	6013      	str	r3, [r2, #0]

	acc_total_vector2 = sqrt((Accel_X_RAW2*Accel_X_RAW2)+(Accel_Y_RAW2*Accel_Y_RAW2)+(Accel_Z_RAW2*Accel_Z_RAW2));
 8002236:	4b95      	ldr	r3, [pc, #596]	; (800248c <MPU_6050_Read_Accel_2+0x324>)
 8002238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800223c:	461a      	mov	r2, r3
 800223e:	4b93      	ldr	r3, [pc, #588]	; (800248c <MPU_6050_Read_Accel_2+0x324>)
 8002240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002244:	fb03 f202 	mul.w	r2, r3, r2
 8002248:	4b91      	ldr	r3, [pc, #580]	; (8002490 <MPU_6050_Read_Accel_2+0x328>)
 800224a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224e:	4619      	mov	r1, r3
 8002250:	4b8f      	ldr	r3, [pc, #572]	; (8002490 <MPU_6050_Read_Accel_2+0x328>)
 8002252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	441a      	add	r2, r3
 800225c:	4b8d      	ldr	r3, [pc, #564]	; (8002494 <MPU_6050_Read_Accel_2+0x32c>)
 800225e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002262:	4619      	mov	r1, r3
 8002264:	4b8b      	ldr	r3, [pc, #556]	; (8002494 <MPU_6050_Read_Accel_2+0x32c>)
 8002266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f977 	bl	8000564 <__aeabi_i2d>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	ec43 2b10 	vmov	d0, r2, r3
 800227e:	f008 ff1f 	bl	800b0c0 <sqrt>
 8002282:	ec53 2b10 	vmov	r2, r3, d0
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f7fe fc85 	bl	8000b98 <__aeabi_d2iz>
 800228e:	4603      	mov	r3, r0
 8002290:	b21a      	sxth	r2, r3
 8002292:	4b85      	ldr	r3, [pc, #532]	; (80024a8 <MPU_6050_Read_Accel_2+0x340>)
 8002294:	801a      	strh	r2, [r3, #0]

		angle_pitch_acc2 = asin((float)Accel_Y_RAW2/acc_total_vector2)* 57.296;
 8002296:	4b7e      	ldr	r3, [pc, #504]	; (8002490 <MPU_6050_Read_Accel_2+0x328>)
 8002298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800229c:	ee07 3a90 	vmov	s15, r3
 80022a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022a4:	4b80      	ldr	r3, [pc, #512]	; (80024a8 <MPU_6050_Read_Accel_2+0x340>)
 80022a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022b6:	ee16 0a90 	vmov	r0, s13
 80022ba:	f7fe f965 	bl	8000588 <__aeabi_f2d>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	ec43 2b10 	vmov	d0, r2, r3
 80022c6:	f008 fec7 	bl	800b058 <asin>
 80022ca:	ec51 0b10 	vmov	r0, r1, d0
 80022ce:	a368      	add	r3, pc, #416	; (adr r3, 8002470 <MPU_6050_Read_Accel_2+0x308>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	f7fe f9b0 	bl	8000638 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f7fe fca2 	bl	8000c28 <__aeabi_d2f>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4a71      	ldr	r2, [pc, #452]	; (80024ac <MPU_6050_Read_Accel_2+0x344>)
 80022e8:	6013      	str	r3, [r2, #0]
	    angle_roll_acc2 = asin((float)Accel_X_RAW2/acc_total_vector2)* -57.296;
 80022ea:	4b68      	ldr	r3, [pc, #416]	; (800248c <MPU_6050_Read_Accel_2+0x324>)
 80022ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f0:	ee07 3a90 	vmov	s15, r3
 80022f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022f8:	4b6b      	ldr	r3, [pc, #428]	; (80024a8 <MPU_6050_Read_Accel_2+0x340>)
 80022fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002306:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800230a:	ee16 0a90 	vmov	r0, s13
 800230e:	f7fe f93b 	bl	8000588 <__aeabi_f2d>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	ec43 2b10 	vmov	d0, r2, r3
 800231a:	f008 fe9d 	bl	800b058 <asin>
 800231e:	ec51 0b10 	vmov	r0, r1, d0
 8002322:	a355      	add	r3, pc, #340	; (adr r3, 8002478 <MPU_6050_Read_Accel_2+0x310>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fe f986 	bl	8000638 <__aeabi_dmul>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe fc78 	bl	8000c28 <__aeabi_d2f>
 8002338:	4603      	mov	r3, r0
 800233a:	4a5d      	ldr	r2, [pc, #372]	; (80024b0 <MPU_6050_Read_Accel_2+0x348>)
 800233c:	6013      	str	r3, [r2, #0]

	    angle_pitch_acc2 -= 0;//0.05;
 800233e:	4b5b      	ldr	r3, [pc, #364]	; (80024ac <MPU_6050_Read_Accel_2+0x344>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a5a      	ldr	r2, [pc, #360]	; (80024ac <MPU_6050_Read_Accel_2+0x344>)
 8002344:	6013      	str	r3, [r2, #0]
	    angle_roll_acc2 -= 0;//-1.32;
 8002346:	4b5a      	ldr	r3, [pc, #360]	; (80024b0 <MPU_6050_Read_Accel_2+0x348>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a59      	ldr	r2, [pc, #356]	; (80024b0 <MPU_6050_Read_Accel_2+0x348>)
 800234c:	6013      	str	r3, [r2, #0]

	    angle_roll2=atan(Ay2/sqrt(Ax2*Ax2+Az2*Az2))*1/(3.142/180);
 800234e:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <MPU_6050_Read_Accel_2+0x338>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe f918 	bl	8000588 <__aeabi_f2d>
 8002358:	4680      	mov	r8, r0
 800235a:	4689      	mov	r9, r1
 800235c:	4b4f      	ldr	r3, [pc, #316]	; (800249c <MPU_6050_Read_Accel_2+0x334>)
 800235e:	ed93 7a00 	vldr	s14, [r3]
 8002362:	4b4e      	ldr	r3, [pc, #312]	; (800249c <MPU_6050_Read_Accel_2+0x334>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236c:	4b4d      	ldr	r3, [pc, #308]	; (80024a4 <MPU_6050_Read_Accel_2+0x33c>)
 800236e:	edd3 6a00 	vldr	s13, [r3]
 8002372:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <MPU_6050_Read_Accel_2+0x33c>)
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002380:	ee17 0a90 	vmov	r0, s15
 8002384:	f7fe f900 	bl	8000588 <__aeabi_f2d>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	ec43 2b10 	vmov	d0, r2, r3
 8002390:	f008 fe96 	bl	800b0c0 <sqrt>
 8002394:	ec53 2b10 	vmov	r2, r3, d0
 8002398:	4640      	mov	r0, r8
 800239a:	4649      	mov	r1, r9
 800239c:	f7fe fa76 	bl	800088c <__aeabi_ddiv>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	ec43 2b17 	vmov	d7, r2, r3
 80023a8:	eeb0 0a47 	vmov.f32	s0, s14
 80023ac:	eef0 0a67 	vmov.f32	s1, s15
 80023b0:	f008 feb2 	bl	800b118 <atan>
 80023b4:	ec51 0b10 	vmov	r0, r1, d0
 80023b8:	a331      	add	r3, pc, #196	; (adr r3, 8002480 <MPU_6050_Read_Accel_2+0x318>)
 80023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023be:	f7fe fa65 	bl	800088c <__aeabi_ddiv>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	f7fe fc2d 	bl	8000c28 <__aeabi_d2f>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4a38      	ldr	r2, [pc, #224]	; (80024b4 <MPU_6050_Read_Accel_2+0x34c>)
 80023d2:	6013      	str	r3, [r2, #0]
	    angle_pitch2=-atan(Ax2/sqrt(Ay2*Ay2+Az2*Az2))*1/(3.142/180);
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <MPU_6050_Read_Accel_2+0x334>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f8d5 	bl	8000588 <__aeabi_f2d>
 80023de:	4680      	mov	r8, r0
 80023e0:	4689      	mov	r9, r1
 80023e2:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <MPU_6050_Read_Accel_2+0x338>)
 80023e4:	ed93 7a00 	vldr	s14, [r3]
 80023e8:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <MPU_6050_Read_Accel_2+0x338>)
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f2:	4b2c      	ldr	r3, [pc, #176]	; (80024a4 <MPU_6050_Read_Accel_2+0x33c>)
 80023f4:	edd3 6a00 	vldr	s13, [r3]
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <MPU_6050_Read_Accel_2+0x33c>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002406:	ee17 0a90 	vmov	r0, s15
 800240a:	f7fe f8bd 	bl	8000588 <__aeabi_f2d>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	ec43 2b10 	vmov	d0, r2, r3
 8002416:	f008 fe53 	bl	800b0c0 <sqrt>
 800241a:	ec53 2b10 	vmov	r2, r3, d0
 800241e:	4640      	mov	r0, r8
 8002420:	4649      	mov	r1, r9
 8002422:	f7fe fa33 	bl	800088c <__aeabi_ddiv>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	ec43 2b17 	vmov	d7, r2, r3
 800242e:	eeb0 0a47 	vmov.f32	s0, s14
 8002432:	eef0 0a67 	vmov.f32	s1, s15
 8002436:	f008 fe6f 	bl	800b118 <atan>
 800243a:	ec53 2b10 	vmov	r2, r3, d0
 800243e:	4614      	mov	r4, r2
 8002440:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002444:	a30e      	add	r3, pc, #56	; (adr r3, 8002480 <MPU_6050_Read_Accel_2+0x318>)
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	4620      	mov	r0, r4
 800244c:	4629      	mov	r1, r5
 800244e:	f7fe fa1d 	bl	800088c <__aeabi_ddiv>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	f7fe fbe5 	bl	8000c28 <__aeabi_d2f>
 800245e:	4603      	mov	r3, r0
 8002460:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <MPU_6050_Read_Accel_2+0x350>)
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800246e:	bf00      	nop
 8002470:	53f7ced9 	.word	0x53f7ced9
 8002474:	404ca5e3 	.word	0x404ca5e3
 8002478:	53f7ced9 	.word	0x53f7ced9
 800247c:	c04ca5e3 	.word	0xc04ca5e3
 8002480:	80fa7e3f 	.word	0x80fa7e3f
 8002484:	3f91dfde 	.word	0x3f91dfde
 8002488:	200002b0 	.word	0x200002b0
 800248c:	20000310 	.word	0x20000310
 8002490:	20000312 	.word	0x20000312
 8002494:	20000314 	.word	0x20000314
 8002498:	40d00000 	.word	0x40d00000
 800249c:	200003ac 	.word	0x200003ac
 80024a0:	200003b0 	.word	0x200003b0
 80024a4:	200003b4 	.word	0x200003b4
 80024a8:	20000336 	.word	0x20000336
 80024ac:	20000350 	.word	0x20000350
 80024b0:	20000354 	.word	0x20000354
 80024b4:	20000364 	.word	0x20000364
 80024b8:	20000360 	.word	0x20000360
 80024bc:	00000000 	.word	0x00000000

080024c0 <MPU6050_Read_Gyro_2>:



	void MPU6050_Read_Gyro_2(void)
	{
 80024c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af04      	add	r7, sp, #16
		uint8_t Rec_Data2[6];

		// Read 6 BYTES of data starting from GYRO_XOUT_H register

		HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDRES, GYRO_XOUT_H_REG, 1, Rec_Data2, 6, 1000);
 80024c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024cc:	9302      	str	r3, [sp, #8]
 80024ce:	2306      	movs	r3, #6
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	463b      	mov	r3, r7
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2301      	movs	r3, #1
 80024d8:	2243      	movs	r2, #67	; 0x43
 80024da:	21d2      	movs	r1, #210	; 0xd2
 80024dc:	488a      	ldr	r0, [pc, #552]	; (8002708 <MPU6050_Read_Gyro_2+0x248>)
 80024de:	f002 f9f7 	bl	80048d0 <HAL_I2C_Mem_Read>

		Gyro_X_RAW2 = (int16_t)(Rec_Data2[0] << 8 | Rec_Data2 [1]);
 80024e2:	783b      	ldrb	r3, [r7, #0]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	787b      	ldrb	r3, [r7, #1]
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	4313      	orrs	r3, r2
 80024ee:	b21a      	sxth	r2, r3
 80024f0:	4b86      	ldr	r3, [pc, #536]	; (800270c <MPU6050_Read_Gyro_2+0x24c>)
 80024f2:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW2 = (int16_t)(Rec_Data2[2] << 8 | Rec_Data2 [3]);
 80024f4:	78bb      	ldrb	r3, [r7, #2]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	b21a      	sxth	r2, r3
 8002502:	4b83      	ldr	r3, [pc, #524]	; (8002710 <MPU6050_Read_Gyro_2+0x250>)
 8002504:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW2 = (int16_t)(Rec_Data2[4] << 8 | Rec_Data2 [5]);
 8002506:	793b      	ldrb	r3, [r7, #4]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	b21a      	sxth	r2, r3
 800250c:	797b      	ldrb	r3, [r7, #5]
 800250e:	b21b      	sxth	r3, r3
 8002510:	4313      	orrs	r3, r2
 8002512:	b21a      	sxth	r2, r3
 8002514:	4b7f      	ldr	r3, [pc, #508]	; (8002714 <MPU6050_Read_Gyro_2+0x254>)
 8002516:	801a      	strh	r2, [r3, #0]

//		Gx2 = Gyro_X_RAW2/131.0;
//		Gy2 = Gyro_Y_RAW2/131.0;
//		Gz2 = Gyro_Z_RAW2/131.0;

		Gyro_X_RAW2 -= gyro_cal2[0];
 8002518:	4b7c      	ldr	r3, [pc, #496]	; (800270c <MPU6050_Read_Gyro_2+0x24c>)
 800251a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002526:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <MPU6050_Read_Gyro_2+0x258>)
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002534:	ee17 3a90 	vmov	r3, s15
 8002538:	b21a      	sxth	r2, r3
 800253a:	4b74      	ldr	r3, [pc, #464]	; (800270c <MPU6050_Read_Gyro_2+0x24c>)
 800253c:	801a      	strh	r2, [r3, #0]
		Gyro_Y_RAW2 -= gyro_cal2[1];
 800253e:	4b74      	ldr	r3, [pc, #464]	; (8002710 <MPU6050_Read_Gyro_2+0x250>)
 8002540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002544:	ee07 3a90 	vmov	s15, r3
 8002548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800254c:	4b72      	ldr	r3, [pc, #456]	; (8002718 <MPU6050_Read_Gyro_2+0x258>)
 800254e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800255a:	ee17 3a90 	vmov	r3, s15
 800255e:	b21a      	sxth	r2, r3
 8002560:	4b6b      	ldr	r3, [pc, #428]	; (8002710 <MPU6050_Read_Gyro_2+0x250>)
 8002562:	801a      	strh	r2, [r3, #0]
		Gyro_Z_RAW2 -= gyro_cal2[2];
 8002564:	4b6b      	ldr	r3, [pc, #428]	; (8002714 <MPU6050_Read_Gyro_2+0x254>)
 8002566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002572:	4b69      	ldr	r3, [pc, #420]	; (8002718 <MPU6050_Read_Gyro_2+0x258>)
 8002574:	edd3 7a02 	vldr	s15, [r3, #8]
 8002578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002580:	ee17 3a90 	vmov	r3, s15
 8002584:	b21a      	sxth	r2, r3
 8002586:	4b63      	ldr	r3, [pc, #396]	; (8002714 <MPU6050_Read_Gyro_2+0x254>)
 8002588:	801a      	strh	r2, [r3, #0]

		angle_pitch_gyro2 += Gyro_X_RAW2 * 0.0000611;
 800258a:	4b64      	ldr	r3, [pc, #400]	; (800271c <MPU6050_Read_Gyro_2+0x25c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd fffa 	bl	8000588 <__aeabi_f2d>
 8002594:	4604      	mov	r4, r0
 8002596:	460d      	mov	r5, r1
 8002598:	4b5c      	ldr	r3, [pc, #368]	; (800270c <MPU6050_Read_Gyro_2+0x24c>)
 800259a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ffe0 	bl	8000564 <__aeabi_i2d>
 80025a4:	a354      	add	r3, pc, #336	; (adr r3, 80026f8 <MPU6050_Read_Gyro_2+0x238>)
 80025a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025aa:	f7fe f845 	bl	8000638 <__aeabi_dmul>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4620      	mov	r0, r4
 80025b4:	4629      	mov	r1, r5
 80025b6:	f7fd fe89 	bl	80002cc <__adddf3>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f7fe fb31 	bl	8000c28 <__aeabi_d2f>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4a54      	ldr	r2, [pc, #336]	; (800271c <MPU6050_Read_Gyro_2+0x25c>)
 80025ca:	6013      	str	r3, [r2, #0]
		angle_roll_gyro2 += Gyro_Y_RAW2 * 0.0000611;
 80025cc:	4b54      	ldr	r3, [pc, #336]	; (8002720 <MPU6050_Read_Gyro_2+0x260>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ffd9 	bl	8000588 <__aeabi_f2d>
 80025d6:	4604      	mov	r4, r0
 80025d8:	460d      	mov	r5, r1
 80025da:	4b4d      	ldr	r3, [pc, #308]	; (8002710 <MPU6050_Read_Gyro_2+0x250>)
 80025dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ffbf 	bl	8000564 <__aeabi_i2d>
 80025e6:	a344      	add	r3, pc, #272	; (adr r3, 80026f8 <MPU6050_Read_Gyro_2+0x238>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	f7fe f824 	bl	8000638 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4620      	mov	r0, r4
 80025f6:	4629      	mov	r1, r5
 80025f8:	f7fd fe68 	bl	80002cc <__adddf3>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	f7fe fb10 	bl	8000c28 <__aeabi_d2f>
 8002608:	4603      	mov	r3, r0
 800260a:	4a45      	ldr	r2, [pc, #276]	; (8002720 <MPU6050_Read_Gyro_2+0x260>)
 800260c:	6013      	str	r3, [r2, #0]

        angle_pitch_gyro2 += angle_roll_gyro1 * sin(Gyro_Z_RAW2 * 0.000001066);
 800260e:	4b43      	ldr	r3, [pc, #268]	; (800271c <MPU6050_Read_Gyro_2+0x25c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ffb8 	bl	8000588 <__aeabi_f2d>
 8002618:	4604      	mov	r4, r0
 800261a:	460d      	mov	r5, r1
 800261c:	4b41      	ldr	r3, [pc, #260]	; (8002724 <MPU6050_Read_Gyro_2+0x264>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd ffb1 	bl	8000588 <__aeabi_f2d>
 8002626:	4680      	mov	r8, r0
 8002628:	4689      	mov	r9, r1
 800262a:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <MPU6050_Read_Gyro_2+0x254>)
 800262c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ff97 	bl	8000564 <__aeabi_i2d>
 8002636:	a332      	add	r3, pc, #200	; (adr r3, 8002700 <MPU6050_Read_Gyro_2+0x240>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	f7fd fffc 	bl	8000638 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	ec43 2b17 	vmov	d7, r2, r3
 8002648:	eeb0 0a47 	vmov.f32	s0, s14
 800264c:	eef0 0a67 	vmov.f32	s1, s15
 8002650:	f008 ff0e 	bl	800b470 <sin>
 8002654:	ec53 2b10 	vmov	r2, r3, d0
 8002658:	4640      	mov	r0, r8
 800265a:	4649      	mov	r1, r9
 800265c:	f7fd ffec 	bl	8000638 <__aeabi_dmul>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4620      	mov	r0, r4
 8002666:	4629      	mov	r1, r5
 8002668:	f7fd fe30 	bl	80002cc <__adddf3>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	f7fe fad8 	bl	8000c28 <__aeabi_d2f>
 8002678:	4603      	mov	r3, r0
 800267a:	4a28      	ldr	r2, [pc, #160]	; (800271c <MPU6050_Read_Gyro_2+0x25c>)
 800267c:	6013      	str	r3, [r2, #0]
        angle_roll_gyro2 -= angle_pitch_gyro1 * sin(Gyro_Z_RAW2 * 0.000001066);
 800267e:	4b28      	ldr	r3, [pc, #160]	; (8002720 <MPU6050_Read_Gyro_2+0x260>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd ff80 	bl	8000588 <__aeabi_f2d>
 8002688:	4604      	mov	r4, r0
 800268a:	460d      	mov	r5, r1
 800268c:	4b26      	ldr	r3, [pc, #152]	; (8002728 <MPU6050_Read_Gyro_2+0x268>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd ff79 	bl	8000588 <__aeabi_f2d>
 8002696:	4680      	mov	r8, r0
 8002698:	4689      	mov	r9, r1
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <MPU6050_Read_Gyro_2+0x254>)
 800269c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff5f 	bl	8000564 <__aeabi_i2d>
 80026a6:	a316      	add	r3, pc, #88	; (adr r3, 8002700 <MPU6050_Read_Gyro_2+0x240>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f7fd ffc4 	bl	8000638 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	ec43 2b17 	vmov	d7, r2, r3
 80026b8:	eeb0 0a47 	vmov.f32	s0, s14
 80026bc:	eef0 0a67 	vmov.f32	s1, s15
 80026c0:	f008 fed6 	bl	800b470 <sin>
 80026c4:	ec53 2b10 	vmov	r2, r3, d0
 80026c8:	4640      	mov	r0, r8
 80026ca:	4649      	mov	r1, r9
 80026cc:	f7fd ffb4 	bl	8000638 <__aeabi_dmul>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fd fdf6 	bl	80002c8 <__aeabi_dsub>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7fe faa0 	bl	8000c28 <__aeabi_d2f>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <MPU6050_Read_Gyro_2+0x260>)
 80026ec:	6013      	str	r3, [r2, #0]
	}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026f8:	01d41596 	.word	0x01d41596
 80026fc:	3f10045a 	.word	0x3f10045a
 8002700:	652c6e62 	.word	0x652c6e62
 8002704:	3eb1e26f 	.word	0x3eb1e26f
 8002708:	200002b0 	.word	0x200002b0
 800270c:	20000316 	.word	0x20000316
 8002710:	20000318 	.word	0x20000318
 8002714:	2000031a 	.word	0x2000031a
 8002718:	20000328 	.word	0x20000328
 800271c:	20000340 	.word	0x20000340
 8002720:	20000344 	.word	0x20000344
 8002724:	2000033c 	.word	0x2000033c
 8002728:	20000338 	.word	0x20000338
 800272c:	00000000 	.word	0x00000000

08002730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002730:	b5b0      	push	{r4, r5, r7, lr}
 8002732:	b0c8      	sub	sp, #288	; 0x120
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002736:	f000 ff53 	bl	80035e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800273a:	f000 fcb9 	bl	80030b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800273e:	f7fe fd7d 	bl	800123c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002742:	f000 fe7d 	bl	8003440 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002746:	f7fe fde7 	bl	8001318 <MX_I2C1_Init>
  MX_I2C2_Init();
 800274a:	f7fe fe13 	bl	8001374 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800274e:	f000 fe4d 	bl	80033ec <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002752:	f7fe fc6d 	bl	8001030 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8002756:	f7ff f899 	bl	800188c <MPU6050_Init>
  MPU6050_Init_2();
 800275a:	f7ff f9cd 	bl	8001af8 <MPU6050_Init_2>
  {
//	  prevtime1 = time1;
//	  time1 = HAL_GetTick();
//	  elapsedtime1=(time1-prevtime1)*1000;
	  /* UART RECİEVE */
	  HAL_UART_Receive(&huart1, Rx_data, 4, 100);
 800275e:	2364      	movs	r3, #100	; 0x64
 8002760:	2204      	movs	r2, #4
 8002762:	498c      	ldr	r1, [pc, #560]	; (8002994 <main+0x264>)
 8002764:	488c      	ldr	r0, [pc, #560]	; (8002998 <main+0x268>)
 8002766:	f003 fcfc 	bl	8006162 <HAL_UART_Receive>

	  /* Transmit Config */
	  char pitch1[] = "                  ";
 800276a:	4b8c      	ldr	r3, [pc, #560]	; (800299c <main+0x26c>)
 800276c:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8002770:	461d      	mov	r5, r3
 8002772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	8022      	strh	r2, [r4, #0]
 800277c:	3402      	adds	r4, #2
 800277e:	0c1b      	lsrs	r3, r3, #16
 8002780:	7023      	strb	r3, [r4, #0]
	  char pitch2[] = "                  ";
 8002782:	4b86      	ldr	r3, [pc, #536]	; (800299c <main+0x26c>)
 8002784:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8002788:	461d      	mov	r5, r3
 800278a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800278c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278e:	682b      	ldr	r3, [r5, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	8022      	strh	r2, [r4, #0]
 8002794:	3402      	adds	r4, #2
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	7023      	strb	r3, [r4, #0]
	  char roll1[] = "                  ";
 800279a:	4b80      	ldr	r3, [pc, #512]	; (800299c <main+0x26c>)
 800279c:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80027a0:	461d      	mov	r5, r3
 80027a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a6:	682b      	ldr	r3, [r5, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	8022      	strh	r2, [r4, #0]
 80027ac:	3402      	adds	r4, #2
 80027ae:	0c1b      	lsrs	r3, r3, #16
 80027b0:	7023      	strb	r3, [r4, #0]
	  char roll2[] = "                  ";
 80027b2:	4b7a      	ldr	r3, [pc, #488]	; (800299c <main+0x26c>)
 80027b4:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 80027b8:	461d      	mov	r5, r3
 80027ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027be:	682b      	ldr	r3, [r5, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	8022      	strh	r2, [r4, #0]
 80027c4:	3402      	adds	r4, #2
 80027c6:	0c1b      	lsrs	r3, r3, #16
 80027c8:	7023      	strb	r3, [r4, #0]
	  char sep[] = "|";
 80027ca:	237c      	movs	r3, #124	; 0x7c
 80027cc:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc


	  /* MPU Acceleration */
	  MPU_6050_Read_Accel();
 80027d0:	f7ff f9ea 	bl	8001ba8 <MPU_6050_Read_Accel>
	  MPU6050_Read_Gyro();
 80027d4:	f7ff fb94 	bl	8001f00 <MPU6050_Read_Gyro>
	  MPU_6050_Read_Accel_2();
 80027d8:	f7ff fcc6 	bl	8002168 <MPU_6050_Read_Accel_2>
	  MPU6050_Read_Gyro_2();
 80027dc:	f7ff fe70 	bl	80024c0 <MPU6050_Read_Gyro_2>
	  floatToChar(angle_pitch1, pitch1, sizeof(pitch1));
 80027e0:	4b6f      	ldr	r3, [pc, #444]	; (80029a0 <main+0x270>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80027ea:	2113      	movs	r1, #19
 80027ec:	4618      	mov	r0, r3
 80027ee:	eeb0 0a67 	vmov.f32	s0, s15
 80027f2:	f7ff f831 	bl	8001858 <floatToChar>
	  floatToChar(angle_pitch2, pitch2, sizeof(pitch2));
 80027f6:	4b6b      	ldr	r3, [pc, #428]	; (80029a4 <main+0x274>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002800:	2113      	movs	r1, #19
 8002802:	4618      	mov	r0, r3
 8002804:	eeb0 0a67 	vmov.f32	s0, s15
 8002808:	f7ff f826 	bl	8001858 <floatToChar>
	  floatToChar(angle_roll1, roll1, sizeof(roll1));
 800280c:	4b66      	ldr	r3, [pc, #408]	; (80029a8 <main+0x278>)
 800280e:	edd3 7a00 	vldr	s15, [r3]
 8002812:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002816:	2113      	movs	r1, #19
 8002818:	4618      	mov	r0, r3
 800281a:	eeb0 0a67 	vmov.f32	s0, s15
 800281e:	f7ff f81b 	bl	8001858 <floatToChar>
	  floatToChar(angle_roll2, roll2, sizeof(roll2));
 8002822:	4b62      	ldr	r3, [pc, #392]	; (80029ac <main+0x27c>)
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800282c:	2113      	movs	r1, #19
 800282e:	4618      	mov	r0, r3
 8002830:	eeb0 0a67 	vmov.f32	s0, s15
 8002834:	f7ff f810 	bl	8001858 <floatToChar>


	  /* Flex Analog Read */
	  Read_ADC0();
 8002838:	f7fe fe6a 	bl	8001510 <Read_ADC0>
	  Read_ADC1();
 800283c:	f7fe febc 	bl	80015b8 <Read_ADC1>
	  Read_ADC2();
 8002840:	f7fe ff0e 	bl	8001660 <Read_ADC2>
	  Read_ADC3();
 8002844:	f7fe ff60 	bl	8001708 <Read_ADC3>
	  Read_ADC4();
 8002848:	f7fe ffb2 	bl	80017b0 <Read_ADC4>
	  char analog1[] = "                  ";
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <main+0x26c>)
 800284e:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8002852:	461d      	mov	r5, r3
 8002854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002858:	682b      	ldr	r3, [r5, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	8022      	strh	r2, [r4, #0]
 800285e:	3402      	adds	r4, #2
 8002860:	0c1b      	lsrs	r3, r3, #16
 8002862:	7023      	strb	r3, [r4, #0]
	  floatToChar(Vflex[0], analog1, sizeof(analog1));
 8002864:	4b52      	ldr	r3, [pc, #328]	; (80029b0 <main+0x280>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800286e:	2113      	movs	r1, #19
 8002870:	4618      	mov	r0, r3
 8002872:	eeb0 0a67 	vmov.f32	s0, s15
 8002876:	f7fe ffef 	bl	8001858 <floatToChar>
	  char analog2[] = "                  ";
 800287a:	4b48      	ldr	r3, [pc, #288]	; (800299c <main+0x26c>)
 800287c:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8002880:	461d      	mov	r5, r3
 8002882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002886:	682b      	ldr	r3, [r5, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	8022      	strh	r2, [r4, #0]
 800288c:	3402      	adds	r4, #2
 800288e:	0c1b      	lsrs	r3, r3, #16
 8002890:	7023      	strb	r3, [r4, #0]
	  floatToChar(Vflex[1], analog2, sizeof(analog2));
 8002892:	4b47      	ldr	r3, [pc, #284]	; (80029b0 <main+0x280>)
 8002894:	edd3 7a01 	vldr	s15, [r3, #4]
 8002898:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800289c:	2113      	movs	r1, #19
 800289e:	4618      	mov	r0, r3
 80028a0:	eeb0 0a67 	vmov.f32	s0, s15
 80028a4:	f7fe ffd8 	bl	8001858 <floatToChar>
	  char analog3[] = "                  ";
 80028a8:	4b3c      	ldr	r3, [pc, #240]	; (800299c <main+0x26c>)
 80028aa:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80028ae:	461d      	mov	r5, r3
 80028b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b4:	682b      	ldr	r3, [r5, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	8022      	strh	r2, [r4, #0]
 80028ba:	3402      	adds	r4, #2
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	7023      	strb	r3, [r4, #0]
	  floatToChar(Vflex[2], analog3, sizeof(analog3));
 80028c0:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <main+0x280>)
 80028c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80028c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028ca:	2113      	movs	r1, #19
 80028cc:	4618      	mov	r0, r3
 80028ce:	eeb0 0a67 	vmov.f32	s0, s15
 80028d2:	f7fe ffc1 	bl	8001858 <floatToChar>
	  char analog4[] = "                  ";
 80028d6:	4b31      	ldr	r3, [pc, #196]	; (800299c <main+0x26c>)
 80028d8:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80028dc:	461d      	mov	r5, r3
 80028de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e2:	682b      	ldr	r3, [r5, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	8022      	strh	r2, [r4, #0]
 80028e8:	3402      	adds	r4, #2
 80028ea:	0c1b      	lsrs	r3, r3, #16
 80028ec:	7023      	strb	r3, [r4, #0]
	  floatToChar(Vflex[3], analog4, sizeof(analog4));
 80028ee:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <main+0x280>)
 80028f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80028f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028f8:	2113      	movs	r1, #19
 80028fa:	4618      	mov	r0, r3
 80028fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002900:	f7fe ffaa 	bl	8001858 <floatToChar>
	  char analog5[] = "                  ";
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <main+0x26c>)
 8002906:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800290a:	461d      	mov	r5, r3
 800290c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	8022      	strh	r2, [r4, #0]
 8002916:	3402      	adds	r4, #2
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	7023      	strb	r3, [r4, #0]
	  floatToChar(Vflex[4], analog5, sizeof(analog5));
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <main+0x280>)
 800291e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002922:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002926:	2113      	movs	r1, #19
 8002928:	4618      	mov	r0, r3
 800292a:	eeb0 0a67 	vmov.f32	s0, s15
 800292e:	f7fe ff93 	bl	8001858 <floatToChar>


	  /* Calibration */
	  if(*Rx_data == 6){
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <main+0x264>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b06      	cmp	r3, #6
 8002938:	f040 81b8 	bne.w	8002cac <main+0x57c>
		Rf1bb = 0;
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <main+0x284>)
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
		Rf2bb = 0;
 8002944:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <main+0x288>)
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
		Rf3bb = 0;
 800294c:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <main+0x28c>)
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
		Rf4bb = 0;
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <main+0x290>)
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
		Rf5bb = 0;
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <main+0x294>)
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
		Rf1b = 0;
 8002964:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <main+0x298>)
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
		Rf2b = 0;
 800296c:	4b17      	ldr	r3, [pc, #92]	; (80029cc <main+0x29c>)
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
		Rf3b = 0;
 8002974:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <main+0x2a0>)
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
		Rf4b = 0;
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <main+0x2a4>)
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
		Rf5b = 0;
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <main+0x2a8>)
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
	  	for(i=0; i<3000; i++){
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <main+0x2ac>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e14c      	b.n	8002c2e <main+0x4fe>
 8002994:	200003b8 	.word	0x200003b8
 8002998:	2000040c 	.word	0x2000040c
 800299c:	0800cadc 	.word	0x0800cadc
 80029a0:	20000358 	.word	0x20000358
 80029a4:	20000360 	.word	0x20000360
 80029a8:	2000035c 	.word	0x2000035c
 80029ac:	20000364 	.word	0x20000364
 80029b0:	20000378 	.word	0x20000378
 80029b4:	200003e4 	.word	0x200003e4
 80029b8:	200003e8 	.word	0x200003e8
 80029bc:	200003ec 	.word	0x200003ec
 80029c0:	200003f0 	.word	0x200003f0
 80029c4:	200003f4 	.word	0x200003f4
 80029c8:	200003d0 	.word	0x200003d0
 80029cc:	200003d4 	.word	0x200003d4
 80029d0:	200003d8 	.word	0x200003d8
 80029d4:	200003dc 	.word	0x200003dc
 80029d8:	200003e0 	.word	0x200003e0
 80029dc:	20000368 	.word	0x20000368
	  		Read_ADC0();
 80029e0:	f7fe fd96 	bl	8001510 <Read_ADC0>
	  		Read_ADC1();
 80029e4:	f7fe fde8 	bl	80015b8 <Read_ADC1>
	  		Read_ADC2();
 80029e8:	f7fe fe3a 	bl	8001660 <Read_ADC2>
	  		Read_ADC3();
 80029ec:	f7fe fe8c 	bl	8001708 <Read_ADC3>
	  		Read_ADC4();
 80029f0:	f7fe fede 	bl	80017b0 <Read_ADC4>
	  		Rf1 = 0;
 80029f4:	4bcc      	ldr	r3, [pc, #816]	; (8002d28 <main+0x5f8>)
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
	  		Rf2 = 0;
 80029fc:	4bcb      	ldr	r3, [pc, #812]	; (8002d2c <main+0x5fc>)
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
	  		Rf3 = 0;
 8002a04:	4bca      	ldr	r3, [pc, #808]	; (8002d30 <main+0x600>)
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
	  		Rf4 = 0;
 8002a0c:	4bc9      	ldr	r3, [pc, #804]	; (8002d34 <main+0x604>)
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
	  		Rf5 = 0;
 8002a14:	4bc8      	ldr	r3, [pc, #800]	; (8002d38 <main+0x608>)
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
	  		Rf1 = (Rcc1 * Vflex[0]) / (3.3 - Vflex[0]);
 8002a1c:	4bc7      	ldr	r3, [pc, #796]	; (8002d3c <main+0x60c>)
 8002a1e:	ed93 7a00 	vldr	s14, [r3]
 8002a22:	4bc7      	ldr	r3, [pc, #796]	; (8002d40 <main+0x610>)
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2c:	ee17 0a90 	vmov	r0, s15
 8002a30:	f7fd fdaa 	bl	8000588 <__aeabi_f2d>
 8002a34:	4604      	mov	r4, r0
 8002a36:	460d      	mov	r5, r1
 8002a38:	4bc0      	ldr	r3, [pc, #768]	; (8002d3c <main+0x60c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fda3 	bl	8000588 <__aeabi_f2d>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	a1b6      	add	r1, pc, #728	; (adr r1, 8002d20 <main+0x5f0>)
 8002a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a4c:	f7fd fc3c 	bl	80002c8 <__aeabi_dsub>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4620      	mov	r0, r4
 8002a56:	4629      	mov	r1, r5
 8002a58:	f7fd ff18 	bl	800088c <__aeabi_ddiv>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7fe f8e0 	bl	8000c28 <__aeabi_d2f>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4aaf      	ldr	r2, [pc, #700]	; (8002d28 <main+0x5f8>)
 8002a6c:	6013      	str	r3, [r2, #0]
	  		Rf2 = (Rcc2 * Vflex[1]) / (3.3 - Vflex[1]);
 8002a6e:	4bb3      	ldr	r3, [pc, #716]	; (8002d3c <main+0x60c>)
 8002a70:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a74:	4bb3      	ldr	r3, [pc, #716]	; (8002d44 <main+0x614>)
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	ee17 0a90 	vmov	r0, s15
 8002a82:	f7fd fd81 	bl	8000588 <__aeabi_f2d>
 8002a86:	4604      	mov	r4, r0
 8002a88:	460d      	mov	r5, r1
 8002a8a:	4bac      	ldr	r3, [pc, #688]	; (8002d3c <main+0x60c>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fd7a 	bl	8000588 <__aeabi_f2d>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	a1a1      	add	r1, pc, #644	; (adr r1, 8002d20 <main+0x5f0>)
 8002a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a9e:	f7fd fc13 	bl	80002c8 <__aeabi_dsub>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	f7fd feef 	bl	800088c <__aeabi_ddiv>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f7fe f8b7 	bl	8000c28 <__aeabi_d2f>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a9b      	ldr	r2, [pc, #620]	; (8002d2c <main+0x5fc>)
 8002abe:	6013      	str	r3, [r2, #0]
	  		Rf3 = (Rcc3 * Vflex[2]) / (3.3 - Vflex[2]);
 8002ac0:	4b9e      	ldr	r3, [pc, #632]	; (8002d3c <main+0x60c>)
 8002ac2:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ac6:	4ba0      	ldr	r3, [pc, #640]	; (8002d48 <main+0x618>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad0:	ee17 0a90 	vmov	r0, s15
 8002ad4:	f7fd fd58 	bl	8000588 <__aeabi_f2d>
 8002ad8:	4604      	mov	r4, r0
 8002ada:	460d      	mov	r5, r1
 8002adc:	4b97      	ldr	r3, [pc, #604]	; (8002d3c <main+0x60c>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fd51 	bl	8000588 <__aeabi_f2d>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	a18d      	add	r1, pc, #564	; (adr r1, 8002d20 <main+0x5f0>)
 8002aec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002af0:	f7fd fbea 	bl	80002c8 <__aeabi_dsub>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd fec6 	bl	800088c <__aeabi_ddiv>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f7fe f88e 	bl	8000c28 <__aeabi_d2f>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4a88      	ldr	r2, [pc, #544]	; (8002d30 <main+0x600>)
 8002b10:	6013      	str	r3, [r2, #0]
	  		Rf4 = (Rcc4 * Vflex[3]) / (3.3 - Vflex[3]);
 8002b12:	4b8a      	ldr	r3, [pc, #552]	; (8002d3c <main+0x60c>)
 8002b14:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b18:	4b8c      	ldr	r3, [pc, #560]	; (8002d4c <main+0x61c>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b22:	ee17 0a90 	vmov	r0, s15
 8002b26:	f7fd fd2f 	bl	8000588 <__aeabi_f2d>
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	460d      	mov	r5, r1
 8002b2e:	4b83      	ldr	r3, [pc, #524]	; (8002d3c <main+0x60c>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fd28 	bl	8000588 <__aeabi_f2d>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	a178      	add	r1, pc, #480	; (adr r1, 8002d20 <main+0x5f0>)
 8002b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b42:	f7fd fbc1 	bl	80002c8 <__aeabi_dsub>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd fe9d 	bl	800088c <__aeabi_ddiv>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f865 	bl	8000c28 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a74      	ldr	r2, [pc, #464]	; (8002d34 <main+0x604>)
 8002b62:	6013      	str	r3, [r2, #0]
	  		Rf5 = (Rcc5 * Vflex[4]) / (3.3 - Vflex[4]);
 8002b64:	4b75      	ldr	r3, [pc, #468]	; (8002d3c <main+0x60c>)
 8002b66:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b6a:	4b79      	ldr	r3, [pc, #484]	; (8002d50 <main+0x620>)
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b74:	ee17 0a90 	vmov	r0, s15
 8002b78:	f7fd fd06 	bl	8000588 <__aeabi_f2d>
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	460d      	mov	r5, r1
 8002b80:	4b6e      	ldr	r3, [pc, #440]	; (8002d3c <main+0x60c>)
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fcff 	bl	8000588 <__aeabi_f2d>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	a164      	add	r1, pc, #400	; (adr r1, 8002d20 <main+0x5f0>)
 8002b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b94:	f7fd fb98 	bl	80002c8 <__aeabi_dsub>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	f7fd fe74 	bl	800088c <__aeabi_ddiv>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	f7fe f83c 	bl	8000c28 <__aeabi_d2f>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4a61      	ldr	r2, [pc, #388]	; (8002d38 <main+0x608>)
 8002bb4:	6013      	str	r3, [r2, #0]
	  		Rf1b = Rf1b + Rf1;
 8002bb6:	4b67      	ldr	r3, [pc, #412]	; (8002d54 <main+0x624>)
 8002bb8:	ed93 7a00 	vldr	s14, [r3]
 8002bbc:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <main+0x5f8>)
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc6:	4b63      	ldr	r3, [pc, #396]	; (8002d54 <main+0x624>)
 8002bc8:	edc3 7a00 	vstr	s15, [r3]
	  		Rf2b = Rf2b + Rf2;
 8002bcc:	4b62      	ldr	r3, [pc, #392]	; (8002d58 <main+0x628>)
 8002bce:	ed93 7a00 	vldr	s14, [r3]
 8002bd2:	4b56      	ldr	r3, [pc, #344]	; (8002d2c <main+0x5fc>)
 8002bd4:	edd3 7a00 	vldr	s15, [r3]
 8002bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bdc:	4b5e      	ldr	r3, [pc, #376]	; (8002d58 <main+0x628>)
 8002bde:	edc3 7a00 	vstr	s15, [r3]
	  		Rf3b = Rf3b + Rf3;
 8002be2:	4b5e      	ldr	r3, [pc, #376]	; (8002d5c <main+0x62c>)
 8002be4:	ed93 7a00 	vldr	s14, [r3]
 8002be8:	4b51      	ldr	r3, [pc, #324]	; (8002d30 <main+0x600>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf2:	4b5a      	ldr	r3, [pc, #360]	; (8002d5c <main+0x62c>)
 8002bf4:	edc3 7a00 	vstr	s15, [r3]
	  		Rf4b = Rf4b + Rf4;
 8002bf8:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <main+0x630>)
 8002bfa:	ed93 7a00 	vldr	s14, [r3]
 8002bfe:	4b4d      	ldr	r3, [pc, #308]	; (8002d34 <main+0x604>)
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c08:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <main+0x630>)
 8002c0a:	edc3 7a00 	vstr	s15, [r3]
	  		Rf5b = Rf5b + Rf5;
 8002c0e:	4b55      	ldr	r3, [pc, #340]	; (8002d64 <main+0x634>)
 8002c10:	ed93 7a00 	vldr	s14, [r3]
 8002c14:	4b48      	ldr	r3, [pc, #288]	; (8002d38 <main+0x608>)
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1e:	4b51      	ldr	r3, [pc, #324]	; (8002d64 <main+0x634>)
 8002c20:	edc3 7a00 	vstr	s15, [r3]
	  	for(i=0; i<3000; i++){
 8002c24:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <main+0x638>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	4a4f      	ldr	r2, [pc, #316]	; (8002d68 <main+0x638>)
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b4e      	ldr	r3, [pc, #312]	; (8002d68 <main+0x638>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002c36:	4293      	cmp	r3, r2
 8002c38:	f77f aed2 	ble.w	80029e0 <main+0x2b0>
	  	}
	  	HAL_Delay(100);
 8002c3c:	2064      	movs	r0, #100	; 0x64
 8002c3e:	f000 fd41 	bl	80036c4 <HAL_Delay>
	  	Rf1bb = Rf1b/3000;
 8002c42:	4b44      	ldr	r3, [pc, #272]	; (8002d54 <main+0x624>)
 8002c44:	ed93 7a00 	vldr	s14, [r3]
 8002c48:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002d6c <main+0x63c>
 8002c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c50:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <main+0x640>)
 8002c52:	edc3 7a00 	vstr	s15, [r3]
	  	Rf2bb = Rf2b/3000;
 8002c56:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <main+0x628>)
 8002c58:	ed93 7a00 	vldr	s14, [r3]
 8002c5c:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002d6c <main+0x63c>
 8002c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c64:	4b43      	ldr	r3, [pc, #268]	; (8002d74 <main+0x644>)
 8002c66:	edc3 7a00 	vstr	s15, [r3]
	  	Rf3bb = Rf3b/3000;
 8002c6a:	4b3c      	ldr	r3, [pc, #240]	; (8002d5c <main+0x62c>)
 8002c6c:	ed93 7a00 	vldr	s14, [r3]
 8002c70:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8002d6c <main+0x63c>
 8002c74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c78:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <main+0x648>)
 8002c7a:	edc3 7a00 	vstr	s15, [r3]
	  	Rf4bb = Rf4b/3000;
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <main+0x630>)
 8002c80:	ed93 7a00 	vldr	s14, [r3]
 8002c84:	eddf 6a39 	vldr	s13, [pc, #228]	; 8002d6c <main+0x63c>
 8002c88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c8c:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <main+0x64c>)
 8002c8e:	edc3 7a00 	vstr	s15, [r3]
	  	Rf5bb = Rf5b/3000;
 8002c92:	4b34      	ldr	r3, [pc, #208]	; (8002d64 <main+0x634>)
 8002c94:	ed93 7a00 	vldr	s14, [r3]
 8002c98:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002d6c <main+0x63c>
 8002c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca0:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <main+0x650>)
 8002ca2:	edc3 7a00 	vstr	s15, [r3]
	  	*Rx_data = 0;
 8002ca6:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <main+0x654>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
	  }


	  /* Angle Calculation for Flex Sensors */
	  flexAngle(&angles[0],Rcc1,Rf1bb, Vflex[0]);
 8002cac:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <main+0x610>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <main+0x640>)
 8002cb4:	ed93 7a00 	vldr	s14, [r3]
 8002cb8:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <main+0x60c>)
 8002cba:	edd3 6a00 	vldr	s13, [r3]
 8002cbe:	eeb0 1a66 	vmov.f32	s2, s13
 8002cc2:	eef0 0a47 	vmov.f32	s1, s14
 8002cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cca:	482f      	ldr	r0, [pc, #188]	; (8002d88 <main+0x658>)
 8002ccc:	f7fe fe34 	bl	8001938 <flexAngle>
	  flexAngle(&angles[1],Rcc2,Rf2bb, Vflex[1]);
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <main+0x614>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	4b27      	ldr	r3, [pc, #156]	; (8002d74 <main+0x644>)
 8002cd8:	ed93 7a00 	vldr	s14, [r3]
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <main+0x60c>)
 8002cde:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ce2:	eeb0 1a66 	vmov.f32	s2, s13
 8002ce6:	eef0 0a47 	vmov.f32	s1, s14
 8002cea:	eeb0 0a67 	vmov.f32	s0, s15
 8002cee:	4827      	ldr	r0, [pc, #156]	; (8002d8c <main+0x65c>)
 8002cf0:	f7fe fe22 	bl	8001938 <flexAngle>
	  flexAngle(&angles[2],Rcc3,Rf3bb, Vflex[2]);
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <main+0x618>)
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <main+0x648>)
 8002cfc:	ed93 7a00 	vldr	s14, [r3]
 8002d00:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <main+0x60c>)
 8002d02:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d06:	eeb0 1a66 	vmov.f32	s2, s13
 8002d0a:	eef0 0a47 	vmov.f32	s1, s14
 8002d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d12:	481f      	ldr	r0, [pc, #124]	; (8002d90 <main+0x660>)
 8002d14:	f7fe fe10 	bl	8001938 <flexAngle>
 8002d18:	e03c      	b.n	8002d94 <main+0x664>
 8002d1a:	bf00      	nop
 8002d1c:	f3af 8000 	nop.w
 8002d20:	66666666 	.word	0x66666666
 8002d24:	400a6666 	.word	0x400a6666
 8002d28:	200003bc 	.word	0x200003bc
 8002d2c:	200003c0 	.word	0x200003c0
 8002d30:	200003c4 	.word	0x200003c4
 8002d34:	200003c8 	.word	0x200003c8
 8002d38:	200003cc 	.word	0x200003cc
 8002d3c:	20000378 	.word	0x20000378
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000004 	.word	0x20000004
 8002d48:	20000008 	.word	0x20000008
 8002d4c:	2000000c 	.word	0x2000000c
 8002d50:	20000010 	.word	0x20000010
 8002d54:	200003d0 	.word	0x200003d0
 8002d58:	200003d4 	.word	0x200003d4
 8002d5c:	200003d8 	.word	0x200003d8
 8002d60:	200003dc 	.word	0x200003dc
 8002d64:	200003e0 	.word	0x200003e0
 8002d68:	20000368 	.word	0x20000368
 8002d6c:	453b8000 	.word	0x453b8000
 8002d70:	200003e4 	.word	0x200003e4
 8002d74:	200003e8 	.word	0x200003e8
 8002d78:	200003ec 	.word	0x200003ec
 8002d7c:	200003f0 	.word	0x200003f0
 8002d80:	200003f4 	.word	0x200003f4
 8002d84:	200003b8 	.word	0x200003b8
 8002d88:	2000038c 	.word	0x2000038c
 8002d8c:	20000390 	.word	0x20000390
 8002d90:	20000394 	.word	0x20000394
	  flexAngleShort(&angles[3],Rcc4,Rf4bb, Vflex[3]);
 8002d94:	4bbc      	ldr	r3, [pc, #752]	; (8003088 <main+0x958>)
 8002d96:	edd3 7a00 	vldr	s15, [r3]
 8002d9a:	4bbc      	ldr	r3, [pc, #752]	; (800308c <main+0x95c>)
 8002d9c:	ed93 7a00 	vldr	s14, [r3]
 8002da0:	4bbb      	ldr	r3, [pc, #748]	; (8003090 <main+0x960>)
 8002da2:	edd3 6a03 	vldr	s13, [r3, #12]
 8002da6:	eeb0 1a66 	vmov.f32	s2, s13
 8002daa:	eef0 0a47 	vmov.f32	s1, s14
 8002dae:	eeb0 0a67 	vmov.f32	s0, s15
 8002db2:	48b8      	ldr	r0, [pc, #736]	; (8003094 <main+0x964>)
 8002db4:	f7fe fe30 	bl	8001a18 <flexAngleShort>
	  flexAngleShort(&angles[4],Rcc5,Rf5bb, Vflex[4]);
 8002db8:	4bb7      	ldr	r3, [pc, #732]	; (8003098 <main+0x968>)
 8002dba:	edd3 7a00 	vldr	s15, [r3]
 8002dbe:	4bb7      	ldr	r3, [pc, #732]	; (800309c <main+0x96c>)
 8002dc0:	ed93 7a00 	vldr	s14, [r3]
 8002dc4:	4bb2      	ldr	r3, [pc, #712]	; (8003090 <main+0x960>)
 8002dc6:	edd3 6a04 	vldr	s13, [r3, #16]
 8002dca:	eeb0 1a66 	vmov.f32	s2, s13
 8002dce:	eef0 0a47 	vmov.f32	s1, s14
 8002dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd6:	48b2      	ldr	r0, [pc, #712]	; (80030a0 <main+0x970>)
 8002dd8:	f7fe fe1e 	bl	8001a18 <flexAngleShort>

	  /* Angle Configuration */
	  char angle1[] = "                  ";
 8002ddc:	4bb1      	ldr	r3, [pc, #708]	; (80030a4 <main+0x974>)
 8002dde:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002de2:	461d      	mov	r5, r3
 8002de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002de8:	682b      	ldr	r3, [r5, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	8022      	strh	r2, [r4, #0]
 8002dee:	3402      	adds	r4, #2
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	7023      	strb	r3, [r4, #0]
	  floatToChar(angles[0], angle1, sizeof(angle1));
 8002df4:	4bac      	ldr	r3, [pc, #688]	; (80030a8 <main+0x978>)
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dfe:	2113      	movs	r1, #19
 8002e00:	4618      	mov	r0, r3
 8002e02:	eeb0 0a67 	vmov.f32	s0, s15
 8002e06:	f7fe fd27 	bl	8001858 <floatToChar>
	  char angle2[] = "                  ";
 8002e0a:	4ba6      	ldr	r3, [pc, #664]	; (80030a4 <main+0x974>)
 8002e0c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002e10:	461d      	mov	r5, r3
 8002e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e16:	682b      	ldr	r3, [r5, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	8022      	strh	r2, [r4, #0]
 8002e1c:	3402      	adds	r4, #2
 8002e1e:	0c1b      	lsrs	r3, r3, #16
 8002e20:	7023      	strb	r3, [r4, #0]
	  floatToChar(angles[1], angle2, sizeof(angle2));
 8002e22:	4ba1      	ldr	r3, [pc, #644]	; (80030a8 <main+0x978>)
 8002e24:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e2c:	2113      	movs	r1, #19
 8002e2e:	4618      	mov	r0, r3
 8002e30:	eeb0 0a67 	vmov.f32	s0, s15
 8002e34:	f7fe fd10 	bl	8001858 <floatToChar>
	  char angle3[] = "                  ";
 8002e38:	4b9a      	ldr	r3, [pc, #616]	; (80030a4 <main+0x974>)
 8002e3a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002e3e:	461d      	mov	r5, r3
 8002e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e44:	682b      	ldr	r3, [r5, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	8022      	strh	r2, [r4, #0]
 8002e4a:	3402      	adds	r4, #2
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	7023      	strb	r3, [r4, #0]
	  floatToChar(angles[2], angle3, sizeof(angle3));
 8002e50:	4b95      	ldr	r3, [pc, #596]	; (80030a8 <main+0x978>)
 8002e52:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e5a:	2113      	movs	r1, #19
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e62:	f7fe fcf9 	bl	8001858 <floatToChar>
	  char angle4[] = "                  ";
 8002e66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e6e:	4a8d      	ldr	r2, [pc, #564]	; (80030a4 <main+0x974>)
 8002e70:	461c      	mov	r4, r3
 8002e72:	4615      	mov	r5, r2
 8002e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	8022      	strh	r2, [r4, #0]
 8002e7e:	3402      	adds	r4, #2
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	7023      	strb	r3, [r4, #0]
	  floatToChar(angles[3], angle4, sizeof(angle4));
 8002e84:	4b88      	ldr	r3, [pc, #544]	; (80030a8 <main+0x978>)
 8002e86:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e8a:	f107 0318 	add.w	r3, r7, #24
 8002e8e:	2113      	movs	r1, #19
 8002e90:	4618      	mov	r0, r3
 8002e92:	eeb0 0a67 	vmov.f32	s0, s15
 8002e96:	f7fe fcdf 	bl	8001858 <floatToChar>
	  char angle5[] = "                  ";
 8002e9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ea2:	4a80      	ldr	r2, [pc, #512]	; (80030a4 <main+0x974>)
 8002ea4:	461c      	mov	r4, r3
 8002ea6:	4615      	mov	r5, r2
 8002ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	8022      	strh	r2, [r4, #0]
 8002eb2:	3402      	adds	r4, #2
 8002eb4:	0c1b      	lsrs	r3, r3, #16
 8002eb6:	7023      	strb	r3, [r4, #0]
	  floatToChar(angles[4], angle5, sizeof(angle5));
 8002eb8:	4b7b      	ldr	r3, [pc, #492]	; (80030a8 <main+0x978>)
 8002eba:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	2113      	movs	r1, #19
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec8:	f7fe fcc6 	bl	8001858 <floatToChar>

	   /* UART Transmit */
	  HAL_UART_Transmit(&huart1, pitch1, sizeof(pitch1), HAL_MAX_DELAY);
 8002ecc:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed4:	2213      	movs	r2, #19
 8002ed6:	4875      	ldr	r0, [pc, #468]	; (80030ac <main+0x97c>)
 8002ed8:	f003 f8b1 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 8002edc:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	4871      	ldr	r0, [pc, #452]	; (80030ac <main+0x97c>)
 8002ee8:	f003 f8a9 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, pitch2, sizeof(pitch2), HAL_MAX_DELAY);
 8002eec:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	2213      	movs	r2, #19
 8002ef6:	486d      	ldr	r0, [pc, #436]	; (80030ac <main+0x97c>)
 8002ef8:	f003 f8a1 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 8002efc:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002f00:	f04f 33ff 	mov.w	r3, #4294967295
 8002f04:	2202      	movs	r2, #2
 8002f06:	4869      	ldr	r0, [pc, #420]	; (80030ac <main+0x97c>)
 8002f08:	f003 f899 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, roll1, sizeof(roll1), HAL_MAX_DELAY);
 8002f0c:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
 8002f14:	2213      	movs	r2, #19
 8002f16:	4865      	ldr	r0, [pc, #404]	; (80030ac <main+0x97c>)
 8002f18:	f003 f891 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 8002f1c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
 8002f24:	2202      	movs	r2, #2
 8002f26:	4861      	ldr	r0, [pc, #388]	; (80030ac <main+0x97c>)
 8002f28:	f003 f889 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, roll2, sizeof(roll2), HAL_MAX_DELAY);
 8002f2c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
 8002f34:	2213      	movs	r2, #19
 8002f36:	485d      	ldr	r0, [pc, #372]	; (80030ac <main+0x97c>)
 8002f38:	f003 f881 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 8002f3c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002f40:	f04f 33ff 	mov.w	r3, #4294967295
 8002f44:	2202      	movs	r2, #2
 8002f46:	4859      	ldr	r0, [pc, #356]	; (80030ac <main+0x97c>)
 8002f48:	f003 f879 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, analog1, sizeof(analog1), HAL_MAX_DELAY);
 8002f4c:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
 8002f54:	2213      	movs	r2, #19
 8002f56:	4855      	ldr	r0, [pc, #340]	; (80030ac <main+0x97c>)
 8002f58:	f003 f871 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 8002f5c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002f60:	f04f 33ff 	mov.w	r3, #4294967295
 8002f64:	2202      	movs	r2, #2
 8002f66:	4851      	ldr	r0, [pc, #324]	; (80030ac <main+0x97c>)
 8002f68:	f003 f869 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, angle1, sizeof(angle1), HAL_MAX_DELAY);
 8002f6c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	2213      	movs	r2, #19
 8002f76:	484d      	ldr	r0, [pc, #308]	; (80030ac <main+0x97c>)
 8002f78:	f003 f861 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 8002f7c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002f80:	f04f 33ff 	mov.w	r3, #4294967295
 8002f84:	2202      	movs	r2, #2
 8002f86:	4849      	ldr	r0, [pc, #292]	; (80030ac <main+0x97c>)
 8002f88:	f003 f859 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, analog2, sizeof(analog2), HAL_MAX_DELAY);
 8002f8c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002f90:	f04f 33ff 	mov.w	r3, #4294967295
 8002f94:	2213      	movs	r2, #19
 8002f96:	4845      	ldr	r0, [pc, #276]	; (80030ac <main+0x97c>)
 8002f98:	f003 f851 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 8002f9c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	4841      	ldr	r0, [pc, #260]	; (80030ac <main+0x97c>)
 8002fa8:	f003 f849 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, angle2, sizeof(angle2), HAL_MAX_DELAY);
 8002fac:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	2213      	movs	r2, #19
 8002fb6:	483d      	ldr	r0, [pc, #244]	; (80030ac <main+0x97c>)
 8002fb8:	f003 f841 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 8002fbc:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	4839      	ldr	r0, [pc, #228]	; (80030ac <main+0x97c>)
 8002fc8:	f003 f839 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, analog3, sizeof(analog3), HAL_MAX_DELAY);
 8002fcc:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd4:	2213      	movs	r2, #19
 8002fd6:	4835      	ldr	r0, [pc, #212]	; (80030ac <main+0x97c>)
 8002fd8:	f003 f831 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 8002fdc:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	4831      	ldr	r0, [pc, #196]	; (80030ac <main+0x97c>)
 8002fe8:	f003 f829 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, angle3, sizeof(angle3), HAL_MAX_DELAY);
 8002fec:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff4:	2213      	movs	r2, #19
 8002ff6:	482d      	ldr	r0, [pc, #180]	; (80030ac <main+0x97c>)
 8002ff8:	f003 f821 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 8002ffc:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8003000:	f04f 33ff 	mov.w	r3, #4294967295
 8003004:	2202      	movs	r2, #2
 8003006:	4829      	ldr	r0, [pc, #164]	; (80030ac <main+0x97c>)
 8003008:	f003 f819 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, analog4, sizeof(analog4), HAL_MAX_DELAY);
 800300c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8003010:	f04f 33ff 	mov.w	r3, #4294967295
 8003014:	2213      	movs	r2, #19
 8003016:	4825      	ldr	r0, [pc, #148]	; (80030ac <main+0x97c>)
 8003018:	f003 f811 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 800301c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8003020:	f04f 33ff 	mov.w	r3, #4294967295
 8003024:	2202      	movs	r2, #2
 8003026:	4821      	ldr	r0, [pc, #132]	; (80030ac <main+0x97c>)
 8003028:	f003 f809 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, angle4, sizeof(angle4), HAL_MAX_DELAY);
 800302c:	f107 0118 	add.w	r1, r7, #24
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
 8003034:	2213      	movs	r2, #19
 8003036:	481d      	ldr	r0, [pc, #116]	; (80030ac <main+0x97c>)
 8003038:	f003 f801 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 800303c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8003040:	f04f 33ff 	mov.w	r3, #4294967295
 8003044:	2202      	movs	r2, #2
 8003046:	4819      	ldr	r0, [pc, #100]	; (80030ac <main+0x97c>)
 8003048:	f002 fff9 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, analog5, sizeof(analog5), HAL_MAX_DELAY);
 800304c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003050:	f04f 33ff 	mov.w	r3, #4294967295
 8003054:	2213      	movs	r2, #19
 8003056:	4815      	ldr	r0, [pc, #84]	; (80030ac <main+0x97c>)
 8003058:	f002 fff1 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, sep, sizeof(sep), HAL_MAX_DELAY);
 800305c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
 8003064:	2202      	movs	r2, #2
 8003066:	4811      	ldr	r0, [pc, #68]	; (80030ac <main+0x97c>)
 8003068:	f002 ffe9 	bl	800603e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, angle5, sizeof(angle5), HAL_MAX_DELAY);
 800306c:	1d39      	adds	r1, r7, #4
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	2213      	movs	r2, #19
 8003074:	480d      	ldr	r0, [pc, #52]	; (80030ac <main+0x97c>)
 8003076:	f002 ffe2 	bl	800603e <HAL_UART_Transmit>


	  HAL_Delay(1000);
 800307a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800307e:	f000 fb21 	bl	80036c4 <HAL_Delay>
  {
 8003082:	f7ff bb6c 	b.w	800275e <main+0x2e>
 8003086:	bf00      	nop
 8003088:	2000000c 	.word	0x2000000c
 800308c:	200003f0 	.word	0x200003f0
 8003090:	20000378 	.word	0x20000378
 8003094:	20000398 	.word	0x20000398
 8003098:	20000010 	.word	0x20000010
 800309c:	200003f4 	.word	0x200003f4
 80030a0:	2000039c 	.word	0x2000039c
 80030a4:	0800cadc 	.word	0x0800cadc
 80030a8:	2000038c 	.word	0x2000038c
 80030ac:	2000040c 	.word	0x2000040c

080030b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b094      	sub	sp, #80	; 0x50
 80030b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030b6:	f107 031c 	add.w	r3, r7, #28
 80030ba:	2234      	movs	r2, #52	; 0x34
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f004 fb91 	bl	80077e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030d4:	2300      	movs	r3, #0
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	4b2a      	ldr	r3, [pc, #168]	; (8003184 <SystemClock_Config+0xd4>)
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	4a29      	ldr	r2, [pc, #164]	; (8003184 <SystemClock_Config+0xd4>)
 80030de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e2:	6413      	str	r3, [r2, #64]	; 0x40
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <SystemClock_Config+0xd4>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80030f0:	2300      	movs	r3, #0
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	4b24      	ldr	r3, [pc, #144]	; (8003188 <SystemClock_Config+0xd8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030fc:	4a22      	ldr	r2, [pc, #136]	; (8003188 <SystemClock_Config+0xd8>)
 80030fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b20      	ldr	r3, [pc, #128]	; (8003188 <SystemClock_Config+0xd8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003110:	2302      	movs	r3, #2
 8003112:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003114:	2301      	movs	r3, #1
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003118:	2310      	movs	r3, #16
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800311c:	2302      	movs	r3, #2
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003120:	2300      	movs	r3, #0
 8003122:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003124:	2310      	movs	r3, #16
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003128:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800312c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800312e:	2304      	movs	r3, #4
 8003130:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003132:	2302      	movs	r3, #2
 8003134:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003136:	2302      	movs	r3, #2
 8003138:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800313a:	f107 031c 	add.w	r3, r7, #28
 800313e:	4618      	mov	r0, r3
 8003140:	f002 fc92 	bl	8005a68 <HAL_RCC_OscConfig>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800314a:	f000 f81f 	bl	800318c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800314e:	230f      	movs	r3, #15
 8003150:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003152:	2302      	movs	r3, #2
 8003154:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800315a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800315e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003164:	f107 0308 	add.w	r3, r7, #8
 8003168:	2102      	movs	r1, #2
 800316a:	4618      	mov	r0, r3
 800316c:	f002 f932 	bl	80053d4 <HAL_RCC_ClockConfig>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003176:	f000 f809 	bl	800318c <Error_Handler>
  }
}
 800317a:	bf00      	nop
 800317c:	3750      	adds	r7, #80	; 0x50
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	40007000 	.word	0x40007000

0800318c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003190:	b672      	cpsid	i
}
 8003192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003194:	e7fe      	b.n	8003194 <Error_Handler+0x8>
	...

08003198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_MspInit+0x4c>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	4a0f      	ldr	r2, [pc, #60]	; (80031e4 <HAL_MspInit+0x4c>)
 80031a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ac:	6453      	str	r3, [r2, #68]	; 0x44
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <HAL_MspInit+0x4c>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_MspInit+0x4c>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <HAL_MspInit+0x4c>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_MspInit+0x4c>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031d6:	2007      	movs	r0, #7
 80031d8:	f000 ff5a 	bl	8004090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800

080031e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031ec:	e7fe      	b.n	80031ec <NMI_Handler+0x4>

080031ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031f2:	e7fe      	b.n	80031f2 <HardFault_Handler+0x4>

080031f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <MemManage_Handler+0x4>

080031fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031fe:	e7fe      	b.n	80031fe <BusFault_Handler+0x4>

08003200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003204:	e7fe      	b.n	8003204 <UsageFault_Handler+0x4>

08003206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003234:	f000 fa26 	bl	8003684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003238:	bf00      	nop
 800323a:	bd80      	pop	{r7, pc}

0800323c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return 1;
 8003240:	2301      	movs	r3, #1
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <_kill>:

int _kill(int pid, int sig)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003256:	f004 fb19 	bl	800788c <__errno>
 800325a:	4603      	mov	r3, r0
 800325c:	2216      	movs	r2, #22
 800325e:	601a      	str	r2, [r3, #0]
  return -1;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <_exit>:

void _exit (int status)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003274:	f04f 31ff 	mov.w	r1, #4294967295
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ffe7 	bl	800324c <_kill>
  while (1) {}    /* Make sure we hang here */
 800327e:	e7fe      	b.n	800327e <_exit+0x12>

08003280 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e00a      	b.n	80032a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003292:	f3af 8000 	nop.w
 8003296:	4601      	mov	r1, r0
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	60ba      	str	r2, [r7, #8]
 800329e:	b2ca      	uxtb	r2, r1
 80032a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3301      	adds	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	dbf0      	blt.n	8003292 <_read+0x12>
  }

  return len;
 80032b0:	687b      	ldr	r3, [r7, #4]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b086      	sub	sp, #24
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	e009      	b.n	80032e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	60ba      	str	r2, [r7, #8]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3301      	adds	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	dbf1      	blt.n	80032cc <_write+0x12>
  }
  return len;
 80032e8:	687b      	ldr	r3, [r7, #4]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <_close>:

int _close(int file)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800331a:	605a      	str	r2, [r3, #4]
  return 0;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <_isatty>:

int _isatty(int file)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003332:	2301      	movs	r3, #1
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003364:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <_sbrk+0x5c>)
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <_sbrk+0x60>)
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <_sbrk+0x64>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <_sbrk+0x64>)
 800337a:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <_sbrk+0x68>)
 800337c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <_sbrk+0x64>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	429a      	cmp	r2, r3
 800338a:	d207      	bcs.n	800339c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800338c:	f004 fa7e 	bl	800788c <__errno>
 8003390:	4603      	mov	r3, r0
 8003392:	220c      	movs	r2, #12
 8003394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003396:	f04f 33ff 	mov.w	r3, #4294967295
 800339a:	e009      	b.n	80033b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <_sbrk+0x64>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <_sbrk+0x64>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <_sbrk+0x64>)
 80033ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ae:	68fb      	ldr	r3, [r7, #12]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20020000 	.word	0x20020000
 80033bc:	00000400 	.word	0x00000400
 80033c0:	20000408 	.word	0x20000408
 80033c4:	200005e8 	.word	0x200005e8

080033c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <SystemInit+0x20>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <SystemInit+0x20>)
 80033d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <MX_USART1_UART_Init+0x4c>)
 80033f2:	4a12      	ldr	r2, [pc, #72]	; (800343c <MX_USART1_UART_Init+0x50>)
 80033f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <MX_USART1_UART_Init+0x4c>)
 80033f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033fe:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <MX_USART1_UART_Init+0x4c>)
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <MX_USART1_UART_Init+0x4c>)
 8003406:	2200      	movs	r2, #0
 8003408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <MX_USART1_UART_Init+0x4c>)
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003410:	4b09      	ldr	r3, [pc, #36]	; (8003438 <MX_USART1_UART_Init+0x4c>)
 8003412:	220c      	movs	r2, #12
 8003414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <MX_USART1_UART_Init+0x4c>)
 8003418:	2200      	movs	r2, #0
 800341a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <MX_USART1_UART_Init+0x4c>)
 800341e:	2200      	movs	r2, #0
 8003420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003422:	4805      	ldr	r0, [pc, #20]	; (8003438 <MX_USART1_UART_Init+0x4c>)
 8003424:	f002 fdbe 	bl	8005fa4 <HAL_UART_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800342e:	f7ff fead 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	2000040c 	.word	0x2000040c
 800343c:	40011000 	.word	0x40011000

08003440 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <MX_USART2_UART_Init+0x4c>)
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <MX_USART2_UART_Init+0x50>)
 8003448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <MX_USART2_UART_Init+0x4c>)
 800344c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <MX_USART2_UART_Init+0x4c>)
 8003454:	2200      	movs	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <MX_USART2_UART_Init+0x4c>)
 800345a:	2200      	movs	r2, #0
 800345c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <MX_USART2_UART_Init+0x4c>)
 8003460:	2200      	movs	r2, #0
 8003462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003464:	4b09      	ldr	r3, [pc, #36]	; (800348c <MX_USART2_UART_Init+0x4c>)
 8003466:	220c      	movs	r2, #12
 8003468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <MX_USART2_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <MX_USART2_UART_Init+0x4c>)
 8003472:	2200      	movs	r2, #0
 8003474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003476:	4805      	ldr	r0, [pc, #20]	; (800348c <MX_USART2_UART_Init+0x4c>)
 8003478:	f002 fd94 	bl	8005fa4 <HAL_UART_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003482:	f7ff fe83 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000450 	.word	0x20000450
 8003490:	40004400 	.word	0x40004400

08003494 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08c      	sub	sp, #48	; 0x30
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349c:	f107 031c 	add.w	r3, r7, #28
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a32      	ldr	r2, [pc, #200]	; (800357c <HAL_UART_MspInit+0xe8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d12d      	bne.n	8003512 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	4b31      	ldr	r3, [pc, #196]	; (8003580 <HAL_UART_MspInit+0xec>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	4a30      	ldr	r2, [pc, #192]	; (8003580 <HAL_UART_MspInit+0xec>)
 80034c0:	f043 0310 	orr.w	r3, r3, #16
 80034c4:	6453      	str	r3, [r2, #68]	; 0x44
 80034c6:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <HAL_UART_MspInit+0xec>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_UART_MspInit+0xec>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4a29      	ldr	r2, [pc, #164]	; (8003580 <HAL_UART_MspInit+0xec>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6313      	str	r3, [r2, #48]	; 0x30
 80034e2:	4b27      	ldr	r3, [pc, #156]	; (8003580 <HAL_UART_MspInit+0xec>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80034f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	2302      	movs	r3, #2
 80034f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fc:	2303      	movs	r3, #3
 80034fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003500:	2307      	movs	r3, #7
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003504:	f107 031c 	add.w	r3, r7, #28
 8003508:	4619      	mov	r1, r3
 800350a:	481e      	ldr	r0, [pc, #120]	; (8003584 <HAL_UART_MspInit+0xf0>)
 800350c:	f000 fdf4 	bl	80040f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003510:	e030      	b.n	8003574 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <HAL_UART_MspInit+0xf4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d12b      	bne.n	8003574 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800351c:	2300      	movs	r3, #0
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	4b17      	ldr	r3, [pc, #92]	; (8003580 <HAL_UART_MspInit+0xec>)
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	4a16      	ldr	r2, [pc, #88]	; (8003580 <HAL_UART_MspInit+0xec>)
 8003526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352a:	6413      	str	r3, [r2, #64]	; 0x40
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_UART_MspInit+0xec>)
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	4b10      	ldr	r3, [pc, #64]	; (8003580 <HAL_UART_MspInit+0xec>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <HAL_UART_MspInit+0xec>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6313      	str	r3, [r2, #48]	; 0x30
 8003548:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <HAL_UART_MspInit+0xec>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003554:	230c      	movs	r3, #12
 8003556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003558:	2302      	movs	r3, #2
 800355a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003560:	2303      	movs	r3, #3
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003564:	2307      	movs	r3, #7
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003568:	f107 031c 	add.w	r3, r7, #28
 800356c:	4619      	mov	r1, r3
 800356e:	4805      	ldr	r0, [pc, #20]	; (8003584 <HAL_UART_MspInit+0xf0>)
 8003570:	f000 fdc2 	bl	80040f8 <HAL_GPIO_Init>
}
 8003574:	bf00      	nop
 8003576:	3730      	adds	r7, #48	; 0x30
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40011000 	.word	0x40011000
 8003580:	40023800 	.word	0x40023800
 8003584:	40020000 	.word	0x40020000
 8003588:	40004400 	.word	0x40004400

0800358c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800358c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003590:	480d      	ldr	r0, [pc, #52]	; (80035c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003592:	490e      	ldr	r1, [pc, #56]	; (80035cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003594:	4a0e      	ldr	r2, [pc, #56]	; (80035d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003598:	e002      	b.n	80035a0 <LoopCopyDataInit>

0800359a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800359a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800359c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800359e:	3304      	adds	r3, #4

080035a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035a4:	d3f9      	bcc.n	800359a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035a6:	4a0b      	ldr	r2, [pc, #44]	; (80035d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035a8:	4c0b      	ldr	r4, [pc, #44]	; (80035d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035ac:	e001      	b.n	80035b2 <LoopFillZerobss>

080035ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035b0:	3204      	adds	r2, #4

080035b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035b4:	d3fb      	bcc.n	80035ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035b6:	f7ff ff07 	bl	80033c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ba:	f004 f96d 	bl	8007898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035be:	f7ff f8b7 	bl	8002730 <main>
  bx  lr    
 80035c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035cc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80035d0:	0800d158 	.word	0x0800d158
  ldr r2, =_sbss
 80035d4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80035d8:	200005e4 	.word	0x200005e4

080035dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035dc:	e7fe      	b.n	80035dc <ADC_IRQHandler>
	...

080035e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035e4:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <HAL_Init+0x40>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <HAL_Init+0x40>)
 80035ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_Init+0x40>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <HAL_Init+0x40>)
 80035f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035fc:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_Init+0x40>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a07      	ldr	r2, [pc, #28]	; (8003620 <HAL_Init+0x40>)
 8003602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003608:	2003      	movs	r0, #3
 800360a:	f000 fd41 	bl	8004090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800360e:	2000      	movs	r0, #0
 8003610:	f000 f808 	bl	8003624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003614:	f7ff fdc0 	bl	8003198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023c00 	.word	0x40023c00

08003624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_InitTick+0x54>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_InitTick+0x58>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	4619      	mov	r1, r3
 8003636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800363a:	fbb3 f3f1 	udiv	r3, r3, r1
 800363e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fd4b 	bl	80040de <HAL_SYSTICK_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e00e      	b.n	8003670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b0f      	cmp	r3, #15
 8003656:	d80a      	bhi.n	800366e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003658:	2200      	movs	r2, #0
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	f000 fd21 	bl	80040a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003664:	4a06      	ldr	r2, [pc, #24]	; (8003680 <HAL_InitTick+0x5c>)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000014 	.word	0x20000014
 800367c:	2000001c 	.word	0x2000001c
 8003680:	20000018 	.word	0x20000018

08003684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_IncTick+0x20>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_IncTick+0x24>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4413      	add	r3, r2
 8003694:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <HAL_IncTick+0x24>)
 8003696:	6013      	str	r3, [r2, #0]
}
 8003698:	bf00      	nop
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	2000001c 	.word	0x2000001c
 80036a8:	20000494 	.word	0x20000494

080036ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return uwTick;
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <HAL_GetTick+0x14>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000494 	.word	0x20000494

080036c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036cc:	f7ff ffee 	bl	80036ac <HAL_GetTick>
 80036d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d005      	beq.n	80036ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <HAL_Delay+0x44>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ea:	bf00      	nop
 80036ec:	f7ff ffde 	bl	80036ac <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d8f7      	bhi.n	80036ec <HAL_Delay+0x28>
  {
  }
}
 80036fc:	bf00      	nop
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	2000001c 	.word	0x2000001c

0800370c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e033      	b.n	800378a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd fd0a 	bl	8001144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	d118      	bne.n	800377c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003752:	f023 0302 	bic.w	r3, r3, #2
 8003756:	f043 0202 	orr.w	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fae8 	bl	8003d34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	f043 0201 	orr.w	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
 800377a:	e001      	b.n	8003780 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_ADC_Start+0x1a>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e0b2      	b.n	8003914 <HAL_ADC_Start+0x180>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d018      	beq.n	80037f6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037d4:	4b52      	ldr	r3, [pc, #328]	; (8003920 <HAL_ADC_Start+0x18c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a52      	ldr	r2, [pc, #328]	; (8003924 <HAL_ADC_Start+0x190>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0c9a      	lsrs	r2, r3, #18
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80037e8:	e002      	b.n	80037f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f9      	bne.n	80037ea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d17a      	bne.n	80038fa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800382e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003842:	d106      	bne.n	8003852 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	f023 0206 	bic.w	r2, r3, #6
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	645a      	str	r2, [r3, #68]	; 0x44
 8003850:	e002      	b.n	8003858 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003860:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_ADC_Start+0x194>)
 8003862:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800386c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2b00      	cmp	r3, #0
 8003878:	d12a      	bne.n	80038d0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a2b      	ldr	r2, [pc, #172]	; (800392c <HAL_ADC_Start+0x198>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d015      	beq.n	80038b0 <HAL_ADC_Start+0x11c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a29      	ldr	r2, [pc, #164]	; (8003930 <HAL_ADC_Start+0x19c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d105      	bne.n	800389a <HAL_ADC_Start+0x106>
 800388e:	4b26      	ldr	r3, [pc, #152]	; (8003928 <HAL_ADC_Start+0x194>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a25      	ldr	r2, [pc, #148]	; (8003934 <HAL_ADC_Start+0x1a0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d136      	bne.n	8003912 <HAL_ADC_Start+0x17e>
 80038a4:	4b20      	ldr	r3, [pc, #128]	; (8003928 <HAL_ADC_Start+0x194>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d130      	bne.n	8003912 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d129      	bne.n	8003912 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038cc:	609a      	str	r2, [r3, #8]
 80038ce:	e020      	b.n	8003912 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a15      	ldr	r2, [pc, #84]	; (800392c <HAL_ADC_Start+0x198>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d11b      	bne.n	8003912 <HAL_ADC_Start+0x17e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d114      	bne.n	8003912 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	e00b      	b.n	8003912 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f043 0210 	orr.w	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f043 0201 	orr.w	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	20000014 	.word	0x20000014
 8003924:	431bde83 	.word	0x431bde83
 8003928:	40012300 	.word	0x40012300
 800392c:	40012000 	.word	0x40012000
 8003930:	40012100 	.word	0x40012100
 8003934:	40012200 	.word	0x40012200

08003938 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_ADC_Stop+0x16>
 800394a:	2302      	movs	r3, #2
 800394c:	e021      	b.n	8003992 <HAL_ADC_Stop+0x5a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ba:	d113      	bne.n	80039e4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80039c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ca:	d10b      	bne.n	80039e4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e063      	b.n	8003aac <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80039e4:	f7ff fe62 	bl	80036ac <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80039ea:	e021      	b.n	8003a30 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f2:	d01d      	beq.n	8003a30 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <HAL_ADC_PollForConversion+0x6c>
 80039fa:	f7ff fe57 	bl	80036ac <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d212      	bcs.n	8003a30 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d00b      	beq.n	8003a30 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f043 0204 	orr.w	r2, r3, #4
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e03d      	b.n	8003aac <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d1d6      	bne.n	80039ec <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f06f 0212 	mvn.w	r2, #18
 8003a46:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d123      	bne.n	8003aaa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d11f      	bne.n	8003aaa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d006      	beq.n	8003a86 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d111      	bne.n	8003aaa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0201 	orr.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x1c>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e113      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x244>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b09      	cmp	r3, #9
 8003afa:	d925      	bls.n	8003b48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68d9      	ldr	r1, [r3, #12]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	3b1e      	subs	r3, #30
 8003b12:	2207      	movs	r2, #7
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43da      	mvns	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	400a      	ands	r2, r1
 8003b20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68d9      	ldr	r1, [r3, #12]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	4618      	mov	r0, r3
 8003b34:	4603      	mov	r3, r0
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	4403      	add	r3, r0
 8003b3a:	3b1e      	subs	r3, #30
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	e022      	b.n	8003b8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6919      	ldr	r1, [r3, #16]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	4613      	mov	r3, r2
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	4413      	add	r3, r2
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43da      	mvns	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	400a      	ands	r2, r1
 8003b6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6919      	ldr	r1, [r3, #16]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4403      	add	r3, r0
 8003b84:	409a      	lsls	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b06      	cmp	r3, #6
 8003b94:	d824      	bhi.n	8003be0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3b05      	subs	r3, #5
 8003ba8:	221f      	movs	r2, #31
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	3b05      	subs	r3, #5
 8003bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8003bde:	e04c      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	d824      	bhi.n	8003c32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3b23      	subs	r3, #35	; 0x23
 8003bfa:	221f      	movs	r2, #31
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43da      	mvns	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	400a      	ands	r2, r1
 8003c08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	4618      	mov	r0, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	3b23      	subs	r3, #35	; 0x23
 8003c24:	fa00 f203 	lsl.w	r2, r0, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c30:	e023      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	3b41      	subs	r3, #65	; 0x41
 8003c44:	221f      	movs	r2, #31
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	400a      	ands	r2, r1
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4618      	mov	r0, r3
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3b41      	subs	r3, #65	; 0x41
 8003c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c7a:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <HAL_ADC_ConfigChannel+0x250>)
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a28      	ldr	r2, [pc, #160]	; (8003d24 <HAL_ADC_ConfigChannel+0x254>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d10f      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x1d8>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b12      	cmp	r3, #18
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <HAL_ADC_ConfigChannel+0x254>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d12b      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x23a>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1c      	ldr	r2, [pc, #112]	; (8003d28 <HAL_ADC_ConfigChannel+0x258>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <HAL_ADC_ConfigChannel+0x1f4>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b11      	cmp	r3, #17
 8003cc2:	d122      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a11      	ldr	r2, [pc, #68]	; (8003d28 <HAL_ADC_ConfigChannel+0x258>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d111      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_ADC_ConfigChannel+0x25c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a11      	ldr	r2, [pc, #68]	; (8003d30 <HAL_ADC_ConfigChannel+0x260>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	0c9a      	lsrs	r2, r3, #18
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003cfc:	e002      	b.n	8003d04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f9      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40012300 	.word	0x40012300
 8003d24:	40012000 	.word	0x40012000
 8003d28:	10000012 	.word	0x10000012
 8003d2c:	20000014 	.word	0x20000014
 8003d30:	431bde83 	.word	0x431bde83

08003d34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d3c:	4b79      	ldr	r3, [pc, #484]	; (8003f24 <ADC_Init+0x1f0>)
 8003d3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	431a      	orrs	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	021a      	lsls	r2, r3, #8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6899      	ldr	r1, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	4a58      	ldr	r2, [pc, #352]	; (8003f28 <ADC_Init+0x1f4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6899      	ldr	r1, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6899      	ldr	r1, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	e00f      	b.n	8003e32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0202 	bic.w	r2, r2, #2
 8003e40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6899      	ldr	r1, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	7e1b      	ldrb	r3, [r3, #24]
 8003e4c:	005a      	lsls	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01b      	beq.n	8003e98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	035a      	lsls	r2, r3, #13
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	e007      	b.n	8003ea8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	051a      	lsls	r2, r3, #20
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003eea:	025a      	lsls	r2, r3, #9
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6899      	ldr	r1, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	029a      	lsls	r2, r3, #10
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	40012300 	.word	0x40012300
 8003f28:	0f000001 	.word	0x0f000001

08003f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <__NVIC_SetPriorityGrouping+0x44>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f5e:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <__NVIC_SetPriorityGrouping+0x44>)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	60d3      	str	r3, [r2, #12]
}
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <__NVIC_GetPriorityGrouping+0x18>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	0a1b      	lsrs	r3, r3, #8
 8003f7e:	f003 0307 	and.w	r3, r3, #7
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	6039      	str	r1, [r7, #0]
 8003f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	db0a      	blt.n	8003fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	490c      	ldr	r1, [pc, #48]	; (8003fdc <__NVIC_SetPriority+0x4c>)
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	0112      	lsls	r2, r2, #4
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fb8:	e00a      	b.n	8003fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	4908      	ldr	r1, [pc, #32]	; (8003fe0 <__NVIC_SetPriority+0x50>)
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	3b04      	subs	r3, #4
 8003fc8:	0112      	lsls	r2, r2, #4
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	440b      	add	r3, r1
 8003fce:	761a      	strb	r2, [r3, #24]
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	e000e100 	.word	0xe000e100
 8003fe0:	e000ed00 	.word	0xe000ed00

08003fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b089      	sub	sp, #36	; 0x24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f1c3 0307 	rsb	r3, r3, #7
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	bf28      	it	cs
 8004002:	2304      	movcs	r3, #4
 8004004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	3304      	adds	r3, #4
 800400a:	2b06      	cmp	r3, #6
 800400c:	d902      	bls.n	8004014 <NVIC_EncodePriority+0x30>
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	3b03      	subs	r3, #3
 8004012:	e000      	b.n	8004016 <NVIC_EncodePriority+0x32>
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004018:	f04f 32ff 	mov.w	r2, #4294967295
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43da      	mvns	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	401a      	ands	r2, r3
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800402c:	f04f 31ff 	mov.w	r1, #4294967295
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	43d9      	mvns	r1, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800403c:	4313      	orrs	r3, r2
         );
}
 800403e:	4618      	mov	r0, r3
 8004040:	3724      	adds	r7, #36	; 0x24
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3b01      	subs	r3, #1
 8004058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800405c:	d301      	bcc.n	8004062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800405e:	2301      	movs	r3, #1
 8004060:	e00f      	b.n	8004082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004062:	4a0a      	ldr	r2, [pc, #40]	; (800408c <SysTick_Config+0x40>)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3b01      	subs	r3, #1
 8004068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800406a:	210f      	movs	r1, #15
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	f7ff ff8e 	bl	8003f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <SysTick_Config+0x40>)
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800407a:	4b04      	ldr	r3, [pc, #16]	; (800408c <SysTick_Config+0x40>)
 800407c:	2207      	movs	r2, #7
 800407e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	e000e010 	.word	0xe000e010

08004090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ff47 	bl	8003f2c <__NVIC_SetPriorityGrouping>
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b086      	sub	sp, #24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	4603      	mov	r3, r0
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040b8:	f7ff ff5c 	bl	8003f74 <__NVIC_GetPriorityGrouping>
 80040bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	6978      	ldr	r0, [r7, #20]
 80040c4:	f7ff ff8e 	bl	8003fe4 <NVIC_EncodePriority>
 80040c8:	4602      	mov	r2, r0
 80040ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff ff5d 	bl	8003f90 <__NVIC_SetPriority>
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff ffb0 	bl	800404c <SysTick_Config>
 80040ec:	4603      	mov	r3, r0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	; 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	e165      	b.n	80043e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004114:	2201      	movs	r2, #1
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4013      	ands	r3, r2
 8004126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	429a      	cmp	r2, r3
 800412e:	f040 8154 	bne.w	80043da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d005      	beq.n	800414a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004146:	2b02      	cmp	r3, #2
 8004148:	d130      	bne.n	80041ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	2203      	movs	r2, #3
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4013      	ands	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004180:	2201      	movs	r2, #1
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 0201 	and.w	r2, r3, #1
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d017      	beq.n	80041e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	2203      	movs	r2, #3
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4313      	orrs	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d123      	bne.n	800423c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	08da      	lsrs	r2, r3, #3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3208      	adds	r2, #8
 80041fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	220f      	movs	r2, #15
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	08da      	lsrs	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3208      	adds	r2, #8
 8004236:	69b9      	ldr	r1, [r7, #24]
 8004238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	2203      	movs	r2, #3
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	43db      	mvns	r3, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4013      	ands	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0203 	and.w	r2, r3, #3
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4313      	orrs	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80ae 	beq.w	80043da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	4b5d      	ldr	r3, [pc, #372]	; (80043f8 <HAL_GPIO_Init+0x300>)
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	4a5c      	ldr	r2, [pc, #368]	; (80043f8 <HAL_GPIO_Init+0x300>)
 8004288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800428c:	6453      	str	r3, [r2, #68]	; 0x44
 800428e:	4b5a      	ldr	r3, [pc, #360]	; (80043f8 <HAL_GPIO_Init+0x300>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800429a:	4a58      	ldr	r2, [pc, #352]	; (80043fc <HAL_GPIO_Init+0x304>)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	089b      	lsrs	r3, r3, #2
 80042a0:	3302      	adds	r3, #2
 80042a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	220f      	movs	r2, #15
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a4f      	ldr	r2, [pc, #316]	; (8004400 <HAL_GPIO_Init+0x308>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d025      	beq.n	8004312 <HAL_GPIO_Init+0x21a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a4e      	ldr	r2, [pc, #312]	; (8004404 <HAL_GPIO_Init+0x30c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d01f      	beq.n	800430e <HAL_GPIO_Init+0x216>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a4d      	ldr	r2, [pc, #308]	; (8004408 <HAL_GPIO_Init+0x310>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d019      	beq.n	800430a <HAL_GPIO_Init+0x212>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a4c      	ldr	r2, [pc, #304]	; (800440c <HAL_GPIO_Init+0x314>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <HAL_GPIO_Init+0x20e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a4b      	ldr	r2, [pc, #300]	; (8004410 <HAL_GPIO_Init+0x318>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00d      	beq.n	8004302 <HAL_GPIO_Init+0x20a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a4a      	ldr	r2, [pc, #296]	; (8004414 <HAL_GPIO_Init+0x31c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d007      	beq.n	80042fe <HAL_GPIO_Init+0x206>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a49      	ldr	r2, [pc, #292]	; (8004418 <HAL_GPIO_Init+0x320>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d101      	bne.n	80042fa <HAL_GPIO_Init+0x202>
 80042f6:	2306      	movs	r3, #6
 80042f8:	e00c      	b.n	8004314 <HAL_GPIO_Init+0x21c>
 80042fa:	2307      	movs	r3, #7
 80042fc:	e00a      	b.n	8004314 <HAL_GPIO_Init+0x21c>
 80042fe:	2305      	movs	r3, #5
 8004300:	e008      	b.n	8004314 <HAL_GPIO_Init+0x21c>
 8004302:	2304      	movs	r3, #4
 8004304:	e006      	b.n	8004314 <HAL_GPIO_Init+0x21c>
 8004306:	2303      	movs	r3, #3
 8004308:	e004      	b.n	8004314 <HAL_GPIO_Init+0x21c>
 800430a:	2302      	movs	r3, #2
 800430c:	e002      	b.n	8004314 <HAL_GPIO_Init+0x21c>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_GPIO_Init+0x21c>
 8004312:	2300      	movs	r3, #0
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	f002 0203 	and.w	r2, r2, #3
 800431a:	0092      	lsls	r2, r2, #2
 800431c:	4093      	lsls	r3, r2
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4313      	orrs	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004324:	4935      	ldr	r1, [pc, #212]	; (80043fc <HAL_GPIO_Init+0x304>)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	089b      	lsrs	r3, r3, #2
 800432a:	3302      	adds	r3, #2
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004332:	4b3a      	ldr	r3, [pc, #232]	; (800441c <HAL_GPIO_Init+0x324>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004356:	4a31      	ldr	r2, [pc, #196]	; (800441c <HAL_GPIO_Init+0x324>)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800435c:	4b2f      	ldr	r3, [pc, #188]	; (800441c <HAL_GPIO_Init+0x324>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004380:	4a26      	ldr	r2, [pc, #152]	; (800441c <HAL_GPIO_Init+0x324>)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004386:	4b25      	ldr	r3, [pc, #148]	; (800441c <HAL_GPIO_Init+0x324>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043aa:	4a1c      	ldr	r2, [pc, #112]	; (800441c <HAL_GPIO_Init+0x324>)
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043b0:	4b1a      	ldr	r3, [pc, #104]	; (800441c <HAL_GPIO_Init+0x324>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043d4:	4a11      	ldr	r2, [pc, #68]	; (800441c <HAL_GPIO_Init+0x324>)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3301      	adds	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b0f      	cmp	r3, #15
 80043e4:	f67f ae96 	bls.w	8004114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	3724      	adds	r7, #36	; 0x24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40013800 	.word	0x40013800
 8004400:	40020000 	.word	0x40020000
 8004404:	40020400 	.word	0x40020400
 8004408:	40020800 	.word	0x40020800
 800440c:	40020c00 	.word	0x40020c00
 8004410:	40021000 	.word	0x40021000
 8004414:	40021400 	.word	0x40021400
 8004418:	40021800 	.word	0x40021800
 800441c:	40013c00 	.word	0x40013c00

08004420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	807b      	strh	r3, [r7, #2]
 800442c:	4613      	mov	r3, r2
 800442e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004430:	787b      	ldrb	r3, [r7, #1]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004436:	887a      	ldrh	r2, [r7, #2]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800443c:	e003      	b.n	8004446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800443e:	887b      	ldrh	r3, [r7, #2]
 8004440:	041a      	lsls	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	619a      	str	r2, [r3, #24]
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e12b      	b.n	80046be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc ffa8 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	; 0x24
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044b8:	f001 f87e 	bl	80055b8 <HAL_RCC_GetPCLK1Freq>
 80044bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4a81      	ldr	r2, [pc, #516]	; (80046c8 <HAL_I2C_Init+0x274>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d807      	bhi.n	80044d8 <HAL_I2C_Init+0x84>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a80      	ldr	r2, [pc, #512]	; (80046cc <HAL_I2C_Init+0x278>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bf94      	ite	ls
 80044d0:	2301      	movls	r3, #1
 80044d2:	2300      	movhi	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	e006      	b.n	80044e6 <HAL_I2C_Init+0x92>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a7d      	ldr	r2, [pc, #500]	; (80046d0 <HAL_I2C_Init+0x27c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	bf94      	ite	ls
 80044e0:	2301      	movls	r3, #1
 80044e2:	2300      	movhi	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0e7      	b.n	80046be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a78      	ldr	r2, [pc, #480]	; (80046d4 <HAL_I2C_Init+0x280>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	0c9b      	lsrs	r3, r3, #18
 80044f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4a6a      	ldr	r2, [pc, #424]	; (80046c8 <HAL_I2C_Init+0x274>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d802      	bhi.n	8004528 <HAL_I2C_Init+0xd4>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3301      	adds	r3, #1
 8004526:	e009      	b.n	800453c <HAL_I2C_Init+0xe8>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	4a69      	ldr	r2, [pc, #420]	; (80046d8 <HAL_I2C_Init+0x284>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	3301      	adds	r3, #1
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800454e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	495c      	ldr	r1, [pc, #368]	; (80046c8 <HAL_I2C_Init+0x274>)
 8004558:	428b      	cmp	r3, r1
 800455a:	d819      	bhi.n	8004590 <HAL_I2C_Init+0x13c>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1e59      	subs	r1, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	fbb1 f3f3 	udiv	r3, r1, r3
 800456a:	1c59      	adds	r1, r3, #1
 800456c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004570:	400b      	ands	r3, r1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_I2C_Init+0x138>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1e59      	subs	r1, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	fbb1 f3f3 	udiv	r3, r1, r3
 8004584:	3301      	adds	r3, #1
 8004586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458a:	e051      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 800458c:	2304      	movs	r3, #4
 800458e:	e04f      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d111      	bne.n	80045bc <HAL_I2C_Init+0x168>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1e58      	subs	r0, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6859      	ldr	r1, [r3, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	440b      	add	r3, r1
 80045a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045aa:	3301      	adds	r3, #1
 80045ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e012      	b.n	80045e2 <HAL_I2C_Init+0x18e>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1e58      	subs	r0, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6859      	ldr	r1, [r3, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	0099      	lsls	r1, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80045d2:	3301      	adds	r3, #1
 80045d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Init+0x196>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e022      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10e      	bne.n	8004610 <HAL_I2C_Init+0x1bc>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1e58      	subs	r0, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6859      	ldr	r1, [r3, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	440b      	add	r3, r1
 8004600:	fbb0 f3f3 	udiv	r3, r0, r3
 8004604:	3301      	adds	r3, #1
 8004606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460e:	e00f      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1e58      	subs	r0, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	0099      	lsls	r1, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	6809      	ldr	r1, [r1, #0]
 8004634:	4313      	orrs	r3, r2
 8004636:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800465e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6911      	ldr	r1, [r2, #16]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68d2      	ldr	r2, [r2, #12]
 800466a:	4311      	orrs	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	430b      	orrs	r3, r1
 8004672:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	000186a0 	.word	0x000186a0
 80046cc:	001e847f 	.word	0x001e847f
 80046d0:	003d08ff 	.word	0x003d08ff
 80046d4:	431bde83 	.word	0x431bde83
 80046d8:	10624dd3 	.word	0x10624dd3

080046dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	4608      	mov	r0, r1
 80046e6:	4611      	mov	r1, r2
 80046e8:	461a      	mov	r2, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	817b      	strh	r3, [r7, #10]
 80046ee:	460b      	mov	r3, r1
 80046f0:	813b      	strh	r3, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046f6:	f7fe ffd9 	bl	80036ac <HAL_GetTick>
 80046fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b20      	cmp	r3, #32
 8004706:	f040 80d9 	bne.w	80048bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	2319      	movs	r3, #25
 8004710:	2201      	movs	r2, #1
 8004712:	496d      	ldr	r1, [pc, #436]	; (80048c8 <HAL_I2C_Mem_Write+0x1ec>)
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 fc7f 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
 8004722:	e0cc      	b.n	80048be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_I2C_Mem_Write+0x56>
 800472e:	2302      	movs	r3, #2
 8004730:	e0c5      	b.n	80048be <HAL_I2C_Mem_Write+0x1e2>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d007      	beq.n	8004758 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004766:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2221      	movs	r2, #33	; 0x21
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2240      	movs	r2, #64	; 0x40
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a4d      	ldr	r2, [pc, #308]	; (80048cc <HAL_I2C_Mem_Write+0x1f0>)
 8004798:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800479a:	88f8      	ldrh	r0, [r7, #6]
 800479c:	893a      	ldrh	r2, [r7, #8]
 800479e:	8979      	ldrh	r1, [r7, #10]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	4603      	mov	r3, r0
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fab6 	bl	8004d1c <I2C_RequestMemoryWrite>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d052      	beq.n	800485c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e081      	b.n	80048be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fd00 	bl	80051c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00d      	beq.n	80047e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d107      	bne.n	80047e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e06b      	b.n	80048be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b04      	cmp	r3, #4
 8004822:	d11b      	bne.n	800485c <HAL_I2C_Mem_Write+0x180>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	d017      	beq.n	800485c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	781a      	ldrb	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1aa      	bne.n	80047ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fcec 	bl	8005246 <I2C_WaitOnBTFFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00d      	beq.n	8004890 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	2b04      	cmp	r3, #4
 800487a:	d107      	bne.n	800488c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e016      	b.n	80048be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e000      	b.n	80048be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048bc:	2302      	movs	r3, #2
  }
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	00100002 	.word	0x00100002
 80048cc:	ffff0000 	.word	0xffff0000

080048d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	; 0x30
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	4608      	mov	r0, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	461a      	mov	r2, r3
 80048de:	4603      	mov	r3, r0
 80048e0:	817b      	strh	r3, [r7, #10]
 80048e2:	460b      	mov	r3, r1
 80048e4:	813b      	strh	r3, [r7, #8]
 80048e6:	4613      	mov	r3, r2
 80048e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048ea:	f7fe fedf 	bl	80036ac <HAL_GetTick>
 80048ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	f040 8208 	bne.w	8004d0e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	2319      	movs	r3, #25
 8004904:	2201      	movs	r2, #1
 8004906:	497b      	ldr	r1, [pc, #492]	; (8004af4 <HAL_I2C_Mem_Read+0x224>)
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fb85 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004914:	2302      	movs	r3, #2
 8004916:	e1fb      	b.n	8004d10 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_I2C_Mem_Read+0x56>
 8004922:	2302      	movs	r3, #2
 8004924:	e1f4      	b.n	8004d10 <HAL_I2C_Mem_Read+0x440>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d007      	beq.n	800494c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800495a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2222      	movs	r2, #34	; 0x22
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2240      	movs	r2, #64	; 0x40
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004976:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800497c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a5b      	ldr	r2, [pc, #364]	; (8004af8 <HAL_I2C_Mem_Read+0x228>)
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800498e:	88f8      	ldrh	r0, [r7, #6]
 8004990:	893a      	ldrh	r2, [r7, #8]
 8004992:	8979      	ldrh	r1, [r7, #10]
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	4603      	mov	r3, r0
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fa52 	bl	8004e48 <I2C_RequestMemoryRead>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e1b0      	b.n	8004d10 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d113      	bne.n	80049de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	623b      	str	r3, [r7, #32]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	623b      	str	r3, [r7, #32]
 80049ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e184      	b.n	8004ce8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d11b      	bne.n	8004a1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	e164      	b.n	8004ce8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d11b      	bne.n	8004a5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a46:	2300      	movs	r3, #0
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	e144      	b.n	8004ce8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a74:	e138      	b.n	8004ce8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	f200 80f1 	bhi.w	8004c62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d123      	bne.n	8004ad0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fc1b 	bl	80052c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e139      	b.n	8004d10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ace:	e10b      	b.n	8004ce8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d14e      	bne.n	8004b76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4906      	ldr	r1, [pc, #24]	; (8004afc <HAL_I2C_Mem_Read+0x22c>)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fa98 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e10e      	b.n	8004d10 <HAL_I2C_Mem_Read+0x440>
 8004af2:	bf00      	nop
 8004af4:	00100002 	.word	0x00100002
 8004af8:	ffff0000 	.word	0xffff0000
 8004afc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b74:	e0b8      	b.n	8004ce8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	4966      	ldr	r1, [pc, #408]	; (8004d18 <HAL_I2C_Mem_Read+0x448>)
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fa49 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0bf      	b.n	8004d10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	2200      	movs	r2, #0
 8004bda:	494f      	ldr	r1, [pc, #316]	; (8004d18 <HAL_I2C_Mem_Read+0x448>)
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fa1b 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e091      	b.n	8004d10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c60:	e042      	b.n	8004ce8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fb2e 	bl	80052c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e04c      	b.n	8004d10 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d118      	bne.n	8004ce8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f47f aec2 	bne.w	8004a76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e000      	b.n	8004d10 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d0e:	2302      	movs	r3, #2
  }
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3728      	adds	r7, #40	; 0x28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	00010004 	.word	0x00010004

08004d1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	4608      	mov	r0, r1
 8004d26:	4611      	mov	r1, r2
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	817b      	strh	r3, [r7, #10]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	813b      	strh	r3, [r7, #8]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f960 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00d      	beq.n	8004d7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6c:	d103      	bne.n	8004d76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e05f      	b.n	8004e3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d7a:	897b      	ldrh	r3, [r7, #10]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	6a3a      	ldr	r2, [r7, #32]
 8004d8e:	492d      	ldr	r1, [pc, #180]	; (8004e44 <I2C_RequestMemoryWrite+0x128>)
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f998 	bl	80050c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e04c      	b.n	8004e3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db8:	6a39      	ldr	r1, [r7, #32]
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 fa02 	bl	80051c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00d      	beq.n	8004de2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d107      	bne.n	8004dde <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ddc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e02b      	b.n	8004e3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d105      	bne.n	8004df4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004de8:	893b      	ldrh	r3, [r7, #8]
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	611a      	str	r2, [r3, #16]
 8004df2:	e021      	b.n	8004e38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004df4:	893b      	ldrh	r3, [r7, #8]
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e04:	6a39      	ldr	r1, [r7, #32]
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f9dc 	bl	80051c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00d      	beq.n	8004e2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d107      	bne.n	8004e2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e005      	b.n	8004e3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e2e:	893b      	ldrh	r3, [r7, #8]
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	00010002 	.word	0x00010002

08004e48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	4608      	mov	r0, r1
 8004e52:	4611      	mov	r1, r2
 8004e54:	461a      	mov	r2, r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	817b      	strh	r3, [r7, #10]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	813b      	strh	r3, [r7, #8]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f8c2 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00d      	beq.n	8004eb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea8:	d103      	bne.n	8004eb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e0aa      	b.n	800500c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eb6:	897b      	ldrh	r3, [r7, #10]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ec4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	6a3a      	ldr	r2, [r7, #32]
 8004eca:	4952      	ldr	r1, [pc, #328]	; (8005014 <I2C_RequestMemoryRead+0x1cc>)
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f8fa 	bl	80050c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e097      	b.n	800500c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef4:	6a39      	ldr	r1, [r7, #32]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f964 	bl	80051c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00d      	beq.n	8004f1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d107      	bne.n	8004f1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e076      	b.n	800500c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d105      	bne.n	8004f30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f24:	893b      	ldrh	r3, [r7, #8]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	611a      	str	r2, [r3, #16]
 8004f2e:	e021      	b.n	8004f74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f30:	893b      	ldrh	r3, [r7, #8]
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f40:	6a39      	ldr	r1, [r7, #32]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f93e 	bl	80051c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d107      	bne.n	8004f66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e050      	b.n	800500c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f6a:	893b      	ldrh	r3, [r7, #8]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f76:	6a39      	ldr	r1, [r7, #32]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f923 	bl	80051c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00d      	beq.n	8004fa0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d107      	bne.n	8004f9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e035      	b.n	800500c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f82b 	bl	8005018 <I2C_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00d      	beq.n	8004fe4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd6:	d103      	bne.n	8004fe0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e013      	b.n	800500c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fe4:	897b      	ldrh	r3, [r7, #10]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	6a3a      	ldr	r2, [r7, #32]
 8004ff8:	4906      	ldr	r1, [pc, #24]	; (8005014 <I2C_RequestMemoryRead+0x1cc>)
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f863 	bl	80050c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	00010002 	.word	0x00010002

08005018 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005028:	e025      	b.n	8005076 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d021      	beq.n	8005076 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005032:	f7fe fb3b 	bl	80036ac <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d302      	bcc.n	8005048 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d116      	bne.n	8005076 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f043 0220 	orr.w	r2, r3, #32
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e023      	b.n	80050be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	0c1b      	lsrs	r3, r3, #16
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	d10d      	bne.n	800509c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	43da      	mvns	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4013      	ands	r3, r2
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	bf0c      	ite	eq
 8005092:	2301      	moveq	r3, #1
 8005094:	2300      	movne	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	461a      	mov	r2, r3
 800509a:	e00c      	b.n	80050b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	43da      	mvns	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4013      	ands	r3, r2
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bf0c      	ite	eq
 80050ae:	2301      	moveq	r3, #1
 80050b0:	2300      	movne	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d0b6      	beq.n	800502a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	607a      	str	r2, [r7, #4]
 80050d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050d4:	e051      	b.n	800517a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e4:	d123      	bne.n	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f043 0204 	orr.w	r2, r3, #4
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e046      	b.n	80051bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d021      	beq.n	800517a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005136:	f7fe fab9 	bl	80036ac <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	429a      	cmp	r2, r3
 8005144:	d302      	bcc.n	800514c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d116      	bne.n	800517a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e020      	b.n	80051bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10c      	bne.n	800519e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	43da      	mvns	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4013      	ands	r3, r2
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	bf14      	ite	ne
 8005196:	2301      	movne	r3, #1
 8005198:	2300      	moveq	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	e00b      	b.n	80051b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	43da      	mvns	r2, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4013      	ands	r3, r2
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d18d      	bne.n	80050d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051d0:	e02d      	b.n	800522e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f8ce 	bl	8005374 <I2C_IsAcknowledgeFailed>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e02d      	b.n	800523e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e8:	d021      	beq.n	800522e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ea:	f7fe fa5f 	bl	80036ac <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d302      	bcc.n	8005200 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d116      	bne.n	800522e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f043 0220 	orr.w	r2, r3, #32
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e007      	b.n	800523e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	2b80      	cmp	r3, #128	; 0x80
 800523a:	d1ca      	bne.n	80051d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005252:	e02d      	b.n	80052b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f88d 	bl	8005374 <I2C_IsAcknowledgeFailed>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e02d      	b.n	80052c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d021      	beq.n	80052b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526c:	f7fe fa1e 	bl	80036ac <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	429a      	cmp	r2, r3
 800527a:	d302      	bcc.n	8005282 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d116      	bne.n	80052b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	f043 0220 	orr.w	r2, r3, #32
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e007      	b.n	80052c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d1ca      	bne.n	8005254 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052d4:	e042      	b.n	800535c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f003 0310 	and.w	r3, r3, #16
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d119      	bne.n	8005318 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0210 	mvn.w	r2, #16
 80052ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e029      	b.n	800536c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005318:	f7fe f9c8 	bl	80036ac <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	429a      	cmp	r2, r3
 8005326:	d302      	bcc.n	800532e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d116      	bne.n	800535c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	f043 0220 	orr.w	r2, r3, #32
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e007      	b.n	800536c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d1b5      	bne.n	80052d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800538a:	d11b      	bne.n	80053c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005394:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	f043 0204 	orr.w	r2, r3, #4
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0cc      	b.n	8005582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053e8:	4b68      	ldr	r3, [pc, #416]	; (800558c <HAL_RCC_ClockConfig+0x1b8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d90c      	bls.n	8005410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f6:	4b65      	ldr	r3, [pc, #404]	; (800558c <HAL_RCC_ClockConfig+0x1b8>)
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fe:	4b63      	ldr	r3, [pc, #396]	; (800558c <HAL_RCC_ClockConfig+0x1b8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d001      	beq.n	8005410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0b8      	b.n	8005582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d020      	beq.n	800545e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005428:	4b59      	ldr	r3, [pc, #356]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	4a58      	ldr	r2, [pc, #352]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005440:	4b53      	ldr	r3, [pc, #332]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	4a52      	ldr	r2, [pc, #328]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800544a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800544c:	4b50      	ldr	r3, [pc, #320]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	494d      	ldr	r1, [pc, #308]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	4313      	orrs	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d044      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d107      	bne.n	8005482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005472:	4b47      	ldr	r3, [pc, #284]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d119      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e07f      	b.n	8005582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d003      	beq.n	8005492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800548e:	2b03      	cmp	r3, #3
 8005490:	d107      	bne.n	80054a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005492:	4b3f      	ldr	r3, [pc, #252]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e06f      	b.n	8005582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a2:	4b3b      	ldr	r3, [pc, #236]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e067      	b.n	8005582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054b2:	4b37      	ldr	r3, [pc, #220]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f023 0203 	bic.w	r2, r3, #3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	4934      	ldr	r1, [pc, #208]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054c4:	f7fe f8f2 	bl	80036ac <HAL_GetTick>
 80054c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ca:	e00a      	b.n	80054e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054cc:	f7fe f8ee 	bl	80036ac <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054da:	4293      	cmp	r3, r2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e04f      	b.n	8005582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e2:	4b2b      	ldr	r3, [pc, #172]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 020c 	and.w	r2, r3, #12
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d1eb      	bne.n	80054cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054f4:	4b25      	ldr	r3, [pc, #148]	; (800558c <HAL_RCC_ClockConfig+0x1b8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 030f 	and.w	r3, r3, #15
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d20c      	bcs.n	800551c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005502:	4b22      	ldr	r3, [pc, #136]	; (800558c <HAL_RCC_ClockConfig+0x1b8>)
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800550a:	4b20      	ldr	r3, [pc, #128]	; (800558c <HAL_RCC_ClockConfig+0x1b8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d001      	beq.n	800551c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e032      	b.n	8005582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005528:	4b19      	ldr	r3, [pc, #100]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4916      	ldr	r1, [pc, #88]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	4313      	orrs	r3, r2
 8005538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005546:	4b12      	ldr	r3, [pc, #72]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	490e      	ldr	r1, [pc, #56]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	4313      	orrs	r3, r2
 8005558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800555a:	f000 f855 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 800555e:	4602      	mov	r2, r0
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	091b      	lsrs	r3, r3, #4
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	490a      	ldr	r1, [pc, #40]	; (8005594 <HAL_RCC_ClockConfig+0x1c0>)
 800556c:	5ccb      	ldrb	r3, [r1, r3]
 800556e:	fa22 f303 	lsr.w	r3, r2, r3
 8005572:	4a09      	ldr	r2, [pc, #36]	; (8005598 <HAL_RCC_ClockConfig+0x1c4>)
 8005574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_RCC_ClockConfig+0x1c8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe f852 	bl	8003624 <HAL_InitTick>

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40023c00 	.word	0x40023c00
 8005590:	40023800 	.word	0x40023800
 8005594:	0800caf0 	.word	0x0800caf0
 8005598:	20000014 	.word	0x20000014
 800559c:	20000018 	.word	0x20000018

080055a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055a4:	4b03      	ldr	r3, [pc, #12]	; (80055b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80055a6:	681b      	ldr	r3, [r3, #0]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000014 	.word	0x20000014

080055b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055bc:	f7ff fff0 	bl	80055a0 <HAL_RCC_GetHCLKFreq>
 80055c0:	4602      	mov	r2, r0
 80055c2:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	0a9b      	lsrs	r3, r3, #10
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	4903      	ldr	r1, [pc, #12]	; (80055dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ce:	5ccb      	ldrb	r3, [r1, r3]
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40023800 	.word	0x40023800
 80055dc:	0800cb00 	.word	0x0800cb00

080055e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055e4:	f7ff ffdc 	bl	80055a0 <HAL_RCC_GetHCLKFreq>
 80055e8:	4602      	mov	r2, r0
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	0b5b      	lsrs	r3, r3, #13
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	4903      	ldr	r1, [pc, #12]	; (8005604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055f6:	5ccb      	ldrb	r3, [r1, r3]
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40023800 	.word	0x40023800
 8005604:	0800cb00 	.word	0x0800cb00

08005608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800560c:	b0ae      	sub	sp, #184	; 0xb8
 800560e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800562e:	4bcb      	ldr	r3, [pc, #812]	; (800595c <HAL_RCC_GetSysClockFreq+0x354>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	2b0c      	cmp	r3, #12
 8005638:	f200 8206 	bhi.w	8005a48 <HAL_RCC_GetSysClockFreq+0x440>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <HAL_RCC_GetSysClockFreq+0x3c>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005679 	.word	0x08005679
 8005648:	08005a49 	.word	0x08005a49
 800564c:	08005a49 	.word	0x08005a49
 8005650:	08005a49 	.word	0x08005a49
 8005654:	08005681 	.word	0x08005681
 8005658:	08005a49 	.word	0x08005a49
 800565c:	08005a49 	.word	0x08005a49
 8005660:	08005a49 	.word	0x08005a49
 8005664:	08005689 	.word	0x08005689
 8005668:	08005a49 	.word	0x08005a49
 800566c:	08005a49 	.word	0x08005a49
 8005670:	08005a49 	.word	0x08005a49
 8005674:	08005879 	.word	0x08005879
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005678:	4bb9      	ldr	r3, [pc, #740]	; (8005960 <HAL_RCC_GetSysClockFreq+0x358>)
 800567a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800567e:	e1e7      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005680:	4bb8      	ldr	r3, [pc, #736]	; (8005964 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005682:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005686:	e1e3      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005688:	4bb4      	ldr	r3, [pc, #720]	; (800595c <HAL_RCC_GetSysClockFreq+0x354>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005694:	4bb1      	ldr	r3, [pc, #708]	; (800595c <HAL_RCC_GetSysClockFreq+0x354>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d071      	beq.n	8005784 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a0:	4bae      	ldr	r3, [pc, #696]	; (800595c <HAL_RCC_GetSysClockFreq+0x354>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	099b      	lsrs	r3, r3, #6
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80056b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056bc:	2300      	movs	r3, #0
 80056be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056c6:	4622      	mov	r2, r4
 80056c8:	462b      	mov	r3, r5
 80056ca:	f04f 0000 	mov.w	r0, #0
 80056ce:	f04f 0100 	mov.w	r1, #0
 80056d2:	0159      	lsls	r1, r3, #5
 80056d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056d8:	0150      	lsls	r0, r2, #5
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4621      	mov	r1, r4
 80056e0:	1a51      	subs	r1, r2, r1
 80056e2:	6439      	str	r1, [r7, #64]	; 0x40
 80056e4:	4629      	mov	r1, r5
 80056e6:	eb63 0301 	sbc.w	r3, r3, r1
 80056ea:	647b      	str	r3, [r7, #68]	; 0x44
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80056f8:	4649      	mov	r1, r9
 80056fa:	018b      	lsls	r3, r1, #6
 80056fc:	4641      	mov	r1, r8
 80056fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005702:	4641      	mov	r1, r8
 8005704:	018a      	lsls	r2, r1, #6
 8005706:	4641      	mov	r1, r8
 8005708:	1a51      	subs	r1, r2, r1
 800570a:	63b9      	str	r1, [r7, #56]	; 0x38
 800570c:	4649      	mov	r1, r9
 800570e:	eb63 0301 	sbc.w	r3, r3, r1
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005720:	4649      	mov	r1, r9
 8005722:	00cb      	lsls	r3, r1, #3
 8005724:	4641      	mov	r1, r8
 8005726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800572a:	4641      	mov	r1, r8
 800572c:	00ca      	lsls	r2, r1, #3
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	4603      	mov	r3, r0
 8005734:	4622      	mov	r2, r4
 8005736:	189b      	adds	r3, r3, r2
 8005738:	633b      	str	r3, [r7, #48]	; 0x30
 800573a:	462b      	mov	r3, r5
 800573c:	460a      	mov	r2, r1
 800573e:	eb42 0303 	adc.w	r3, r2, r3
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005750:	4629      	mov	r1, r5
 8005752:	024b      	lsls	r3, r1, #9
 8005754:	4621      	mov	r1, r4
 8005756:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800575a:	4621      	mov	r1, r4
 800575c:	024a      	lsls	r2, r1, #9
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005766:	2200      	movs	r2, #0
 8005768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800576c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005770:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005774:	f7fb faa8 	bl	8000cc8 <__aeabi_uldivmod>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4613      	mov	r3, r2
 800577e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005782:	e067      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005784:	4b75      	ldr	r3, [pc, #468]	; (800595c <HAL_RCC_GetSysClockFreq+0x354>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	099b      	lsrs	r3, r3, #6
 800578a:	2200      	movs	r2, #0
 800578c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005790:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005794:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579c:	67bb      	str	r3, [r7, #120]	; 0x78
 800579e:	2300      	movs	r3, #0
 80057a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80057a6:	4622      	mov	r2, r4
 80057a8:	462b      	mov	r3, r5
 80057aa:	f04f 0000 	mov.w	r0, #0
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	0159      	lsls	r1, r3, #5
 80057b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057b8:	0150      	lsls	r0, r2, #5
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4621      	mov	r1, r4
 80057c0:	1a51      	subs	r1, r2, r1
 80057c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80057c4:	4629      	mov	r1, r5
 80057c6:	eb63 0301 	sbc.w	r3, r3, r1
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80057d8:	4649      	mov	r1, r9
 80057da:	018b      	lsls	r3, r1, #6
 80057dc:	4641      	mov	r1, r8
 80057de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057e2:	4641      	mov	r1, r8
 80057e4:	018a      	lsls	r2, r1, #6
 80057e6:	4641      	mov	r1, r8
 80057e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80057ec:	4649      	mov	r1, r9
 80057ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005802:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005806:	4692      	mov	sl, r2
 8005808:	469b      	mov	fp, r3
 800580a:	4623      	mov	r3, r4
 800580c:	eb1a 0303 	adds.w	r3, sl, r3
 8005810:	623b      	str	r3, [r7, #32]
 8005812:	462b      	mov	r3, r5
 8005814:	eb4b 0303 	adc.w	r3, fp, r3
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005826:	4629      	mov	r1, r5
 8005828:	028b      	lsls	r3, r1, #10
 800582a:	4621      	mov	r1, r4
 800582c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005830:	4621      	mov	r1, r4
 8005832:	028a      	lsls	r2, r1, #10
 8005834:	4610      	mov	r0, r2
 8005836:	4619      	mov	r1, r3
 8005838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800583c:	2200      	movs	r2, #0
 800583e:	673b      	str	r3, [r7, #112]	; 0x70
 8005840:	677a      	str	r2, [r7, #116]	; 0x74
 8005842:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005846:	f7fb fa3f 	bl	8000cc8 <__aeabi_uldivmod>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	4613      	mov	r3, r2
 8005850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005854:	4b41      	ldr	r3, [pc, #260]	; (800595c <HAL_RCC_GetSysClockFreq+0x354>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	0c1b      	lsrs	r3, r3, #16
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	3301      	adds	r3, #1
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800586a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005876:	e0eb      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005878:	4b38      	ldr	r3, [pc, #224]	; (800595c <HAL_RCC_GetSysClockFreq+0x354>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005884:	4b35      	ldr	r3, [pc, #212]	; (800595c <HAL_RCC_GetSysClockFreq+0x354>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d06b      	beq.n	8005968 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005890:	4b32      	ldr	r3, [pc, #200]	; (800595c <HAL_RCC_GetSysClockFreq+0x354>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	099b      	lsrs	r3, r3, #6
 8005896:	2200      	movs	r2, #0
 8005898:	66bb      	str	r3, [r7, #104]	; 0x68
 800589a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800589c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800589e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a2:	663b      	str	r3, [r7, #96]	; 0x60
 80058a4:	2300      	movs	r3, #0
 80058a6:	667b      	str	r3, [r7, #100]	; 0x64
 80058a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80058ac:	4622      	mov	r2, r4
 80058ae:	462b      	mov	r3, r5
 80058b0:	f04f 0000 	mov.w	r0, #0
 80058b4:	f04f 0100 	mov.w	r1, #0
 80058b8:	0159      	lsls	r1, r3, #5
 80058ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058be:	0150      	lsls	r0, r2, #5
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4621      	mov	r1, r4
 80058c6:	1a51      	subs	r1, r2, r1
 80058c8:	61b9      	str	r1, [r7, #24]
 80058ca:	4629      	mov	r1, r5
 80058cc:	eb63 0301 	sbc.w	r3, r3, r1
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80058de:	4659      	mov	r1, fp
 80058e0:	018b      	lsls	r3, r1, #6
 80058e2:	4651      	mov	r1, sl
 80058e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058e8:	4651      	mov	r1, sl
 80058ea:	018a      	lsls	r2, r1, #6
 80058ec:	4651      	mov	r1, sl
 80058ee:	ebb2 0801 	subs.w	r8, r2, r1
 80058f2:	4659      	mov	r1, fp
 80058f4:	eb63 0901 	sbc.w	r9, r3, r1
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005904:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005908:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800590c:	4690      	mov	r8, r2
 800590e:	4699      	mov	r9, r3
 8005910:	4623      	mov	r3, r4
 8005912:	eb18 0303 	adds.w	r3, r8, r3
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	462b      	mov	r3, r5
 800591a:	eb49 0303 	adc.w	r3, r9, r3
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800592c:	4629      	mov	r1, r5
 800592e:	024b      	lsls	r3, r1, #9
 8005930:	4621      	mov	r1, r4
 8005932:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005936:	4621      	mov	r1, r4
 8005938:	024a      	lsls	r2, r1, #9
 800593a:	4610      	mov	r0, r2
 800593c:	4619      	mov	r1, r3
 800593e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005942:	2200      	movs	r2, #0
 8005944:	65bb      	str	r3, [r7, #88]	; 0x58
 8005946:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005948:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800594c:	f7fb f9bc 	bl	8000cc8 <__aeabi_uldivmod>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4613      	mov	r3, r2
 8005956:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800595a:	e065      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x420>
 800595c:	40023800 	.word	0x40023800
 8005960:	00f42400 	.word	0x00f42400
 8005964:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005968:	4b3d      	ldr	r3, [pc, #244]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x458>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	099b      	lsrs	r3, r3, #6
 800596e:	2200      	movs	r2, #0
 8005970:	4618      	mov	r0, r3
 8005972:	4611      	mov	r1, r2
 8005974:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005978:	653b      	str	r3, [r7, #80]	; 0x50
 800597a:	2300      	movs	r3, #0
 800597c:	657b      	str	r3, [r7, #84]	; 0x54
 800597e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005982:	4642      	mov	r2, r8
 8005984:	464b      	mov	r3, r9
 8005986:	f04f 0000 	mov.w	r0, #0
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	0159      	lsls	r1, r3, #5
 8005990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005994:	0150      	lsls	r0, r2, #5
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4641      	mov	r1, r8
 800599c:	1a51      	subs	r1, r2, r1
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	4649      	mov	r1, r9
 80059a2:	eb63 0301 	sbc.w	r3, r3, r1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80059b4:	4659      	mov	r1, fp
 80059b6:	018b      	lsls	r3, r1, #6
 80059b8:	4651      	mov	r1, sl
 80059ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059be:	4651      	mov	r1, sl
 80059c0:	018a      	lsls	r2, r1, #6
 80059c2:	4651      	mov	r1, sl
 80059c4:	1a54      	subs	r4, r2, r1
 80059c6:	4659      	mov	r1, fp
 80059c8:	eb63 0501 	sbc.w	r5, r3, r1
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	00eb      	lsls	r3, r5, #3
 80059d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059da:	00e2      	lsls	r2, r4, #3
 80059dc:	4614      	mov	r4, r2
 80059de:	461d      	mov	r5, r3
 80059e0:	4643      	mov	r3, r8
 80059e2:	18e3      	adds	r3, r4, r3
 80059e4:	603b      	str	r3, [r7, #0]
 80059e6:	464b      	mov	r3, r9
 80059e8:	eb45 0303 	adc.w	r3, r5, r3
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059fa:	4629      	mov	r1, r5
 80059fc:	028b      	lsls	r3, r1, #10
 80059fe:	4621      	mov	r1, r4
 8005a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a04:	4621      	mov	r1, r4
 8005a06:	028a      	lsls	r2, r1, #10
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a10:	2200      	movs	r2, #0
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a14:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005a16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a1a:	f7fb f955 	bl	8000cc8 <__aeabi_uldivmod>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4613      	mov	r3, r2
 8005a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005a28:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x458>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	0f1b      	lsrs	r3, r3, #28
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005a46:	e003      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	37b8      	adds	r7, #184	; 0xb8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a5e:	bf00      	nop
 8005a60:	40023800 	.word	0x40023800
 8005a64:	00f42400 	.word	0x00f42400

08005a68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e28d      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 8083 	beq.w	8005b8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a88:	4b94      	ldr	r3, [pc, #592]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 030c 	and.w	r3, r3, #12
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d019      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a94:	4b91      	ldr	r3, [pc, #580]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d106      	bne.n	8005aae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005aa0:	4b8e      	ldr	r3, [pc, #568]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aac:	d00c      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aae:	4b8b      	ldr	r3, [pc, #556]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005ab6:	2b0c      	cmp	r3, #12
 8005ab8:	d112      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aba:	4b88      	ldr	r3, [pc, #544]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ac6:	d10b      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac8:	4b84      	ldr	r3, [pc, #528]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d05b      	beq.n	8005b8c <HAL_RCC_OscConfig+0x124>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d157      	bne.n	8005b8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e25a      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae8:	d106      	bne.n	8005af8 <HAL_RCC_OscConfig+0x90>
 8005aea:	4b7c      	ldr	r3, [pc, #496]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a7b      	ldr	r2, [pc, #492]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	e01d      	b.n	8005b34 <HAL_RCC_OscConfig+0xcc>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b00:	d10c      	bne.n	8005b1c <HAL_RCC_OscConfig+0xb4>
 8005b02:	4b76      	ldr	r3, [pc, #472]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a75      	ldr	r2, [pc, #468]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	4b73      	ldr	r3, [pc, #460]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a72      	ldr	r2, [pc, #456]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e00b      	b.n	8005b34 <HAL_RCC_OscConfig+0xcc>
 8005b1c:	4b6f      	ldr	r3, [pc, #444]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a6e      	ldr	r2, [pc, #440]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	4b6c      	ldr	r3, [pc, #432]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a6b      	ldr	r2, [pc, #428]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d013      	beq.n	8005b64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3c:	f7fd fdb6 	bl	80036ac <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b44:	f7fd fdb2 	bl	80036ac <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b64      	cmp	r3, #100	; 0x64
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e21f      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b56:	4b61      	ldr	r3, [pc, #388]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0xdc>
 8005b62:	e014      	b.n	8005b8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fd fda2 	bl	80036ac <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b6c:	f7fd fd9e 	bl	80036ac <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b64      	cmp	r3, #100	; 0x64
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e20b      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b7e:	4b57      	ldr	r3, [pc, #348]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f0      	bne.n	8005b6c <HAL_RCC_OscConfig+0x104>
 8005b8a:	e000      	b.n	8005b8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d06f      	beq.n	8005c7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b9a:	4b50      	ldr	r3, [pc, #320]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 030c 	and.w	r3, r3, #12
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d017      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ba6:	4b4d      	ldr	r3, [pc, #308]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d105      	bne.n	8005bbe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005bb2:	4b4a      	ldr	r3, [pc, #296]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00b      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bbe:	4b47      	ldr	r3, [pc, #284]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005bc6:	2b0c      	cmp	r3, #12
 8005bc8:	d11c      	bne.n	8005c04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bca:	4b44      	ldr	r3, [pc, #272]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d116      	bne.n	8005c04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bd6:	4b41      	ldr	r3, [pc, #260]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <HAL_RCC_OscConfig+0x186>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d001      	beq.n	8005bee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e1d3      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bee:	4b3b      	ldr	r3, [pc, #236]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4937      	ldr	r1, [pc, #220]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c02:	e03a      	b.n	8005c7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d020      	beq.n	8005c4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c0c:	4b34      	ldr	r3, [pc, #208]	; (8005ce0 <HAL_RCC_OscConfig+0x278>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c12:	f7fd fd4b 	bl	80036ac <HAL_GetTick>
 8005c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c18:	e008      	b.n	8005c2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c1a:	f7fd fd47 	bl	80036ac <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e1b4      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2c:	4b2b      	ldr	r3, [pc, #172]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0f0      	beq.n	8005c1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c38:	4b28      	ldr	r3, [pc, #160]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	4925      	ldr	r1, [pc, #148]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	600b      	str	r3, [r1, #0]
 8005c4c:	e015      	b.n	8005c7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c4e:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <HAL_RCC_OscConfig+0x278>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c54:	f7fd fd2a 	bl	80036ac <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c5c:	f7fd fd26 	bl	80036ac <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e193      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c6e:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f0      	bne.n	8005c5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d036      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d016      	beq.n	8005cbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c8e:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005c90:	2201      	movs	r2, #1
 8005c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c94:	f7fd fd0a 	bl	80036ac <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c9c:	f7fd fd06 	bl	80036ac <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e173      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cae:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <HAL_RCC_OscConfig+0x274>)
 8005cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0f0      	beq.n	8005c9c <HAL_RCC_OscConfig+0x234>
 8005cba:	e01b      	b.n	8005cf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc2:	f7fd fcf3 	bl	80036ac <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc8:	e00e      	b.n	8005ce8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cca:	f7fd fcef 	bl	80036ac <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d907      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e15c      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	42470000 	.word	0x42470000
 8005ce4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce8:	4b8a      	ldr	r3, [pc, #552]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1ea      	bne.n	8005cca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8097 	beq.w	8005e30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d02:	2300      	movs	r3, #0
 8005d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d06:	4b83      	ldr	r3, [pc, #524]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10f      	bne.n	8005d32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d12:	2300      	movs	r3, #0
 8005d14:	60bb      	str	r3, [r7, #8]
 8005d16:	4b7f      	ldr	r3, [pc, #508]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	4a7e      	ldr	r2, [pc, #504]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d20:	6413      	str	r3, [r2, #64]	; 0x40
 8005d22:	4b7c      	ldr	r3, [pc, #496]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2a:	60bb      	str	r3, [r7, #8]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d32:	4b79      	ldr	r3, [pc, #484]	; (8005f18 <HAL_RCC_OscConfig+0x4b0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d118      	bne.n	8005d70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d3e:	4b76      	ldr	r3, [pc, #472]	; (8005f18 <HAL_RCC_OscConfig+0x4b0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a75      	ldr	r2, [pc, #468]	; (8005f18 <HAL_RCC_OscConfig+0x4b0>)
 8005d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d4a:	f7fd fcaf 	bl	80036ac <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d52:	f7fd fcab 	bl	80036ac <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e118      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d64:	4b6c      	ldr	r3, [pc, #432]	; (8005f18 <HAL_RCC_OscConfig+0x4b0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0f0      	beq.n	8005d52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d106      	bne.n	8005d86 <HAL_RCC_OscConfig+0x31e>
 8005d78:	4b66      	ldr	r3, [pc, #408]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7c:	4a65      	ldr	r2, [pc, #404]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005d7e:	f043 0301 	orr.w	r3, r3, #1
 8005d82:	6713      	str	r3, [r2, #112]	; 0x70
 8005d84:	e01c      	b.n	8005dc0 <HAL_RCC_OscConfig+0x358>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b05      	cmp	r3, #5
 8005d8c:	d10c      	bne.n	8005da8 <HAL_RCC_OscConfig+0x340>
 8005d8e:	4b61      	ldr	r3, [pc, #388]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	4a60      	ldr	r2, [pc, #384]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005d94:	f043 0304 	orr.w	r3, r3, #4
 8005d98:	6713      	str	r3, [r2, #112]	; 0x70
 8005d9a:	4b5e      	ldr	r3, [pc, #376]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	4a5d      	ldr	r2, [pc, #372]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	6713      	str	r3, [r2, #112]	; 0x70
 8005da6:	e00b      	b.n	8005dc0 <HAL_RCC_OscConfig+0x358>
 8005da8:	4b5a      	ldr	r3, [pc, #360]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dac:	4a59      	ldr	r2, [pc, #356]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	6713      	str	r3, [r2, #112]	; 0x70
 8005db4:	4b57      	ldr	r3, [pc, #348]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	4a56      	ldr	r2, [pc, #344]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005dba:	f023 0304 	bic.w	r3, r3, #4
 8005dbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d015      	beq.n	8005df4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc8:	f7fd fc70 	bl	80036ac <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dce:	e00a      	b.n	8005de6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dd0:	f7fd fc6c 	bl	80036ac <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e0d7      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de6:	4b4b      	ldr	r3, [pc, #300]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0ee      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x368>
 8005df2:	e014      	b.n	8005e1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df4:	f7fd fc5a 	bl	80036ac <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dfa:	e00a      	b.n	8005e12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dfc:	f7fd fc56 	bl	80036ac <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e0c1      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e12:	4b40      	ldr	r3, [pc, #256]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1ee      	bne.n	8005dfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e1e:	7dfb      	ldrb	r3, [r7, #23]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d105      	bne.n	8005e30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e24:	4b3b      	ldr	r3, [pc, #236]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	4a3a      	ldr	r2, [pc, #232]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 80ad 	beq.w	8005f94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e3a:	4b36      	ldr	r3, [pc, #216]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 030c 	and.w	r3, r3, #12
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d060      	beq.n	8005f08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d145      	bne.n	8005eda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e4e:	4b33      	ldr	r3, [pc, #204]	; (8005f1c <HAL_RCC_OscConfig+0x4b4>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e54:	f7fd fc2a 	bl	80036ac <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e5c:	f7fd fc26 	bl	80036ac <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e093      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e6e:	4b29      	ldr	r3, [pc, #164]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1f0      	bne.n	8005e5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69da      	ldr	r2, [r3, #28]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	019b      	lsls	r3, r3, #6
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e90:	085b      	lsrs	r3, r3, #1
 8005e92:	3b01      	subs	r3, #1
 8005e94:	041b      	lsls	r3, r3, #16
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	061b      	lsls	r3, r3, #24
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	071b      	lsls	r3, r3, #28
 8005ea6:	491b      	ldr	r1, [pc, #108]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eac:	4b1b      	ldr	r3, [pc, #108]	; (8005f1c <HAL_RCC_OscConfig+0x4b4>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb2:	f7fd fbfb 	bl	80036ac <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eba:	f7fd fbf7 	bl	80036ac <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e064      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ecc:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f0      	beq.n	8005eba <HAL_RCC_OscConfig+0x452>
 8005ed8:	e05c      	b.n	8005f94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eda:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <HAL_RCC_OscConfig+0x4b4>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fd fbe4 	bl	80036ac <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7fd fbe0 	bl	80036ac <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e04d      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_RCC_OscConfig+0x4ac>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x480>
 8005f06:	e045      	b.n	8005f94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d107      	bne.n	8005f20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e040      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
 8005f14:	40023800 	.word	0x40023800
 8005f18:	40007000 	.word	0x40007000
 8005f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f20:	4b1f      	ldr	r3, [pc, #124]	; (8005fa0 <HAL_RCC_OscConfig+0x538>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d030      	beq.n	8005f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d129      	bne.n	8005f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d122      	bne.n	8005f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f50:	4013      	ands	r3, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d119      	bne.n	8005f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	085b      	lsrs	r3, r3, #1
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d10f      	bne.n	8005f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d107      	bne.n	8005f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d001      	beq.n	8005f94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	40023800 	.word	0x40023800

08005fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e03f      	b.n	8006036 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fd fa62 	bl	8003494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2224      	movs	r2, #36	; 0x24
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f9cb 	bl	8006384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800600c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800601c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b08a      	sub	sp, #40	; 0x28
 8006042:	af02      	add	r7, sp, #8
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	603b      	str	r3, [r7, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b20      	cmp	r3, #32
 800605c:	d17c      	bne.n	8006158 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <HAL_UART_Transmit+0x2c>
 8006064:	88fb      	ldrh	r3, [r7, #6]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e075      	b.n	800615a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_UART_Transmit+0x3e>
 8006078:	2302      	movs	r3, #2
 800607a:	e06e      	b.n	800615a <HAL_UART_Transmit+0x11c>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2221      	movs	r2, #33	; 0x21
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006092:	f7fd fb0b 	bl	80036ac <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ac:	d108      	bne.n	80060c0 <HAL_UART_Transmit+0x82>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	e003      	b.n	80060c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060d0:	e02a      	b.n	8006128 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2200      	movs	r2, #0
 80060da:	2180      	movs	r1, #128	; 0x80
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f8e2 	bl	80062a6 <UART_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e036      	b.n	800615a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006100:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	3302      	adds	r3, #2
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	e007      	b.n	800611a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	3301      	adds	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1cf      	bne.n	80060d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2200      	movs	r2, #0
 800613a:	2140      	movs	r1, #64	; 0x40
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f8b2 	bl	80062a6 <UART_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e006      	b.n	800615a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	e000      	b.n	800615a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006158:	2302      	movs	r3, #2
  }
}
 800615a:	4618      	mov	r0, r3
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b08a      	sub	sp, #40	; 0x28
 8006166:	af02      	add	r7, sp, #8
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	603b      	str	r3, [r7, #0]
 800616e:	4613      	mov	r3, r2
 8006170:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b20      	cmp	r3, #32
 8006180:	f040 808c 	bne.w	800629c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_UART_Receive+0x2e>
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e084      	b.n	800629e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <HAL_UART_Receive+0x40>
 800619e:	2302      	movs	r3, #2
 80061a0:	e07d      	b.n	800629e <HAL_UART_Receive+0x13c>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2222      	movs	r2, #34	; 0x22
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061be:	f7fd fa75 	bl	80036ac <HAL_GetTick>
 80061c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	88fa      	ldrh	r2, [r7, #6]
 80061ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d8:	d108      	bne.n	80061ec <HAL_UART_Receive+0x8a>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d104      	bne.n	80061ec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	e003      	b.n	80061f4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80061fc:	e043      	b.n	8006286 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2200      	movs	r2, #0
 8006206:	2120      	movs	r1, #32
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f84c 	bl	80062a6 <UART_WaitOnFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e042      	b.n	800629e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10c      	bne.n	8006238 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	b29b      	uxth	r3, r3
 8006226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622a:	b29a      	uxth	r2, r3
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	3302      	adds	r3, #2
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	e01f      	b.n	8006278 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006240:	d007      	beq.n	8006252 <HAL_UART_Receive+0xf0>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <HAL_UART_Receive+0xfe>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	e008      	b.n	8006272 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800626c:	b2da      	uxtb	r2, r3
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	3301      	adds	r3, #1
 8006276:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1b6      	bne.n	80061fe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	e000      	b.n	800629e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800629c:	2302      	movs	r3, #2
  }
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b090      	sub	sp, #64	; 0x40
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	4613      	mov	r3, r2
 80062b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b6:	e050      	b.n	800635a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d04c      	beq.n	800635a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80062c6:	f7fd f9f1 	bl	80036ac <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d241      	bcs.n	800635a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	330c      	adds	r3, #12
 80062dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	330c      	adds	r3, #12
 80062f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062f6:	637a      	str	r2, [r7, #52]	; 0x34
 80062f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e5      	bne.n	80062d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3314      	adds	r3, #20
 8006310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	613b      	str	r3, [r7, #16]
   return(result);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	63bb      	str	r3, [r7, #56]	; 0x38
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3314      	adds	r3, #20
 8006328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800632a:	623a      	str	r2, [r7, #32]
 800632c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	69f9      	ldr	r1, [r7, #28]
 8006330:	6a3a      	ldr	r2, [r7, #32]
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	61bb      	str	r3, [r7, #24]
   return(result);
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e5      	bne.n	800630a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e00f      	b.n	800637a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4013      	ands	r3, r2
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	429a      	cmp	r2, r3
 8006368:	bf0c      	ite	eq
 800636a:	2301      	moveq	r3, #1
 800636c:	2300      	movne	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	429a      	cmp	r2, r3
 8006376:	d09f      	beq.n	80062b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3740      	adds	r7, #64	; 0x40
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006388:	b0c0      	sub	sp, #256	; 0x100
 800638a:	af00      	add	r7, sp, #0
 800638c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800639c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a0:	68d9      	ldr	r1, [r3, #12]
 80063a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	ea40 0301 	orr.w	r3, r0, r1
 80063ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063dc:	f021 010c 	bic.w	r1, r1, #12
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063ea:	430b      	orrs	r3, r1
 80063ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fe:	6999      	ldr	r1, [r3, #24]
 8006400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	ea40 0301 	orr.w	r3, r0, r1
 800640a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b8f      	ldr	r3, [pc, #572]	; (8006650 <UART_SetConfig+0x2cc>)
 8006414:	429a      	cmp	r2, r3
 8006416:	d005      	beq.n	8006424 <UART_SetConfig+0xa0>
 8006418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	4b8d      	ldr	r3, [pc, #564]	; (8006654 <UART_SetConfig+0x2d0>)
 8006420:	429a      	cmp	r2, r3
 8006422:	d104      	bne.n	800642e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006424:	f7ff f8dc 	bl	80055e0 <HAL_RCC_GetPCLK2Freq>
 8006428:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800642c:	e003      	b.n	8006436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800642e:	f7ff f8c3 	bl	80055b8 <HAL_RCC_GetPCLK1Freq>
 8006432:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006440:	f040 810c 	bne.w	800665c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006448:	2200      	movs	r2, #0
 800644a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800644e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006456:	4622      	mov	r2, r4
 8006458:	462b      	mov	r3, r5
 800645a:	1891      	adds	r1, r2, r2
 800645c:	65b9      	str	r1, [r7, #88]	; 0x58
 800645e:	415b      	adcs	r3, r3
 8006460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006466:	4621      	mov	r1, r4
 8006468:	eb12 0801 	adds.w	r8, r2, r1
 800646c:	4629      	mov	r1, r5
 800646e:	eb43 0901 	adc.w	r9, r3, r1
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800647e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006486:	4690      	mov	r8, r2
 8006488:	4699      	mov	r9, r3
 800648a:	4623      	mov	r3, r4
 800648c:	eb18 0303 	adds.w	r3, r8, r3
 8006490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006494:	462b      	mov	r3, r5
 8006496:	eb49 0303 	adc.w	r3, r9, r3
 800649a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800649e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064b2:	460b      	mov	r3, r1
 80064b4:	18db      	adds	r3, r3, r3
 80064b6:	653b      	str	r3, [r7, #80]	; 0x50
 80064b8:	4613      	mov	r3, r2
 80064ba:	eb42 0303 	adc.w	r3, r2, r3
 80064be:	657b      	str	r3, [r7, #84]	; 0x54
 80064c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80064c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80064c8:	f7fa fbfe 	bl	8000cc8 <__aeabi_uldivmod>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4b61      	ldr	r3, [pc, #388]	; (8006658 <UART_SetConfig+0x2d4>)
 80064d2:	fba3 2302 	umull	r2, r3, r3, r2
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	011c      	lsls	r4, r3, #4
 80064da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80064ec:	4642      	mov	r2, r8
 80064ee:	464b      	mov	r3, r9
 80064f0:	1891      	adds	r1, r2, r2
 80064f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80064f4:	415b      	adcs	r3, r3
 80064f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064fc:	4641      	mov	r1, r8
 80064fe:	eb12 0a01 	adds.w	sl, r2, r1
 8006502:	4649      	mov	r1, r9
 8006504:	eb43 0b01 	adc.w	fp, r3, r1
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800651c:	4692      	mov	sl, r2
 800651e:	469b      	mov	fp, r3
 8006520:	4643      	mov	r3, r8
 8006522:	eb1a 0303 	adds.w	r3, sl, r3
 8006526:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800652a:	464b      	mov	r3, r9
 800652c:	eb4b 0303 	adc.w	r3, fp, r3
 8006530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006540:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006548:	460b      	mov	r3, r1
 800654a:	18db      	adds	r3, r3, r3
 800654c:	643b      	str	r3, [r7, #64]	; 0x40
 800654e:	4613      	mov	r3, r2
 8006550:	eb42 0303 	adc.w	r3, r2, r3
 8006554:	647b      	str	r3, [r7, #68]	; 0x44
 8006556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800655a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800655e:	f7fa fbb3 	bl	8000cc8 <__aeabi_uldivmod>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4611      	mov	r1, r2
 8006568:	4b3b      	ldr	r3, [pc, #236]	; (8006658 <UART_SetConfig+0x2d4>)
 800656a:	fba3 2301 	umull	r2, r3, r3, r1
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	2264      	movs	r2, #100	; 0x64
 8006572:	fb02 f303 	mul.w	r3, r2, r3
 8006576:	1acb      	subs	r3, r1, r3
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800657e:	4b36      	ldr	r3, [pc, #216]	; (8006658 <UART_SetConfig+0x2d4>)
 8006580:	fba3 2302 	umull	r2, r3, r3, r2
 8006584:	095b      	lsrs	r3, r3, #5
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800658c:	441c      	add	r4, r3
 800658e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006592:	2200      	movs	r2, #0
 8006594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006598:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800659c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065a0:	4642      	mov	r2, r8
 80065a2:	464b      	mov	r3, r9
 80065a4:	1891      	adds	r1, r2, r2
 80065a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80065a8:	415b      	adcs	r3, r3
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065b0:	4641      	mov	r1, r8
 80065b2:	1851      	adds	r1, r2, r1
 80065b4:	6339      	str	r1, [r7, #48]	; 0x30
 80065b6:	4649      	mov	r1, r9
 80065b8:	414b      	adcs	r3, r1
 80065ba:	637b      	str	r3, [r7, #52]	; 0x34
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80065c8:	4659      	mov	r1, fp
 80065ca:	00cb      	lsls	r3, r1, #3
 80065cc:	4651      	mov	r1, sl
 80065ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065d2:	4651      	mov	r1, sl
 80065d4:	00ca      	lsls	r2, r1, #3
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	4603      	mov	r3, r0
 80065dc:	4642      	mov	r2, r8
 80065de:	189b      	adds	r3, r3, r2
 80065e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065e4:	464b      	mov	r3, r9
 80065e6:	460a      	mov	r2, r1
 80065e8:	eb42 0303 	adc.w	r3, r2, r3
 80065ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006604:	460b      	mov	r3, r1
 8006606:	18db      	adds	r3, r3, r3
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
 800660a:	4613      	mov	r3, r2
 800660c:	eb42 0303 	adc.w	r3, r2, r3
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800661a:	f7fa fb55 	bl	8000cc8 <__aeabi_uldivmod>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4b0d      	ldr	r3, [pc, #52]	; (8006658 <UART_SetConfig+0x2d4>)
 8006624:	fba3 1302 	umull	r1, r3, r3, r2
 8006628:	095b      	lsrs	r3, r3, #5
 800662a:	2164      	movs	r1, #100	; 0x64
 800662c:	fb01 f303 	mul.w	r3, r1, r3
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	00db      	lsls	r3, r3, #3
 8006634:	3332      	adds	r3, #50	; 0x32
 8006636:	4a08      	ldr	r2, [pc, #32]	; (8006658 <UART_SetConfig+0x2d4>)
 8006638:	fba2 2303 	umull	r2, r3, r2, r3
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	f003 0207 	and.w	r2, r3, #7
 8006642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4422      	add	r2, r4
 800664a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800664c:	e106      	b.n	800685c <UART_SetConfig+0x4d8>
 800664e:	bf00      	nop
 8006650:	40011000 	.word	0x40011000
 8006654:	40011400 	.word	0x40011400
 8006658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800665c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006660:	2200      	movs	r2, #0
 8006662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006666:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800666a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800666e:	4642      	mov	r2, r8
 8006670:	464b      	mov	r3, r9
 8006672:	1891      	adds	r1, r2, r2
 8006674:	6239      	str	r1, [r7, #32]
 8006676:	415b      	adcs	r3, r3
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
 800667a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800667e:	4641      	mov	r1, r8
 8006680:	1854      	adds	r4, r2, r1
 8006682:	4649      	mov	r1, r9
 8006684:	eb43 0501 	adc.w	r5, r3, r1
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	00eb      	lsls	r3, r5, #3
 8006692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006696:	00e2      	lsls	r2, r4, #3
 8006698:	4614      	mov	r4, r2
 800669a:	461d      	mov	r5, r3
 800669c:	4643      	mov	r3, r8
 800669e:	18e3      	adds	r3, r4, r3
 80066a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066a4:	464b      	mov	r3, r9
 80066a6:	eb45 0303 	adc.w	r3, r5, r3
 80066aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066be:	f04f 0200 	mov.w	r2, #0
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80066ca:	4629      	mov	r1, r5
 80066cc:	008b      	lsls	r3, r1, #2
 80066ce:	4621      	mov	r1, r4
 80066d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066d4:	4621      	mov	r1, r4
 80066d6:	008a      	lsls	r2, r1, #2
 80066d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066dc:	f7fa faf4 	bl	8000cc8 <__aeabi_uldivmod>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4b60      	ldr	r3, [pc, #384]	; (8006868 <UART_SetConfig+0x4e4>)
 80066e6:	fba3 2302 	umull	r2, r3, r3, r2
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	011c      	lsls	r4, r3, #4
 80066ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80066fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006700:	4642      	mov	r2, r8
 8006702:	464b      	mov	r3, r9
 8006704:	1891      	adds	r1, r2, r2
 8006706:	61b9      	str	r1, [r7, #24]
 8006708:	415b      	adcs	r3, r3
 800670a:	61fb      	str	r3, [r7, #28]
 800670c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006710:	4641      	mov	r1, r8
 8006712:	1851      	adds	r1, r2, r1
 8006714:	6139      	str	r1, [r7, #16]
 8006716:	4649      	mov	r1, r9
 8006718:	414b      	adcs	r3, r1
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006728:	4659      	mov	r1, fp
 800672a:	00cb      	lsls	r3, r1, #3
 800672c:	4651      	mov	r1, sl
 800672e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006732:	4651      	mov	r1, sl
 8006734:	00ca      	lsls	r2, r1, #3
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	4603      	mov	r3, r0
 800673c:	4642      	mov	r2, r8
 800673e:	189b      	adds	r3, r3, r2
 8006740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006744:	464b      	mov	r3, r9
 8006746:	460a      	mov	r2, r1
 8006748:	eb42 0303 	adc.w	r3, r2, r3
 800674c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	67bb      	str	r3, [r7, #120]	; 0x78
 800675a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006768:	4649      	mov	r1, r9
 800676a:	008b      	lsls	r3, r1, #2
 800676c:	4641      	mov	r1, r8
 800676e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006772:	4641      	mov	r1, r8
 8006774:	008a      	lsls	r2, r1, #2
 8006776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800677a:	f7fa faa5 	bl	8000cc8 <__aeabi_uldivmod>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4611      	mov	r1, r2
 8006784:	4b38      	ldr	r3, [pc, #224]	; (8006868 <UART_SetConfig+0x4e4>)
 8006786:	fba3 2301 	umull	r2, r3, r3, r1
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	2264      	movs	r2, #100	; 0x64
 800678e:	fb02 f303 	mul.w	r3, r2, r3
 8006792:	1acb      	subs	r3, r1, r3
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	3332      	adds	r3, #50	; 0x32
 8006798:	4a33      	ldr	r2, [pc, #204]	; (8006868 <UART_SetConfig+0x4e4>)
 800679a:	fba2 2303 	umull	r2, r3, r2, r3
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067a4:	441c      	add	r4, r3
 80067a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067aa:	2200      	movs	r2, #0
 80067ac:	673b      	str	r3, [r7, #112]	; 0x70
 80067ae:	677a      	str	r2, [r7, #116]	; 0x74
 80067b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067b4:	4642      	mov	r2, r8
 80067b6:	464b      	mov	r3, r9
 80067b8:	1891      	adds	r1, r2, r2
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	415b      	adcs	r3, r3
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067c4:	4641      	mov	r1, r8
 80067c6:	1851      	adds	r1, r2, r1
 80067c8:	6039      	str	r1, [r7, #0]
 80067ca:	4649      	mov	r1, r9
 80067cc:	414b      	adcs	r3, r1
 80067ce:	607b      	str	r3, [r7, #4]
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	f04f 0300 	mov.w	r3, #0
 80067d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067dc:	4659      	mov	r1, fp
 80067de:	00cb      	lsls	r3, r1, #3
 80067e0:	4651      	mov	r1, sl
 80067e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067e6:	4651      	mov	r1, sl
 80067e8:	00ca      	lsls	r2, r1, #3
 80067ea:	4610      	mov	r0, r2
 80067ec:	4619      	mov	r1, r3
 80067ee:	4603      	mov	r3, r0
 80067f0:	4642      	mov	r2, r8
 80067f2:	189b      	adds	r3, r3, r2
 80067f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80067f6:	464b      	mov	r3, r9
 80067f8:	460a      	mov	r2, r1
 80067fa:	eb42 0303 	adc.w	r3, r2, r3
 80067fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	663b      	str	r3, [r7, #96]	; 0x60
 800680a:	667a      	str	r2, [r7, #100]	; 0x64
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006818:	4649      	mov	r1, r9
 800681a:	008b      	lsls	r3, r1, #2
 800681c:	4641      	mov	r1, r8
 800681e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006822:	4641      	mov	r1, r8
 8006824:	008a      	lsls	r2, r1, #2
 8006826:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800682a:	f7fa fa4d 	bl	8000cc8 <__aeabi_uldivmod>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <UART_SetConfig+0x4e4>)
 8006834:	fba3 1302 	umull	r1, r3, r3, r2
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	2164      	movs	r1, #100	; 0x64
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	3332      	adds	r3, #50	; 0x32
 8006846:	4a08      	ldr	r2, [pc, #32]	; (8006868 <UART_SetConfig+0x4e4>)
 8006848:	fba2 2303 	umull	r2, r3, r2, r3
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	f003 020f 	and.w	r2, r3, #15
 8006852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4422      	add	r2, r4
 800685a:	609a      	str	r2, [r3, #8]
}
 800685c:	bf00      	nop
 800685e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006862:	46bd      	mov	sp, r7
 8006864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006868:	51eb851f 	.word	0x51eb851f

0800686c <__cvt>:
 800686c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006870:	ec55 4b10 	vmov	r4, r5, d0
 8006874:	2d00      	cmp	r5, #0
 8006876:	460e      	mov	r6, r1
 8006878:	4619      	mov	r1, r3
 800687a:	462b      	mov	r3, r5
 800687c:	bfbb      	ittet	lt
 800687e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006882:	461d      	movlt	r5, r3
 8006884:	2300      	movge	r3, #0
 8006886:	232d      	movlt	r3, #45	; 0x2d
 8006888:	700b      	strb	r3, [r1, #0]
 800688a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800688c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006890:	4691      	mov	r9, r2
 8006892:	f023 0820 	bic.w	r8, r3, #32
 8006896:	bfbc      	itt	lt
 8006898:	4622      	movlt	r2, r4
 800689a:	4614      	movlt	r4, r2
 800689c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068a0:	d005      	beq.n	80068ae <__cvt+0x42>
 80068a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80068a6:	d100      	bne.n	80068aa <__cvt+0x3e>
 80068a8:	3601      	adds	r6, #1
 80068aa:	2102      	movs	r1, #2
 80068ac:	e000      	b.n	80068b0 <__cvt+0x44>
 80068ae:	2103      	movs	r1, #3
 80068b0:	ab03      	add	r3, sp, #12
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	ab02      	add	r3, sp, #8
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	ec45 4b10 	vmov	d0, r4, r5
 80068bc:	4653      	mov	r3, sl
 80068be:	4632      	mov	r2, r6
 80068c0:	f001 f89e 	bl	8007a00 <_dtoa_r>
 80068c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80068c8:	4607      	mov	r7, r0
 80068ca:	d102      	bne.n	80068d2 <__cvt+0x66>
 80068cc:	f019 0f01 	tst.w	r9, #1
 80068d0:	d022      	beq.n	8006918 <__cvt+0xac>
 80068d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068d6:	eb07 0906 	add.w	r9, r7, r6
 80068da:	d110      	bne.n	80068fe <__cvt+0x92>
 80068dc:	783b      	ldrb	r3, [r7, #0]
 80068de:	2b30      	cmp	r3, #48	; 0x30
 80068e0:	d10a      	bne.n	80068f8 <__cvt+0x8c>
 80068e2:	2200      	movs	r2, #0
 80068e4:	2300      	movs	r3, #0
 80068e6:	4620      	mov	r0, r4
 80068e8:	4629      	mov	r1, r5
 80068ea:	f7fa f90d 	bl	8000b08 <__aeabi_dcmpeq>
 80068ee:	b918      	cbnz	r0, 80068f8 <__cvt+0x8c>
 80068f0:	f1c6 0601 	rsb	r6, r6, #1
 80068f4:	f8ca 6000 	str.w	r6, [sl]
 80068f8:	f8da 3000 	ldr.w	r3, [sl]
 80068fc:	4499      	add	r9, r3
 80068fe:	2200      	movs	r2, #0
 8006900:	2300      	movs	r3, #0
 8006902:	4620      	mov	r0, r4
 8006904:	4629      	mov	r1, r5
 8006906:	f7fa f8ff 	bl	8000b08 <__aeabi_dcmpeq>
 800690a:	b108      	cbz	r0, 8006910 <__cvt+0xa4>
 800690c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006910:	2230      	movs	r2, #48	; 0x30
 8006912:	9b03      	ldr	r3, [sp, #12]
 8006914:	454b      	cmp	r3, r9
 8006916:	d307      	bcc.n	8006928 <__cvt+0xbc>
 8006918:	9b03      	ldr	r3, [sp, #12]
 800691a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800691c:	1bdb      	subs	r3, r3, r7
 800691e:	4638      	mov	r0, r7
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	b004      	add	sp, #16
 8006924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006928:	1c59      	adds	r1, r3, #1
 800692a:	9103      	str	r1, [sp, #12]
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e7f0      	b.n	8006912 <__cvt+0xa6>

08006930 <__exponent>:
 8006930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006932:	4603      	mov	r3, r0
 8006934:	2900      	cmp	r1, #0
 8006936:	bfb8      	it	lt
 8006938:	4249      	neglt	r1, r1
 800693a:	f803 2b02 	strb.w	r2, [r3], #2
 800693e:	bfb4      	ite	lt
 8006940:	222d      	movlt	r2, #45	; 0x2d
 8006942:	222b      	movge	r2, #43	; 0x2b
 8006944:	2909      	cmp	r1, #9
 8006946:	7042      	strb	r2, [r0, #1]
 8006948:	dd2a      	ble.n	80069a0 <__exponent+0x70>
 800694a:	f10d 0207 	add.w	r2, sp, #7
 800694e:	4617      	mov	r7, r2
 8006950:	260a      	movs	r6, #10
 8006952:	4694      	mov	ip, r2
 8006954:	fb91 f5f6 	sdiv	r5, r1, r6
 8006958:	fb06 1415 	mls	r4, r6, r5, r1
 800695c:	3430      	adds	r4, #48	; 0x30
 800695e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006962:	460c      	mov	r4, r1
 8006964:	2c63      	cmp	r4, #99	; 0x63
 8006966:	f102 32ff 	add.w	r2, r2, #4294967295
 800696a:	4629      	mov	r1, r5
 800696c:	dcf1      	bgt.n	8006952 <__exponent+0x22>
 800696e:	3130      	adds	r1, #48	; 0x30
 8006970:	f1ac 0402 	sub.w	r4, ip, #2
 8006974:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006978:	1c41      	adds	r1, r0, #1
 800697a:	4622      	mov	r2, r4
 800697c:	42ba      	cmp	r2, r7
 800697e:	d30a      	bcc.n	8006996 <__exponent+0x66>
 8006980:	f10d 0209 	add.w	r2, sp, #9
 8006984:	eba2 020c 	sub.w	r2, r2, ip
 8006988:	42bc      	cmp	r4, r7
 800698a:	bf88      	it	hi
 800698c:	2200      	movhi	r2, #0
 800698e:	4413      	add	r3, r2
 8006990:	1a18      	subs	r0, r3, r0
 8006992:	b003      	add	sp, #12
 8006994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006996:	f812 5b01 	ldrb.w	r5, [r2], #1
 800699a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800699e:	e7ed      	b.n	800697c <__exponent+0x4c>
 80069a0:	2330      	movs	r3, #48	; 0x30
 80069a2:	3130      	adds	r1, #48	; 0x30
 80069a4:	7083      	strb	r3, [r0, #2]
 80069a6:	70c1      	strb	r1, [r0, #3]
 80069a8:	1d03      	adds	r3, r0, #4
 80069aa:	e7f1      	b.n	8006990 <__exponent+0x60>

080069ac <_printf_float>:
 80069ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b0:	ed2d 8b02 	vpush	{d8}
 80069b4:	b08d      	sub	sp, #52	; 0x34
 80069b6:	460c      	mov	r4, r1
 80069b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80069bc:	4616      	mov	r6, r2
 80069be:	461f      	mov	r7, r3
 80069c0:	4605      	mov	r5, r0
 80069c2:	f000 ff19 	bl	80077f8 <_localeconv_r>
 80069c6:	f8d0 a000 	ldr.w	sl, [r0]
 80069ca:	4650      	mov	r0, sl
 80069cc:	f7f9 fc70 	bl	80002b0 <strlen>
 80069d0:	2300      	movs	r3, #0
 80069d2:	930a      	str	r3, [sp, #40]	; 0x28
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	9305      	str	r3, [sp, #20]
 80069d8:	f8d8 3000 	ldr.w	r3, [r8]
 80069dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80069e0:	3307      	adds	r3, #7
 80069e2:	f023 0307 	bic.w	r3, r3, #7
 80069e6:	f103 0208 	add.w	r2, r3, #8
 80069ea:	f8c8 2000 	str.w	r2, [r8]
 80069ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069f6:	9307      	str	r3, [sp, #28]
 80069f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80069fc:	ee08 0a10 	vmov	s16, r0
 8006a00:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006a04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a08:	4b9e      	ldr	r3, [pc, #632]	; (8006c84 <_printf_float+0x2d8>)
 8006a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a0e:	f7fa f8ad 	bl	8000b6c <__aeabi_dcmpun>
 8006a12:	bb88      	cbnz	r0, 8006a78 <_printf_float+0xcc>
 8006a14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a18:	4b9a      	ldr	r3, [pc, #616]	; (8006c84 <_printf_float+0x2d8>)
 8006a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a1e:	f7fa f887 	bl	8000b30 <__aeabi_dcmple>
 8006a22:	bb48      	cbnz	r0, 8006a78 <_printf_float+0xcc>
 8006a24:	2200      	movs	r2, #0
 8006a26:	2300      	movs	r3, #0
 8006a28:	4640      	mov	r0, r8
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	f7fa f876 	bl	8000b1c <__aeabi_dcmplt>
 8006a30:	b110      	cbz	r0, 8006a38 <_printf_float+0x8c>
 8006a32:	232d      	movs	r3, #45	; 0x2d
 8006a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a38:	4a93      	ldr	r2, [pc, #588]	; (8006c88 <_printf_float+0x2dc>)
 8006a3a:	4b94      	ldr	r3, [pc, #592]	; (8006c8c <_printf_float+0x2e0>)
 8006a3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a40:	bf94      	ite	ls
 8006a42:	4690      	movls	r8, r2
 8006a44:	4698      	movhi	r8, r3
 8006a46:	2303      	movs	r3, #3
 8006a48:	6123      	str	r3, [r4, #16]
 8006a4a:	9b05      	ldr	r3, [sp, #20]
 8006a4c:	f023 0304 	bic.w	r3, r3, #4
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	f04f 0900 	mov.w	r9, #0
 8006a56:	9700      	str	r7, [sp, #0]
 8006a58:	4633      	mov	r3, r6
 8006a5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f9da 	bl	8006e18 <_printf_common>
 8006a64:	3001      	adds	r0, #1
 8006a66:	f040 8090 	bne.w	8006b8a <_printf_float+0x1de>
 8006a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6e:	b00d      	add	sp, #52	; 0x34
 8006a70:	ecbd 8b02 	vpop	{d8}
 8006a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a78:	4642      	mov	r2, r8
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	4649      	mov	r1, r9
 8006a80:	f7fa f874 	bl	8000b6c <__aeabi_dcmpun>
 8006a84:	b140      	cbz	r0, 8006a98 <_printf_float+0xec>
 8006a86:	464b      	mov	r3, r9
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bfbc      	itt	lt
 8006a8c:	232d      	movlt	r3, #45	; 0x2d
 8006a8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a92:	4a7f      	ldr	r2, [pc, #508]	; (8006c90 <_printf_float+0x2e4>)
 8006a94:	4b7f      	ldr	r3, [pc, #508]	; (8006c94 <_printf_float+0x2e8>)
 8006a96:	e7d1      	b.n	8006a3c <_printf_float+0x90>
 8006a98:	6863      	ldr	r3, [r4, #4]
 8006a9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a9e:	9206      	str	r2, [sp, #24]
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	d13f      	bne.n	8006b24 <_printf_float+0x178>
 8006aa4:	2306      	movs	r3, #6
 8006aa6:	6063      	str	r3, [r4, #4]
 8006aa8:	9b05      	ldr	r3, [sp, #20]
 8006aaa:	6861      	ldr	r1, [r4, #4]
 8006aac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	9303      	str	r3, [sp, #12]
 8006ab4:	ab0a      	add	r3, sp, #40	; 0x28
 8006ab6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006aba:	ab09      	add	r3, sp, #36	; 0x24
 8006abc:	ec49 8b10 	vmov	d0, r8, r9
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	6022      	str	r2, [r4, #0]
 8006ac4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f7ff fecf 	bl	800686c <__cvt>
 8006ace:	9b06      	ldr	r3, [sp, #24]
 8006ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ad2:	2b47      	cmp	r3, #71	; 0x47
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	d108      	bne.n	8006aea <_printf_float+0x13e>
 8006ad8:	1cc8      	adds	r0, r1, #3
 8006ada:	db02      	blt.n	8006ae2 <_printf_float+0x136>
 8006adc:	6863      	ldr	r3, [r4, #4]
 8006ade:	4299      	cmp	r1, r3
 8006ae0:	dd41      	ble.n	8006b66 <_printf_float+0x1ba>
 8006ae2:	f1ab 0302 	sub.w	r3, fp, #2
 8006ae6:	fa5f fb83 	uxtb.w	fp, r3
 8006aea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006aee:	d820      	bhi.n	8006b32 <_printf_float+0x186>
 8006af0:	3901      	subs	r1, #1
 8006af2:	465a      	mov	r2, fp
 8006af4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006af8:	9109      	str	r1, [sp, #36]	; 0x24
 8006afa:	f7ff ff19 	bl	8006930 <__exponent>
 8006afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b00:	1813      	adds	r3, r2, r0
 8006b02:	2a01      	cmp	r2, #1
 8006b04:	4681      	mov	r9, r0
 8006b06:	6123      	str	r3, [r4, #16]
 8006b08:	dc02      	bgt.n	8006b10 <_printf_float+0x164>
 8006b0a:	6822      	ldr	r2, [r4, #0]
 8006b0c:	07d2      	lsls	r2, r2, #31
 8006b0e:	d501      	bpl.n	8006b14 <_printf_float+0x168>
 8006b10:	3301      	adds	r3, #1
 8006b12:	6123      	str	r3, [r4, #16]
 8006b14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d09c      	beq.n	8006a56 <_printf_float+0xaa>
 8006b1c:	232d      	movs	r3, #45	; 0x2d
 8006b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b22:	e798      	b.n	8006a56 <_printf_float+0xaa>
 8006b24:	9a06      	ldr	r2, [sp, #24]
 8006b26:	2a47      	cmp	r2, #71	; 0x47
 8006b28:	d1be      	bne.n	8006aa8 <_printf_float+0xfc>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1bc      	bne.n	8006aa8 <_printf_float+0xfc>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e7b9      	b.n	8006aa6 <_printf_float+0xfa>
 8006b32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b36:	d118      	bne.n	8006b6a <_printf_float+0x1be>
 8006b38:	2900      	cmp	r1, #0
 8006b3a:	6863      	ldr	r3, [r4, #4]
 8006b3c:	dd0b      	ble.n	8006b56 <_printf_float+0x1aa>
 8006b3e:	6121      	str	r1, [r4, #16]
 8006b40:	b913      	cbnz	r3, 8006b48 <_printf_float+0x19c>
 8006b42:	6822      	ldr	r2, [r4, #0]
 8006b44:	07d0      	lsls	r0, r2, #31
 8006b46:	d502      	bpl.n	8006b4e <_printf_float+0x1a2>
 8006b48:	3301      	adds	r3, #1
 8006b4a:	440b      	add	r3, r1
 8006b4c:	6123      	str	r3, [r4, #16]
 8006b4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b50:	f04f 0900 	mov.w	r9, #0
 8006b54:	e7de      	b.n	8006b14 <_printf_float+0x168>
 8006b56:	b913      	cbnz	r3, 8006b5e <_printf_float+0x1b2>
 8006b58:	6822      	ldr	r2, [r4, #0]
 8006b5a:	07d2      	lsls	r2, r2, #31
 8006b5c:	d501      	bpl.n	8006b62 <_printf_float+0x1b6>
 8006b5e:	3302      	adds	r3, #2
 8006b60:	e7f4      	b.n	8006b4c <_printf_float+0x1a0>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e7f2      	b.n	8006b4c <_printf_float+0x1a0>
 8006b66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6c:	4299      	cmp	r1, r3
 8006b6e:	db05      	blt.n	8006b7c <_printf_float+0x1d0>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	6121      	str	r1, [r4, #16]
 8006b74:	07d8      	lsls	r0, r3, #31
 8006b76:	d5ea      	bpl.n	8006b4e <_printf_float+0x1a2>
 8006b78:	1c4b      	adds	r3, r1, #1
 8006b7a:	e7e7      	b.n	8006b4c <_printf_float+0x1a0>
 8006b7c:	2900      	cmp	r1, #0
 8006b7e:	bfd4      	ite	le
 8006b80:	f1c1 0202 	rsble	r2, r1, #2
 8006b84:	2201      	movgt	r2, #1
 8006b86:	4413      	add	r3, r2
 8006b88:	e7e0      	b.n	8006b4c <_printf_float+0x1a0>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	055a      	lsls	r2, r3, #21
 8006b8e:	d407      	bmi.n	8006ba0 <_printf_float+0x1f4>
 8006b90:	6923      	ldr	r3, [r4, #16]
 8006b92:	4642      	mov	r2, r8
 8006b94:	4631      	mov	r1, r6
 8006b96:	4628      	mov	r0, r5
 8006b98:	47b8      	blx	r7
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	d12c      	bne.n	8006bf8 <_printf_float+0x24c>
 8006b9e:	e764      	b.n	8006a6a <_printf_float+0xbe>
 8006ba0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ba4:	f240 80e0 	bls.w	8006d68 <_printf_float+0x3bc>
 8006ba8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bac:	2200      	movs	r2, #0
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f7f9 ffaa 	bl	8000b08 <__aeabi_dcmpeq>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d034      	beq.n	8006c22 <_printf_float+0x276>
 8006bb8:	4a37      	ldr	r2, [pc, #220]	; (8006c98 <_printf_float+0x2ec>)
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	47b8      	blx	r7
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	f43f af51 	beq.w	8006a6a <_printf_float+0xbe>
 8006bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	db02      	blt.n	8006bd6 <_printf_float+0x22a>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	07d8      	lsls	r0, r3, #31
 8006bd4:	d510      	bpl.n	8006bf8 <_printf_float+0x24c>
 8006bd6:	ee18 3a10 	vmov	r3, s16
 8006bda:	4652      	mov	r2, sl
 8006bdc:	4631      	mov	r1, r6
 8006bde:	4628      	mov	r0, r5
 8006be0:	47b8      	blx	r7
 8006be2:	3001      	adds	r0, #1
 8006be4:	f43f af41 	beq.w	8006a6a <_printf_float+0xbe>
 8006be8:	f04f 0800 	mov.w	r8, #0
 8006bec:	f104 091a 	add.w	r9, r4, #26
 8006bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	4543      	cmp	r3, r8
 8006bf6:	dc09      	bgt.n	8006c0c <_printf_float+0x260>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	079b      	lsls	r3, r3, #30
 8006bfc:	f100 8107 	bmi.w	8006e0e <_printf_float+0x462>
 8006c00:	68e0      	ldr	r0, [r4, #12]
 8006c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c04:	4298      	cmp	r0, r3
 8006c06:	bfb8      	it	lt
 8006c08:	4618      	movlt	r0, r3
 8006c0a:	e730      	b.n	8006a6e <_printf_float+0xc2>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	464a      	mov	r2, r9
 8006c10:	4631      	mov	r1, r6
 8006c12:	4628      	mov	r0, r5
 8006c14:	47b8      	blx	r7
 8006c16:	3001      	adds	r0, #1
 8006c18:	f43f af27 	beq.w	8006a6a <_printf_float+0xbe>
 8006c1c:	f108 0801 	add.w	r8, r8, #1
 8006c20:	e7e6      	b.n	8006bf0 <_printf_float+0x244>
 8006c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	dc39      	bgt.n	8006c9c <_printf_float+0x2f0>
 8006c28:	4a1b      	ldr	r2, [pc, #108]	; (8006c98 <_printf_float+0x2ec>)
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	4628      	mov	r0, r5
 8006c30:	47b8      	blx	r7
 8006c32:	3001      	adds	r0, #1
 8006c34:	f43f af19 	beq.w	8006a6a <_printf_float+0xbe>
 8006c38:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	d102      	bne.n	8006c46 <_printf_float+0x29a>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	07d9      	lsls	r1, r3, #31
 8006c44:	d5d8      	bpl.n	8006bf8 <_printf_float+0x24c>
 8006c46:	ee18 3a10 	vmov	r3, s16
 8006c4a:	4652      	mov	r2, sl
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f af09 	beq.w	8006a6a <_printf_float+0xbe>
 8006c58:	f04f 0900 	mov.w	r9, #0
 8006c5c:	f104 0a1a 	add.w	sl, r4, #26
 8006c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c62:	425b      	negs	r3, r3
 8006c64:	454b      	cmp	r3, r9
 8006c66:	dc01      	bgt.n	8006c6c <_printf_float+0x2c0>
 8006c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c6a:	e792      	b.n	8006b92 <_printf_float+0x1e6>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	4652      	mov	r2, sl
 8006c70:	4631      	mov	r1, r6
 8006c72:	4628      	mov	r0, r5
 8006c74:	47b8      	blx	r7
 8006c76:	3001      	adds	r0, #1
 8006c78:	f43f aef7 	beq.w	8006a6a <_printf_float+0xbe>
 8006c7c:	f109 0901 	add.w	r9, r9, #1
 8006c80:	e7ee      	b.n	8006c60 <_printf_float+0x2b4>
 8006c82:	bf00      	nop
 8006c84:	7fefffff 	.word	0x7fefffff
 8006c88:	0800cb08 	.word	0x0800cb08
 8006c8c:	0800cb0c 	.word	0x0800cb0c
 8006c90:	0800cb10 	.word	0x0800cb10
 8006c94:	0800cb14 	.word	0x0800cb14
 8006c98:	0800cb18 	.word	0x0800cb18
 8006c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	bfa8      	it	ge
 8006ca4:	461a      	movge	r2, r3
 8006ca6:	2a00      	cmp	r2, #0
 8006ca8:	4691      	mov	r9, r2
 8006caa:	dc37      	bgt.n	8006d1c <_printf_float+0x370>
 8006cac:	f04f 0b00 	mov.w	fp, #0
 8006cb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cb4:	f104 021a 	add.w	r2, r4, #26
 8006cb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cba:	9305      	str	r3, [sp, #20]
 8006cbc:	eba3 0309 	sub.w	r3, r3, r9
 8006cc0:	455b      	cmp	r3, fp
 8006cc2:	dc33      	bgt.n	8006d2c <_printf_float+0x380>
 8006cc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	db3b      	blt.n	8006d44 <_printf_float+0x398>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	07da      	lsls	r2, r3, #31
 8006cd0:	d438      	bmi.n	8006d44 <_printf_float+0x398>
 8006cd2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006cd6:	eba2 0903 	sub.w	r9, r2, r3
 8006cda:	9b05      	ldr	r3, [sp, #20]
 8006cdc:	1ad2      	subs	r2, r2, r3
 8006cde:	4591      	cmp	r9, r2
 8006ce0:	bfa8      	it	ge
 8006ce2:	4691      	movge	r9, r2
 8006ce4:	f1b9 0f00 	cmp.w	r9, #0
 8006ce8:	dc35      	bgt.n	8006d56 <_printf_float+0x3aa>
 8006cea:	f04f 0800 	mov.w	r8, #0
 8006cee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cf2:	f104 0a1a 	add.w	sl, r4, #26
 8006cf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	eba3 0309 	sub.w	r3, r3, r9
 8006d00:	4543      	cmp	r3, r8
 8006d02:	f77f af79 	ble.w	8006bf8 <_printf_float+0x24c>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4652      	mov	r2, sl
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f aeaa 	beq.w	8006a6a <_printf_float+0xbe>
 8006d16:	f108 0801 	add.w	r8, r8, #1
 8006d1a:	e7ec      	b.n	8006cf6 <_printf_float+0x34a>
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4642      	mov	r2, r8
 8006d22:	4628      	mov	r0, r5
 8006d24:	47b8      	blx	r7
 8006d26:	3001      	adds	r0, #1
 8006d28:	d1c0      	bne.n	8006cac <_printf_float+0x300>
 8006d2a:	e69e      	b.n	8006a6a <_printf_float+0xbe>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	9205      	str	r2, [sp, #20]
 8006d34:	47b8      	blx	r7
 8006d36:	3001      	adds	r0, #1
 8006d38:	f43f ae97 	beq.w	8006a6a <_printf_float+0xbe>
 8006d3c:	9a05      	ldr	r2, [sp, #20]
 8006d3e:	f10b 0b01 	add.w	fp, fp, #1
 8006d42:	e7b9      	b.n	8006cb8 <_printf_float+0x30c>
 8006d44:	ee18 3a10 	vmov	r3, s16
 8006d48:	4652      	mov	r2, sl
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	d1be      	bne.n	8006cd2 <_printf_float+0x326>
 8006d54:	e689      	b.n	8006a6a <_printf_float+0xbe>
 8006d56:	9a05      	ldr	r2, [sp, #20]
 8006d58:	464b      	mov	r3, r9
 8006d5a:	4442      	add	r2, r8
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	d1c1      	bne.n	8006cea <_printf_float+0x33e>
 8006d66:	e680      	b.n	8006a6a <_printf_float+0xbe>
 8006d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d6a:	2a01      	cmp	r2, #1
 8006d6c:	dc01      	bgt.n	8006d72 <_printf_float+0x3c6>
 8006d6e:	07db      	lsls	r3, r3, #31
 8006d70:	d53a      	bpl.n	8006de8 <_printf_float+0x43c>
 8006d72:	2301      	movs	r3, #1
 8006d74:	4642      	mov	r2, r8
 8006d76:	4631      	mov	r1, r6
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b8      	blx	r7
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	f43f ae74 	beq.w	8006a6a <_printf_float+0xbe>
 8006d82:	ee18 3a10 	vmov	r3, s16
 8006d86:	4652      	mov	r2, sl
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f43f ae6b 	beq.w	8006a6a <_printf_float+0xbe>
 8006d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006da0:	f7f9 feb2 	bl	8000b08 <__aeabi_dcmpeq>
 8006da4:	b9d8      	cbnz	r0, 8006dde <_printf_float+0x432>
 8006da6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006daa:	f108 0201 	add.w	r2, r8, #1
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	d10e      	bne.n	8006dd6 <_printf_float+0x42a>
 8006db8:	e657      	b.n	8006a6a <_printf_float+0xbe>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4652      	mov	r2, sl
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b8      	blx	r7
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	f43f ae50 	beq.w	8006a6a <_printf_float+0xbe>
 8006dca:	f108 0801 	add.w	r8, r8, #1
 8006dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	4543      	cmp	r3, r8
 8006dd4:	dcf1      	bgt.n	8006dba <_printf_float+0x40e>
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ddc:	e6da      	b.n	8006b94 <_printf_float+0x1e8>
 8006dde:	f04f 0800 	mov.w	r8, #0
 8006de2:	f104 0a1a 	add.w	sl, r4, #26
 8006de6:	e7f2      	b.n	8006dce <_printf_float+0x422>
 8006de8:	2301      	movs	r3, #1
 8006dea:	4642      	mov	r2, r8
 8006dec:	e7df      	b.n	8006dae <_printf_float+0x402>
 8006dee:	2301      	movs	r3, #1
 8006df0:	464a      	mov	r2, r9
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f43f ae36 	beq.w	8006a6a <_printf_float+0xbe>
 8006dfe:	f108 0801 	add.w	r8, r8, #1
 8006e02:	68e3      	ldr	r3, [r4, #12]
 8006e04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e06:	1a5b      	subs	r3, r3, r1
 8006e08:	4543      	cmp	r3, r8
 8006e0a:	dcf0      	bgt.n	8006dee <_printf_float+0x442>
 8006e0c:	e6f8      	b.n	8006c00 <_printf_float+0x254>
 8006e0e:	f04f 0800 	mov.w	r8, #0
 8006e12:	f104 0919 	add.w	r9, r4, #25
 8006e16:	e7f4      	b.n	8006e02 <_printf_float+0x456>

08006e18 <_printf_common>:
 8006e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e1c:	4616      	mov	r6, r2
 8006e1e:	4699      	mov	r9, r3
 8006e20:	688a      	ldr	r2, [r1, #8]
 8006e22:	690b      	ldr	r3, [r1, #16]
 8006e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	bfb8      	it	lt
 8006e2c:	4613      	movlt	r3, r2
 8006e2e:	6033      	str	r3, [r6, #0]
 8006e30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e34:	4607      	mov	r7, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	b10a      	cbz	r2, 8006e3e <_printf_common+0x26>
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	6033      	str	r3, [r6, #0]
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	0699      	lsls	r1, r3, #26
 8006e42:	bf42      	ittt	mi
 8006e44:	6833      	ldrmi	r3, [r6, #0]
 8006e46:	3302      	addmi	r3, #2
 8006e48:	6033      	strmi	r3, [r6, #0]
 8006e4a:	6825      	ldr	r5, [r4, #0]
 8006e4c:	f015 0506 	ands.w	r5, r5, #6
 8006e50:	d106      	bne.n	8006e60 <_printf_common+0x48>
 8006e52:	f104 0a19 	add.w	sl, r4, #25
 8006e56:	68e3      	ldr	r3, [r4, #12]
 8006e58:	6832      	ldr	r2, [r6, #0]
 8006e5a:	1a9b      	subs	r3, r3, r2
 8006e5c:	42ab      	cmp	r3, r5
 8006e5e:	dc26      	bgt.n	8006eae <_printf_common+0x96>
 8006e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e64:	1e13      	subs	r3, r2, #0
 8006e66:	6822      	ldr	r2, [r4, #0]
 8006e68:	bf18      	it	ne
 8006e6a:	2301      	movne	r3, #1
 8006e6c:	0692      	lsls	r2, r2, #26
 8006e6e:	d42b      	bmi.n	8006ec8 <_printf_common+0xb0>
 8006e70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e74:	4649      	mov	r1, r9
 8006e76:	4638      	mov	r0, r7
 8006e78:	47c0      	blx	r8
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	d01e      	beq.n	8006ebc <_printf_common+0xa4>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	6922      	ldr	r2, [r4, #16]
 8006e82:	f003 0306 	and.w	r3, r3, #6
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	bf02      	ittt	eq
 8006e8a:	68e5      	ldreq	r5, [r4, #12]
 8006e8c:	6833      	ldreq	r3, [r6, #0]
 8006e8e:	1aed      	subeq	r5, r5, r3
 8006e90:	68a3      	ldr	r3, [r4, #8]
 8006e92:	bf0c      	ite	eq
 8006e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e98:	2500      	movne	r5, #0
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	bfc4      	itt	gt
 8006e9e:	1a9b      	subgt	r3, r3, r2
 8006ea0:	18ed      	addgt	r5, r5, r3
 8006ea2:	2600      	movs	r6, #0
 8006ea4:	341a      	adds	r4, #26
 8006ea6:	42b5      	cmp	r5, r6
 8006ea8:	d11a      	bne.n	8006ee0 <_printf_common+0xc8>
 8006eaa:	2000      	movs	r0, #0
 8006eac:	e008      	b.n	8006ec0 <_printf_common+0xa8>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	4652      	mov	r2, sl
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	47c0      	blx	r8
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d103      	bne.n	8006ec4 <_printf_common+0xac>
 8006ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	e7c6      	b.n	8006e56 <_printf_common+0x3e>
 8006ec8:	18e1      	adds	r1, r4, r3
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	2030      	movs	r0, #48	; 0x30
 8006ece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ed2:	4422      	add	r2, r4
 8006ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006edc:	3302      	adds	r3, #2
 8006ede:	e7c7      	b.n	8006e70 <_printf_common+0x58>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	47c0      	blx	r8
 8006eea:	3001      	adds	r0, #1
 8006eec:	d0e6      	beq.n	8006ebc <_printf_common+0xa4>
 8006eee:	3601      	adds	r6, #1
 8006ef0:	e7d9      	b.n	8006ea6 <_printf_common+0x8e>
	...

08006ef4 <_printf_i>:
 8006ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef8:	7e0f      	ldrb	r7, [r1, #24]
 8006efa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006efc:	2f78      	cmp	r7, #120	; 0x78
 8006efe:	4691      	mov	r9, r2
 8006f00:	4680      	mov	r8, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	469a      	mov	sl, r3
 8006f06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f0a:	d807      	bhi.n	8006f1c <_printf_i+0x28>
 8006f0c:	2f62      	cmp	r7, #98	; 0x62
 8006f0e:	d80a      	bhi.n	8006f26 <_printf_i+0x32>
 8006f10:	2f00      	cmp	r7, #0
 8006f12:	f000 80d4 	beq.w	80070be <_printf_i+0x1ca>
 8006f16:	2f58      	cmp	r7, #88	; 0x58
 8006f18:	f000 80c0 	beq.w	800709c <_printf_i+0x1a8>
 8006f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f24:	e03a      	b.n	8006f9c <_printf_i+0xa8>
 8006f26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f2a:	2b15      	cmp	r3, #21
 8006f2c:	d8f6      	bhi.n	8006f1c <_printf_i+0x28>
 8006f2e:	a101      	add	r1, pc, #4	; (adr r1, 8006f34 <_printf_i+0x40>)
 8006f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f34:	08006f8d 	.word	0x08006f8d
 8006f38:	08006fa1 	.word	0x08006fa1
 8006f3c:	08006f1d 	.word	0x08006f1d
 8006f40:	08006f1d 	.word	0x08006f1d
 8006f44:	08006f1d 	.word	0x08006f1d
 8006f48:	08006f1d 	.word	0x08006f1d
 8006f4c:	08006fa1 	.word	0x08006fa1
 8006f50:	08006f1d 	.word	0x08006f1d
 8006f54:	08006f1d 	.word	0x08006f1d
 8006f58:	08006f1d 	.word	0x08006f1d
 8006f5c:	08006f1d 	.word	0x08006f1d
 8006f60:	080070a5 	.word	0x080070a5
 8006f64:	08006fcd 	.word	0x08006fcd
 8006f68:	0800705f 	.word	0x0800705f
 8006f6c:	08006f1d 	.word	0x08006f1d
 8006f70:	08006f1d 	.word	0x08006f1d
 8006f74:	080070c7 	.word	0x080070c7
 8006f78:	08006f1d 	.word	0x08006f1d
 8006f7c:	08006fcd 	.word	0x08006fcd
 8006f80:	08006f1d 	.word	0x08006f1d
 8006f84:	08006f1d 	.word	0x08006f1d
 8006f88:	08007067 	.word	0x08007067
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	1d1a      	adds	r2, r3, #4
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	602a      	str	r2, [r5, #0]
 8006f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e09f      	b.n	80070e0 <_printf_i+0x1ec>
 8006fa0:	6820      	ldr	r0, [r4, #0]
 8006fa2:	682b      	ldr	r3, [r5, #0]
 8006fa4:	0607      	lsls	r7, r0, #24
 8006fa6:	f103 0104 	add.w	r1, r3, #4
 8006faa:	6029      	str	r1, [r5, #0]
 8006fac:	d501      	bpl.n	8006fb2 <_printf_i+0xbe>
 8006fae:	681e      	ldr	r6, [r3, #0]
 8006fb0:	e003      	b.n	8006fba <_printf_i+0xc6>
 8006fb2:	0646      	lsls	r6, r0, #25
 8006fb4:	d5fb      	bpl.n	8006fae <_printf_i+0xba>
 8006fb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006fba:	2e00      	cmp	r6, #0
 8006fbc:	da03      	bge.n	8006fc6 <_printf_i+0xd2>
 8006fbe:	232d      	movs	r3, #45	; 0x2d
 8006fc0:	4276      	negs	r6, r6
 8006fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc6:	485a      	ldr	r0, [pc, #360]	; (8007130 <_printf_i+0x23c>)
 8006fc8:	230a      	movs	r3, #10
 8006fca:	e012      	b.n	8006ff2 <_printf_i+0xfe>
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	6820      	ldr	r0, [r4, #0]
 8006fd0:	1d19      	adds	r1, r3, #4
 8006fd2:	6029      	str	r1, [r5, #0]
 8006fd4:	0605      	lsls	r5, r0, #24
 8006fd6:	d501      	bpl.n	8006fdc <_printf_i+0xe8>
 8006fd8:	681e      	ldr	r6, [r3, #0]
 8006fda:	e002      	b.n	8006fe2 <_printf_i+0xee>
 8006fdc:	0641      	lsls	r1, r0, #25
 8006fde:	d5fb      	bpl.n	8006fd8 <_printf_i+0xe4>
 8006fe0:	881e      	ldrh	r6, [r3, #0]
 8006fe2:	4853      	ldr	r0, [pc, #332]	; (8007130 <_printf_i+0x23c>)
 8006fe4:	2f6f      	cmp	r7, #111	; 0x6f
 8006fe6:	bf0c      	ite	eq
 8006fe8:	2308      	moveq	r3, #8
 8006fea:	230a      	movne	r3, #10
 8006fec:	2100      	movs	r1, #0
 8006fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ff2:	6865      	ldr	r5, [r4, #4]
 8006ff4:	60a5      	str	r5, [r4, #8]
 8006ff6:	2d00      	cmp	r5, #0
 8006ff8:	bfa2      	ittt	ge
 8006ffa:	6821      	ldrge	r1, [r4, #0]
 8006ffc:	f021 0104 	bicge.w	r1, r1, #4
 8007000:	6021      	strge	r1, [r4, #0]
 8007002:	b90e      	cbnz	r6, 8007008 <_printf_i+0x114>
 8007004:	2d00      	cmp	r5, #0
 8007006:	d04b      	beq.n	80070a0 <_printf_i+0x1ac>
 8007008:	4615      	mov	r5, r2
 800700a:	fbb6 f1f3 	udiv	r1, r6, r3
 800700e:	fb03 6711 	mls	r7, r3, r1, r6
 8007012:	5dc7      	ldrb	r7, [r0, r7]
 8007014:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007018:	4637      	mov	r7, r6
 800701a:	42bb      	cmp	r3, r7
 800701c:	460e      	mov	r6, r1
 800701e:	d9f4      	bls.n	800700a <_printf_i+0x116>
 8007020:	2b08      	cmp	r3, #8
 8007022:	d10b      	bne.n	800703c <_printf_i+0x148>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	07de      	lsls	r6, r3, #31
 8007028:	d508      	bpl.n	800703c <_printf_i+0x148>
 800702a:	6923      	ldr	r3, [r4, #16]
 800702c:	6861      	ldr	r1, [r4, #4]
 800702e:	4299      	cmp	r1, r3
 8007030:	bfde      	ittt	le
 8007032:	2330      	movle	r3, #48	; 0x30
 8007034:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007038:	f105 35ff 	addle.w	r5, r5, #4294967295
 800703c:	1b52      	subs	r2, r2, r5
 800703e:	6122      	str	r2, [r4, #16]
 8007040:	f8cd a000 	str.w	sl, [sp]
 8007044:	464b      	mov	r3, r9
 8007046:	aa03      	add	r2, sp, #12
 8007048:	4621      	mov	r1, r4
 800704a:	4640      	mov	r0, r8
 800704c:	f7ff fee4 	bl	8006e18 <_printf_common>
 8007050:	3001      	adds	r0, #1
 8007052:	d14a      	bne.n	80070ea <_printf_i+0x1f6>
 8007054:	f04f 30ff 	mov.w	r0, #4294967295
 8007058:	b004      	add	sp, #16
 800705a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	f043 0320 	orr.w	r3, r3, #32
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	4833      	ldr	r0, [pc, #204]	; (8007134 <_printf_i+0x240>)
 8007068:	2778      	movs	r7, #120	; 0x78
 800706a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	6829      	ldr	r1, [r5, #0]
 8007072:	061f      	lsls	r7, r3, #24
 8007074:	f851 6b04 	ldr.w	r6, [r1], #4
 8007078:	d402      	bmi.n	8007080 <_printf_i+0x18c>
 800707a:	065f      	lsls	r7, r3, #25
 800707c:	bf48      	it	mi
 800707e:	b2b6      	uxthmi	r6, r6
 8007080:	07df      	lsls	r7, r3, #31
 8007082:	bf48      	it	mi
 8007084:	f043 0320 	orrmi.w	r3, r3, #32
 8007088:	6029      	str	r1, [r5, #0]
 800708a:	bf48      	it	mi
 800708c:	6023      	strmi	r3, [r4, #0]
 800708e:	b91e      	cbnz	r6, 8007098 <_printf_i+0x1a4>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	f023 0320 	bic.w	r3, r3, #32
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	2310      	movs	r3, #16
 800709a:	e7a7      	b.n	8006fec <_printf_i+0xf8>
 800709c:	4824      	ldr	r0, [pc, #144]	; (8007130 <_printf_i+0x23c>)
 800709e:	e7e4      	b.n	800706a <_printf_i+0x176>
 80070a0:	4615      	mov	r5, r2
 80070a2:	e7bd      	b.n	8007020 <_printf_i+0x12c>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	6826      	ldr	r6, [r4, #0]
 80070a8:	6961      	ldr	r1, [r4, #20]
 80070aa:	1d18      	adds	r0, r3, #4
 80070ac:	6028      	str	r0, [r5, #0]
 80070ae:	0635      	lsls	r5, r6, #24
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	d501      	bpl.n	80070b8 <_printf_i+0x1c4>
 80070b4:	6019      	str	r1, [r3, #0]
 80070b6:	e002      	b.n	80070be <_printf_i+0x1ca>
 80070b8:	0670      	lsls	r0, r6, #25
 80070ba:	d5fb      	bpl.n	80070b4 <_printf_i+0x1c0>
 80070bc:	8019      	strh	r1, [r3, #0]
 80070be:	2300      	movs	r3, #0
 80070c0:	6123      	str	r3, [r4, #16]
 80070c2:	4615      	mov	r5, r2
 80070c4:	e7bc      	b.n	8007040 <_printf_i+0x14c>
 80070c6:	682b      	ldr	r3, [r5, #0]
 80070c8:	1d1a      	adds	r2, r3, #4
 80070ca:	602a      	str	r2, [r5, #0]
 80070cc:	681d      	ldr	r5, [r3, #0]
 80070ce:	6862      	ldr	r2, [r4, #4]
 80070d0:	2100      	movs	r1, #0
 80070d2:	4628      	mov	r0, r5
 80070d4:	f7f9 f89c 	bl	8000210 <memchr>
 80070d8:	b108      	cbz	r0, 80070de <_printf_i+0x1ea>
 80070da:	1b40      	subs	r0, r0, r5
 80070dc:	6060      	str	r0, [r4, #4]
 80070de:	6863      	ldr	r3, [r4, #4]
 80070e0:	6123      	str	r3, [r4, #16]
 80070e2:	2300      	movs	r3, #0
 80070e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070e8:	e7aa      	b.n	8007040 <_printf_i+0x14c>
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	462a      	mov	r2, r5
 80070ee:	4649      	mov	r1, r9
 80070f0:	4640      	mov	r0, r8
 80070f2:	47d0      	blx	sl
 80070f4:	3001      	adds	r0, #1
 80070f6:	d0ad      	beq.n	8007054 <_printf_i+0x160>
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	079b      	lsls	r3, r3, #30
 80070fc:	d413      	bmi.n	8007126 <_printf_i+0x232>
 80070fe:	68e0      	ldr	r0, [r4, #12]
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	4298      	cmp	r0, r3
 8007104:	bfb8      	it	lt
 8007106:	4618      	movlt	r0, r3
 8007108:	e7a6      	b.n	8007058 <_printf_i+0x164>
 800710a:	2301      	movs	r3, #1
 800710c:	4632      	mov	r2, r6
 800710e:	4649      	mov	r1, r9
 8007110:	4640      	mov	r0, r8
 8007112:	47d0      	blx	sl
 8007114:	3001      	adds	r0, #1
 8007116:	d09d      	beq.n	8007054 <_printf_i+0x160>
 8007118:	3501      	adds	r5, #1
 800711a:	68e3      	ldr	r3, [r4, #12]
 800711c:	9903      	ldr	r1, [sp, #12]
 800711e:	1a5b      	subs	r3, r3, r1
 8007120:	42ab      	cmp	r3, r5
 8007122:	dcf2      	bgt.n	800710a <_printf_i+0x216>
 8007124:	e7eb      	b.n	80070fe <_printf_i+0x20a>
 8007126:	2500      	movs	r5, #0
 8007128:	f104 0619 	add.w	r6, r4, #25
 800712c:	e7f5      	b.n	800711a <_printf_i+0x226>
 800712e:	bf00      	nop
 8007130:	0800cb1a 	.word	0x0800cb1a
 8007134:	0800cb2b 	.word	0x0800cb2b

08007138 <_scanf_float>:
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	b087      	sub	sp, #28
 800713e:	4617      	mov	r7, r2
 8007140:	9303      	str	r3, [sp, #12]
 8007142:	688b      	ldr	r3, [r1, #8]
 8007144:	1e5a      	subs	r2, r3, #1
 8007146:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800714a:	bf83      	ittte	hi
 800714c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007150:	195b      	addhi	r3, r3, r5
 8007152:	9302      	strhi	r3, [sp, #8]
 8007154:	2300      	movls	r3, #0
 8007156:	bf86      	itte	hi
 8007158:	f240 135d 	movwhi	r3, #349	; 0x15d
 800715c:	608b      	strhi	r3, [r1, #8]
 800715e:	9302      	strls	r3, [sp, #8]
 8007160:	680b      	ldr	r3, [r1, #0]
 8007162:	468b      	mov	fp, r1
 8007164:	2500      	movs	r5, #0
 8007166:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800716a:	f84b 3b1c 	str.w	r3, [fp], #28
 800716e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007172:	4680      	mov	r8, r0
 8007174:	460c      	mov	r4, r1
 8007176:	465e      	mov	r6, fp
 8007178:	46aa      	mov	sl, r5
 800717a:	46a9      	mov	r9, r5
 800717c:	9501      	str	r5, [sp, #4]
 800717e:	68a2      	ldr	r2, [r4, #8]
 8007180:	b152      	cbz	r2, 8007198 <_scanf_float+0x60>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b4e      	cmp	r3, #78	; 0x4e
 8007188:	d864      	bhi.n	8007254 <_scanf_float+0x11c>
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d83c      	bhi.n	8007208 <_scanf_float+0xd0>
 800718e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007192:	b2c8      	uxtb	r0, r1
 8007194:	280e      	cmp	r0, #14
 8007196:	d93a      	bls.n	800720e <_scanf_float+0xd6>
 8007198:	f1b9 0f00 	cmp.w	r9, #0
 800719c:	d003      	beq.n	80071a6 <_scanf_float+0x6e>
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071aa:	f1ba 0f01 	cmp.w	sl, #1
 80071ae:	f200 8113 	bhi.w	80073d8 <_scanf_float+0x2a0>
 80071b2:	455e      	cmp	r6, fp
 80071b4:	f200 8105 	bhi.w	80073c2 <_scanf_float+0x28a>
 80071b8:	2501      	movs	r5, #1
 80071ba:	4628      	mov	r0, r5
 80071bc:	b007      	add	sp, #28
 80071be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80071c6:	2a0d      	cmp	r2, #13
 80071c8:	d8e6      	bhi.n	8007198 <_scanf_float+0x60>
 80071ca:	a101      	add	r1, pc, #4	; (adr r1, 80071d0 <_scanf_float+0x98>)
 80071cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80071d0:	0800730f 	.word	0x0800730f
 80071d4:	08007199 	.word	0x08007199
 80071d8:	08007199 	.word	0x08007199
 80071dc:	08007199 	.word	0x08007199
 80071e0:	0800736f 	.word	0x0800736f
 80071e4:	08007347 	.word	0x08007347
 80071e8:	08007199 	.word	0x08007199
 80071ec:	08007199 	.word	0x08007199
 80071f0:	0800731d 	.word	0x0800731d
 80071f4:	08007199 	.word	0x08007199
 80071f8:	08007199 	.word	0x08007199
 80071fc:	08007199 	.word	0x08007199
 8007200:	08007199 	.word	0x08007199
 8007204:	080072d5 	.word	0x080072d5
 8007208:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800720c:	e7db      	b.n	80071c6 <_scanf_float+0x8e>
 800720e:	290e      	cmp	r1, #14
 8007210:	d8c2      	bhi.n	8007198 <_scanf_float+0x60>
 8007212:	a001      	add	r0, pc, #4	; (adr r0, 8007218 <_scanf_float+0xe0>)
 8007214:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007218:	080072c7 	.word	0x080072c7
 800721c:	08007199 	.word	0x08007199
 8007220:	080072c7 	.word	0x080072c7
 8007224:	0800735b 	.word	0x0800735b
 8007228:	08007199 	.word	0x08007199
 800722c:	08007275 	.word	0x08007275
 8007230:	080072b1 	.word	0x080072b1
 8007234:	080072b1 	.word	0x080072b1
 8007238:	080072b1 	.word	0x080072b1
 800723c:	080072b1 	.word	0x080072b1
 8007240:	080072b1 	.word	0x080072b1
 8007244:	080072b1 	.word	0x080072b1
 8007248:	080072b1 	.word	0x080072b1
 800724c:	080072b1 	.word	0x080072b1
 8007250:	080072b1 	.word	0x080072b1
 8007254:	2b6e      	cmp	r3, #110	; 0x6e
 8007256:	d809      	bhi.n	800726c <_scanf_float+0x134>
 8007258:	2b60      	cmp	r3, #96	; 0x60
 800725a:	d8b2      	bhi.n	80071c2 <_scanf_float+0x8a>
 800725c:	2b54      	cmp	r3, #84	; 0x54
 800725e:	d077      	beq.n	8007350 <_scanf_float+0x218>
 8007260:	2b59      	cmp	r3, #89	; 0x59
 8007262:	d199      	bne.n	8007198 <_scanf_float+0x60>
 8007264:	2d07      	cmp	r5, #7
 8007266:	d197      	bne.n	8007198 <_scanf_float+0x60>
 8007268:	2508      	movs	r5, #8
 800726a:	e029      	b.n	80072c0 <_scanf_float+0x188>
 800726c:	2b74      	cmp	r3, #116	; 0x74
 800726e:	d06f      	beq.n	8007350 <_scanf_float+0x218>
 8007270:	2b79      	cmp	r3, #121	; 0x79
 8007272:	e7f6      	b.n	8007262 <_scanf_float+0x12a>
 8007274:	6821      	ldr	r1, [r4, #0]
 8007276:	05c8      	lsls	r0, r1, #23
 8007278:	d51a      	bpl.n	80072b0 <_scanf_float+0x178>
 800727a:	9b02      	ldr	r3, [sp, #8]
 800727c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007280:	6021      	str	r1, [r4, #0]
 8007282:	f109 0901 	add.w	r9, r9, #1
 8007286:	b11b      	cbz	r3, 8007290 <_scanf_float+0x158>
 8007288:	3b01      	subs	r3, #1
 800728a:	3201      	adds	r2, #1
 800728c:	9302      	str	r3, [sp, #8]
 800728e:	60a2      	str	r2, [r4, #8]
 8007290:	68a3      	ldr	r3, [r4, #8]
 8007292:	3b01      	subs	r3, #1
 8007294:	60a3      	str	r3, [r4, #8]
 8007296:	6923      	ldr	r3, [r4, #16]
 8007298:	3301      	adds	r3, #1
 800729a:	6123      	str	r3, [r4, #16]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3b01      	subs	r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	607b      	str	r3, [r7, #4]
 80072a4:	f340 8084 	ble.w	80073b0 <_scanf_float+0x278>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	3301      	adds	r3, #1
 80072ac:	603b      	str	r3, [r7, #0]
 80072ae:	e766      	b.n	800717e <_scanf_float+0x46>
 80072b0:	eb1a 0f05 	cmn.w	sl, r5
 80072b4:	f47f af70 	bne.w	8007198 <_scanf_float+0x60>
 80072b8:	6822      	ldr	r2, [r4, #0]
 80072ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80072be:	6022      	str	r2, [r4, #0]
 80072c0:	f806 3b01 	strb.w	r3, [r6], #1
 80072c4:	e7e4      	b.n	8007290 <_scanf_float+0x158>
 80072c6:	6822      	ldr	r2, [r4, #0]
 80072c8:	0610      	lsls	r0, r2, #24
 80072ca:	f57f af65 	bpl.w	8007198 <_scanf_float+0x60>
 80072ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072d2:	e7f4      	b.n	80072be <_scanf_float+0x186>
 80072d4:	f1ba 0f00 	cmp.w	sl, #0
 80072d8:	d10e      	bne.n	80072f8 <_scanf_float+0x1c0>
 80072da:	f1b9 0f00 	cmp.w	r9, #0
 80072de:	d10e      	bne.n	80072fe <_scanf_float+0x1c6>
 80072e0:	6822      	ldr	r2, [r4, #0]
 80072e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80072e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80072ea:	d108      	bne.n	80072fe <_scanf_float+0x1c6>
 80072ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80072f0:	6022      	str	r2, [r4, #0]
 80072f2:	f04f 0a01 	mov.w	sl, #1
 80072f6:	e7e3      	b.n	80072c0 <_scanf_float+0x188>
 80072f8:	f1ba 0f02 	cmp.w	sl, #2
 80072fc:	d055      	beq.n	80073aa <_scanf_float+0x272>
 80072fe:	2d01      	cmp	r5, #1
 8007300:	d002      	beq.n	8007308 <_scanf_float+0x1d0>
 8007302:	2d04      	cmp	r5, #4
 8007304:	f47f af48 	bne.w	8007198 <_scanf_float+0x60>
 8007308:	3501      	adds	r5, #1
 800730a:	b2ed      	uxtb	r5, r5
 800730c:	e7d8      	b.n	80072c0 <_scanf_float+0x188>
 800730e:	f1ba 0f01 	cmp.w	sl, #1
 8007312:	f47f af41 	bne.w	8007198 <_scanf_float+0x60>
 8007316:	f04f 0a02 	mov.w	sl, #2
 800731a:	e7d1      	b.n	80072c0 <_scanf_float+0x188>
 800731c:	b97d      	cbnz	r5, 800733e <_scanf_float+0x206>
 800731e:	f1b9 0f00 	cmp.w	r9, #0
 8007322:	f47f af3c 	bne.w	800719e <_scanf_float+0x66>
 8007326:	6822      	ldr	r2, [r4, #0]
 8007328:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800732c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007330:	f47f af39 	bne.w	80071a6 <_scanf_float+0x6e>
 8007334:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007338:	6022      	str	r2, [r4, #0]
 800733a:	2501      	movs	r5, #1
 800733c:	e7c0      	b.n	80072c0 <_scanf_float+0x188>
 800733e:	2d03      	cmp	r5, #3
 8007340:	d0e2      	beq.n	8007308 <_scanf_float+0x1d0>
 8007342:	2d05      	cmp	r5, #5
 8007344:	e7de      	b.n	8007304 <_scanf_float+0x1cc>
 8007346:	2d02      	cmp	r5, #2
 8007348:	f47f af26 	bne.w	8007198 <_scanf_float+0x60>
 800734c:	2503      	movs	r5, #3
 800734e:	e7b7      	b.n	80072c0 <_scanf_float+0x188>
 8007350:	2d06      	cmp	r5, #6
 8007352:	f47f af21 	bne.w	8007198 <_scanf_float+0x60>
 8007356:	2507      	movs	r5, #7
 8007358:	e7b2      	b.n	80072c0 <_scanf_float+0x188>
 800735a:	6822      	ldr	r2, [r4, #0]
 800735c:	0591      	lsls	r1, r2, #22
 800735e:	f57f af1b 	bpl.w	8007198 <_scanf_float+0x60>
 8007362:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007366:	6022      	str	r2, [r4, #0]
 8007368:	f8cd 9004 	str.w	r9, [sp, #4]
 800736c:	e7a8      	b.n	80072c0 <_scanf_float+0x188>
 800736e:	6822      	ldr	r2, [r4, #0]
 8007370:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007374:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007378:	d006      	beq.n	8007388 <_scanf_float+0x250>
 800737a:	0550      	lsls	r0, r2, #21
 800737c:	f57f af0c 	bpl.w	8007198 <_scanf_float+0x60>
 8007380:	f1b9 0f00 	cmp.w	r9, #0
 8007384:	f43f af0f 	beq.w	80071a6 <_scanf_float+0x6e>
 8007388:	0591      	lsls	r1, r2, #22
 800738a:	bf58      	it	pl
 800738c:	9901      	ldrpl	r1, [sp, #4]
 800738e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007392:	bf58      	it	pl
 8007394:	eba9 0101 	subpl.w	r1, r9, r1
 8007398:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800739c:	bf58      	it	pl
 800739e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80073a2:	6022      	str	r2, [r4, #0]
 80073a4:	f04f 0900 	mov.w	r9, #0
 80073a8:	e78a      	b.n	80072c0 <_scanf_float+0x188>
 80073aa:	f04f 0a03 	mov.w	sl, #3
 80073ae:	e787      	b.n	80072c0 <_scanf_float+0x188>
 80073b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80073b4:	4639      	mov	r1, r7
 80073b6:	4640      	mov	r0, r8
 80073b8:	4798      	blx	r3
 80073ba:	2800      	cmp	r0, #0
 80073bc:	f43f aedf 	beq.w	800717e <_scanf_float+0x46>
 80073c0:	e6ea      	b.n	8007198 <_scanf_float+0x60>
 80073c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073ca:	463a      	mov	r2, r7
 80073cc:	4640      	mov	r0, r8
 80073ce:	4798      	blx	r3
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	6123      	str	r3, [r4, #16]
 80073d6:	e6ec      	b.n	80071b2 <_scanf_float+0x7a>
 80073d8:	1e6b      	subs	r3, r5, #1
 80073da:	2b06      	cmp	r3, #6
 80073dc:	d825      	bhi.n	800742a <_scanf_float+0x2f2>
 80073de:	2d02      	cmp	r5, #2
 80073e0:	d836      	bhi.n	8007450 <_scanf_float+0x318>
 80073e2:	455e      	cmp	r6, fp
 80073e4:	f67f aee8 	bls.w	80071b8 <_scanf_float+0x80>
 80073e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073f0:	463a      	mov	r2, r7
 80073f2:	4640      	mov	r0, r8
 80073f4:	4798      	blx	r3
 80073f6:	6923      	ldr	r3, [r4, #16]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	6123      	str	r3, [r4, #16]
 80073fc:	e7f1      	b.n	80073e2 <_scanf_float+0x2aa>
 80073fe:	9802      	ldr	r0, [sp, #8]
 8007400:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007404:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007408:	9002      	str	r0, [sp, #8]
 800740a:	463a      	mov	r2, r7
 800740c:	4640      	mov	r0, r8
 800740e:	4798      	blx	r3
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	3b01      	subs	r3, #1
 8007414:	6123      	str	r3, [r4, #16]
 8007416:	f10a 3aff 	add.w	sl, sl, #4294967295
 800741a:	fa5f fa8a 	uxtb.w	sl, sl
 800741e:	f1ba 0f02 	cmp.w	sl, #2
 8007422:	d1ec      	bne.n	80073fe <_scanf_float+0x2c6>
 8007424:	3d03      	subs	r5, #3
 8007426:	b2ed      	uxtb	r5, r5
 8007428:	1b76      	subs	r6, r6, r5
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	05da      	lsls	r2, r3, #23
 800742e:	d52f      	bpl.n	8007490 <_scanf_float+0x358>
 8007430:	055b      	lsls	r3, r3, #21
 8007432:	d510      	bpl.n	8007456 <_scanf_float+0x31e>
 8007434:	455e      	cmp	r6, fp
 8007436:	f67f aebf 	bls.w	80071b8 <_scanf_float+0x80>
 800743a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800743e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007442:	463a      	mov	r2, r7
 8007444:	4640      	mov	r0, r8
 8007446:	4798      	blx	r3
 8007448:	6923      	ldr	r3, [r4, #16]
 800744a:	3b01      	subs	r3, #1
 800744c:	6123      	str	r3, [r4, #16]
 800744e:	e7f1      	b.n	8007434 <_scanf_float+0x2fc>
 8007450:	46aa      	mov	sl, r5
 8007452:	9602      	str	r6, [sp, #8]
 8007454:	e7df      	b.n	8007416 <_scanf_float+0x2de>
 8007456:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800745a:	6923      	ldr	r3, [r4, #16]
 800745c:	2965      	cmp	r1, #101	; 0x65
 800745e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007462:	f106 35ff 	add.w	r5, r6, #4294967295
 8007466:	6123      	str	r3, [r4, #16]
 8007468:	d00c      	beq.n	8007484 <_scanf_float+0x34c>
 800746a:	2945      	cmp	r1, #69	; 0x45
 800746c:	d00a      	beq.n	8007484 <_scanf_float+0x34c>
 800746e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007472:	463a      	mov	r2, r7
 8007474:	4640      	mov	r0, r8
 8007476:	4798      	blx	r3
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800747e:	3b01      	subs	r3, #1
 8007480:	1eb5      	subs	r5, r6, #2
 8007482:	6123      	str	r3, [r4, #16]
 8007484:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007488:	463a      	mov	r2, r7
 800748a:	4640      	mov	r0, r8
 800748c:	4798      	blx	r3
 800748e:	462e      	mov	r6, r5
 8007490:	6825      	ldr	r5, [r4, #0]
 8007492:	f015 0510 	ands.w	r5, r5, #16
 8007496:	d158      	bne.n	800754a <_scanf_float+0x412>
 8007498:	7035      	strb	r5, [r6, #0]
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a4:	d11c      	bne.n	80074e0 <_scanf_float+0x3a8>
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	454b      	cmp	r3, r9
 80074aa:	eba3 0209 	sub.w	r2, r3, r9
 80074ae:	d124      	bne.n	80074fa <_scanf_float+0x3c2>
 80074b0:	2200      	movs	r2, #0
 80074b2:	4659      	mov	r1, fp
 80074b4:	4640      	mov	r0, r8
 80074b6:	f002 fc4f 	bl	8009d58 <_strtod_r>
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	6821      	ldr	r1, [r4, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f011 0f02 	tst.w	r1, #2
 80074c4:	ec57 6b10 	vmov	r6, r7, d0
 80074c8:	f103 0204 	add.w	r2, r3, #4
 80074cc:	d020      	beq.n	8007510 <_scanf_float+0x3d8>
 80074ce:	9903      	ldr	r1, [sp, #12]
 80074d0:	600a      	str	r2, [r1, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	e9c3 6700 	strd	r6, r7, [r3]
 80074d8:	68e3      	ldr	r3, [r4, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60e3      	str	r3, [r4, #12]
 80074de:	e66c      	b.n	80071ba <_scanf_float+0x82>
 80074e0:	9b04      	ldr	r3, [sp, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0e4      	beq.n	80074b0 <_scanf_float+0x378>
 80074e6:	9905      	ldr	r1, [sp, #20]
 80074e8:	230a      	movs	r3, #10
 80074ea:	462a      	mov	r2, r5
 80074ec:	3101      	adds	r1, #1
 80074ee:	4640      	mov	r0, r8
 80074f0:	f002 fcba 	bl	8009e68 <_strtol_r>
 80074f4:	9b04      	ldr	r3, [sp, #16]
 80074f6:	9e05      	ldr	r6, [sp, #20]
 80074f8:	1ac2      	subs	r2, r0, r3
 80074fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80074fe:	429e      	cmp	r6, r3
 8007500:	bf28      	it	cs
 8007502:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007506:	4912      	ldr	r1, [pc, #72]	; (8007550 <_scanf_float+0x418>)
 8007508:	4630      	mov	r0, r6
 800750a:	f000 f909 	bl	8007720 <siprintf>
 800750e:	e7cf      	b.n	80074b0 <_scanf_float+0x378>
 8007510:	f011 0f04 	tst.w	r1, #4
 8007514:	9903      	ldr	r1, [sp, #12]
 8007516:	600a      	str	r2, [r1, #0]
 8007518:	d1db      	bne.n	80074d2 <_scanf_float+0x39a>
 800751a:	f8d3 8000 	ldr.w	r8, [r3]
 800751e:	ee10 2a10 	vmov	r2, s0
 8007522:	ee10 0a10 	vmov	r0, s0
 8007526:	463b      	mov	r3, r7
 8007528:	4639      	mov	r1, r7
 800752a:	f7f9 fb1f 	bl	8000b6c <__aeabi_dcmpun>
 800752e:	b128      	cbz	r0, 800753c <_scanf_float+0x404>
 8007530:	4808      	ldr	r0, [pc, #32]	; (8007554 <_scanf_float+0x41c>)
 8007532:	f000 f9d7 	bl	80078e4 <nanf>
 8007536:	ed88 0a00 	vstr	s0, [r8]
 800753a:	e7cd      	b.n	80074d8 <_scanf_float+0x3a0>
 800753c:	4630      	mov	r0, r6
 800753e:	4639      	mov	r1, r7
 8007540:	f7f9 fb72 	bl	8000c28 <__aeabi_d2f>
 8007544:	f8c8 0000 	str.w	r0, [r8]
 8007548:	e7c6      	b.n	80074d8 <_scanf_float+0x3a0>
 800754a:	2500      	movs	r5, #0
 800754c:	e635      	b.n	80071ba <_scanf_float+0x82>
 800754e:	bf00      	nop
 8007550:	0800cb3c 	.word	0x0800cb3c
 8007554:	0800cecd 	.word	0x0800cecd

08007558 <std>:
 8007558:	2300      	movs	r3, #0
 800755a:	b510      	push	{r4, lr}
 800755c:	4604      	mov	r4, r0
 800755e:	e9c0 3300 	strd	r3, r3, [r0]
 8007562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007566:	6083      	str	r3, [r0, #8]
 8007568:	8181      	strh	r1, [r0, #12]
 800756a:	6643      	str	r3, [r0, #100]	; 0x64
 800756c:	81c2      	strh	r2, [r0, #14]
 800756e:	6183      	str	r3, [r0, #24]
 8007570:	4619      	mov	r1, r3
 8007572:	2208      	movs	r2, #8
 8007574:	305c      	adds	r0, #92	; 0x5c
 8007576:	f000 f936 	bl	80077e6 <memset>
 800757a:	4b05      	ldr	r3, [pc, #20]	; (8007590 <std+0x38>)
 800757c:	6263      	str	r3, [r4, #36]	; 0x24
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <std+0x3c>)
 8007580:	62a3      	str	r3, [r4, #40]	; 0x28
 8007582:	4b05      	ldr	r3, [pc, #20]	; (8007598 <std+0x40>)
 8007584:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <std+0x44>)
 8007588:	6224      	str	r4, [r4, #32]
 800758a:	6323      	str	r3, [r4, #48]	; 0x30
 800758c:	bd10      	pop	{r4, pc}
 800758e:	bf00      	nop
 8007590:	08007761 	.word	0x08007761
 8007594:	08007783 	.word	0x08007783
 8007598:	080077bb 	.word	0x080077bb
 800759c:	080077df 	.word	0x080077df

080075a0 <stdio_exit_handler>:
 80075a0:	4a02      	ldr	r2, [pc, #8]	; (80075ac <stdio_exit_handler+0xc>)
 80075a2:	4903      	ldr	r1, [pc, #12]	; (80075b0 <stdio_exit_handler+0x10>)
 80075a4:	4803      	ldr	r0, [pc, #12]	; (80075b4 <stdio_exit_handler+0x14>)
 80075a6:	f000 b869 	b.w	800767c <_fwalk_sglue>
 80075aa:	bf00      	nop
 80075ac:	20000020 	.word	0x20000020
 80075b0:	0800a229 	.word	0x0800a229
 80075b4:	2000002c 	.word	0x2000002c

080075b8 <cleanup_stdio>:
 80075b8:	6841      	ldr	r1, [r0, #4]
 80075ba:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <cleanup_stdio+0x34>)
 80075bc:	4299      	cmp	r1, r3
 80075be:	b510      	push	{r4, lr}
 80075c0:	4604      	mov	r4, r0
 80075c2:	d001      	beq.n	80075c8 <cleanup_stdio+0x10>
 80075c4:	f002 fe30 	bl	800a228 <_fflush_r>
 80075c8:	68a1      	ldr	r1, [r4, #8]
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <cleanup_stdio+0x38>)
 80075cc:	4299      	cmp	r1, r3
 80075ce:	d002      	beq.n	80075d6 <cleanup_stdio+0x1e>
 80075d0:	4620      	mov	r0, r4
 80075d2:	f002 fe29 	bl	800a228 <_fflush_r>
 80075d6:	68e1      	ldr	r1, [r4, #12]
 80075d8:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <cleanup_stdio+0x3c>)
 80075da:	4299      	cmp	r1, r3
 80075dc:	d004      	beq.n	80075e8 <cleanup_stdio+0x30>
 80075de:	4620      	mov	r0, r4
 80075e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075e4:	f002 be20 	b.w	800a228 <_fflush_r>
 80075e8:	bd10      	pop	{r4, pc}
 80075ea:	bf00      	nop
 80075ec:	20000498 	.word	0x20000498
 80075f0:	20000500 	.word	0x20000500
 80075f4:	20000568 	.word	0x20000568

080075f8 <global_stdio_init.part.0>:
 80075f8:	b510      	push	{r4, lr}
 80075fa:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <global_stdio_init.part.0+0x30>)
 80075fc:	4c0b      	ldr	r4, [pc, #44]	; (800762c <global_stdio_init.part.0+0x34>)
 80075fe:	4a0c      	ldr	r2, [pc, #48]	; (8007630 <global_stdio_init.part.0+0x38>)
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	4620      	mov	r0, r4
 8007604:	2200      	movs	r2, #0
 8007606:	2104      	movs	r1, #4
 8007608:	f7ff ffa6 	bl	8007558 <std>
 800760c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007610:	2201      	movs	r2, #1
 8007612:	2109      	movs	r1, #9
 8007614:	f7ff ffa0 	bl	8007558 <std>
 8007618:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800761c:	2202      	movs	r2, #2
 800761e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007622:	2112      	movs	r1, #18
 8007624:	f7ff bf98 	b.w	8007558 <std>
 8007628:	200005d0 	.word	0x200005d0
 800762c:	20000498 	.word	0x20000498
 8007630:	080075a1 	.word	0x080075a1

08007634 <__sfp_lock_acquire>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__sfp_lock_acquire+0x8>)
 8007636:	f000 b953 	b.w	80078e0 <__retarget_lock_acquire_recursive>
 800763a:	bf00      	nop
 800763c:	200005d9 	.word	0x200005d9

08007640 <__sfp_lock_release>:
 8007640:	4801      	ldr	r0, [pc, #4]	; (8007648 <__sfp_lock_release+0x8>)
 8007642:	f000 b94e 	b.w	80078e2 <__retarget_lock_release_recursive>
 8007646:	bf00      	nop
 8007648:	200005d9 	.word	0x200005d9

0800764c <__sinit>:
 800764c:	b510      	push	{r4, lr}
 800764e:	4604      	mov	r4, r0
 8007650:	f7ff fff0 	bl	8007634 <__sfp_lock_acquire>
 8007654:	6a23      	ldr	r3, [r4, #32]
 8007656:	b11b      	cbz	r3, 8007660 <__sinit+0x14>
 8007658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800765c:	f7ff bff0 	b.w	8007640 <__sfp_lock_release>
 8007660:	4b04      	ldr	r3, [pc, #16]	; (8007674 <__sinit+0x28>)
 8007662:	6223      	str	r3, [r4, #32]
 8007664:	4b04      	ldr	r3, [pc, #16]	; (8007678 <__sinit+0x2c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1f5      	bne.n	8007658 <__sinit+0xc>
 800766c:	f7ff ffc4 	bl	80075f8 <global_stdio_init.part.0>
 8007670:	e7f2      	b.n	8007658 <__sinit+0xc>
 8007672:	bf00      	nop
 8007674:	080075b9 	.word	0x080075b9
 8007678:	200005d0 	.word	0x200005d0

0800767c <_fwalk_sglue>:
 800767c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007680:	4607      	mov	r7, r0
 8007682:	4688      	mov	r8, r1
 8007684:	4614      	mov	r4, r2
 8007686:	2600      	movs	r6, #0
 8007688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800768c:	f1b9 0901 	subs.w	r9, r9, #1
 8007690:	d505      	bpl.n	800769e <_fwalk_sglue+0x22>
 8007692:	6824      	ldr	r4, [r4, #0]
 8007694:	2c00      	cmp	r4, #0
 8007696:	d1f7      	bne.n	8007688 <_fwalk_sglue+0xc>
 8007698:	4630      	mov	r0, r6
 800769a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800769e:	89ab      	ldrh	r3, [r5, #12]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d907      	bls.n	80076b4 <_fwalk_sglue+0x38>
 80076a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076a8:	3301      	adds	r3, #1
 80076aa:	d003      	beq.n	80076b4 <_fwalk_sglue+0x38>
 80076ac:	4629      	mov	r1, r5
 80076ae:	4638      	mov	r0, r7
 80076b0:	47c0      	blx	r8
 80076b2:	4306      	orrs	r6, r0
 80076b4:	3568      	adds	r5, #104	; 0x68
 80076b6:	e7e9      	b.n	800768c <_fwalk_sglue+0x10>

080076b8 <sniprintf>:
 80076b8:	b40c      	push	{r2, r3}
 80076ba:	b530      	push	{r4, r5, lr}
 80076bc:	4b17      	ldr	r3, [pc, #92]	; (800771c <sniprintf+0x64>)
 80076be:	1e0c      	subs	r4, r1, #0
 80076c0:	681d      	ldr	r5, [r3, #0]
 80076c2:	b09d      	sub	sp, #116	; 0x74
 80076c4:	da08      	bge.n	80076d8 <sniprintf+0x20>
 80076c6:	238b      	movs	r3, #139	; 0x8b
 80076c8:	602b      	str	r3, [r5, #0]
 80076ca:	f04f 30ff 	mov.w	r0, #4294967295
 80076ce:	b01d      	add	sp, #116	; 0x74
 80076d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076d4:	b002      	add	sp, #8
 80076d6:	4770      	bx	lr
 80076d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80076dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076e0:	bf14      	ite	ne
 80076e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076e6:	4623      	moveq	r3, r4
 80076e8:	9304      	str	r3, [sp, #16]
 80076ea:	9307      	str	r3, [sp, #28]
 80076ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076f0:	9002      	str	r0, [sp, #8]
 80076f2:	9006      	str	r0, [sp, #24]
 80076f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076fa:	ab21      	add	r3, sp, #132	; 0x84
 80076fc:	a902      	add	r1, sp, #8
 80076fe:	4628      	mov	r0, r5
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	f002 fc0d 	bl	8009f20 <_svfiprintf_r>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	bfbc      	itt	lt
 800770a:	238b      	movlt	r3, #139	; 0x8b
 800770c:	602b      	strlt	r3, [r5, #0]
 800770e:	2c00      	cmp	r4, #0
 8007710:	d0dd      	beq.n	80076ce <sniprintf+0x16>
 8007712:	9b02      	ldr	r3, [sp, #8]
 8007714:	2200      	movs	r2, #0
 8007716:	701a      	strb	r2, [r3, #0]
 8007718:	e7d9      	b.n	80076ce <sniprintf+0x16>
 800771a:	bf00      	nop
 800771c:	20000078 	.word	0x20000078

08007720 <siprintf>:
 8007720:	b40e      	push	{r1, r2, r3}
 8007722:	b500      	push	{lr}
 8007724:	b09c      	sub	sp, #112	; 0x70
 8007726:	ab1d      	add	r3, sp, #116	; 0x74
 8007728:	9002      	str	r0, [sp, #8]
 800772a:	9006      	str	r0, [sp, #24]
 800772c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007730:	4809      	ldr	r0, [pc, #36]	; (8007758 <siprintf+0x38>)
 8007732:	9107      	str	r1, [sp, #28]
 8007734:	9104      	str	r1, [sp, #16]
 8007736:	4909      	ldr	r1, [pc, #36]	; (800775c <siprintf+0x3c>)
 8007738:	f853 2b04 	ldr.w	r2, [r3], #4
 800773c:	9105      	str	r1, [sp, #20]
 800773e:	6800      	ldr	r0, [r0, #0]
 8007740:	9301      	str	r3, [sp, #4]
 8007742:	a902      	add	r1, sp, #8
 8007744:	f002 fbec 	bl	8009f20 <_svfiprintf_r>
 8007748:	9b02      	ldr	r3, [sp, #8]
 800774a:	2200      	movs	r2, #0
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	b01c      	add	sp, #112	; 0x70
 8007750:	f85d eb04 	ldr.w	lr, [sp], #4
 8007754:	b003      	add	sp, #12
 8007756:	4770      	bx	lr
 8007758:	20000078 	.word	0x20000078
 800775c:	ffff0208 	.word	0xffff0208

08007760 <__sread>:
 8007760:	b510      	push	{r4, lr}
 8007762:	460c      	mov	r4, r1
 8007764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007768:	f000 f86c 	bl	8007844 <_read_r>
 800776c:	2800      	cmp	r0, #0
 800776e:	bfab      	itete	ge
 8007770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007772:	89a3      	ldrhlt	r3, [r4, #12]
 8007774:	181b      	addge	r3, r3, r0
 8007776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800777a:	bfac      	ite	ge
 800777c:	6563      	strge	r3, [r4, #84]	; 0x54
 800777e:	81a3      	strhlt	r3, [r4, #12]
 8007780:	bd10      	pop	{r4, pc}

08007782 <__swrite>:
 8007782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007786:	461f      	mov	r7, r3
 8007788:	898b      	ldrh	r3, [r1, #12]
 800778a:	05db      	lsls	r3, r3, #23
 800778c:	4605      	mov	r5, r0
 800778e:	460c      	mov	r4, r1
 8007790:	4616      	mov	r6, r2
 8007792:	d505      	bpl.n	80077a0 <__swrite+0x1e>
 8007794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007798:	2302      	movs	r3, #2
 800779a:	2200      	movs	r2, #0
 800779c:	f000 f840 	bl	8007820 <_lseek_r>
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077aa:	81a3      	strh	r3, [r4, #12]
 80077ac:	4632      	mov	r2, r6
 80077ae:	463b      	mov	r3, r7
 80077b0:	4628      	mov	r0, r5
 80077b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077b6:	f000 b857 	b.w	8007868 <_write_r>

080077ba <__sseek>:
 80077ba:	b510      	push	{r4, lr}
 80077bc:	460c      	mov	r4, r1
 80077be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c2:	f000 f82d 	bl	8007820 <_lseek_r>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	bf15      	itete	ne
 80077cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80077ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077d6:	81a3      	strheq	r3, [r4, #12]
 80077d8:	bf18      	it	ne
 80077da:	81a3      	strhne	r3, [r4, #12]
 80077dc:	bd10      	pop	{r4, pc}

080077de <__sclose>:
 80077de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e2:	f000 b80d 	b.w	8007800 <_close_r>

080077e6 <memset>:
 80077e6:	4402      	add	r2, r0
 80077e8:	4603      	mov	r3, r0
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d100      	bne.n	80077f0 <memset+0xa>
 80077ee:	4770      	bx	lr
 80077f0:	f803 1b01 	strb.w	r1, [r3], #1
 80077f4:	e7f9      	b.n	80077ea <memset+0x4>
	...

080077f8 <_localeconv_r>:
 80077f8:	4800      	ldr	r0, [pc, #0]	; (80077fc <_localeconv_r+0x4>)
 80077fa:	4770      	bx	lr
 80077fc:	2000016c 	.word	0x2000016c

08007800 <_close_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d06      	ldr	r5, [pc, #24]	; (800781c <_close_r+0x1c>)
 8007804:	2300      	movs	r3, #0
 8007806:	4604      	mov	r4, r0
 8007808:	4608      	mov	r0, r1
 800780a:	602b      	str	r3, [r5, #0]
 800780c:	f7fb fd71 	bl	80032f2 <_close>
 8007810:	1c43      	adds	r3, r0, #1
 8007812:	d102      	bne.n	800781a <_close_r+0x1a>
 8007814:	682b      	ldr	r3, [r5, #0]
 8007816:	b103      	cbz	r3, 800781a <_close_r+0x1a>
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	bd38      	pop	{r3, r4, r5, pc}
 800781c:	200005d4 	.word	0x200005d4

08007820 <_lseek_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	4d07      	ldr	r5, [pc, #28]	; (8007840 <_lseek_r+0x20>)
 8007824:	4604      	mov	r4, r0
 8007826:	4608      	mov	r0, r1
 8007828:	4611      	mov	r1, r2
 800782a:	2200      	movs	r2, #0
 800782c:	602a      	str	r2, [r5, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	f7fb fd86 	bl	8003340 <_lseek>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_lseek_r+0x1e>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_lseek_r+0x1e>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	200005d4 	.word	0x200005d4

08007844 <_read_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4d07      	ldr	r5, [pc, #28]	; (8007864 <_read_r+0x20>)
 8007848:	4604      	mov	r4, r0
 800784a:	4608      	mov	r0, r1
 800784c:	4611      	mov	r1, r2
 800784e:	2200      	movs	r2, #0
 8007850:	602a      	str	r2, [r5, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	f7fb fd14 	bl	8003280 <_read>
 8007858:	1c43      	adds	r3, r0, #1
 800785a:	d102      	bne.n	8007862 <_read_r+0x1e>
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	b103      	cbz	r3, 8007862 <_read_r+0x1e>
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	bd38      	pop	{r3, r4, r5, pc}
 8007864:	200005d4 	.word	0x200005d4

08007868 <_write_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4d07      	ldr	r5, [pc, #28]	; (8007888 <_write_r+0x20>)
 800786c:	4604      	mov	r4, r0
 800786e:	4608      	mov	r0, r1
 8007870:	4611      	mov	r1, r2
 8007872:	2200      	movs	r2, #0
 8007874:	602a      	str	r2, [r5, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	f7fb fd1f 	bl	80032ba <_write>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_write_r+0x1e>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_write_r+0x1e>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	200005d4 	.word	0x200005d4

0800788c <__errno>:
 800788c:	4b01      	ldr	r3, [pc, #4]	; (8007894 <__errno+0x8>)
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20000078 	.word	0x20000078

08007898 <__libc_init_array>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	4d0d      	ldr	r5, [pc, #52]	; (80078d0 <__libc_init_array+0x38>)
 800789c:	4c0d      	ldr	r4, [pc, #52]	; (80078d4 <__libc_init_array+0x3c>)
 800789e:	1b64      	subs	r4, r4, r5
 80078a0:	10a4      	asrs	r4, r4, #2
 80078a2:	2600      	movs	r6, #0
 80078a4:	42a6      	cmp	r6, r4
 80078a6:	d109      	bne.n	80078bc <__libc_init_array+0x24>
 80078a8:	4d0b      	ldr	r5, [pc, #44]	; (80078d8 <__libc_init_array+0x40>)
 80078aa:	4c0c      	ldr	r4, [pc, #48]	; (80078dc <__libc_init_array+0x44>)
 80078ac:	f005 f908 	bl	800cac0 <_init>
 80078b0:	1b64      	subs	r4, r4, r5
 80078b2:	10a4      	asrs	r4, r4, #2
 80078b4:	2600      	movs	r6, #0
 80078b6:	42a6      	cmp	r6, r4
 80078b8:	d105      	bne.n	80078c6 <__libc_init_array+0x2e>
 80078ba:	bd70      	pop	{r4, r5, r6, pc}
 80078bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c0:	4798      	blx	r3
 80078c2:	3601      	adds	r6, #1
 80078c4:	e7ee      	b.n	80078a4 <__libc_init_array+0xc>
 80078c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ca:	4798      	blx	r3
 80078cc:	3601      	adds	r6, #1
 80078ce:	e7f2      	b.n	80078b6 <__libc_init_array+0x1e>
 80078d0:	0800d150 	.word	0x0800d150
 80078d4:	0800d150 	.word	0x0800d150
 80078d8:	0800d150 	.word	0x0800d150
 80078dc:	0800d154 	.word	0x0800d154

080078e0 <__retarget_lock_acquire_recursive>:
 80078e0:	4770      	bx	lr

080078e2 <__retarget_lock_release_recursive>:
 80078e2:	4770      	bx	lr

080078e4 <nanf>:
 80078e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80078ec <nanf+0x8>
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	7fc00000 	.word	0x7fc00000

080078f0 <quorem>:
 80078f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	6903      	ldr	r3, [r0, #16]
 80078f6:	690c      	ldr	r4, [r1, #16]
 80078f8:	42a3      	cmp	r3, r4
 80078fa:	4607      	mov	r7, r0
 80078fc:	db7e      	blt.n	80079fc <quorem+0x10c>
 80078fe:	3c01      	subs	r4, #1
 8007900:	f101 0814 	add.w	r8, r1, #20
 8007904:	f100 0514 	add.w	r5, r0, #20
 8007908:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007912:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007916:	3301      	adds	r3, #1
 8007918:	429a      	cmp	r2, r3
 800791a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800791e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007922:	fbb2 f6f3 	udiv	r6, r2, r3
 8007926:	d331      	bcc.n	800798c <quorem+0x9c>
 8007928:	f04f 0e00 	mov.w	lr, #0
 800792c:	4640      	mov	r0, r8
 800792e:	46ac      	mov	ip, r5
 8007930:	46f2      	mov	sl, lr
 8007932:	f850 2b04 	ldr.w	r2, [r0], #4
 8007936:	b293      	uxth	r3, r2
 8007938:	fb06 e303 	mla	r3, r6, r3, lr
 800793c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007940:	0c1a      	lsrs	r2, r3, #16
 8007942:	b29b      	uxth	r3, r3
 8007944:	ebaa 0303 	sub.w	r3, sl, r3
 8007948:	f8dc a000 	ldr.w	sl, [ip]
 800794c:	fa13 f38a 	uxtah	r3, r3, sl
 8007950:	fb06 220e 	mla	r2, r6, lr, r2
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	9b00      	ldr	r3, [sp, #0]
 8007958:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800795c:	b292      	uxth	r2, r2
 800795e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007962:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007966:	f8bd 3000 	ldrh.w	r3, [sp]
 800796a:	4581      	cmp	r9, r0
 800796c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007970:	f84c 3b04 	str.w	r3, [ip], #4
 8007974:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007978:	d2db      	bcs.n	8007932 <quorem+0x42>
 800797a:	f855 300b 	ldr.w	r3, [r5, fp]
 800797e:	b92b      	cbnz	r3, 800798c <quorem+0x9c>
 8007980:	9b01      	ldr	r3, [sp, #4]
 8007982:	3b04      	subs	r3, #4
 8007984:	429d      	cmp	r5, r3
 8007986:	461a      	mov	r2, r3
 8007988:	d32c      	bcc.n	80079e4 <quorem+0xf4>
 800798a:	613c      	str	r4, [r7, #16]
 800798c:	4638      	mov	r0, r7
 800798e:	f001 f9ef 	bl	8008d70 <__mcmp>
 8007992:	2800      	cmp	r0, #0
 8007994:	db22      	blt.n	80079dc <quorem+0xec>
 8007996:	3601      	adds	r6, #1
 8007998:	4629      	mov	r1, r5
 800799a:	2000      	movs	r0, #0
 800799c:	f858 2b04 	ldr.w	r2, [r8], #4
 80079a0:	f8d1 c000 	ldr.w	ip, [r1]
 80079a4:	b293      	uxth	r3, r2
 80079a6:	1ac3      	subs	r3, r0, r3
 80079a8:	0c12      	lsrs	r2, r2, #16
 80079aa:	fa13 f38c 	uxtah	r3, r3, ip
 80079ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80079b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079bc:	45c1      	cmp	r9, r8
 80079be:	f841 3b04 	str.w	r3, [r1], #4
 80079c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079c6:	d2e9      	bcs.n	800799c <quorem+0xac>
 80079c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079d0:	b922      	cbnz	r2, 80079dc <quorem+0xec>
 80079d2:	3b04      	subs	r3, #4
 80079d4:	429d      	cmp	r5, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	d30a      	bcc.n	80079f0 <quorem+0x100>
 80079da:	613c      	str	r4, [r7, #16]
 80079dc:	4630      	mov	r0, r6
 80079de:	b003      	add	sp, #12
 80079e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	3b04      	subs	r3, #4
 80079e8:	2a00      	cmp	r2, #0
 80079ea:	d1ce      	bne.n	800798a <quorem+0x9a>
 80079ec:	3c01      	subs	r4, #1
 80079ee:	e7c9      	b.n	8007984 <quorem+0x94>
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	3b04      	subs	r3, #4
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	d1f0      	bne.n	80079da <quorem+0xea>
 80079f8:	3c01      	subs	r4, #1
 80079fa:	e7eb      	b.n	80079d4 <quorem+0xe4>
 80079fc:	2000      	movs	r0, #0
 80079fe:	e7ee      	b.n	80079de <quorem+0xee>

08007a00 <_dtoa_r>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	ed2d 8b04 	vpush	{d8-d9}
 8007a08:	69c5      	ldr	r5, [r0, #28]
 8007a0a:	b093      	sub	sp, #76	; 0x4c
 8007a0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a10:	ec57 6b10 	vmov	r6, r7, d0
 8007a14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a18:	9107      	str	r1, [sp, #28]
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	920a      	str	r2, [sp, #40]	; 0x28
 8007a1e:	930d      	str	r3, [sp, #52]	; 0x34
 8007a20:	b975      	cbnz	r5, 8007a40 <_dtoa_r+0x40>
 8007a22:	2010      	movs	r0, #16
 8007a24:	f000 fe2a 	bl	800867c <malloc>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	61e0      	str	r0, [r4, #28]
 8007a2c:	b920      	cbnz	r0, 8007a38 <_dtoa_r+0x38>
 8007a2e:	4bae      	ldr	r3, [pc, #696]	; (8007ce8 <_dtoa_r+0x2e8>)
 8007a30:	21ef      	movs	r1, #239	; 0xef
 8007a32:	48ae      	ldr	r0, [pc, #696]	; (8007cec <_dtoa_r+0x2ec>)
 8007a34:	f002 fc74 	bl	800a320 <__assert_func>
 8007a38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a3c:	6005      	str	r5, [r0, #0]
 8007a3e:	60c5      	str	r5, [r0, #12]
 8007a40:	69e3      	ldr	r3, [r4, #28]
 8007a42:	6819      	ldr	r1, [r3, #0]
 8007a44:	b151      	cbz	r1, 8007a5c <_dtoa_r+0x5c>
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	604a      	str	r2, [r1, #4]
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	4093      	lsls	r3, r2
 8007a4e:	608b      	str	r3, [r1, #8]
 8007a50:	4620      	mov	r0, r4
 8007a52:	f000 ff07 	bl	8008864 <_Bfree>
 8007a56:	69e3      	ldr	r3, [r4, #28]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	1e3b      	subs	r3, r7, #0
 8007a5e:	bfbb      	ittet	lt
 8007a60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a64:	9303      	strlt	r3, [sp, #12]
 8007a66:	2300      	movge	r3, #0
 8007a68:	2201      	movlt	r2, #1
 8007a6a:	bfac      	ite	ge
 8007a6c:	f8c8 3000 	strge.w	r3, [r8]
 8007a70:	f8c8 2000 	strlt.w	r2, [r8]
 8007a74:	4b9e      	ldr	r3, [pc, #632]	; (8007cf0 <_dtoa_r+0x2f0>)
 8007a76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a7a:	ea33 0308 	bics.w	r3, r3, r8
 8007a7e:	d11b      	bne.n	8007ab8 <_dtoa_r+0xb8>
 8007a80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a82:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007a8c:	4333      	orrs	r3, r6
 8007a8e:	f000 8593 	beq.w	80085b8 <_dtoa_r+0xbb8>
 8007a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a94:	b963      	cbnz	r3, 8007ab0 <_dtoa_r+0xb0>
 8007a96:	4b97      	ldr	r3, [pc, #604]	; (8007cf4 <_dtoa_r+0x2f4>)
 8007a98:	e027      	b.n	8007aea <_dtoa_r+0xea>
 8007a9a:	4b97      	ldr	r3, [pc, #604]	; (8007cf8 <_dtoa_r+0x2f8>)
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	9800      	ldr	r0, [sp, #0]
 8007aa6:	b013      	add	sp, #76	; 0x4c
 8007aa8:	ecbd 8b04 	vpop	{d8-d9}
 8007aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab0:	4b90      	ldr	r3, [pc, #576]	; (8007cf4 <_dtoa_r+0x2f4>)
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	3303      	adds	r3, #3
 8007ab6:	e7f3      	b.n	8007aa0 <_dtoa_r+0xa0>
 8007ab8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007abc:	2200      	movs	r2, #0
 8007abe:	ec51 0b17 	vmov	r0, r1, d7
 8007ac2:	eeb0 8a47 	vmov.f32	s16, s14
 8007ac6:	eef0 8a67 	vmov.f32	s17, s15
 8007aca:	2300      	movs	r3, #0
 8007acc:	f7f9 f81c 	bl	8000b08 <__aeabi_dcmpeq>
 8007ad0:	4681      	mov	r9, r0
 8007ad2:	b160      	cbz	r0, 8007aee <_dtoa_r+0xee>
 8007ad4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8568 	beq.w	80085b2 <_dtoa_r+0xbb2>
 8007ae2:	4b86      	ldr	r3, [pc, #536]	; (8007cfc <_dtoa_r+0x2fc>)
 8007ae4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	e7da      	b.n	8007aa4 <_dtoa_r+0xa4>
 8007aee:	aa10      	add	r2, sp, #64	; 0x40
 8007af0:	a911      	add	r1, sp, #68	; 0x44
 8007af2:	4620      	mov	r0, r4
 8007af4:	eeb0 0a48 	vmov.f32	s0, s16
 8007af8:	eef0 0a68 	vmov.f32	s1, s17
 8007afc:	f001 fa4e 	bl	8008f9c <__d2b>
 8007b00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b04:	4682      	mov	sl, r0
 8007b06:	2d00      	cmp	r5, #0
 8007b08:	d07f      	beq.n	8007c0a <_dtoa_r+0x20a>
 8007b0a:	ee18 3a90 	vmov	r3, s17
 8007b0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007b16:	ec51 0b18 	vmov	r0, r1, d8
 8007b1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007b26:	4619      	mov	r1, r3
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4b75      	ldr	r3, [pc, #468]	; (8007d00 <_dtoa_r+0x300>)
 8007b2c:	f7f8 fbcc 	bl	80002c8 <__aeabi_dsub>
 8007b30:	a367      	add	r3, pc, #412	; (adr r3, 8007cd0 <_dtoa_r+0x2d0>)
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	f7f8 fd7f 	bl	8000638 <__aeabi_dmul>
 8007b3a:	a367      	add	r3, pc, #412	; (adr r3, 8007cd8 <_dtoa_r+0x2d8>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 fbc4 	bl	80002cc <__adddf3>
 8007b44:	4606      	mov	r6, r0
 8007b46:	4628      	mov	r0, r5
 8007b48:	460f      	mov	r7, r1
 8007b4a:	f7f8 fd0b 	bl	8000564 <__aeabi_i2d>
 8007b4e:	a364      	add	r3, pc, #400	; (adr r3, 8007ce0 <_dtoa_r+0x2e0>)
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	f7f8 fd70 	bl	8000638 <__aeabi_dmul>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f7f8 fbb4 	bl	80002cc <__adddf3>
 8007b64:	4606      	mov	r6, r0
 8007b66:	460f      	mov	r7, r1
 8007b68:	f7f9 f816 	bl	8000b98 <__aeabi_d2iz>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4683      	mov	fp, r0
 8007b70:	2300      	movs	r3, #0
 8007b72:	4630      	mov	r0, r6
 8007b74:	4639      	mov	r1, r7
 8007b76:	f7f8 ffd1 	bl	8000b1c <__aeabi_dcmplt>
 8007b7a:	b148      	cbz	r0, 8007b90 <_dtoa_r+0x190>
 8007b7c:	4658      	mov	r0, fp
 8007b7e:	f7f8 fcf1 	bl	8000564 <__aeabi_i2d>
 8007b82:	4632      	mov	r2, r6
 8007b84:	463b      	mov	r3, r7
 8007b86:	f7f8 ffbf 	bl	8000b08 <__aeabi_dcmpeq>
 8007b8a:	b908      	cbnz	r0, 8007b90 <_dtoa_r+0x190>
 8007b8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b90:	f1bb 0f16 	cmp.w	fp, #22
 8007b94:	d857      	bhi.n	8007c46 <_dtoa_r+0x246>
 8007b96:	4b5b      	ldr	r3, [pc, #364]	; (8007d04 <_dtoa_r+0x304>)
 8007b98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	ec51 0b18 	vmov	r0, r1, d8
 8007ba4:	f7f8 ffba 	bl	8000b1c <__aeabi_dcmplt>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d04e      	beq.n	8007c4a <_dtoa_r+0x24a>
 8007bac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	930c      	str	r3, [sp, #48]	; 0x30
 8007bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bb6:	1b5b      	subs	r3, r3, r5
 8007bb8:	1e5a      	subs	r2, r3, #1
 8007bba:	bf45      	ittet	mi
 8007bbc:	f1c3 0301 	rsbmi	r3, r3, #1
 8007bc0:	9305      	strmi	r3, [sp, #20]
 8007bc2:	2300      	movpl	r3, #0
 8007bc4:	2300      	movmi	r3, #0
 8007bc6:	9206      	str	r2, [sp, #24]
 8007bc8:	bf54      	ite	pl
 8007bca:	9305      	strpl	r3, [sp, #20]
 8007bcc:	9306      	strmi	r3, [sp, #24]
 8007bce:	f1bb 0f00 	cmp.w	fp, #0
 8007bd2:	db3c      	blt.n	8007c4e <_dtoa_r+0x24e>
 8007bd4:	9b06      	ldr	r3, [sp, #24]
 8007bd6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007bda:	445b      	add	r3, fp
 8007bdc:	9306      	str	r3, [sp, #24]
 8007bde:	2300      	movs	r3, #0
 8007be0:	9308      	str	r3, [sp, #32]
 8007be2:	9b07      	ldr	r3, [sp, #28]
 8007be4:	2b09      	cmp	r3, #9
 8007be6:	d868      	bhi.n	8007cba <_dtoa_r+0x2ba>
 8007be8:	2b05      	cmp	r3, #5
 8007bea:	bfc4      	itt	gt
 8007bec:	3b04      	subgt	r3, #4
 8007bee:	9307      	strgt	r3, [sp, #28]
 8007bf0:	9b07      	ldr	r3, [sp, #28]
 8007bf2:	f1a3 0302 	sub.w	r3, r3, #2
 8007bf6:	bfcc      	ite	gt
 8007bf8:	2500      	movgt	r5, #0
 8007bfa:	2501      	movle	r5, #1
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	f200 8085 	bhi.w	8007d0c <_dtoa_r+0x30c>
 8007c02:	e8df f003 	tbb	[pc, r3]
 8007c06:	3b2e      	.short	0x3b2e
 8007c08:	5839      	.short	0x5839
 8007c0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c0e:	441d      	add	r5, r3
 8007c10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	bfc1      	itttt	gt
 8007c18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007c24:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007c28:	bfd6      	itet	le
 8007c2a:	f1c3 0320 	rsble	r3, r3, #32
 8007c2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c32:	fa06 f003 	lslle.w	r0, r6, r3
 8007c36:	f7f8 fc85 	bl	8000544 <__aeabi_ui2d>
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007c40:	3d01      	subs	r5, #1
 8007c42:	920e      	str	r2, [sp, #56]	; 0x38
 8007c44:	e76f      	b.n	8007b26 <_dtoa_r+0x126>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e7b3      	b.n	8007bb2 <_dtoa_r+0x1b2>
 8007c4a:	900c      	str	r0, [sp, #48]	; 0x30
 8007c4c:	e7b2      	b.n	8007bb4 <_dtoa_r+0x1b4>
 8007c4e:	9b05      	ldr	r3, [sp, #20]
 8007c50:	eba3 030b 	sub.w	r3, r3, fp
 8007c54:	9305      	str	r3, [sp, #20]
 8007c56:	f1cb 0300 	rsb	r3, fp, #0
 8007c5a:	9308      	str	r3, [sp, #32]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c60:	e7bf      	b.n	8007be2 <_dtoa_r+0x1e2>
 8007c62:	2300      	movs	r3, #0
 8007c64:	9309      	str	r3, [sp, #36]	; 0x24
 8007c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dc52      	bgt.n	8007d12 <_dtoa_r+0x312>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	461a      	mov	r2, r3
 8007c74:	920a      	str	r2, [sp, #40]	; 0x28
 8007c76:	e00b      	b.n	8007c90 <_dtoa_r+0x290>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e7f3      	b.n	8007c64 <_dtoa_r+0x264>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c82:	445b      	add	r3, fp
 8007c84:	9301      	str	r3, [sp, #4]
 8007c86:	3301      	adds	r3, #1
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	9304      	str	r3, [sp, #16]
 8007c8c:	bfb8      	it	lt
 8007c8e:	2301      	movlt	r3, #1
 8007c90:	69e0      	ldr	r0, [r4, #28]
 8007c92:	2100      	movs	r1, #0
 8007c94:	2204      	movs	r2, #4
 8007c96:	f102 0614 	add.w	r6, r2, #20
 8007c9a:	429e      	cmp	r6, r3
 8007c9c:	d93d      	bls.n	8007d1a <_dtoa_r+0x31a>
 8007c9e:	6041      	str	r1, [r0, #4]
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 fd9f 	bl	80087e4 <_Balloc>
 8007ca6:	9000      	str	r0, [sp, #0]
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d139      	bne.n	8007d20 <_dtoa_r+0x320>
 8007cac:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <_dtoa_r+0x308>)
 8007cae:	4602      	mov	r2, r0
 8007cb0:	f240 11af 	movw	r1, #431	; 0x1af
 8007cb4:	e6bd      	b.n	8007a32 <_dtoa_r+0x32>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e7e1      	b.n	8007c7e <_dtoa_r+0x27e>
 8007cba:	2501      	movs	r5, #1
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9307      	str	r3, [sp, #28]
 8007cc0:	9509      	str	r5, [sp, #36]	; 0x24
 8007cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2312      	movs	r3, #18
 8007cce:	e7d1      	b.n	8007c74 <_dtoa_r+0x274>
 8007cd0:	636f4361 	.word	0x636f4361
 8007cd4:	3fd287a7 	.word	0x3fd287a7
 8007cd8:	8b60c8b3 	.word	0x8b60c8b3
 8007cdc:	3fc68a28 	.word	0x3fc68a28
 8007ce0:	509f79fb 	.word	0x509f79fb
 8007ce4:	3fd34413 	.word	0x3fd34413
 8007ce8:	0800cb4e 	.word	0x0800cb4e
 8007cec:	0800cb65 	.word	0x0800cb65
 8007cf0:	7ff00000 	.word	0x7ff00000
 8007cf4:	0800cb4a 	.word	0x0800cb4a
 8007cf8:	0800cb41 	.word	0x0800cb41
 8007cfc:	0800cb19 	.word	0x0800cb19
 8007d00:	3ff80000 	.word	0x3ff80000
 8007d04:	0800cc50 	.word	0x0800cc50
 8007d08:	0800cbbd 	.word	0x0800cbbd
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d10:	e7d7      	b.n	8007cc2 <_dtoa_r+0x2c2>
 8007d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	9304      	str	r3, [sp, #16]
 8007d18:	e7ba      	b.n	8007c90 <_dtoa_r+0x290>
 8007d1a:	3101      	adds	r1, #1
 8007d1c:	0052      	lsls	r2, r2, #1
 8007d1e:	e7ba      	b.n	8007c96 <_dtoa_r+0x296>
 8007d20:	69e3      	ldr	r3, [r4, #28]
 8007d22:	9a00      	ldr	r2, [sp, #0]
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	9b04      	ldr	r3, [sp, #16]
 8007d28:	2b0e      	cmp	r3, #14
 8007d2a:	f200 80a8 	bhi.w	8007e7e <_dtoa_r+0x47e>
 8007d2e:	2d00      	cmp	r5, #0
 8007d30:	f000 80a5 	beq.w	8007e7e <_dtoa_r+0x47e>
 8007d34:	f1bb 0f00 	cmp.w	fp, #0
 8007d38:	dd38      	ble.n	8007dac <_dtoa_r+0x3ac>
 8007d3a:	4bc0      	ldr	r3, [pc, #768]	; (800803c <_dtoa_r+0x63c>)
 8007d3c:	f00b 020f 	and.w	r2, fp, #15
 8007d40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007d48:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007d4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007d50:	d019      	beq.n	8007d86 <_dtoa_r+0x386>
 8007d52:	4bbb      	ldr	r3, [pc, #748]	; (8008040 <_dtoa_r+0x640>)
 8007d54:	ec51 0b18 	vmov	r0, r1, d8
 8007d58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d5c:	f7f8 fd96 	bl	800088c <__aeabi_ddiv>
 8007d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d64:	f008 080f 	and.w	r8, r8, #15
 8007d68:	2503      	movs	r5, #3
 8007d6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008040 <_dtoa_r+0x640>
 8007d6e:	f1b8 0f00 	cmp.w	r8, #0
 8007d72:	d10a      	bne.n	8007d8a <_dtoa_r+0x38a>
 8007d74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d78:	4632      	mov	r2, r6
 8007d7a:	463b      	mov	r3, r7
 8007d7c:	f7f8 fd86 	bl	800088c <__aeabi_ddiv>
 8007d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d84:	e02b      	b.n	8007dde <_dtoa_r+0x3de>
 8007d86:	2502      	movs	r5, #2
 8007d88:	e7ef      	b.n	8007d6a <_dtoa_r+0x36a>
 8007d8a:	f018 0f01 	tst.w	r8, #1
 8007d8e:	d008      	beq.n	8007da2 <_dtoa_r+0x3a2>
 8007d90:	4630      	mov	r0, r6
 8007d92:	4639      	mov	r1, r7
 8007d94:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d98:	f7f8 fc4e 	bl	8000638 <__aeabi_dmul>
 8007d9c:	3501      	adds	r5, #1
 8007d9e:	4606      	mov	r6, r0
 8007da0:	460f      	mov	r7, r1
 8007da2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007da6:	f109 0908 	add.w	r9, r9, #8
 8007daa:	e7e0      	b.n	8007d6e <_dtoa_r+0x36e>
 8007dac:	f000 809f 	beq.w	8007eee <_dtoa_r+0x4ee>
 8007db0:	f1cb 0600 	rsb	r6, fp, #0
 8007db4:	4ba1      	ldr	r3, [pc, #644]	; (800803c <_dtoa_r+0x63c>)
 8007db6:	4fa2      	ldr	r7, [pc, #648]	; (8008040 <_dtoa_r+0x640>)
 8007db8:	f006 020f 	and.w	r2, r6, #15
 8007dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	ec51 0b18 	vmov	r0, r1, d8
 8007dc8:	f7f8 fc36 	bl	8000638 <__aeabi_dmul>
 8007dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dd0:	1136      	asrs	r6, r6, #4
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	2502      	movs	r5, #2
 8007dd6:	2e00      	cmp	r6, #0
 8007dd8:	d17e      	bne.n	8007ed8 <_dtoa_r+0x4d8>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1d0      	bne.n	8007d80 <_dtoa_r+0x380>
 8007dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007de0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8084 	beq.w	8007ef2 <_dtoa_r+0x4f2>
 8007dea:	4b96      	ldr	r3, [pc, #600]	; (8008044 <_dtoa_r+0x644>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	4640      	mov	r0, r8
 8007df0:	4649      	mov	r1, r9
 8007df2:	f7f8 fe93 	bl	8000b1c <__aeabi_dcmplt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d07b      	beq.n	8007ef2 <_dtoa_r+0x4f2>
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d078      	beq.n	8007ef2 <_dtoa_r+0x4f2>
 8007e00:	9b01      	ldr	r3, [sp, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	dd39      	ble.n	8007e7a <_dtoa_r+0x47a>
 8007e06:	4b90      	ldr	r3, [pc, #576]	; (8008048 <_dtoa_r+0x648>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	4640      	mov	r0, r8
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	f7f8 fc13 	bl	8000638 <__aeabi_dmul>
 8007e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e16:	9e01      	ldr	r6, [sp, #4]
 8007e18:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007e1c:	3501      	adds	r5, #1
 8007e1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e22:	4628      	mov	r0, r5
 8007e24:	f7f8 fb9e 	bl	8000564 <__aeabi_i2d>
 8007e28:	4642      	mov	r2, r8
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	f7f8 fc04 	bl	8000638 <__aeabi_dmul>
 8007e30:	4b86      	ldr	r3, [pc, #536]	; (800804c <_dtoa_r+0x64c>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	f7f8 fa4a 	bl	80002cc <__adddf3>
 8007e38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e40:	9303      	str	r3, [sp, #12]
 8007e42:	2e00      	cmp	r6, #0
 8007e44:	d158      	bne.n	8007ef8 <_dtoa_r+0x4f8>
 8007e46:	4b82      	ldr	r3, [pc, #520]	; (8008050 <_dtoa_r+0x650>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	f7f8 fa3b 	bl	80002c8 <__aeabi_dsub>
 8007e52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e56:	4680      	mov	r8, r0
 8007e58:	4689      	mov	r9, r1
 8007e5a:	f7f8 fe7d 	bl	8000b58 <__aeabi_dcmpgt>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f040 8296 	bne.w	8008390 <_dtoa_r+0x990>
 8007e64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007e68:	4640      	mov	r0, r8
 8007e6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e6e:	4649      	mov	r1, r9
 8007e70:	f7f8 fe54 	bl	8000b1c <__aeabi_dcmplt>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	f040 8289 	bne.w	800838c <_dtoa_r+0x98c>
 8007e7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f2c0 814e 	blt.w	8008122 <_dtoa_r+0x722>
 8007e86:	f1bb 0f0e 	cmp.w	fp, #14
 8007e8a:	f300 814a 	bgt.w	8008122 <_dtoa_r+0x722>
 8007e8e:	4b6b      	ldr	r3, [pc, #428]	; (800803c <_dtoa_r+0x63c>)
 8007e90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f280 80dc 	bge.w	8008058 <_dtoa_r+0x658>
 8007ea0:	9b04      	ldr	r3, [sp, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f300 80d8 	bgt.w	8008058 <_dtoa_r+0x658>
 8007ea8:	f040 826f 	bne.w	800838a <_dtoa_r+0x98a>
 8007eac:	4b68      	ldr	r3, [pc, #416]	; (8008050 <_dtoa_r+0x650>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	f7f8 fbc0 	bl	8000638 <__aeabi_dmul>
 8007eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ebc:	f7f8 fe42 	bl	8000b44 <__aeabi_dcmpge>
 8007ec0:	9e04      	ldr	r6, [sp, #16]
 8007ec2:	4637      	mov	r7, r6
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f040 8245 	bne.w	8008354 <_dtoa_r+0x954>
 8007eca:	9d00      	ldr	r5, [sp, #0]
 8007ecc:	2331      	movs	r3, #49	; 0x31
 8007ece:	f805 3b01 	strb.w	r3, [r5], #1
 8007ed2:	f10b 0b01 	add.w	fp, fp, #1
 8007ed6:	e241      	b.n	800835c <_dtoa_r+0x95c>
 8007ed8:	07f2      	lsls	r2, r6, #31
 8007eda:	d505      	bpl.n	8007ee8 <_dtoa_r+0x4e8>
 8007edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee0:	f7f8 fbaa 	bl	8000638 <__aeabi_dmul>
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	1076      	asrs	r6, r6, #1
 8007eea:	3708      	adds	r7, #8
 8007eec:	e773      	b.n	8007dd6 <_dtoa_r+0x3d6>
 8007eee:	2502      	movs	r5, #2
 8007ef0:	e775      	b.n	8007dde <_dtoa_r+0x3de>
 8007ef2:	9e04      	ldr	r6, [sp, #16]
 8007ef4:	465f      	mov	r7, fp
 8007ef6:	e792      	b.n	8007e1e <_dtoa_r+0x41e>
 8007ef8:	9900      	ldr	r1, [sp, #0]
 8007efa:	4b50      	ldr	r3, [pc, #320]	; (800803c <_dtoa_r+0x63c>)
 8007efc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f00:	4431      	add	r1, r6
 8007f02:	9102      	str	r1, [sp, #8]
 8007f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f06:	eeb0 9a47 	vmov.f32	s18, s14
 8007f0a:	eef0 9a67 	vmov.f32	s19, s15
 8007f0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f16:	2900      	cmp	r1, #0
 8007f18:	d044      	beq.n	8007fa4 <_dtoa_r+0x5a4>
 8007f1a:	494e      	ldr	r1, [pc, #312]	; (8008054 <_dtoa_r+0x654>)
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	f7f8 fcb5 	bl	800088c <__aeabi_ddiv>
 8007f22:	ec53 2b19 	vmov	r2, r3, d9
 8007f26:	f7f8 f9cf 	bl	80002c8 <__aeabi_dsub>
 8007f2a:	9d00      	ldr	r5, [sp, #0]
 8007f2c:	ec41 0b19 	vmov	d9, r0, r1
 8007f30:	4649      	mov	r1, r9
 8007f32:	4640      	mov	r0, r8
 8007f34:	f7f8 fe30 	bl	8000b98 <__aeabi_d2iz>
 8007f38:	4606      	mov	r6, r0
 8007f3a:	f7f8 fb13 	bl	8000564 <__aeabi_i2d>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4640      	mov	r0, r8
 8007f44:	4649      	mov	r1, r9
 8007f46:	f7f8 f9bf 	bl	80002c8 <__aeabi_dsub>
 8007f4a:	3630      	adds	r6, #48	; 0x30
 8007f4c:	f805 6b01 	strb.w	r6, [r5], #1
 8007f50:	ec53 2b19 	vmov	r2, r3, d9
 8007f54:	4680      	mov	r8, r0
 8007f56:	4689      	mov	r9, r1
 8007f58:	f7f8 fde0 	bl	8000b1c <__aeabi_dcmplt>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d164      	bne.n	800802a <_dtoa_r+0x62a>
 8007f60:	4642      	mov	r2, r8
 8007f62:	464b      	mov	r3, r9
 8007f64:	4937      	ldr	r1, [pc, #220]	; (8008044 <_dtoa_r+0x644>)
 8007f66:	2000      	movs	r0, #0
 8007f68:	f7f8 f9ae 	bl	80002c8 <__aeabi_dsub>
 8007f6c:	ec53 2b19 	vmov	r2, r3, d9
 8007f70:	f7f8 fdd4 	bl	8000b1c <__aeabi_dcmplt>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	f040 80b6 	bne.w	80080e6 <_dtoa_r+0x6e6>
 8007f7a:	9b02      	ldr	r3, [sp, #8]
 8007f7c:	429d      	cmp	r5, r3
 8007f7e:	f43f af7c 	beq.w	8007e7a <_dtoa_r+0x47a>
 8007f82:	4b31      	ldr	r3, [pc, #196]	; (8008048 <_dtoa_r+0x648>)
 8007f84:	ec51 0b19 	vmov	r0, r1, d9
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f7f8 fb55 	bl	8000638 <__aeabi_dmul>
 8007f8e:	4b2e      	ldr	r3, [pc, #184]	; (8008048 <_dtoa_r+0x648>)
 8007f90:	ec41 0b19 	vmov	d9, r0, r1
 8007f94:	2200      	movs	r2, #0
 8007f96:	4640      	mov	r0, r8
 8007f98:	4649      	mov	r1, r9
 8007f9a:	f7f8 fb4d 	bl	8000638 <__aeabi_dmul>
 8007f9e:	4680      	mov	r8, r0
 8007fa0:	4689      	mov	r9, r1
 8007fa2:	e7c5      	b.n	8007f30 <_dtoa_r+0x530>
 8007fa4:	ec51 0b17 	vmov	r0, r1, d7
 8007fa8:	f7f8 fb46 	bl	8000638 <__aeabi_dmul>
 8007fac:	9b02      	ldr	r3, [sp, #8]
 8007fae:	9d00      	ldr	r5, [sp, #0]
 8007fb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fb2:	ec41 0b19 	vmov	d9, r0, r1
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	4640      	mov	r0, r8
 8007fba:	f7f8 fded 	bl	8000b98 <__aeabi_d2iz>
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	f7f8 fad0 	bl	8000564 <__aeabi_i2d>
 8007fc4:	3630      	adds	r6, #48	; 0x30
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4640      	mov	r0, r8
 8007fcc:	4649      	mov	r1, r9
 8007fce:	f7f8 f97b 	bl	80002c8 <__aeabi_dsub>
 8007fd2:	f805 6b01 	strb.w	r6, [r5], #1
 8007fd6:	9b02      	ldr	r3, [sp, #8]
 8007fd8:	429d      	cmp	r5, r3
 8007fda:	4680      	mov	r8, r0
 8007fdc:	4689      	mov	r9, r1
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	d124      	bne.n	800802e <_dtoa_r+0x62e>
 8007fe4:	4b1b      	ldr	r3, [pc, #108]	; (8008054 <_dtoa_r+0x654>)
 8007fe6:	ec51 0b19 	vmov	r0, r1, d9
 8007fea:	f7f8 f96f 	bl	80002cc <__adddf3>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	f7f8 fdaf 	bl	8000b58 <__aeabi_dcmpgt>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	d173      	bne.n	80080e6 <_dtoa_r+0x6e6>
 8007ffe:	ec53 2b19 	vmov	r2, r3, d9
 8008002:	4914      	ldr	r1, [pc, #80]	; (8008054 <_dtoa_r+0x654>)
 8008004:	2000      	movs	r0, #0
 8008006:	f7f8 f95f 	bl	80002c8 <__aeabi_dsub>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4640      	mov	r0, r8
 8008010:	4649      	mov	r1, r9
 8008012:	f7f8 fd83 	bl	8000b1c <__aeabi_dcmplt>
 8008016:	2800      	cmp	r0, #0
 8008018:	f43f af2f 	beq.w	8007e7a <_dtoa_r+0x47a>
 800801c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800801e:	1e6b      	subs	r3, r5, #1
 8008020:	930f      	str	r3, [sp, #60]	; 0x3c
 8008022:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008026:	2b30      	cmp	r3, #48	; 0x30
 8008028:	d0f8      	beq.n	800801c <_dtoa_r+0x61c>
 800802a:	46bb      	mov	fp, r7
 800802c:	e04a      	b.n	80080c4 <_dtoa_r+0x6c4>
 800802e:	4b06      	ldr	r3, [pc, #24]	; (8008048 <_dtoa_r+0x648>)
 8008030:	f7f8 fb02 	bl	8000638 <__aeabi_dmul>
 8008034:	4680      	mov	r8, r0
 8008036:	4689      	mov	r9, r1
 8008038:	e7bd      	b.n	8007fb6 <_dtoa_r+0x5b6>
 800803a:	bf00      	nop
 800803c:	0800cc50 	.word	0x0800cc50
 8008040:	0800cc28 	.word	0x0800cc28
 8008044:	3ff00000 	.word	0x3ff00000
 8008048:	40240000 	.word	0x40240000
 800804c:	401c0000 	.word	0x401c0000
 8008050:	40140000 	.word	0x40140000
 8008054:	3fe00000 	.word	0x3fe00000
 8008058:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800805c:	9d00      	ldr	r5, [sp, #0]
 800805e:	4642      	mov	r2, r8
 8008060:	464b      	mov	r3, r9
 8008062:	4630      	mov	r0, r6
 8008064:	4639      	mov	r1, r7
 8008066:	f7f8 fc11 	bl	800088c <__aeabi_ddiv>
 800806a:	f7f8 fd95 	bl	8000b98 <__aeabi_d2iz>
 800806e:	9001      	str	r0, [sp, #4]
 8008070:	f7f8 fa78 	bl	8000564 <__aeabi_i2d>
 8008074:	4642      	mov	r2, r8
 8008076:	464b      	mov	r3, r9
 8008078:	f7f8 fade 	bl	8000638 <__aeabi_dmul>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f7f8 f920 	bl	80002c8 <__aeabi_dsub>
 8008088:	9e01      	ldr	r6, [sp, #4]
 800808a:	9f04      	ldr	r7, [sp, #16]
 800808c:	3630      	adds	r6, #48	; 0x30
 800808e:	f805 6b01 	strb.w	r6, [r5], #1
 8008092:	9e00      	ldr	r6, [sp, #0]
 8008094:	1bae      	subs	r6, r5, r6
 8008096:	42b7      	cmp	r7, r6
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	d134      	bne.n	8008108 <_dtoa_r+0x708>
 800809e:	f7f8 f915 	bl	80002cc <__adddf3>
 80080a2:	4642      	mov	r2, r8
 80080a4:	464b      	mov	r3, r9
 80080a6:	4606      	mov	r6, r0
 80080a8:	460f      	mov	r7, r1
 80080aa:	f7f8 fd55 	bl	8000b58 <__aeabi_dcmpgt>
 80080ae:	b9c8      	cbnz	r0, 80080e4 <_dtoa_r+0x6e4>
 80080b0:	4642      	mov	r2, r8
 80080b2:	464b      	mov	r3, r9
 80080b4:	4630      	mov	r0, r6
 80080b6:	4639      	mov	r1, r7
 80080b8:	f7f8 fd26 	bl	8000b08 <__aeabi_dcmpeq>
 80080bc:	b110      	cbz	r0, 80080c4 <_dtoa_r+0x6c4>
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	07db      	lsls	r3, r3, #31
 80080c2:	d40f      	bmi.n	80080e4 <_dtoa_r+0x6e4>
 80080c4:	4651      	mov	r1, sl
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 fbcc 	bl	8008864 <_Bfree>
 80080cc:	2300      	movs	r3, #0
 80080ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080d0:	702b      	strb	r3, [r5, #0]
 80080d2:	f10b 0301 	add.w	r3, fp, #1
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f43f ace2 	beq.w	8007aa4 <_dtoa_r+0xa4>
 80080e0:	601d      	str	r5, [r3, #0]
 80080e2:	e4df      	b.n	8007aa4 <_dtoa_r+0xa4>
 80080e4:	465f      	mov	r7, fp
 80080e6:	462b      	mov	r3, r5
 80080e8:	461d      	mov	r5, r3
 80080ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080ee:	2a39      	cmp	r2, #57	; 0x39
 80080f0:	d106      	bne.n	8008100 <_dtoa_r+0x700>
 80080f2:	9a00      	ldr	r2, [sp, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d1f7      	bne.n	80080e8 <_dtoa_r+0x6e8>
 80080f8:	9900      	ldr	r1, [sp, #0]
 80080fa:	2230      	movs	r2, #48	; 0x30
 80080fc:	3701      	adds	r7, #1
 80080fe:	700a      	strb	r2, [r1, #0]
 8008100:	781a      	ldrb	r2, [r3, #0]
 8008102:	3201      	adds	r2, #1
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	e790      	b.n	800802a <_dtoa_r+0x62a>
 8008108:	4ba3      	ldr	r3, [pc, #652]	; (8008398 <_dtoa_r+0x998>)
 800810a:	2200      	movs	r2, #0
 800810c:	f7f8 fa94 	bl	8000638 <__aeabi_dmul>
 8008110:	2200      	movs	r2, #0
 8008112:	2300      	movs	r3, #0
 8008114:	4606      	mov	r6, r0
 8008116:	460f      	mov	r7, r1
 8008118:	f7f8 fcf6 	bl	8000b08 <__aeabi_dcmpeq>
 800811c:	2800      	cmp	r0, #0
 800811e:	d09e      	beq.n	800805e <_dtoa_r+0x65e>
 8008120:	e7d0      	b.n	80080c4 <_dtoa_r+0x6c4>
 8008122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008124:	2a00      	cmp	r2, #0
 8008126:	f000 80ca 	beq.w	80082be <_dtoa_r+0x8be>
 800812a:	9a07      	ldr	r2, [sp, #28]
 800812c:	2a01      	cmp	r2, #1
 800812e:	f300 80ad 	bgt.w	800828c <_dtoa_r+0x88c>
 8008132:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008134:	2a00      	cmp	r2, #0
 8008136:	f000 80a5 	beq.w	8008284 <_dtoa_r+0x884>
 800813a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800813e:	9e08      	ldr	r6, [sp, #32]
 8008140:	9d05      	ldr	r5, [sp, #20]
 8008142:	9a05      	ldr	r2, [sp, #20]
 8008144:	441a      	add	r2, r3
 8008146:	9205      	str	r2, [sp, #20]
 8008148:	9a06      	ldr	r2, [sp, #24]
 800814a:	2101      	movs	r1, #1
 800814c:	441a      	add	r2, r3
 800814e:	4620      	mov	r0, r4
 8008150:	9206      	str	r2, [sp, #24]
 8008152:	f000 fc87 	bl	8008a64 <__i2b>
 8008156:	4607      	mov	r7, r0
 8008158:	b165      	cbz	r5, 8008174 <_dtoa_r+0x774>
 800815a:	9b06      	ldr	r3, [sp, #24]
 800815c:	2b00      	cmp	r3, #0
 800815e:	dd09      	ble.n	8008174 <_dtoa_r+0x774>
 8008160:	42ab      	cmp	r3, r5
 8008162:	9a05      	ldr	r2, [sp, #20]
 8008164:	bfa8      	it	ge
 8008166:	462b      	movge	r3, r5
 8008168:	1ad2      	subs	r2, r2, r3
 800816a:	9205      	str	r2, [sp, #20]
 800816c:	9a06      	ldr	r2, [sp, #24]
 800816e:	1aed      	subs	r5, r5, r3
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	9306      	str	r3, [sp, #24]
 8008174:	9b08      	ldr	r3, [sp, #32]
 8008176:	b1f3      	cbz	r3, 80081b6 <_dtoa_r+0x7b6>
 8008178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 80a3 	beq.w	80082c6 <_dtoa_r+0x8c6>
 8008180:	2e00      	cmp	r6, #0
 8008182:	dd10      	ble.n	80081a6 <_dtoa_r+0x7a6>
 8008184:	4639      	mov	r1, r7
 8008186:	4632      	mov	r2, r6
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fd2b 	bl	8008be4 <__pow5mult>
 800818e:	4652      	mov	r2, sl
 8008190:	4601      	mov	r1, r0
 8008192:	4607      	mov	r7, r0
 8008194:	4620      	mov	r0, r4
 8008196:	f000 fc7b 	bl	8008a90 <__multiply>
 800819a:	4651      	mov	r1, sl
 800819c:	4680      	mov	r8, r0
 800819e:	4620      	mov	r0, r4
 80081a0:	f000 fb60 	bl	8008864 <_Bfree>
 80081a4:	46c2      	mov	sl, r8
 80081a6:	9b08      	ldr	r3, [sp, #32]
 80081a8:	1b9a      	subs	r2, r3, r6
 80081aa:	d004      	beq.n	80081b6 <_dtoa_r+0x7b6>
 80081ac:	4651      	mov	r1, sl
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 fd18 	bl	8008be4 <__pow5mult>
 80081b4:	4682      	mov	sl, r0
 80081b6:	2101      	movs	r1, #1
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 fc53 	bl	8008a64 <__i2b>
 80081be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	4606      	mov	r6, r0
 80081c4:	f340 8081 	ble.w	80082ca <_dtoa_r+0x8ca>
 80081c8:	461a      	mov	r2, r3
 80081ca:	4601      	mov	r1, r0
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 fd09 	bl	8008be4 <__pow5mult>
 80081d2:	9b07      	ldr	r3, [sp, #28]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	4606      	mov	r6, r0
 80081d8:	dd7a      	ble.n	80082d0 <_dtoa_r+0x8d0>
 80081da:	f04f 0800 	mov.w	r8, #0
 80081de:	6933      	ldr	r3, [r6, #16]
 80081e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081e4:	6918      	ldr	r0, [r3, #16]
 80081e6:	f000 fbef 	bl	80089c8 <__hi0bits>
 80081ea:	f1c0 0020 	rsb	r0, r0, #32
 80081ee:	9b06      	ldr	r3, [sp, #24]
 80081f0:	4418      	add	r0, r3
 80081f2:	f010 001f 	ands.w	r0, r0, #31
 80081f6:	f000 8094 	beq.w	8008322 <_dtoa_r+0x922>
 80081fa:	f1c0 0320 	rsb	r3, r0, #32
 80081fe:	2b04      	cmp	r3, #4
 8008200:	f340 8085 	ble.w	800830e <_dtoa_r+0x90e>
 8008204:	9b05      	ldr	r3, [sp, #20]
 8008206:	f1c0 001c 	rsb	r0, r0, #28
 800820a:	4403      	add	r3, r0
 800820c:	9305      	str	r3, [sp, #20]
 800820e:	9b06      	ldr	r3, [sp, #24]
 8008210:	4403      	add	r3, r0
 8008212:	4405      	add	r5, r0
 8008214:	9306      	str	r3, [sp, #24]
 8008216:	9b05      	ldr	r3, [sp, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	dd05      	ble.n	8008228 <_dtoa_r+0x828>
 800821c:	4651      	mov	r1, sl
 800821e:	461a      	mov	r2, r3
 8008220:	4620      	mov	r0, r4
 8008222:	f000 fd39 	bl	8008c98 <__lshift>
 8008226:	4682      	mov	sl, r0
 8008228:	9b06      	ldr	r3, [sp, #24]
 800822a:	2b00      	cmp	r3, #0
 800822c:	dd05      	ble.n	800823a <_dtoa_r+0x83a>
 800822e:	4631      	mov	r1, r6
 8008230:	461a      	mov	r2, r3
 8008232:	4620      	mov	r0, r4
 8008234:	f000 fd30 	bl	8008c98 <__lshift>
 8008238:	4606      	mov	r6, r0
 800823a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800823c:	2b00      	cmp	r3, #0
 800823e:	d072      	beq.n	8008326 <_dtoa_r+0x926>
 8008240:	4631      	mov	r1, r6
 8008242:	4650      	mov	r0, sl
 8008244:	f000 fd94 	bl	8008d70 <__mcmp>
 8008248:	2800      	cmp	r0, #0
 800824a:	da6c      	bge.n	8008326 <_dtoa_r+0x926>
 800824c:	2300      	movs	r3, #0
 800824e:	4651      	mov	r1, sl
 8008250:	220a      	movs	r2, #10
 8008252:	4620      	mov	r0, r4
 8008254:	f000 fb28 	bl	80088a8 <__multadd>
 8008258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800825e:	4682      	mov	sl, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 81b0 	beq.w	80085c6 <_dtoa_r+0xbc6>
 8008266:	2300      	movs	r3, #0
 8008268:	4639      	mov	r1, r7
 800826a:	220a      	movs	r2, #10
 800826c:	4620      	mov	r0, r4
 800826e:	f000 fb1b 	bl	80088a8 <__multadd>
 8008272:	9b01      	ldr	r3, [sp, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	4607      	mov	r7, r0
 8008278:	f300 8096 	bgt.w	80083a8 <_dtoa_r+0x9a8>
 800827c:	9b07      	ldr	r3, [sp, #28]
 800827e:	2b02      	cmp	r3, #2
 8008280:	dc59      	bgt.n	8008336 <_dtoa_r+0x936>
 8008282:	e091      	b.n	80083a8 <_dtoa_r+0x9a8>
 8008284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008286:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800828a:	e758      	b.n	800813e <_dtoa_r+0x73e>
 800828c:	9b04      	ldr	r3, [sp, #16]
 800828e:	1e5e      	subs	r6, r3, #1
 8008290:	9b08      	ldr	r3, [sp, #32]
 8008292:	42b3      	cmp	r3, r6
 8008294:	bfbf      	itttt	lt
 8008296:	9b08      	ldrlt	r3, [sp, #32]
 8008298:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800829a:	9608      	strlt	r6, [sp, #32]
 800829c:	1af3      	sublt	r3, r6, r3
 800829e:	bfb4      	ite	lt
 80082a0:	18d2      	addlt	r2, r2, r3
 80082a2:	1b9e      	subge	r6, r3, r6
 80082a4:	9b04      	ldr	r3, [sp, #16]
 80082a6:	bfbc      	itt	lt
 80082a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80082aa:	2600      	movlt	r6, #0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	bfb7      	itett	lt
 80082b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80082b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80082b8:	1a9d      	sublt	r5, r3, r2
 80082ba:	2300      	movlt	r3, #0
 80082bc:	e741      	b.n	8008142 <_dtoa_r+0x742>
 80082be:	9e08      	ldr	r6, [sp, #32]
 80082c0:	9d05      	ldr	r5, [sp, #20]
 80082c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80082c4:	e748      	b.n	8008158 <_dtoa_r+0x758>
 80082c6:	9a08      	ldr	r2, [sp, #32]
 80082c8:	e770      	b.n	80081ac <_dtoa_r+0x7ac>
 80082ca:	9b07      	ldr	r3, [sp, #28]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	dc19      	bgt.n	8008304 <_dtoa_r+0x904>
 80082d0:	9b02      	ldr	r3, [sp, #8]
 80082d2:	b9bb      	cbnz	r3, 8008304 <_dtoa_r+0x904>
 80082d4:	9b03      	ldr	r3, [sp, #12]
 80082d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082da:	b99b      	cbnz	r3, 8008304 <_dtoa_r+0x904>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082e2:	0d1b      	lsrs	r3, r3, #20
 80082e4:	051b      	lsls	r3, r3, #20
 80082e6:	b183      	cbz	r3, 800830a <_dtoa_r+0x90a>
 80082e8:	9b05      	ldr	r3, [sp, #20]
 80082ea:	3301      	adds	r3, #1
 80082ec:	9305      	str	r3, [sp, #20]
 80082ee:	9b06      	ldr	r3, [sp, #24]
 80082f0:	3301      	adds	r3, #1
 80082f2:	9306      	str	r3, [sp, #24]
 80082f4:	f04f 0801 	mov.w	r8, #1
 80082f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f47f af6f 	bne.w	80081de <_dtoa_r+0x7de>
 8008300:	2001      	movs	r0, #1
 8008302:	e774      	b.n	80081ee <_dtoa_r+0x7ee>
 8008304:	f04f 0800 	mov.w	r8, #0
 8008308:	e7f6      	b.n	80082f8 <_dtoa_r+0x8f8>
 800830a:	4698      	mov	r8, r3
 800830c:	e7f4      	b.n	80082f8 <_dtoa_r+0x8f8>
 800830e:	d082      	beq.n	8008216 <_dtoa_r+0x816>
 8008310:	9a05      	ldr	r2, [sp, #20]
 8008312:	331c      	adds	r3, #28
 8008314:	441a      	add	r2, r3
 8008316:	9205      	str	r2, [sp, #20]
 8008318:	9a06      	ldr	r2, [sp, #24]
 800831a:	441a      	add	r2, r3
 800831c:	441d      	add	r5, r3
 800831e:	9206      	str	r2, [sp, #24]
 8008320:	e779      	b.n	8008216 <_dtoa_r+0x816>
 8008322:	4603      	mov	r3, r0
 8008324:	e7f4      	b.n	8008310 <_dtoa_r+0x910>
 8008326:	9b04      	ldr	r3, [sp, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	dc37      	bgt.n	800839c <_dtoa_r+0x99c>
 800832c:	9b07      	ldr	r3, [sp, #28]
 800832e:	2b02      	cmp	r3, #2
 8008330:	dd34      	ble.n	800839c <_dtoa_r+0x99c>
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	9b01      	ldr	r3, [sp, #4]
 8008338:	b963      	cbnz	r3, 8008354 <_dtoa_r+0x954>
 800833a:	4631      	mov	r1, r6
 800833c:	2205      	movs	r2, #5
 800833e:	4620      	mov	r0, r4
 8008340:	f000 fab2 	bl	80088a8 <__multadd>
 8008344:	4601      	mov	r1, r0
 8008346:	4606      	mov	r6, r0
 8008348:	4650      	mov	r0, sl
 800834a:	f000 fd11 	bl	8008d70 <__mcmp>
 800834e:	2800      	cmp	r0, #0
 8008350:	f73f adbb 	bgt.w	8007eca <_dtoa_r+0x4ca>
 8008354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008356:	9d00      	ldr	r5, [sp, #0]
 8008358:	ea6f 0b03 	mvn.w	fp, r3
 800835c:	f04f 0800 	mov.w	r8, #0
 8008360:	4631      	mov	r1, r6
 8008362:	4620      	mov	r0, r4
 8008364:	f000 fa7e 	bl	8008864 <_Bfree>
 8008368:	2f00      	cmp	r7, #0
 800836a:	f43f aeab 	beq.w	80080c4 <_dtoa_r+0x6c4>
 800836e:	f1b8 0f00 	cmp.w	r8, #0
 8008372:	d005      	beq.n	8008380 <_dtoa_r+0x980>
 8008374:	45b8      	cmp	r8, r7
 8008376:	d003      	beq.n	8008380 <_dtoa_r+0x980>
 8008378:	4641      	mov	r1, r8
 800837a:	4620      	mov	r0, r4
 800837c:	f000 fa72 	bl	8008864 <_Bfree>
 8008380:	4639      	mov	r1, r7
 8008382:	4620      	mov	r0, r4
 8008384:	f000 fa6e 	bl	8008864 <_Bfree>
 8008388:	e69c      	b.n	80080c4 <_dtoa_r+0x6c4>
 800838a:	2600      	movs	r6, #0
 800838c:	4637      	mov	r7, r6
 800838e:	e7e1      	b.n	8008354 <_dtoa_r+0x954>
 8008390:	46bb      	mov	fp, r7
 8008392:	4637      	mov	r7, r6
 8008394:	e599      	b.n	8007eca <_dtoa_r+0x4ca>
 8008396:	bf00      	nop
 8008398:	40240000 	.word	0x40240000
 800839c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 80c8 	beq.w	8008534 <_dtoa_r+0xb34>
 80083a4:	9b04      	ldr	r3, [sp, #16]
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	2d00      	cmp	r5, #0
 80083aa:	dd05      	ble.n	80083b8 <_dtoa_r+0x9b8>
 80083ac:	4639      	mov	r1, r7
 80083ae:	462a      	mov	r2, r5
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 fc71 	bl	8008c98 <__lshift>
 80083b6:	4607      	mov	r7, r0
 80083b8:	f1b8 0f00 	cmp.w	r8, #0
 80083bc:	d05b      	beq.n	8008476 <_dtoa_r+0xa76>
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 fa0f 	bl	80087e4 <_Balloc>
 80083c6:	4605      	mov	r5, r0
 80083c8:	b928      	cbnz	r0, 80083d6 <_dtoa_r+0x9d6>
 80083ca:	4b83      	ldr	r3, [pc, #524]	; (80085d8 <_dtoa_r+0xbd8>)
 80083cc:	4602      	mov	r2, r0
 80083ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80083d2:	f7ff bb2e 	b.w	8007a32 <_dtoa_r+0x32>
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	3202      	adds	r2, #2
 80083da:	0092      	lsls	r2, r2, #2
 80083dc:	f107 010c 	add.w	r1, r7, #12
 80083e0:	300c      	adds	r0, #12
 80083e2:	f001 ff85 	bl	800a2f0 <memcpy>
 80083e6:	2201      	movs	r2, #1
 80083e8:	4629      	mov	r1, r5
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 fc54 	bl	8008c98 <__lshift>
 80083f0:	9b00      	ldr	r3, [sp, #0]
 80083f2:	3301      	adds	r3, #1
 80083f4:	9304      	str	r3, [sp, #16]
 80083f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083fa:	4413      	add	r3, r2
 80083fc:	9308      	str	r3, [sp, #32]
 80083fe:	9b02      	ldr	r3, [sp, #8]
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	46b8      	mov	r8, r7
 8008406:	9306      	str	r3, [sp, #24]
 8008408:	4607      	mov	r7, r0
 800840a:	9b04      	ldr	r3, [sp, #16]
 800840c:	4631      	mov	r1, r6
 800840e:	3b01      	subs	r3, #1
 8008410:	4650      	mov	r0, sl
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	f7ff fa6c 	bl	80078f0 <quorem>
 8008418:	4641      	mov	r1, r8
 800841a:	9002      	str	r0, [sp, #8]
 800841c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008420:	4650      	mov	r0, sl
 8008422:	f000 fca5 	bl	8008d70 <__mcmp>
 8008426:	463a      	mov	r2, r7
 8008428:	9005      	str	r0, [sp, #20]
 800842a:	4631      	mov	r1, r6
 800842c:	4620      	mov	r0, r4
 800842e:	f000 fcbb 	bl	8008da8 <__mdiff>
 8008432:	68c2      	ldr	r2, [r0, #12]
 8008434:	4605      	mov	r5, r0
 8008436:	bb02      	cbnz	r2, 800847a <_dtoa_r+0xa7a>
 8008438:	4601      	mov	r1, r0
 800843a:	4650      	mov	r0, sl
 800843c:	f000 fc98 	bl	8008d70 <__mcmp>
 8008440:	4602      	mov	r2, r0
 8008442:	4629      	mov	r1, r5
 8008444:	4620      	mov	r0, r4
 8008446:	9209      	str	r2, [sp, #36]	; 0x24
 8008448:	f000 fa0c 	bl	8008864 <_Bfree>
 800844c:	9b07      	ldr	r3, [sp, #28]
 800844e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008450:	9d04      	ldr	r5, [sp, #16]
 8008452:	ea43 0102 	orr.w	r1, r3, r2
 8008456:	9b06      	ldr	r3, [sp, #24]
 8008458:	4319      	orrs	r1, r3
 800845a:	d110      	bne.n	800847e <_dtoa_r+0xa7e>
 800845c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008460:	d029      	beq.n	80084b6 <_dtoa_r+0xab6>
 8008462:	9b05      	ldr	r3, [sp, #20]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dd02      	ble.n	800846e <_dtoa_r+0xa6e>
 8008468:	9b02      	ldr	r3, [sp, #8]
 800846a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800846e:	9b01      	ldr	r3, [sp, #4]
 8008470:	f883 9000 	strb.w	r9, [r3]
 8008474:	e774      	b.n	8008360 <_dtoa_r+0x960>
 8008476:	4638      	mov	r0, r7
 8008478:	e7ba      	b.n	80083f0 <_dtoa_r+0x9f0>
 800847a:	2201      	movs	r2, #1
 800847c:	e7e1      	b.n	8008442 <_dtoa_r+0xa42>
 800847e:	9b05      	ldr	r3, [sp, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	db04      	blt.n	800848e <_dtoa_r+0xa8e>
 8008484:	9907      	ldr	r1, [sp, #28]
 8008486:	430b      	orrs	r3, r1
 8008488:	9906      	ldr	r1, [sp, #24]
 800848a:	430b      	orrs	r3, r1
 800848c:	d120      	bne.n	80084d0 <_dtoa_r+0xad0>
 800848e:	2a00      	cmp	r2, #0
 8008490:	dded      	ble.n	800846e <_dtoa_r+0xa6e>
 8008492:	4651      	mov	r1, sl
 8008494:	2201      	movs	r2, #1
 8008496:	4620      	mov	r0, r4
 8008498:	f000 fbfe 	bl	8008c98 <__lshift>
 800849c:	4631      	mov	r1, r6
 800849e:	4682      	mov	sl, r0
 80084a0:	f000 fc66 	bl	8008d70 <__mcmp>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	dc03      	bgt.n	80084b0 <_dtoa_r+0xab0>
 80084a8:	d1e1      	bne.n	800846e <_dtoa_r+0xa6e>
 80084aa:	f019 0f01 	tst.w	r9, #1
 80084ae:	d0de      	beq.n	800846e <_dtoa_r+0xa6e>
 80084b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084b4:	d1d8      	bne.n	8008468 <_dtoa_r+0xa68>
 80084b6:	9a01      	ldr	r2, [sp, #4]
 80084b8:	2339      	movs	r3, #57	; 0x39
 80084ba:	7013      	strb	r3, [r2, #0]
 80084bc:	462b      	mov	r3, r5
 80084be:	461d      	mov	r5, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084c6:	2a39      	cmp	r2, #57	; 0x39
 80084c8:	d06c      	beq.n	80085a4 <_dtoa_r+0xba4>
 80084ca:	3201      	adds	r2, #1
 80084cc:	701a      	strb	r2, [r3, #0]
 80084ce:	e747      	b.n	8008360 <_dtoa_r+0x960>
 80084d0:	2a00      	cmp	r2, #0
 80084d2:	dd07      	ble.n	80084e4 <_dtoa_r+0xae4>
 80084d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084d8:	d0ed      	beq.n	80084b6 <_dtoa_r+0xab6>
 80084da:	9a01      	ldr	r2, [sp, #4]
 80084dc:	f109 0301 	add.w	r3, r9, #1
 80084e0:	7013      	strb	r3, [r2, #0]
 80084e2:	e73d      	b.n	8008360 <_dtoa_r+0x960>
 80084e4:	9b04      	ldr	r3, [sp, #16]
 80084e6:	9a08      	ldr	r2, [sp, #32]
 80084e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d043      	beq.n	8008578 <_dtoa_r+0xb78>
 80084f0:	4651      	mov	r1, sl
 80084f2:	2300      	movs	r3, #0
 80084f4:	220a      	movs	r2, #10
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 f9d6 	bl	80088a8 <__multadd>
 80084fc:	45b8      	cmp	r8, r7
 80084fe:	4682      	mov	sl, r0
 8008500:	f04f 0300 	mov.w	r3, #0
 8008504:	f04f 020a 	mov.w	r2, #10
 8008508:	4641      	mov	r1, r8
 800850a:	4620      	mov	r0, r4
 800850c:	d107      	bne.n	800851e <_dtoa_r+0xb1e>
 800850e:	f000 f9cb 	bl	80088a8 <__multadd>
 8008512:	4680      	mov	r8, r0
 8008514:	4607      	mov	r7, r0
 8008516:	9b04      	ldr	r3, [sp, #16]
 8008518:	3301      	adds	r3, #1
 800851a:	9304      	str	r3, [sp, #16]
 800851c:	e775      	b.n	800840a <_dtoa_r+0xa0a>
 800851e:	f000 f9c3 	bl	80088a8 <__multadd>
 8008522:	4639      	mov	r1, r7
 8008524:	4680      	mov	r8, r0
 8008526:	2300      	movs	r3, #0
 8008528:	220a      	movs	r2, #10
 800852a:	4620      	mov	r0, r4
 800852c:	f000 f9bc 	bl	80088a8 <__multadd>
 8008530:	4607      	mov	r7, r0
 8008532:	e7f0      	b.n	8008516 <_dtoa_r+0xb16>
 8008534:	9b04      	ldr	r3, [sp, #16]
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	9d00      	ldr	r5, [sp, #0]
 800853a:	4631      	mov	r1, r6
 800853c:	4650      	mov	r0, sl
 800853e:	f7ff f9d7 	bl	80078f0 <quorem>
 8008542:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	f805 9b01 	strb.w	r9, [r5], #1
 800854c:	1aea      	subs	r2, r5, r3
 800854e:	9b01      	ldr	r3, [sp, #4]
 8008550:	4293      	cmp	r3, r2
 8008552:	dd07      	ble.n	8008564 <_dtoa_r+0xb64>
 8008554:	4651      	mov	r1, sl
 8008556:	2300      	movs	r3, #0
 8008558:	220a      	movs	r2, #10
 800855a:	4620      	mov	r0, r4
 800855c:	f000 f9a4 	bl	80088a8 <__multadd>
 8008560:	4682      	mov	sl, r0
 8008562:	e7ea      	b.n	800853a <_dtoa_r+0xb3a>
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfc8      	it	gt
 800856a:	461d      	movgt	r5, r3
 800856c:	9b00      	ldr	r3, [sp, #0]
 800856e:	bfd8      	it	le
 8008570:	2501      	movle	r5, #1
 8008572:	441d      	add	r5, r3
 8008574:	f04f 0800 	mov.w	r8, #0
 8008578:	4651      	mov	r1, sl
 800857a:	2201      	movs	r2, #1
 800857c:	4620      	mov	r0, r4
 800857e:	f000 fb8b 	bl	8008c98 <__lshift>
 8008582:	4631      	mov	r1, r6
 8008584:	4682      	mov	sl, r0
 8008586:	f000 fbf3 	bl	8008d70 <__mcmp>
 800858a:	2800      	cmp	r0, #0
 800858c:	dc96      	bgt.n	80084bc <_dtoa_r+0xabc>
 800858e:	d102      	bne.n	8008596 <_dtoa_r+0xb96>
 8008590:	f019 0f01 	tst.w	r9, #1
 8008594:	d192      	bne.n	80084bc <_dtoa_r+0xabc>
 8008596:	462b      	mov	r3, r5
 8008598:	461d      	mov	r5, r3
 800859a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800859e:	2a30      	cmp	r2, #48	; 0x30
 80085a0:	d0fa      	beq.n	8008598 <_dtoa_r+0xb98>
 80085a2:	e6dd      	b.n	8008360 <_dtoa_r+0x960>
 80085a4:	9a00      	ldr	r2, [sp, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d189      	bne.n	80084be <_dtoa_r+0xabe>
 80085aa:	f10b 0b01 	add.w	fp, fp, #1
 80085ae:	2331      	movs	r3, #49	; 0x31
 80085b0:	e796      	b.n	80084e0 <_dtoa_r+0xae0>
 80085b2:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <_dtoa_r+0xbdc>)
 80085b4:	f7ff ba99 	b.w	8007aea <_dtoa_r+0xea>
 80085b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f47f aa6d 	bne.w	8007a9a <_dtoa_r+0x9a>
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <_dtoa_r+0xbe0>)
 80085c2:	f7ff ba92 	b.w	8007aea <_dtoa_r+0xea>
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dcb5      	bgt.n	8008538 <_dtoa_r+0xb38>
 80085cc:	9b07      	ldr	r3, [sp, #28]
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	f73f aeb1 	bgt.w	8008336 <_dtoa_r+0x936>
 80085d4:	e7b0      	b.n	8008538 <_dtoa_r+0xb38>
 80085d6:	bf00      	nop
 80085d8:	0800cbbd 	.word	0x0800cbbd
 80085dc:	0800cb18 	.word	0x0800cb18
 80085e0:	0800cb41 	.word	0x0800cb41

080085e4 <_free_r>:
 80085e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085e6:	2900      	cmp	r1, #0
 80085e8:	d044      	beq.n	8008674 <_free_r+0x90>
 80085ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ee:	9001      	str	r0, [sp, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f1a1 0404 	sub.w	r4, r1, #4
 80085f6:	bfb8      	it	lt
 80085f8:	18e4      	addlt	r4, r4, r3
 80085fa:	f000 f8e7 	bl	80087cc <__malloc_lock>
 80085fe:	4a1e      	ldr	r2, [pc, #120]	; (8008678 <_free_r+0x94>)
 8008600:	9801      	ldr	r0, [sp, #4]
 8008602:	6813      	ldr	r3, [r2, #0]
 8008604:	b933      	cbnz	r3, 8008614 <_free_r+0x30>
 8008606:	6063      	str	r3, [r4, #4]
 8008608:	6014      	str	r4, [r2, #0]
 800860a:	b003      	add	sp, #12
 800860c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008610:	f000 b8e2 	b.w	80087d8 <__malloc_unlock>
 8008614:	42a3      	cmp	r3, r4
 8008616:	d908      	bls.n	800862a <_free_r+0x46>
 8008618:	6825      	ldr	r5, [r4, #0]
 800861a:	1961      	adds	r1, r4, r5
 800861c:	428b      	cmp	r3, r1
 800861e:	bf01      	itttt	eq
 8008620:	6819      	ldreq	r1, [r3, #0]
 8008622:	685b      	ldreq	r3, [r3, #4]
 8008624:	1949      	addeq	r1, r1, r5
 8008626:	6021      	streq	r1, [r4, #0]
 8008628:	e7ed      	b.n	8008606 <_free_r+0x22>
 800862a:	461a      	mov	r2, r3
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	b10b      	cbz	r3, 8008634 <_free_r+0x50>
 8008630:	42a3      	cmp	r3, r4
 8008632:	d9fa      	bls.n	800862a <_free_r+0x46>
 8008634:	6811      	ldr	r1, [r2, #0]
 8008636:	1855      	adds	r5, r2, r1
 8008638:	42a5      	cmp	r5, r4
 800863a:	d10b      	bne.n	8008654 <_free_r+0x70>
 800863c:	6824      	ldr	r4, [r4, #0]
 800863e:	4421      	add	r1, r4
 8008640:	1854      	adds	r4, r2, r1
 8008642:	42a3      	cmp	r3, r4
 8008644:	6011      	str	r1, [r2, #0]
 8008646:	d1e0      	bne.n	800860a <_free_r+0x26>
 8008648:	681c      	ldr	r4, [r3, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	6053      	str	r3, [r2, #4]
 800864e:	440c      	add	r4, r1
 8008650:	6014      	str	r4, [r2, #0]
 8008652:	e7da      	b.n	800860a <_free_r+0x26>
 8008654:	d902      	bls.n	800865c <_free_r+0x78>
 8008656:	230c      	movs	r3, #12
 8008658:	6003      	str	r3, [r0, #0]
 800865a:	e7d6      	b.n	800860a <_free_r+0x26>
 800865c:	6825      	ldr	r5, [r4, #0]
 800865e:	1961      	adds	r1, r4, r5
 8008660:	428b      	cmp	r3, r1
 8008662:	bf04      	itt	eq
 8008664:	6819      	ldreq	r1, [r3, #0]
 8008666:	685b      	ldreq	r3, [r3, #4]
 8008668:	6063      	str	r3, [r4, #4]
 800866a:	bf04      	itt	eq
 800866c:	1949      	addeq	r1, r1, r5
 800866e:	6021      	streq	r1, [r4, #0]
 8008670:	6054      	str	r4, [r2, #4]
 8008672:	e7ca      	b.n	800860a <_free_r+0x26>
 8008674:	b003      	add	sp, #12
 8008676:	bd30      	pop	{r4, r5, pc}
 8008678:	200005dc 	.word	0x200005dc

0800867c <malloc>:
 800867c:	4b02      	ldr	r3, [pc, #8]	; (8008688 <malloc+0xc>)
 800867e:	4601      	mov	r1, r0
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	f000 b823 	b.w	80086cc <_malloc_r>
 8008686:	bf00      	nop
 8008688:	20000078 	.word	0x20000078

0800868c <sbrk_aligned>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	4e0e      	ldr	r6, [pc, #56]	; (80086c8 <sbrk_aligned+0x3c>)
 8008690:	460c      	mov	r4, r1
 8008692:	6831      	ldr	r1, [r6, #0]
 8008694:	4605      	mov	r5, r0
 8008696:	b911      	cbnz	r1, 800869e <sbrk_aligned+0x12>
 8008698:	f001 fe1a 	bl	800a2d0 <_sbrk_r>
 800869c:	6030      	str	r0, [r6, #0]
 800869e:	4621      	mov	r1, r4
 80086a0:	4628      	mov	r0, r5
 80086a2:	f001 fe15 	bl	800a2d0 <_sbrk_r>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	d00a      	beq.n	80086c0 <sbrk_aligned+0x34>
 80086aa:	1cc4      	adds	r4, r0, #3
 80086ac:	f024 0403 	bic.w	r4, r4, #3
 80086b0:	42a0      	cmp	r0, r4
 80086b2:	d007      	beq.n	80086c4 <sbrk_aligned+0x38>
 80086b4:	1a21      	subs	r1, r4, r0
 80086b6:	4628      	mov	r0, r5
 80086b8:	f001 fe0a 	bl	800a2d0 <_sbrk_r>
 80086bc:	3001      	adds	r0, #1
 80086be:	d101      	bne.n	80086c4 <sbrk_aligned+0x38>
 80086c0:	f04f 34ff 	mov.w	r4, #4294967295
 80086c4:	4620      	mov	r0, r4
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	200005e0 	.word	0x200005e0

080086cc <_malloc_r>:
 80086cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086d0:	1ccd      	adds	r5, r1, #3
 80086d2:	f025 0503 	bic.w	r5, r5, #3
 80086d6:	3508      	adds	r5, #8
 80086d8:	2d0c      	cmp	r5, #12
 80086da:	bf38      	it	cc
 80086dc:	250c      	movcc	r5, #12
 80086de:	2d00      	cmp	r5, #0
 80086e0:	4607      	mov	r7, r0
 80086e2:	db01      	blt.n	80086e8 <_malloc_r+0x1c>
 80086e4:	42a9      	cmp	r1, r5
 80086e6:	d905      	bls.n	80086f4 <_malloc_r+0x28>
 80086e8:	230c      	movs	r3, #12
 80086ea:	603b      	str	r3, [r7, #0]
 80086ec:	2600      	movs	r6, #0
 80086ee:	4630      	mov	r0, r6
 80086f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087c8 <_malloc_r+0xfc>
 80086f8:	f000 f868 	bl	80087cc <__malloc_lock>
 80086fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008700:	461c      	mov	r4, r3
 8008702:	bb5c      	cbnz	r4, 800875c <_malloc_r+0x90>
 8008704:	4629      	mov	r1, r5
 8008706:	4638      	mov	r0, r7
 8008708:	f7ff ffc0 	bl	800868c <sbrk_aligned>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	4604      	mov	r4, r0
 8008710:	d155      	bne.n	80087be <_malloc_r+0xf2>
 8008712:	f8d8 4000 	ldr.w	r4, [r8]
 8008716:	4626      	mov	r6, r4
 8008718:	2e00      	cmp	r6, #0
 800871a:	d145      	bne.n	80087a8 <_malloc_r+0xdc>
 800871c:	2c00      	cmp	r4, #0
 800871e:	d048      	beq.n	80087b2 <_malloc_r+0xe6>
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	4631      	mov	r1, r6
 8008724:	4638      	mov	r0, r7
 8008726:	eb04 0903 	add.w	r9, r4, r3
 800872a:	f001 fdd1 	bl	800a2d0 <_sbrk_r>
 800872e:	4581      	cmp	r9, r0
 8008730:	d13f      	bne.n	80087b2 <_malloc_r+0xe6>
 8008732:	6821      	ldr	r1, [r4, #0]
 8008734:	1a6d      	subs	r5, r5, r1
 8008736:	4629      	mov	r1, r5
 8008738:	4638      	mov	r0, r7
 800873a:	f7ff ffa7 	bl	800868c <sbrk_aligned>
 800873e:	3001      	adds	r0, #1
 8008740:	d037      	beq.n	80087b2 <_malloc_r+0xe6>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	442b      	add	r3, r5
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	f8d8 3000 	ldr.w	r3, [r8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d038      	beq.n	80087c2 <_malloc_r+0xf6>
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	42a2      	cmp	r2, r4
 8008754:	d12b      	bne.n	80087ae <_malloc_r+0xe2>
 8008756:	2200      	movs	r2, #0
 8008758:	605a      	str	r2, [r3, #4]
 800875a:	e00f      	b.n	800877c <_malloc_r+0xb0>
 800875c:	6822      	ldr	r2, [r4, #0]
 800875e:	1b52      	subs	r2, r2, r5
 8008760:	d41f      	bmi.n	80087a2 <_malloc_r+0xd6>
 8008762:	2a0b      	cmp	r2, #11
 8008764:	d917      	bls.n	8008796 <_malloc_r+0xca>
 8008766:	1961      	adds	r1, r4, r5
 8008768:	42a3      	cmp	r3, r4
 800876a:	6025      	str	r5, [r4, #0]
 800876c:	bf18      	it	ne
 800876e:	6059      	strne	r1, [r3, #4]
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	bf08      	it	eq
 8008774:	f8c8 1000 	streq.w	r1, [r8]
 8008778:	5162      	str	r2, [r4, r5]
 800877a:	604b      	str	r3, [r1, #4]
 800877c:	4638      	mov	r0, r7
 800877e:	f104 060b 	add.w	r6, r4, #11
 8008782:	f000 f829 	bl	80087d8 <__malloc_unlock>
 8008786:	f026 0607 	bic.w	r6, r6, #7
 800878a:	1d23      	adds	r3, r4, #4
 800878c:	1af2      	subs	r2, r6, r3
 800878e:	d0ae      	beq.n	80086ee <_malloc_r+0x22>
 8008790:	1b9b      	subs	r3, r3, r6
 8008792:	50a3      	str	r3, [r4, r2]
 8008794:	e7ab      	b.n	80086ee <_malloc_r+0x22>
 8008796:	42a3      	cmp	r3, r4
 8008798:	6862      	ldr	r2, [r4, #4]
 800879a:	d1dd      	bne.n	8008758 <_malloc_r+0x8c>
 800879c:	f8c8 2000 	str.w	r2, [r8]
 80087a0:	e7ec      	b.n	800877c <_malloc_r+0xb0>
 80087a2:	4623      	mov	r3, r4
 80087a4:	6864      	ldr	r4, [r4, #4]
 80087a6:	e7ac      	b.n	8008702 <_malloc_r+0x36>
 80087a8:	4634      	mov	r4, r6
 80087aa:	6876      	ldr	r6, [r6, #4]
 80087ac:	e7b4      	b.n	8008718 <_malloc_r+0x4c>
 80087ae:	4613      	mov	r3, r2
 80087b0:	e7cc      	b.n	800874c <_malloc_r+0x80>
 80087b2:	230c      	movs	r3, #12
 80087b4:	603b      	str	r3, [r7, #0]
 80087b6:	4638      	mov	r0, r7
 80087b8:	f000 f80e 	bl	80087d8 <__malloc_unlock>
 80087bc:	e797      	b.n	80086ee <_malloc_r+0x22>
 80087be:	6025      	str	r5, [r4, #0]
 80087c0:	e7dc      	b.n	800877c <_malloc_r+0xb0>
 80087c2:	605b      	str	r3, [r3, #4]
 80087c4:	deff      	udf	#255	; 0xff
 80087c6:	bf00      	nop
 80087c8:	200005dc 	.word	0x200005dc

080087cc <__malloc_lock>:
 80087cc:	4801      	ldr	r0, [pc, #4]	; (80087d4 <__malloc_lock+0x8>)
 80087ce:	f7ff b887 	b.w	80078e0 <__retarget_lock_acquire_recursive>
 80087d2:	bf00      	nop
 80087d4:	200005d8 	.word	0x200005d8

080087d8 <__malloc_unlock>:
 80087d8:	4801      	ldr	r0, [pc, #4]	; (80087e0 <__malloc_unlock+0x8>)
 80087da:	f7ff b882 	b.w	80078e2 <__retarget_lock_release_recursive>
 80087de:	bf00      	nop
 80087e0:	200005d8 	.word	0x200005d8

080087e4 <_Balloc>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	69c6      	ldr	r6, [r0, #28]
 80087e8:	4604      	mov	r4, r0
 80087ea:	460d      	mov	r5, r1
 80087ec:	b976      	cbnz	r6, 800880c <_Balloc+0x28>
 80087ee:	2010      	movs	r0, #16
 80087f0:	f7ff ff44 	bl	800867c <malloc>
 80087f4:	4602      	mov	r2, r0
 80087f6:	61e0      	str	r0, [r4, #28]
 80087f8:	b920      	cbnz	r0, 8008804 <_Balloc+0x20>
 80087fa:	4b18      	ldr	r3, [pc, #96]	; (800885c <_Balloc+0x78>)
 80087fc:	4818      	ldr	r0, [pc, #96]	; (8008860 <_Balloc+0x7c>)
 80087fe:	216b      	movs	r1, #107	; 0x6b
 8008800:	f001 fd8e 	bl	800a320 <__assert_func>
 8008804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008808:	6006      	str	r6, [r0, #0]
 800880a:	60c6      	str	r6, [r0, #12]
 800880c:	69e6      	ldr	r6, [r4, #28]
 800880e:	68f3      	ldr	r3, [r6, #12]
 8008810:	b183      	cbz	r3, 8008834 <_Balloc+0x50>
 8008812:	69e3      	ldr	r3, [r4, #28]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800881a:	b9b8      	cbnz	r0, 800884c <_Balloc+0x68>
 800881c:	2101      	movs	r1, #1
 800881e:	fa01 f605 	lsl.w	r6, r1, r5
 8008822:	1d72      	adds	r2, r6, #5
 8008824:	0092      	lsls	r2, r2, #2
 8008826:	4620      	mov	r0, r4
 8008828:	f001 fd98 	bl	800a35c <_calloc_r>
 800882c:	b160      	cbz	r0, 8008848 <_Balloc+0x64>
 800882e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008832:	e00e      	b.n	8008852 <_Balloc+0x6e>
 8008834:	2221      	movs	r2, #33	; 0x21
 8008836:	2104      	movs	r1, #4
 8008838:	4620      	mov	r0, r4
 800883a:	f001 fd8f 	bl	800a35c <_calloc_r>
 800883e:	69e3      	ldr	r3, [r4, #28]
 8008840:	60f0      	str	r0, [r6, #12]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e4      	bne.n	8008812 <_Balloc+0x2e>
 8008848:	2000      	movs	r0, #0
 800884a:	bd70      	pop	{r4, r5, r6, pc}
 800884c:	6802      	ldr	r2, [r0, #0]
 800884e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008852:	2300      	movs	r3, #0
 8008854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008858:	e7f7      	b.n	800884a <_Balloc+0x66>
 800885a:	bf00      	nop
 800885c:	0800cb4e 	.word	0x0800cb4e
 8008860:	0800cbce 	.word	0x0800cbce

08008864 <_Bfree>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	69c6      	ldr	r6, [r0, #28]
 8008868:	4605      	mov	r5, r0
 800886a:	460c      	mov	r4, r1
 800886c:	b976      	cbnz	r6, 800888c <_Bfree+0x28>
 800886e:	2010      	movs	r0, #16
 8008870:	f7ff ff04 	bl	800867c <malloc>
 8008874:	4602      	mov	r2, r0
 8008876:	61e8      	str	r0, [r5, #28]
 8008878:	b920      	cbnz	r0, 8008884 <_Bfree+0x20>
 800887a:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <_Bfree+0x3c>)
 800887c:	4809      	ldr	r0, [pc, #36]	; (80088a4 <_Bfree+0x40>)
 800887e:	218f      	movs	r1, #143	; 0x8f
 8008880:	f001 fd4e 	bl	800a320 <__assert_func>
 8008884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008888:	6006      	str	r6, [r0, #0]
 800888a:	60c6      	str	r6, [r0, #12]
 800888c:	b13c      	cbz	r4, 800889e <_Bfree+0x3a>
 800888e:	69eb      	ldr	r3, [r5, #28]
 8008890:	6862      	ldr	r2, [r4, #4]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008898:	6021      	str	r1, [r4, #0]
 800889a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	0800cb4e 	.word	0x0800cb4e
 80088a4:	0800cbce 	.word	0x0800cbce

080088a8 <__multadd>:
 80088a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ac:	690d      	ldr	r5, [r1, #16]
 80088ae:	4607      	mov	r7, r0
 80088b0:	460c      	mov	r4, r1
 80088b2:	461e      	mov	r6, r3
 80088b4:	f101 0c14 	add.w	ip, r1, #20
 80088b8:	2000      	movs	r0, #0
 80088ba:	f8dc 3000 	ldr.w	r3, [ip]
 80088be:	b299      	uxth	r1, r3
 80088c0:	fb02 6101 	mla	r1, r2, r1, r6
 80088c4:	0c1e      	lsrs	r6, r3, #16
 80088c6:	0c0b      	lsrs	r3, r1, #16
 80088c8:	fb02 3306 	mla	r3, r2, r6, r3
 80088cc:	b289      	uxth	r1, r1
 80088ce:	3001      	adds	r0, #1
 80088d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088d4:	4285      	cmp	r5, r0
 80088d6:	f84c 1b04 	str.w	r1, [ip], #4
 80088da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088de:	dcec      	bgt.n	80088ba <__multadd+0x12>
 80088e0:	b30e      	cbz	r6, 8008926 <__multadd+0x7e>
 80088e2:	68a3      	ldr	r3, [r4, #8]
 80088e4:	42ab      	cmp	r3, r5
 80088e6:	dc19      	bgt.n	800891c <__multadd+0x74>
 80088e8:	6861      	ldr	r1, [r4, #4]
 80088ea:	4638      	mov	r0, r7
 80088ec:	3101      	adds	r1, #1
 80088ee:	f7ff ff79 	bl	80087e4 <_Balloc>
 80088f2:	4680      	mov	r8, r0
 80088f4:	b928      	cbnz	r0, 8008902 <__multadd+0x5a>
 80088f6:	4602      	mov	r2, r0
 80088f8:	4b0c      	ldr	r3, [pc, #48]	; (800892c <__multadd+0x84>)
 80088fa:	480d      	ldr	r0, [pc, #52]	; (8008930 <__multadd+0x88>)
 80088fc:	21ba      	movs	r1, #186	; 0xba
 80088fe:	f001 fd0f 	bl	800a320 <__assert_func>
 8008902:	6922      	ldr	r2, [r4, #16]
 8008904:	3202      	adds	r2, #2
 8008906:	f104 010c 	add.w	r1, r4, #12
 800890a:	0092      	lsls	r2, r2, #2
 800890c:	300c      	adds	r0, #12
 800890e:	f001 fcef 	bl	800a2f0 <memcpy>
 8008912:	4621      	mov	r1, r4
 8008914:	4638      	mov	r0, r7
 8008916:	f7ff ffa5 	bl	8008864 <_Bfree>
 800891a:	4644      	mov	r4, r8
 800891c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008920:	3501      	adds	r5, #1
 8008922:	615e      	str	r6, [r3, #20]
 8008924:	6125      	str	r5, [r4, #16]
 8008926:	4620      	mov	r0, r4
 8008928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800892c:	0800cbbd 	.word	0x0800cbbd
 8008930:	0800cbce 	.word	0x0800cbce

08008934 <__s2b>:
 8008934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008938:	460c      	mov	r4, r1
 800893a:	4615      	mov	r5, r2
 800893c:	461f      	mov	r7, r3
 800893e:	2209      	movs	r2, #9
 8008940:	3308      	adds	r3, #8
 8008942:	4606      	mov	r6, r0
 8008944:	fb93 f3f2 	sdiv	r3, r3, r2
 8008948:	2100      	movs	r1, #0
 800894a:	2201      	movs	r2, #1
 800894c:	429a      	cmp	r2, r3
 800894e:	db09      	blt.n	8008964 <__s2b+0x30>
 8008950:	4630      	mov	r0, r6
 8008952:	f7ff ff47 	bl	80087e4 <_Balloc>
 8008956:	b940      	cbnz	r0, 800896a <__s2b+0x36>
 8008958:	4602      	mov	r2, r0
 800895a:	4b19      	ldr	r3, [pc, #100]	; (80089c0 <__s2b+0x8c>)
 800895c:	4819      	ldr	r0, [pc, #100]	; (80089c4 <__s2b+0x90>)
 800895e:	21d3      	movs	r1, #211	; 0xd3
 8008960:	f001 fcde 	bl	800a320 <__assert_func>
 8008964:	0052      	lsls	r2, r2, #1
 8008966:	3101      	adds	r1, #1
 8008968:	e7f0      	b.n	800894c <__s2b+0x18>
 800896a:	9b08      	ldr	r3, [sp, #32]
 800896c:	6143      	str	r3, [r0, #20]
 800896e:	2d09      	cmp	r5, #9
 8008970:	f04f 0301 	mov.w	r3, #1
 8008974:	6103      	str	r3, [r0, #16]
 8008976:	dd16      	ble.n	80089a6 <__s2b+0x72>
 8008978:	f104 0909 	add.w	r9, r4, #9
 800897c:	46c8      	mov	r8, r9
 800897e:	442c      	add	r4, r5
 8008980:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008984:	4601      	mov	r1, r0
 8008986:	3b30      	subs	r3, #48	; 0x30
 8008988:	220a      	movs	r2, #10
 800898a:	4630      	mov	r0, r6
 800898c:	f7ff ff8c 	bl	80088a8 <__multadd>
 8008990:	45a0      	cmp	r8, r4
 8008992:	d1f5      	bne.n	8008980 <__s2b+0x4c>
 8008994:	f1a5 0408 	sub.w	r4, r5, #8
 8008998:	444c      	add	r4, r9
 800899a:	1b2d      	subs	r5, r5, r4
 800899c:	1963      	adds	r3, r4, r5
 800899e:	42bb      	cmp	r3, r7
 80089a0:	db04      	blt.n	80089ac <__s2b+0x78>
 80089a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089a6:	340a      	adds	r4, #10
 80089a8:	2509      	movs	r5, #9
 80089aa:	e7f6      	b.n	800899a <__s2b+0x66>
 80089ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089b0:	4601      	mov	r1, r0
 80089b2:	3b30      	subs	r3, #48	; 0x30
 80089b4:	220a      	movs	r2, #10
 80089b6:	4630      	mov	r0, r6
 80089b8:	f7ff ff76 	bl	80088a8 <__multadd>
 80089bc:	e7ee      	b.n	800899c <__s2b+0x68>
 80089be:	bf00      	nop
 80089c0:	0800cbbd 	.word	0x0800cbbd
 80089c4:	0800cbce 	.word	0x0800cbce

080089c8 <__hi0bits>:
 80089c8:	0c03      	lsrs	r3, r0, #16
 80089ca:	041b      	lsls	r3, r3, #16
 80089cc:	b9d3      	cbnz	r3, 8008a04 <__hi0bits+0x3c>
 80089ce:	0400      	lsls	r0, r0, #16
 80089d0:	2310      	movs	r3, #16
 80089d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089d6:	bf04      	itt	eq
 80089d8:	0200      	lsleq	r0, r0, #8
 80089da:	3308      	addeq	r3, #8
 80089dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089e0:	bf04      	itt	eq
 80089e2:	0100      	lsleq	r0, r0, #4
 80089e4:	3304      	addeq	r3, #4
 80089e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089ea:	bf04      	itt	eq
 80089ec:	0080      	lsleq	r0, r0, #2
 80089ee:	3302      	addeq	r3, #2
 80089f0:	2800      	cmp	r0, #0
 80089f2:	db05      	blt.n	8008a00 <__hi0bits+0x38>
 80089f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089f8:	f103 0301 	add.w	r3, r3, #1
 80089fc:	bf08      	it	eq
 80089fe:	2320      	moveq	r3, #32
 8008a00:	4618      	mov	r0, r3
 8008a02:	4770      	bx	lr
 8008a04:	2300      	movs	r3, #0
 8008a06:	e7e4      	b.n	80089d2 <__hi0bits+0xa>

08008a08 <__lo0bits>:
 8008a08:	6803      	ldr	r3, [r0, #0]
 8008a0a:	f013 0207 	ands.w	r2, r3, #7
 8008a0e:	d00c      	beq.n	8008a2a <__lo0bits+0x22>
 8008a10:	07d9      	lsls	r1, r3, #31
 8008a12:	d422      	bmi.n	8008a5a <__lo0bits+0x52>
 8008a14:	079a      	lsls	r2, r3, #30
 8008a16:	bf49      	itett	mi
 8008a18:	085b      	lsrmi	r3, r3, #1
 8008a1a:	089b      	lsrpl	r3, r3, #2
 8008a1c:	6003      	strmi	r3, [r0, #0]
 8008a1e:	2201      	movmi	r2, #1
 8008a20:	bf5c      	itt	pl
 8008a22:	6003      	strpl	r3, [r0, #0]
 8008a24:	2202      	movpl	r2, #2
 8008a26:	4610      	mov	r0, r2
 8008a28:	4770      	bx	lr
 8008a2a:	b299      	uxth	r1, r3
 8008a2c:	b909      	cbnz	r1, 8008a32 <__lo0bits+0x2a>
 8008a2e:	0c1b      	lsrs	r3, r3, #16
 8008a30:	2210      	movs	r2, #16
 8008a32:	b2d9      	uxtb	r1, r3
 8008a34:	b909      	cbnz	r1, 8008a3a <__lo0bits+0x32>
 8008a36:	3208      	adds	r2, #8
 8008a38:	0a1b      	lsrs	r3, r3, #8
 8008a3a:	0719      	lsls	r1, r3, #28
 8008a3c:	bf04      	itt	eq
 8008a3e:	091b      	lsreq	r3, r3, #4
 8008a40:	3204      	addeq	r2, #4
 8008a42:	0799      	lsls	r1, r3, #30
 8008a44:	bf04      	itt	eq
 8008a46:	089b      	lsreq	r3, r3, #2
 8008a48:	3202      	addeq	r2, #2
 8008a4a:	07d9      	lsls	r1, r3, #31
 8008a4c:	d403      	bmi.n	8008a56 <__lo0bits+0x4e>
 8008a4e:	085b      	lsrs	r3, r3, #1
 8008a50:	f102 0201 	add.w	r2, r2, #1
 8008a54:	d003      	beq.n	8008a5e <__lo0bits+0x56>
 8008a56:	6003      	str	r3, [r0, #0]
 8008a58:	e7e5      	b.n	8008a26 <__lo0bits+0x1e>
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	e7e3      	b.n	8008a26 <__lo0bits+0x1e>
 8008a5e:	2220      	movs	r2, #32
 8008a60:	e7e1      	b.n	8008a26 <__lo0bits+0x1e>
	...

08008a64 <__i2b>:
 8008a64:	b510      	push	{r4, lr}
 8008a66:	460c      	mov	r4, r1
 8008a68:	2101      	movs	r1, #1
 8008a6a:	f7ff febb 	bl	80087e4 <_Balloc>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	b928      	cbnz	r0, 8008a7e <__i2b+0x1a>
 8008a72:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <__i2b+0x24>)
 8008a74:	4805      	ldr	r0, [pc, #20]	; (8008a8c <__i2b+0x28>)
 8008a76:	f240 1145 	movw	r1, #325	; 0x145
 8008a7a:	f001 fc51 	bl	800a320 <__assert_func>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	6144      	str	r4, [r0, #20]
 8008a82:	6103      	str	r3, [r0, #16]
 8008a84:	bd10      	pop	{r4, pc}
 8008a86:	bf00      	nop
 8008a88:	0800cbbd 	.word	0x0800cbbd
 8008a8c:	0800cbce 	.word	0x0800cbce

08008a90 <__multiply>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	4691      	mov	r9, r2
 8008a96:	690a      	ldr	r2, [r1, #16]
 8008a98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	bfb8      	it	lt
 8008aa0:	460b      	movlt	r3, r1
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	bfbc      	itt	lt
 8008aa6:	464c      	movlt	r4, r9
 8008aa8:	4699      	movlt	r9, r3
 8008aaa:	6927      	ldr	r7, [r4, #16]
 8008aac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ab0:	68a3      	ldr	r3, [r4, #8]
 8008ab2:	6861      	ldr	r1, [r4, #4]
 8008ab4:	eb07 060a 	add.w	r6, r7, sl
 8008ab8:	42b3      	cmp	r3, r6
 8008aba:	b085      	sub	sp, #20
 8008abc:	bfb8      	it	lt
 8008abe:	3101      	addlt	r1, #1
 8008ac0:	f7ff fe90 	bl	80087e4 <_Balloc>
 8008ac4:	b930      	cbnz	r0, 8008ad4 <__multiply+0x44>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	4b44      	ldr	r3, [pc, #272]	; (8008bdc <__multiply+0x14c>)
 8008aca:	4845      	ldr	r0, [pc, #276]	; (8008be0 <__multiply+0x150>)
 8008acc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008ad0:	f001 fc26 	bl	800a320 <__assert_func>
 8008ad4:	f100 0514 	add.w	r5, r0, #20
 8008ad8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008adc:	462b      	mov	r3, r5
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4543      	cmp	r3, r8
 8008ae2:	d321      	bcc.n	8008b28 <__multiply+0x98>
 8008ae4:	f104 0314 	add.w	r3, r4, #20
 8008ae8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008aec:	f109 0314 	add.w	r3, r9, #20
 8008af0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008af4:	9202      	str	r2, [sp, #8]
 8008af6:	1b3a      	subs	r2, r7, r4
 8008af8:	3a15      	subs	r2, #21
 8008afa:	f022 0203 	bic.w	r2, r2, #3
 8008afe:	3204      	adds	r2, #4
 8008b00:	f104 0115 	add.w	r1, r4, #21
 8008b04:	428f      	cmp	r7, r1
 8008b06:	bf38      	it	cc
 8008b08:	2204      	movcc	r2, #4
 8008b0a:	9201      	str	r2, [sp, #4]
 8008b0c:	9a02      	ldr	r2, [sp, #8]
 8008b0e:	9303      	str	r3, [sp, #12]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d80c      	bhi.n	8008b2e <__multiply+0x9e>
 8008b14:	2e00      	cmp	r6, #0
 8008b16:	dd03      	ble.n	8008b20 <__multiply+0x90>
 8008b18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d05b      	beq.n	8008bd8 <__multiply+0x148>
 8008b20:	6106      	str	r6, [r0, #16]
 8008b22:	b005      	add	sp, #20
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	f843 2b04 	str.w	r2, [r3], #4
 8008b2c:	e7d8      	b.n	8008ae0 <__multiply+0x50>
 8008b2e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b32:	f1ba 0f00 	cmp.w	sl, #0
 8008b36:	d024      	beq.n	8008b82 <__multiply+0xf2>
 8008b38:	f104 0e14 	add.w	lr, r4, #20
 8008b3c:	46a9      	mov	r9, r5
 8008b3e:	f04f 0c00 	mov.w	ip, #0
 8008b42:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b46:	f8d9 1000 	ldr.w	r1, [r9]
 8008b4a:	fa1f fb82 	uxth.w	fp, r2
 8008b4e:	b289      	uxth	r1, r1
 8008b50:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b58:	f8d9 2000 	ldr.w	r2, [r9]
 8008b5c:	4461      	add	r1, ip
 8008b5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b62:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b6a:	b289      	uxth	r1, r1
 8008b6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b70:	4577      	cmp	r7, lr
 8008b72:	f849 1b04 	str.w	r1, [r9], #4
 8008b76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b7a:	d8e2      	bhi.n	8008b42 <__multiply+0xb2>
 8008b7c:	9a01      	ldr	r2, [sp, #4]
 8008b7e:	f845 c002 	str.w	ip, [r5, r2]
 8008b82:	9a03      	ldr	r2, [sp, #12]
 8008b84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	f1b9 0f00 	cmp.w	r9, #0
 8008b8e:	d021      	beq.n	8008bd4 <__multiply+0x144>
 8008b90:	6829      	ldr	r1, [r5, #0]
 8008b92:	f104 0c14 	add.w	ip, r4, #20
 8008b96:	46ae      	mov	lr, r5
 8008b98:	f04f 0a00 	mov.w	sl, #0
 8008b9c:	f8bc b000 	ldrh.w	fp, [ip]
 8008ba0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ba4:	fb09 220b 	mla	r2, r9, fp, r2
 8008ba8:	4452      	add	r2, sl
 8008baa:	b289      	uxth	r1, r1
 8008bac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008bb0:	f84e 1b04 	str.w	r1, [lr], #4
 8008bb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008bb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bbc:	f8be 1000 	ldrh.w	r1, [lr]
 8008bc0:	fb09 110a 	mla	r1, r9, sl, r1
 8008bc4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008bc8:	4567      	cmp	r7, ip
 8008bca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bce:	d8e5      	bhi.n	8008b9c <__multiply+0x10c>
 8008bd0:	9a01      	ldr	r2, [sp, #4]
 8008bd2:	50a9      	str	r1, [r5, r2]
 8008bd4:	3504      	adds	r5, #4
 8008bd6:	e799      	b.n	8008b0c <__multiply+0x7c>
 8008bd8:	3e01      	subs	r6, #1
 8008bda:	e79b      	b.n	8008b14 <__multiply+0x84>
 8008bdc:	0800cbbd 	.word	0x0800cbbd
 8008be0:	0800cbce 	.word	0x0800cbce

08008be4 <__pow5mult>:
 8008be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be8:	4615      	mov	r5, r2
 8008bea:	f012 0203 	ands.w	r2, r2, #3
 8008bee:	4606      	mov	r6, r0
 8008bf0:	460f      	mov	r7, r1
 8008bf2:	d007      	beq.n	8008c04 <__pow5mult+0x20>
 8008bf4:	4c25      	ldr	r4, [pc, #148]	; (8008c8c <__pow5mult+0xa8>)
 8008bf6:	3a01      	subs	r2, #1
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bfe:	f7ff fe53 	bl	80088a8 <__multadd>
 8008c02:	4607      	mov	r7, r0
 8008c04:	10ad      	asrs	r5, r5, #2
 8008c06:	d03d      	beq.n	8008c84 <__pow5mult+0xa0>
 8008c08:	69f4      	ldr	r4, [r6, #28]
 8008c0a:	b97c      	cbnz	r4, 8008c2c <__pow5mult+0x48>
 8008c0c:	2010      	movs	r0, #16
 8008c0e:	f7ff fd35 	bl	800867c <malloc>
 8008c12:	4602      	mov	r2, r0
 8008c14:	61f0      	str	r0, [r6, #28]
 8008c16:	b928      	cbnz	r0, 8008c24 <__pow5mult+0x40>
 8008c18:	4b1d      	ldr	r3, [pc, #116]	; (8008c90 <__pow5mult+0xac>)
 8008c1a:	481e      	ldr	r0, [pc, #120]	; (8008c94 <__pow5mult+0xb0>)
 8008c1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008c20:	f001 fb7e 	bl	800a320 <__assert_func>
 8008c24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c28:	6004      	str	r4, [r0, #0]
 8008c2a:	60c4      	str	r4, [r0, #12]
 8008c2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008c30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c34:	b94c      	cbnz	r4, 8008c4a <__pow5mult+0x66>
 8008c36:	f240 2171 	movw	r1, #625	; 0x271
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f7ff ff12 	bl	8008a64 <__i2b>
 8008c40:	2300      	movs	r3, #0
 8008c42:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c46:	4604      	mov	r4, r0
 8008c48:	6003      	str	r3, [r0, #0]
 8008c4a:	f04f 0900 	mov.w	r9, #0
 8008c4e:	07eb      	lsls	r3, r5, #31
 8008c50:	d50a      	bpl.n	8008c68 <__pow5mult+0x84>
 8008c52:	4639      	mov	r1, r7
 8008c54:	4622      	mov	r2, r4
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7ff ff1a 	bl	8008a90 <__multiply>
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	4680      	mov	r8, r0
 8008c60:	4630      	mov	r0, r6
 8008c62:	f7ff fdff 	bl	8008864 <_Bfree>
 8008c66:	4647      	mov	r7, r8
 8008c68:	106d      	asrs	r5, r5, #1
 8008c6a:	d00b      	beq.n	8008c84 <__pow5mult+0xa0>
 8008c6c:	6820      	ldr	r0, [r4, #0]
 8008c6e:	b938      	cbnz	r0, 8008c80 <__pow5mult+0x9c>
 8008c70:	4622      	mov	r2, r4
 8008c72:	4621      	mov	r1, r4
 8008c74:	4630      	mov	r0, r6
 8008c76:	f7ff ff0b 	bl	8008a90 <__multiply>
 8008c7a:	6020      	str	r0, [r4, #0]
 8008c7c:	f8c0 9000 	str.w	r9, [r0]
 8008c80:	4604      	mov	r4, r0
 8008c82:	e7e4      	b.n	8008c4e <__pow5mult+0x6a>
 8008c84:	4638      	mov	r0, r7
 8008c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c8a:	bf00      	nop
 8008c8c:	0800cd18 	.word	0x0800cd18
 8008c90:	0800cb4e 	.word	0x0800cb4e
 8008c94:	0800cbce 	.word	0x0800cbce

08008c98 <__lshift>:
 8008c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	6849      	ldr	r1, [r1, #4]
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ca6:	68a3      	ldr	r3, [r4, #8]
 8008ca8:	4607      	mov	r7, r0
 8008caa:	4691      	mov	r9, r2
 8008cac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cb0:	f108 0601 	add.w	r6, r8, #1
 8008cb4:	42b3      	cmp	r3, r6
 8008cb6:	db0b      	blt.n	8008cd0 <__lshift+0x38>
 8008cb8:	4638      	mov	r0, r7
 8008cba:	f7ff fd93 	bl	80087e4 <_Balloc>
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	b948      	cbnz	r0, 8008cd6 <__lshift+0x3e>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	4b28      	ldr	r3, [pc, #160]	; (8008d68 <__lshift+0xd0>)
 8008cc6:	4829      	ldr	r0, [pc, #164]	; (8008d6c <__lshift+0xd4>)
 8008cc8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008ccc:	f001 fb28 	bl	800a320 <__assert_func>
 8008cd0:	3101      	adds	r1, #1
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	e7ee      	b.n	8008cb4 <__lshift+0x1c>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f100 0114 	add.w	r1, r0, #20
 8008cdc:	f100 0210 	add.w	r2, r0, #16
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	4553      	cmp	r3, sl
 8008ce4:	db33      	blt.n	8008d4e <__lshift+0xb6>
 8008ce6:	6920      	ldr	r0, [r4, #16]
 8008ce8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cec:	f104 0314 	add.w	r3, r4, #20
 8008cf0:	f019 091f 	ands.w	r9, r9, #31
 8008cf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cfc:	d02b      	beq.n	8008d56 <__lshift+0xbe>
 8008cfe:	f1c9 0e20 	rsb	lr, r9, #32
 8008d02:	468a      	mov	sl, r1
 8008d04:	2200      	movs	r2, #0
 8008d06:	6818      	ldr	r0, [r3, #0]
 8008d08:	fa00 f009 	lsl.w	r0, r0, r9
 8008d0c:	4310      	orrs	r0, r2
 8008d0e:	f84a 0b04 	str.w	r0, [sl], #4
 8008d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d16:	459c      	cmp	ip, r3
 8008d18:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d1c:	d8f3      	bhi.n	8008d06 <__lshift+0x6e>
 8008d1e:	ebac 0304 	sub.w	r3, ip, r4
 8008d22:	3b15      	subs	r3, #21
 8008d24:	f023 0303 	bic.w	r3, r3, #3
 8008d28:	3304      	adds	r3, #4
 8008d2a:	f104 0015 	add.w	r0, r4, #21
 8008d2e:	4584      	cmp	ip, r0
 8008d30:	bf38      	it	cc
 8008d32:	2304      	movcc	r3, #4
 8008d34:	50ca      	str	r2, [r1, r3]
 8008d36:	b10a      	cbz	r2, 8008d3c <__lshift+0xa4>
 8008d38:	f108 0602 	add.w	r6, r8, #2
 8008d3c:	3e01      	subs	r6, #1
 8008d3e:	4638      	mov	r0, r7
 8008d40:	612e      	str	r6, [r5, #16]
 8008d42:	4621      	mov	r1, r4
 8008d44:	f7ff fd8e 	bl	8008864 <_Bfree>
 8008d48:	4628      	mov	r0, r5
 8008d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d52:	3301      	adds	r3, #1
 8008d54:	e7c5      	b.n	8008ce2 <__lshift+0x4a>
 8008d56:	3904      	subs	r1, #4
 8008d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d60:	459c      	cmp	ip, r3
 8008d62:	d8f9      	bhi.n	8008d58 <__lshift+0xc0>
 8008d64:	e7ea      	b.n	8008d3c <__lshift+0xa4>
 8008d66:	bf00      	nop
 8008d68:	0800cbbd 	.word	0x0800cbbd
 8008d6c:	0800cbce 	.word	0x0800cbce

08008d70 <__mcmp>:
 8008d70:	b530      	push	{r4, r5, lr}
 8008d72:	6902      	ldr	r2, [r0, #16]
 8008d74:	690c      	ldr	r4, [r1, #16]
 8008d76:	1b12      	subs	r2, r2, r4
 8008d78:	d10e      	bne.n	8008d98 <__mcmp+0x28>
 8008d7a:	f100 0314 	add.w	r3, r0, #20
 8008d7e:	3114      	adds	r1, #20
 8008d80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d90:	42a5      	cmp	r5, r4
 8008d92:	d003      	beq.n	8008d9c <__mcmp+0x2c>
 8008d94:	d305      	bcc.n	8008da2 <__mcmp+0x32>
 8008d96:	2201      	movs	r2, #1
 8008d98:	4610      	mov	r0, r2
 8008d9a:	bd30      	pop	{r4, r5, pc}
 8008d9c:	4283      	cmp	r3, r0
 8008d9e:	d3f3      	bcc.n	8008d88 <__mcmp+0x18>
 8008da0:	e7fa      	b.n	8008d98 <__mcmp+0x28>
 8008da2:	f04f 32ff 	mov.w	r2, #4294967295
 8008da6:	e7f7      	b.n	8008d98 <__mcmp+0x28>

08008da8 <__mdiff>:
 8008da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	460c      	mov	r4, r1
 8008dae:	4606      	mov	r6, r0
 8008db0:	4611      	mov	r1, r2
 8008db2:	4620      	mov	r0, r4
 8008db4:	4690      	mov	r8, r2
 8008db6:	f7ff ffdb 	bl	8008d70 <__mcmp>
 8008dba:	1e05      	subs	r5, r0, #0
 8008dbc:	d110      	bne.n	8008de0 <__mdiff+0x38>
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f7ff fd0f 	bl	80087e4 <_Balloc>
 8008dc6:	b930      	cbnz	r0, 8008dd6 <__mdiff+0x2e>
 8008dc8:	4b3a      	ldr	r3, [pc, #232]	; (8008eb4 <__mdiff+0x10c>)
 8008dca:	4602      	mov	r2, r0
 8008dcc:	f240 2137 	movw	r1, #567	; 0x237
 8008dd0:	4839      	ldr	r0, [pc, #228]	; (8008eb8 <__mdiff+0x110>)
 8008dd2:	f001 faa5 	bl	800a320 <__assert_func>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de0:	bfa4      	itt	ge
 8008de2:	4643      	movge	r3, r8
 8008de4:	46a0      	movge	r8, r4
 8008de6:	4630      	mov	r0, r6
 8008de8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008dec:	bfa6      	itte	ge
 8008dee:	461c      	movge	r4, r3
 8008df0:	2500      	movge	r5, #0
 8008df2:	2501      	movlt	r5, #1
 8008df4:	f7ff fcf6 	bl	80087e4 <_Balloc>
 8008df8:	b920      	cbnz	r0, 8008e04 <__mdiff+0x5c>
 8008dfa:	4b2e      	ldr	r3, [pc, #184]	; (8008eb4 <__mdiff+0x10c>)
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	f240 2145 	movw	r1, #581	; 0x245
 8008e02:	e7e5      	b.n	8008dd0 <__mdiff+0x28>
 8008e04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e08:	6926      	ldr	r6, [r4, #16]
 8008e0a:	60c5      	str	r5, [r0, #12]
 8008e0c:	f104 0914 	add.w	r9, r4, #20
 8008e10:	f108 0514 	add.w	r5, r8, #20
 8008e14:	f100 0e14 	add.w	lr, r0, #20
 8008e18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e20:	f108 0210 	add.w	r2, r8, #16
 8008e24:	46f2      	mov	sl, lr
 8008e26:	2100      	movs	r1, #0
 8008e28:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e30:	fa11 f88b 	uxtah	r8, r1, fp
 8008e34:	b299      	uxth	r1, r3
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	eba8 0801 	sub.w	r8, r8, r1
 8008e3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e40:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e44:	fa1f f888 	uxth.w	r8, r8
 8008e48:	1419      	asrs	r1, r3, #16
 8008e4a:	454e      	cmp	r6, r9
 8008e4c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e50:	f84a 3b04 	str.w	r3, [sl], #4
 8008e54:	d8e8      	bhi.n	8008e28 <__mdiff+0x80>
 8008e56:	1b33      	subs	r3, r6, r4
 8008e58:	3b15      	subs	r3, #21
 8008e5a:	f023 0303 	bic.w	r3, r3, #3
 8008e5e:	3304      	adds	r3, #4
 8008e60:	3415      	adds	r4, #21
 8008e62:	42a6      	cmp	r6, r4
 8008e64:	bf38      	it	cc
 8008e66:	2304      	movcc	r3, #4
 8008e68:	441d      	add	r5, r3
 8008e6a:	4473      	add	r3, lr
 8008e6c:	469e      	mov	lr, r3
 8008e6e:	462e      	mov	r6, r5
 8008e70:	4566      	cmp	r6, ip
 8008e72:	d30e      	bcc.n	8008e92 <__mdiff+0xea>
 8008e74:	f10c 0203 	add.w	r2, ip, #3
 8008e78:	1b52      	subs	r2, r2, r5
 8008e7a:	f022 0203 	bic.w	r2, r2, #3
 8008e7e:	3d03      	subs	r5, #3
 8008e80:	45ac      	cmp	ip, r5
 8008e82:	bf38      	it	cc
 8008e84:	2200      	movcc	r2, #0
 8008e86:	4413      	add	r3, r2
 8008e88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008e8c:	b17a      	cbz	r2, 8008eae <__mdiff+0x106>
 8008e8e:	6107      	str	r7, [r0, #16]
 8008e90:	e7a4      	b.n	8008ddc <__mdiff+0x34>
 8008e92:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e96:	fa11 f288 	uxtah	r2, r1, r8
 8008e9a:	1414      	asrs	r4, r2, #16
 8008e9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ea0:	b292      	uxth	r2, r2
 8008ea2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ea6:	f84e 2b04 	str.w	r2, [lr], #4
 8008eaa:	1421      	asrs	r1, r4, #16
 8008eac:	e7e0      	b.n	8008e70 <__mdiff+0xc8>
 8008eae:	3f01      	subs	r7, #1
 8008eb0:	e7ea      	b.n	8008e88 <__mdiff+0xe0>
 8008eb2:	bf00      	nop
 8008eb4:	0800cbbd 	.word	0x0800cbbd
 8008eb8:	0800cbce 	.word	0x0800cbce

08008ebc <__ulp>:
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	ed8d 0b00 	vstr	d0, [sp]
 8008ec2:	9a01      	ldr	r2, [sp, #4]
 8008ec4:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <__ulp+0x48>)
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dc08      	bgt.n	8008ee2 <__ulp+0x26>
 8008ed0:	425b      	negs	r3, r3
 8008ed2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008ed6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008eda:	da04      	bge.n	8008ee6 <__ulp+0x2a>
 8008edc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ee0:	4113      	asrs	r3, r2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	e008      	b.n	8008ef8 <__ulp+0x3c>
 8008ee6:	f1a2 0314 	sub.w	r3, r2, #20
 8008eea:	2b1e      	cmp	r3, #30
 8008eec:	bfda      	itte	le
 8008eee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008ef2:	40da      	lsrle	r2, r3
 8008ef4:	2201      	movgt	r2, #1
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4619      	mov	r1, r3
 8008efa:	4610      	mov	r0, r2
 8008efc:	ec41 0b10 	vmov	d0, r0, r1
 8008f00:	b002      	add	sp, #8
 8008f02:	4770      	bx	lr
 8008f04:	7ff00000 	.word	0x7ff00000

08008f08 <__b2d>:
 8008f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0c:	6906      	ldr	r6, [r0, #16]
 8008f0e:	f100 0814 	add.w	r8, r0, #20
 8008f12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008f16:	1f37      	subs	r7, r6, #4
 8008f18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	f7ff fd53 	bl	80089c8 <__hi0bits>
 8008f22:	f1c0 0320 	rsb	r3, r0, #32
 8008f26:	280a      	cmp	r0, #10
 8008f28:	600b      	str	r3, [r1, #0]
 8008f2a:	491b      	ldr	r1, [pc, #108]	; (8008f98 <__b2d+0x90>)
 8008f2c:	dc15      	bgt.n	8008f5a <__b2d+0x52>
 8008f2e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f32:	fa22 f30c 	lsr.w	r3, r2, ip
 8008f36:	45b8      	cmp	r8, r7
 8008f38:	ea43 0501 	orr.w	r5, r3, r1
 8008f3c:	bf34      	ite	cc
 8008f3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f42:	2300      	movcs	r3, #0
 8008f44:	3015      	adds	r0, #21
 8008f46:	fa02 f000 	lsl.w	r0, r2, r0
 8008f4a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008f4e:	4303      	orrs	r3, r0
 8008f50:	461c      	mov	r4, r3
 8008f52:	ec45 4b10 	vmov	d0, r4, r5
 8008f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f5a:	45b8      	cmp	r8, r7
 8008f5c:	bf3a      	itte	cc
 8008f5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f62:	f1a6 0708 	subcc.w	r7, r6, #8
 8008f66:	2300      	movcs	r3, #0
 8008f68:	380b      	subs	r0, #11
 8008f6a:	d012      	beq.n	8008f92 <__b2d+0x8a>
 8008f6c:	f1c0 0120 	rsb	r1, r0, #32
 8008f70:	fa23 f401 	lsr.w	r4, r3, r1
 8008f74:	4082      	lsls	r2, r0
 8008f76:	4322      	orrs	r2, r4
 8008f78:	4547      	cmp	r7, r8
 8008f7a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008f7e:	bf8c      	ite	hi
 8008f80:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008f84:	2200      	movls	r2, #0
 8008f86:	4083      	lsls	r3, r0
 8008f88:	40ca      	lsrs	r2, r1
 8008f8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	e7de      	b.n	8008f50 <__b2d+0x48>
 8008f92:	ea42 0501 	orr.w	r5, r2, r1
 8008f96:	e7db      	b.n	8008f50 <__b2d+0x48>
 8008f98:	3ff00000 	.word	0x3ff00000

08008f9c <__d2b>:
 8008f9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fa0:	460f      	mov	r7, r1
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	ec59 8b10 	vmov	r8, r9, d0
 8008fa8:	4616      	mov	r6, r2
 8008faa:	f7ff fc1b 	bl	80087e4 <_Balloc>
 8008fae:	4604      	mov	r4, r0
 8008fb0:	b930      	cbnz	r0, 8008fc0 <__d2b+0x24>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	4b24      	ldr	r3, [pc, #144]	; (8009048 <__d2b+0xac>)
 8008fb6:	4825      	ldr	r0, [pc, #148]	; (800904c <__d2b+0xb0>)
 8008fb8:	f240 310f 	movw	r1, #783	; 0x30f
 8008fbc:	f001 f9b0 	bl	800a320 <__assert_func>
 8008fc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fc8:	bb2d      	cbnz	r5, 8009016 <__d2b+0x7a>
 8008fca:	9301      	str	r3, [sp, #4]
 8008fcc:	f1b8 0300 	subs.w	r3, r8, #0
 8008fd0:	d026      	beq.n	8009020 <__d2b+0x84>
 8008fd2:	4668      	mov	r0, sp
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	f7ff fd17 	bl	8008a08 <__lo0bits>
 8008fda:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fde:	b1e8      	cbz	r0, 800901c <__d2b+0x80>
 8008fe0:	f1c0 0320 	rsb	r3, r0, #32
 8008fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe8:	430b      	orrs	r3, r1
 8008fea:	40c2      	lsrs	r2, r0
 8008fec:	6163      	str	r3, [r4, #20]
 8008fee:	9201      	str	r2, [sp, #4]
 8008ff0:	9b01      	ldr	r3, [sp, #4]
 8008ff2:	61a3      	str	r3, [r4, #24]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	bf14      	ite	ne
 8008ff8:	2202      	movne	r2, #2
 8008ffa:	2201      	moveq	r2, #1
 8008ffc:	6122      	str	r2, [r4, #16]
 8008ffe:	b1bd      	cbz	r5, 8009030 <__d2b+0x94>
 8009000:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009004:	4405      	add	r5, r0
 8009006:	603d      	str	r5, [r7, #0]
 8009008:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800900c:	6030      	str	r0, [r6, #0]
 800900e:	4620      	mov	r0, r4
 8009010:	b003      	add	sp, #12
 8009012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800901a:	e7d6      	b.n	8008fca <__d2b+0x2e>
 800901c:	6161      	str	r1, [r4, #20]
 800901e:	e7e7      	b.n	8008ff0 <__d2b+0x54>
 8009020:	a801      	add	r0, sp, #4
 8009022:	f7ff fcf1 	bl	8008a08 <__lo0bits>
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	6163      	str	r3, [r4, #20]
 800902a:	3020      	adds	r0, #32
 800902c:	2201      	movs	r2, #1
 800902e:	e7e5      	b.n	8008ffc <__d2b+0x60>
 8009030:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009034:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009038:	6038      	str	r0, [r7, #0]
 800903a:	6918      	ldr	r0, [r3, #16]
 800903c:	f7ff fcc4 	bl	80089c8 <__hi0bits>
 8009040:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009044:	e7e2      	b.n	800900c <__d2b+0x70>
 8009046:	bf00      	nop
 8009048:	0800cbbd 	.word	0x0800cbbd
 800904c:	0800cbce 	.word	0x0800cbce

08009050 <__ratio>:
 8009050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	4688      	mov	r8, r1
 8009056:	4669      	mov	r1, sp
 8009058:	4681      	mov	r9, r0
 800905a:	f7ff ff55 	bl	8008f08 <__b2d>
 800905e:	a901      	add	r1, sp, #4
 8009060:	4640      	mov	r0, r8
 8009062:	ec55 4b10 	vmov	r4, r5, d0
 8009066:	f7ff ff4f 	bl	8008f08 <__b2d>
 800906a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800906e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009072:	eba3 0c02 	sub.w	ip, r3, r2
 8009076:	e9dd 3200 	ldrd	r3, r2, [sp]
 800907a:	1a9b      	subs	r3, r3, r2
 800907c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009080:	ec51 0b10 	vmov	r0, r1, d0
 8009084:	2b00      	cmp	r3, #0
 8009086:	bfd6      	itet	le
 8009088:	460a      	movle	r2, r1
 800908a:	462a      	movgt	r2, r5
 800908c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009090:	468b      	mov	fp, r1
 8009092:	462f      	mov	r7, r5
 8009094:	bfd4      	ite	le
 8009096:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800909a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800909e:	4620      	mov	r0, r4
 80090a0:	ee10 2a10 	vmov	r2, s0
 80090a4:	465b      	mov	r3, fp
 80090a6:	4639      	mov	r1, r7
 80090a8:	f7f7 fbf0 	bl	800088c <__aeabi_ddiv>
 80090ac:	ec41 0b10 	vmov	d0, r0, r1
 80090b0:	b003      	add	sp, #12
 80090b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090b6 <__copybits>:
 80090b6:	3901      	subs	r1, #1
 80090b8:	b570      	push	{r4, r5, r6, lr}
 80090ba:	1149      	asrs	r1, r1, #5
 80090bc:	6914      	ldr	r4, [r2, #16]
 80090be:	3101      	adds	r1, #1
 80090c0:	f102 0314 	add.w	r3, r2, #20
 80090c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090cc:	1f05      	subs	r5, r0, #4
 80090ce:	42a3      	cmp	r3, r4
 80090d0:	d30c      	bcc.n	80090ec <__copybits+0x36>
 80090d2:	1aa3      	subs	r3, r4, r2
 80090d4:	3b11      	subs	r3, #17
 80090d6:	f023 0303 	bic.w	r3, r3, #3
 80090da:	3211      	adds	r2, #17
 80090dc:	42a2      	cmp	r2, r4
 80090de:	bf88      	it	hi
 80090e0:	2300      	movhi	r3, #0
 80090e2:	4418      	add	r0, r3
 80090e4:	2300      	movs	r3, #0
 80090e6:	4288      	cmp	r0, r1
 80090e8:	d305      	bcc.n	80090f6 <__copybits+0x40>
 80090ea:	bd70      	pop	{r4, r5, r6, pc}
 80090ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80090f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80090f4:	e7eb      	b.n	80090ce <__copybits+0x18>
 80090f6:	f840 3b04 	str.w	r3, [r0], #4
 80090fa:	e7f4      	b.n	80090e6 <__copybits+0x30>

080090fc <__any_on>:
 80090fc:	f100 0214 	add.w	r2, r0, #20
 8009100:	6900      	ldr	r0, [r0, #16]
 8009102:	114b      	asrs	r3, r1, #5
 8009104:	4298      	cmp	r0, r3
 8009106:	b510      	push	{r4, lr}
 8009108:	db11      	blt.n	800912e <__any_on+0x32>
 800910a:	dd0a      	ble.n	8009122 <__any_on+0x26>
 800910c:	f011 011f 	ands.w	r1, r1, #31
 8009110:	d007      	beq.n	8009122 <__any_on+0x26>
 8009112:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009116:	fa24 f001 	lsr.w	r0, r4, r1
 800911a:	fa00 f101 	lsl.w	r1, r0, r1
 800911e:	428c      	cmp	r4, r1
 8009120:	d10b      	bne.n	800913a <__any_on+0x3e>
 8009122:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009126:	4293      	cmp	r3, r2
 8009128:	d803      	bhi.n	8009132 <__any_on+0x36>
 800912a:	2000      	movs	r0, #0
 800912c:	bd10      	pop	{r4, pc}
 800912e:	4603      	mov	r3, r0
 8009130:	e7f7      	b.n	8009122 <__any_on+0x26>
 8009132:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009136:	2900      	cmp	r1, #0
 8009138:	d0f5      	beq.n	8009126 <__any_on+0x2a>
 800913a:	2001      	movs	r0, #1
 800913c:	e7f6      	b.n	800912c <__any_on+0x30>

0800913e <sulp>:
 800913e:	b570      	push	{r4, r5, r6, lr}
 8009140:	4604      	mov	r4, r0
 8009142:	460d      	mov	r5, r1
 8009144:	ec45 4b10 	vmov	d0, r4, r5
 8009148:	4616      	mov	r6, r2
 800914a:	f7ff feb7 	bl	8008ebc <__ulp>
 800914e:	ec51 0b10 	vmov	r0, r1, d0
 8009152:	b17e      	cbz	r6, 8009174 <sulp+0x36>
 8009154:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009158:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800915c:	2b00      	cmp	r3, #0
 800915e:	dd09      	ble.n	8009174 <sulp+0x36>
 8009160:	051b      	lsls	r3, r3, #20
 8009162:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009166:	2400      	movs	r4, #0
 8009168:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800916c:	4622      	mov	r2, r4
 800916e:	462b      	mov	r3, r5
 8009170:	f7f7 fa62 	bl	8000638 <__aeabi_dmul>
 8009174:	bd70      	pop	{r4, r5, r6, pc}
	...

08009178 <_strtod_l>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	ed2d 8b02 	vpush	{d8}
 8009180:	b09b      	sub	sp, #108	; 0x6c
 8009182:	4604      	mov	r4, r0
 8009184:	9213      	str	r2, [sp, #76]	; 0x4c
 8009186:	2200      	movs	r2, #0
 8009188:	9216      	str	r2, [sp, #88]	; 0x58
 800918a:	460d      	mov	r5, r1
 800918c:	f04f 0800 	mov.w	r8, #0
 8009190:	f04f 0900 	mov.w	r9, #0
 8009194:	460a      	mov	r2, r1
 8009196:	9215      	str	r2, [sp, #84]	; 0x54
 8009198:	7811      	ldrb	r1, [r2, #0]
 800919a:	292b      	cmp	r1, #43	; 0x2b
 800919c:	d04c      	beq.n	8009238 <_strtod_l+0xc0>
 800919e:	d83a      	bhi.n	8009216 <_strtod_l+0x9e>
 80091a0:	290d      	cmp	r1, #13
 80091a2:	d834      	bhi.n	800920e <_strtod_l+0x96>
 80091a4:	2908      	cmp	r1, #8
 80091a6:	d834      	bhi.n	8009212 <_strtod_l+0x9a>
 80091a8:	2900      	cmp	r1, #0
 80091aa:	d03d      	beq.n	8009228 <_strtod_l+0xb0>
 80091ac:	2200      	movs	r2, #0
 80091ae:	920a      	str	r2, [sp, #40]	; 0x28
 80091b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80091b2:	7832      	ldrb	r2, [r6, #0]
 80091b4:	2a30      	cmp	r2, #48	; 0x30
 80091b6:	f040 80b4 	bne.w	8009322 <_strtod_l+0x1aa>
 80091ba:	7872      	ldrb	r2, [r6, #1]
 80091bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80091c0:	2a58      	cmp	r2, #88	; 0x58
 80091c2:	d170      	bne.n	80092a6 <_strtod_l+0x12e>
 80091c4:	9302      	str	r3, [sp, #8]
 80091c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	ab16      	add	r3, sp, #88	; 0x58
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	4a8e      	ldr	r2, [pc, #568]	; (8009408 <_strtod_l+0x290>)
 80091d0:	ab17      	add	r3, sp, #92	; 0x5c
 80091d2:	a915      	add	r1, sp, #84	; 0x54
 80091d4:	4620      	mov	r0, r4
 80091d6:	f001 f93f 	bl	800a458 <__gethex>
 80091da:	f010 070f 	ands.w	r7, r0, #15
 80091de:	4605      	mov	r5, r0
 80091e0:	d005      	beq.n	80091ee <_strtod_l+0x76>
 80091e2:	2f06      	cmp	r7, #6
 80091e4:	d12a      	bne.n	800923c <_strtod_l+0xc4>
 80091e6:	3601      	adds	r6, #1
 80091e8:	2300      	movs	r3, #0
 80091ea:	9615      	str	r6, [sp, #84]	; 0x54
 80091ec:	930a      	str	r3, [sp, #40]	; 0x28
 80091ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f040 857f 	bne.w	8009cf4 <_strtod_l+0xb7c>
 80091f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f8:	b1db      	cbz	r3, 8009232 <_strtod_l+0xba>
 80091fa:	4642      	mov	r2, r8
 80091fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009200:	ec43 2b10 	vmov	d0, r2, r3
 8009204:	b01b      	add	sp, #108	; 0x6c
 8009206:	ecbd 8b02 	vpop	{d8}
 800920a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920e:	2920      	cmp	r1, #32
 8009210:	d1cc      	bne.n	80091ac <_strtod_l+0x34>
 8009212:	3201      	adds	r2, #1
 8009214:	e7bf      	b.n	8009196 <_strtod_l+0x1e>
 8009216:	292d      	cmp	r1, #45	; 0x2d
 8009218:	d1c8      	bne.n	80091ac <_strtod_l+0x34>
 800921a:	2101      	movs	r1, #1
 800921c:	910a      	str	r1, [sp, #40]	; 0x28
 800921e:	1c51      	adds	r1, r2, #1
 8009220:	9115      	str	r1, [sp, #84]	; 0x54
 8009222:	7852      	ldrb	r2, [r2, #1]
 8009224:	2a00      	cmp	r2, #0
 8009226:	d1c3      	bne.n	80091b0 <_strtod_l+0x38>
 8009228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800922a:	9515      	str	r5, [sp, #84]	; 0x54
 800922c:	2b00      	cmp	r3, #0
 800922e:	f040 855f 	bne.w	8009cf0 <_strtod_l+0xb78>
 8009232:	4642      	mov	r2, r8
 8009234:	464b      	mov	r3, r9
 8009236:	e7e3      	b.n	8009200 <_strtod_l+0x88>
 8009238:	2100      	movs	r1, #0
 800923a:	e7ef      	b.n	800921c <_strtod_l+0xa4>
 800923c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800923e:	b13a      	cbz	r2, 8009250 <_strtod_l+0xd8>
 8009240:	2135      	movs	r1, #53	; 0x35
 8009242:	a818      	add	r0, sp, #96	; 0x60
 8009244:	f7ff ff37 	bl	80090b6 <__copybits>
 8009248:	9916      	ldr	r1, [sp, #88]	; 0x58
 800924a:	4620      	mov	r0, r4
 800924c:	f7ff fb0a 	bl	8008864 <_Bfree>
 8009250:	3f01      	subs	r7, #1
 8009252:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009254:	2f04      	cmp	r7, #4
 8009256:	d806      	bhi.n	8009266 <_strtod_l+0xee>
 8009258:	e8df f007 	tbb	[pc, r7]
 800925c:	201d0314 	.word	0x201d0314
 8009260:	14          	.byte	0x14
 8009261:	00          	.byte	0x00
 8009262:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009266:	05e9      	lsls	r1, r5, #23
 8009268:	bf48      	it	mi
 800926a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800926e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009272:	0d1b      	lsrs	r3, r3, #20
 8009274:	051b      	lsls	r3, r3, #20
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1b9      	bne.n	80091ee <_strtod_l+0x76>
 800927a:	f7fe fb07 	bl	800788c <__errno>
 800927e:	2322      	movs	r3, #34	; 0x22
 8009280:	6003      	str	r3, [r0, #0]
 8009282:	e7b4      	b.n	80091ee <_strtod_l+0x76>
 8009284:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009288:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800928c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009290:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009294:	e7e7      	b.n	8009266 <_strtod_l+0xee>
 8009296:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009410 <_strtod_l+0x298>
 800929a:	e7e4      	b.n	8009266 <_strtod_l+0xee>
 800929c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80092a0:	f04f 38ff 	mov.w	r8, #4294967295
 80092a4:	e7df      	b.n	8009266 <_strtod_l+0xee>
 80092a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	9215      	str	r2, [sp, #84]	; 0x54
 80092ac:	785b      	ldrb	r3, [r3, #1]
 80092ae:	2b30      	cmp	r3, #48	; 0x30
 80092b0:	d0f9      	beq.n	80092a6 <_strtod_l+0x12e>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d09b      	beq.n	80091ee <_strtod_l+0x76>
 80092b6:	2301      	movs	r3, #1
 80092b8:	f04f 0a00 	mov.w	sl, #0
 80092bc:	9304      	str	r3, [sp, #16]
 80092be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80092c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80092c6:	46d3      	mov	fp, sl
 80092c8:	220a      	movs	r2, #10
 80092ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 80092cc:	7806      	ldrb	r6, [r0, #0]
 80092ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80092d2:	b2d9      	uxtb	r1, r3
 80092d4:	2909      	cmp	r1, #9
 80092d6:	d926      	bls.n	8009326 <_strtod_l+0x1ae>
 80092d8:	494c      	ldr	r1, [pc, #304]	; (800940c <_strtod_l+0x294>)
 80092da:	2201      	movs	r2, #1
 80092dc:	f000 ffe6 	bl	800a2ac <strncmp>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d030      	beq.n	8009346 <_strtod_l+0x1ce>
 80092e4:	2000      	movs	r0, #0
 80092e6:	4632      	mov	r2, r6
 80092e8:	9005      	str	r0, [sp, #20]
 80092ea:	465e      	mov	r6, fp
 80092ec:	4603      	mov	r3, r0
 80092ee:	2a65      	cmp	r2, #101	; 0x65
 80092f0:	d001      	beq.n	80092f6 <_strtod_l+0x17e>
 80092f2:	2a45      	cmp	r2, #69	; 0x45
 80092f4:	d113      	bne.n	800931e <_strtod_l+0x1a6>
 80092f6:	b91e      	cbnz	r6, 8009300 <_strtod_l+0x188>
 80092f8:	9a04      	ldr	r2, [sp, #16]
 80092fa:	4302      	orrs	r2, r0
 80092fc:	d094      	beq.n	8009228 <_strtod_l+0xb0>
 80092fe:	2600      	movs	r6, #0
 8009300:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009302:	1c6a      	adds	r2, r5, #1
 8009304:	9215      	str	r2, [sp, #84]	; 0x54
 8009306:	786a      	ldrb	r2, [r5, #1]
 8009308:	2a2b      	cmp	r2, #43	; 0x2b
 800930a:	d074      	beq.n	80093f6 <_strtod_l+0x27e>
 800930c:	2a2d      	cmp	r2, #45	; 0x2d
 800930e:	d078      	beq.n	8009402 <_strtod_l+0x28a>
 8009310:	f04f 0c00 	mov.w	ip, #0
 8009314:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009318:	2909      	cmp	r1, #9
 800931a:	d97f      	bls.n	800941c <_strtod_l+0x2a4>
 800931c:	9515      	str	r5, [sp, #84]	; 0x54
 800931e:	2700      	movs	r7, #0
 8009320:	e09e      	b.n	8009460 <_strtod_l+0x2e8>
 8009322:	2300      	movs	r3, #0
 8009324:	e7c8      	b.n	80092b8 <_strtod_l+0x140>
 8009326:	f1bb 0f08 	cmp.w	fp, #8
 800932a:	bfd8      	it	le
 800932c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800932e:	f100 0001 	add.w	r0, r0, #1
 8009332:	bfda      	itte	le
 8009334:	fb02 3301 	mlale	r3, r2, r1, r3
 8009338:	9309      	strle	r3, [sp, #36]	; 0x24
 800933a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800933e:	f10b 0b01 	add.w	fp, fp, #1
 8009342:	9015      	str	r0, [sp, #84]	; 0x54
 8009344:	e7c1      	b.n	80092ca <_strtod_l+0x152>
 8009346:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	9215      	str	r2, [sp, #84]	; 0x54
 800934c:	785a      	ldrb	r2, [r3, #1]
 800934e:	f1bb 0f00 	cmp.w	fp, #0
 8009352:	d037      	beq.n	80093c4 <_strtod_l+0x24c>
 8009354:	9005      	str	r0, [sp, #20]
 8009356:	465e      	mov	r6, fp
 8009358:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800935c:	2b09      	cmp	r3, #9
 800935e:	d912      	bls.n	8009386 <_strtod_l+0x20e>
 8009360:	2301      	movs	r3, #1
 8009362:	e7c4      	b.n	80092ee <_strtod_l+0x176>
 8009364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	9215      	str	r2, [sp, #84]	; 0x54
 800936a:	785a      	ldrb	r2, [r3, #1]
 800936c:	3001      	adds	r0, #1
 800936e:	2a30      	cmp	r2, #48	; 0x30
 8009370:	d0f8      	beq.n	8009364 <_strtod_l+0x1ec>
 8009372:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009376:	2b08      	cmp	r3, #8
 8009378:	f200 84c1 	bhi.w	8009cfe <_strtod_l+0xb86>
 800937c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800937e:	9005      	str	r0, [sp, #20]
 8009380:	2000      	movs	r0, #0
 8009382:	930b      	str	r3, [sp, #44]	; 0x2c
 8009384:	4606      	mov	r6, r0
 8009386:	3a30      	subs	r2, #48	; 0x30
 8009388:	f100 0301 	add.w	r3, r0, #1
 800938c:	d014      	beq.n	80093b8 <_strtod_l+0x240>
 800938e:	9905      	ldr	r1, [sp, #20]
 8009390:	4419      	add	r1, r3
 8009392:	9105      	str	r1, [sp, #20]
 8009394:	4633      	mov	r3, r6
 8009396:	eb00 0c06 	add.w	ip, r0, r6
 800939a:	210a      	movs	r1, #10
 800939c:	4563      	cmp	r3, ip
 800939e:	d113      	bne.n	80093c8 <_strtod_l+0x250>
 80093a0:	1833      	adds	r3, r6, r0
 80093a2:	2b08      	cmp	r3, #8
 80093a4:	f106 0601 	add.w	r6, r6, #1
 80093a8:	4406      	add	r6, r0
 80093aa:	dc1a      	bgt.n	80093e2 <_strtod_l+0x26a>
 80093ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093ae:	230a      	movs	r3, #10
 80093b0:	fb03 2301 	mla	r3, r3, r1, r2
 80093b4:	9309      	str	r3, [sp, #36]	; 0x24
 80093b6:	2300      	movs	r3, #0
 80093b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80093ba:	1c51      	adds	r1, r2, #1
 80093bc:	9115      	str	r1, [sp, #84]	; 0x54
 80093be:	7852      	ldrb	r2, [r2, #1]
 80093c0:	4618      	mov	r0, r3
 80093c2:	e7c9      	b.n	8009358 <_strtod_l+0x1e0>
 80093c4:	4658      	mov	r0, fp
 80093c6:	e7d2      	b.n	800936e <_strtod_l+0x1f6>
 80093c8:	2b08      	cmp	r3, #8
 80093ca:	f103 0301 	add.w	r3, r3, #1
 80093ce:	dc03      	bgt.n	80093d8 <_strtod_l+0x260>
 80093d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80093d2:	434f      	muls	r7, r1
 80093d4:	9709      	str	r7, [sp, #36]	; 0x24
 80093d6:	e7e1      	b.n	800939c <_strtod_l+0x224>
 80093d8:	2b10      	cmp	r3, #16
 80093da:	bfd8      	it	le
 80093dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80093e0:	e7dc      	b.n	800939c <_strtod_l+0x224>
 80093e2:	2e10      	cmp	r6, #16
 80093e4:	bfdc      	itt	le
 80093e6:	230a      	movle	r3, #10
 80093e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80093ec:	e7e3      	b.n	80093b6 <_strtod_l+0x23e>
 80093ee:	2300      	movs	r3, #0
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	2301      	movs	r3, #1
 80093f4:	e780      	b.n	80092f8 <_strtod_l+0x180>
 80093f6:	f04f 0c00 	mov.w	ip, #0
 80093fa:	1caa      	adds	r2, r5, #2
 80093fc:	9215      	str	r2, [sp, #84]	; 0x54
 80093fe:	78aa      	ldrb	r2, [r5, #2]
 8009400:	e788      	b.n	8009314 <_strtod_l+0x19c>
 8009402:	f04f 0c01 	mov.w	ip, #1
 8009406:	e7f8      	b.n	80093fa <_strtod_l+0x282>
 8009408:	0800cd28 	.word	0x0800cd28
 800940c:	0800cd24 	.word	0x0800cd24
 8009410:	7ff00000 	.word	0x7ff00000
 8009414:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009416:	1c51      	adds	r1, r2, #1
 8009418:	9115      	str	r1, [sp, #84]	; 0x54
 800941a:	7852      	ldrb	r2, [r2, #1]
 800941c:	2a30      	cmp	r2, #48	; 0x30
 800941e:	d0f9      	beq.n	8009414 <_strtod_l+0x29c>
 8009420:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009424:	2908      	cmp	r1, #8
 8009426:	f63f af7a 	bhi.w	800931e <_strtod_l+0x1a6>
 800942a:	3a30      	subs	r2, #48	; 0x30
 800942c:	9208      	str	r2, [sp, #32]
 800942e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009430:	920c      	str	r2, [sp, #48]	; 0x30
 8009432:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009434:	1c57      	adds	r7, r2, #1
 8009436:	9715      	str	r7, [sp, #84]	; 0x54
 8009438:	7852      	ldrb	r2, [r2, #1]
 800943a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800943e:	f1be 0f09 	cmp.w	lr, #9
 8009442:	d938      	bls.n	80094b6 <_strtod_l+0x33e>
 8009444:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009446:	1a7f      	subs	r7, r7, r1
 8009448:	2f08      	cmp	r7, #8
 800944a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800944e:	dc03      	bgt.n	8009458 <_strtod_l+0x2e0>
 8009450:	9908      	ldr	r1, [sp, #32]
 8009452:	428f      	cmp	r7, r1
 8009454:	bfa8      	it	ge
 8009456:	460f      	movge	r7, r1
 8009458:	f1bc 0f00 	cmp.w	ip, #0
 800945c:	d000      	beq.n	8009460 <_strtod_l+0x2e8>
 800945e:	427f      	negs	r7, r7
 8009460:	2e00      	cmp	r6, #0
 8009462:	d14f      	bne.n	8009504 <_strtod_l+0x38c>
 8009464:	9904      	ldr	r1, [sp, #16]
 8009466:	4301      	orrs	r1, r0
 8009468:	f47f aec1 	bne.w	80091ee <_strtod_l+0x76>
 800946c:	2b00      	cmp	r3, #0
 800946e:	f47f aedb 	bne.w	8009228 <_strtod_l+0xb0>
 8009472:	2a69      	cmp	r2, #105	; 0x69
 8009474:	d029      	beq.n	80094ca <_strtod_l+0x352>
 8009476:	dc26      	bgt.n	80094c6 <_strtod_l+0x34e>
 8009478:	2a49      	cmp	r2, #73	; 0x49
 800947a:	d026      	beq.n	80094ca <_strtod_l+0x352>
 800947c:	2a4e      	cmp	r2, #78	; 0x4e
 800947e:	f47f aed3 	bne.w	8009228 <_strtod_l+0xb0>
 8009482:	499b      	ldr	r1, [pc, #620]	; (80096f0 <_strtod_l+0x578>)
 8009484:	a815      	add	r0, sp, #84	; 0x54
 8009486:	f001 fa27 	bl	800a8d8 <__match>
 800948a:	2800      	cmp	r0, #0
 800948c:	f43f aecc 	beq.w	8009228 <_strtod_l+0xb0>
 8009490:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	2b28      	cmp	r3, #40	; 0x28
 8009496:	d12f      	bne.n	80094f8 <_strtod_l+0x380>
 8009498:	4996      	ldr	r1, [pc, #600]	; (80096f4 <_strtod_l+0x57c>)
 800949a:	aa18      	add	r2, sp, #96	; 0x60
 800949c:	a815      	add	r0, sp, #84	; 0x54
 800949e:	f001 fa2f 	bl	800a900 <__hexnan>
 80094a2:	2805      	cmp	r0, #5
 80094a4:	d128      	bne.n	80094f8 <_strtod_l+0x380>
 80094a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80094ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80094b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80094b4:	e69b      	b.n	80091ee <_strtod_l+0x76>
 80094b6:	9f08      	ldr	r7, [sp, #32]
 80094b8:	210a      	movs	r1, #10
 80094ba:	fb01 2107 	mla	r1, r1, r7, r2
 80094be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80094c2:	9208      	str	r2, [sp, #32]
 80094c4:	e7b5      	b.n	8009432 <_strtod_l+0x2ba>
 80094c6:	2a6e      	cmp	r2, #110	; 0x6e
 80094c8:	e7d9      	b.n	800947e <_strtod_l+0x306>
 80094ca:	498b      	ldr	r1, [pc, #556]	; (80096f8 <_strtod_l+0x580>)
 80094cc:	a815      	add	r0, sp, #84	; 0x54
 80094ce:	f001 fa03 	bl	800a8d8 <__match>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	f43f aea8 	beq.w	8009228 <_strtod_l+0xb0>
 80094d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094da:	4988      	ldr	r1, [pc, #544]	; (80096fc <_strtod_l+0x584>)
 80094dc:	3b01      	subs	r3, #1
 80094de:	a815      	add	r0, sp, #84	; 0x54
 80094e0:	9315      	str	r3, [sp, #84]	; 0x54
 80094e2:	f001 f9f9 	bl	800a8d8 <__match>
 80094e6:	b910      	cbnz	r0, 80094ee <_strtod_l+0x376>
 80094e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094ea:	3301      	adds	r3, #1
 80094ec:	9315      	str	r3, [sp, #84]	; 0x54
 80094ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800970c <_strtod_l+0x594>
 80094f2:	f04f 0800 	mov.w	r8, #0
 80094f6:	e67a      	b.n	80091ee <_strtod_l+0x76>
 80094f8:	4881      	ldr	r0, [pc, #516]	; (8009700 <_strtod_l+0x588>)
 80094fa:	f000 ff09 	bl	800a310 <nan>
 80094fe:	ec59 8b10 	vmov	r8, r9, d0
 8009502:	e674      	b.n	80091ee <_strtod_l+0x76>
 8009504:	9b05      	ldr	r3, [sp, #20]
 8009506:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009508:	1afb      	subs	r3, r7, r3
 800950a:	f1bb 0f00 	cmp.w	fp, #0
 800950e:	bf08      	it	eq
 8009510:	46b3      	moveq	fp, r6
 8009512:	2e10      	cmp	r6, #16
 8009514:	9308      	str	r3, [sp, #32]
 8009516:	4635      	mov	r5, r6
 8009518:	bfa8      	it	ge
 800951a:	2510      	movge	r5, #16
 800951c:	f7f7 f812 	bl	8000544 <__aeabi_ui2d>
 8009520:	2e09      	cmp	r6, #9
 8009522:	4680      	mov	r8, r0
 8009524:	4689      	mov	r9, r1
 8009526:	dd13      	ble.n	8009550 <_strtod_l+0x3d8>
 8009528:	4b76      	ldr	r3, [pc, #472]	; (8009704 <_strtod_l+0x58c>)
 800952a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800952e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009532:	f7f7 f881 	bl	8000638 <__aeabi_dmul>
 8009536:	4680      	mov	r8, r0
 8009538:	4650      	mov	r0, sl
 800953a:	4689      	mov	r9, r1
 800953c:	f7f7 f802 	bl	8000544 <__aeabi_ui2d>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4640      	mov	r0, r8
 8009546:	4649      	mov	r1, r9
 8009548:	f7f6 fec0 	bl	80002cc <__adddf3>
 800954c:	4680      	mov	r8, r0
 800954e:	4689      	mov	r9, r1
 8009550:	2e0f      	cmp	r6, #15
 8009552:	dc38      	bgt.n	80095c6 <_strtod_l+0x44e>
 8009554:	9b08      	ldr	r3, [sp, #32]
 8009556:	2b00      	cmp	r3, #0
 8009558:	f43f ae49 	beq.w	80091ee <_strtod_l+0x76>
 800955c:	dd24      	ble.n	80095a8 <_strtod_l+0x430>
 800955e:	2b16      	cmp	r3, #22
 8009560:	dc0b      	bgt.n	800957a <_strtod_l+0x402>
 8009562:	4968      	ldr	r1, [pc, #416]	; (8009704 <_strtod_l+0x58c>)
 8009564:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800956c:	4642      	mov	r2, r8
 800956e:	464b      	mov	r3, r9
 8009570:	f7f7 f862 	bl	8000638 <__aeabi_dmul>
 8009574:	4680      	mov	r8, r0
 8009576:	4689      	mov	r9, r1
 8009578:	e639      	b.n	80091ee <_strtod_l+0x76>
 800957a:	9a08      	ldr	r2, [sp, #32]
 800957c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009580:	4293      	cmp	r3, r2
 8009582:	db20      	blt.n	80095c6 <_strtod_l+0x44e>
 8009584:	4c5f      	ldr	r4, [pc, #380]	; (8009704 <_strtod_l+0x58c>)
 8009586:	f1c6 060f 	rsb	r6, r6, #15
 800958a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800958e:	4642      	mov	r2, r8
 8009590:	464b      	mov	r3, r9
 8009592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009596:	f7f7 f84f 	bl	8000638 <__aeabi_dmul>
 800959a:	9b08      	ldr	r3, [sp, #32]
 800959c:	1b9e      	subs	r6, r3, r6
 800959e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80095a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095a6:	e7e3      	b.n	8009570 <_strtod_l+0x3f8>
 80095a8:	9b08      	ldr	r3, [sp, #32]
 80095aa:	3316      	adds	r3, #22
 80095ac:	db0b      	blt.n	80095c6 <_strtod_l+0x44e>
 80095ae:	9b05      	ldr	r3, [sp, #20]
 80095b0:	1bdf      	subs	r7, r3, r7
 80095b2:	4b54      	ldr	r3, [pc, #336]	; (8009704 <_strtod_l+0x58c>)
 80095b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80095b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095bc:	4640      	mov	r0, r8
 80095be:	4649      	mov	r1, r9
 80095c0:	f7f7 f964 	bl	800088c <__aeabi_ddiv>
 80095c4:	e7d6      	b.n	8009574 <_strtod_l+0x3fc>
 80095c6:	9b08      	ldr	r3, [sp, #32]
 80095c8:	1b75      	subs	r5, r6, r5
 80095ca:	441d      	add	r5, r3
 80095cc:	2d00      	cmp	r5, #0
 80095ce:	dd70      	ble.n	80096b2 <_strtod_l+0x53a>
 80095d0:	f015 030f 	ands.w	r3, r5, #15
 80095d4:	d00a      	beq.n	80095ec <_strtod_l+0x474>
 80095d6:	494b      	ldr	r1, [pc, #300]	; (8009704 <_strtod_l+0x58c>)
 80095d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095dc:	4642      	mov	r2, r8
 80095de:	464b      	mov	r3, r9
 80095e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095e4:	f7f7 f828 	bl	8000638 <__aeabi_dmul>
 80095e8:	4680      	mov	r8, r0
 80095ea:	4689      	mov	r9, r1
 80095ec:	f035 050f 	bics.w	r5, r5, #15
 80095f0:	d04d      	beq.n	800968e <_strtod_l+0x516>
 80095f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80095f6:	dd22      	ble.n	800963e <_strtod_l+0x4c6>
 80095f8:	2500      	movs	r5, #0
 80095fa:	46ab      	mov	fp, r5
 80095fc:	9509      	str	r5, [sp, #36]	; 0x24
 80095fe:	9505      	str	r5, [sp, #20]
 8009600:	2322      	movs	r3, #34	; 0x22
 8009602:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800970c <_strtod_l+0x594>
 8009606:	6023      	str	r3, [r4, #0]
 8009608:	f04f 0800 	mov.w	r8, #0
 800960c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960e:	2b00      	cmp	r3, #0
 8009610:	f43f aded 	beq.w	80091ee <_strtod_l+0x76>
 8009614:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009616:	4620      	mov	r0, r4
 8009618:	f7ff f924 	bl	8008864 <_Bfree>
 800961c:	9905      	ldr	r1, [sp, #20]
 800961e:	4620      	mov	r0, r4
 8009620:	f7ff f920 	bl	8008864 <_Bfree>
 8009624:	4659      	mov	r1, fp
 8009626:	4620      	mov	r0, r4
 8009628:	f7ff f91c 	bl	8008864 <_Bfree>
 800962c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800962e:	4620      	mov	r0, r4
 8009630:	f7ff f918 	bl	8008864 <_Bfree>
 8009634:	4629      	mov	r1, r5
 8009636:	4620      	mov	r0, r4
 8009638:	f7ff f914 	bl	8008864 <_Bfree>
 800963c:	e5d7      	b.n	80091ee <_strtod_l+0x76>
 800963e:	4b32      	ldr	r3, [pc, #200]	; (8009708 <_strtod_l+0x590>)
 8009640:	9304      	str	r3, [sp, #16]
 8009642:	2300      	movs	r3, #0
 8009644:	112d      	asrs	r5, r5, #4
 8009646:	4640      	mov	r0, r8
 8009648:	4649      	mov	r1, r9
 800964a:	469a      	mov	sl, r3
 800964c:	2d01      	cmp	r5, #1
 800964e:	dc21      	bgt.n	8009694 <_strtod_l+0x51c>
 8009650:	b10b      	cbz	r3, 8009656 <_strtod_l+0x4de>
 8009652:	4680      	mov	r8, r0
 8009654:	4689      	mov	r9, r1
 8009656:	492c      	ldr	r1, [pc, #176]	; (8009708 <_strtod_l+0x590>)
 8009658:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800965c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009660:	4642      	mov	r2, r8
 8009662:	464b      	mov	r3, r9
 8009664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009668:	f7f6 ffe6 	bl	8000638 <__aeabi_dmul>
 800966c:	4b27      	ldr	r3, [pc, #156]	; (800970c <_strtod_l+0x594>)
 800966e:	460a      	mov	r2, r1
 8009670:	400b      	ands	r3, r1
 8009672:	4927      	ldr	r1, [pc, #156]	; (8009710 <_strtod_l+0x598>)
 8009674:	428b      	cmp	r3, r1
 8009676:	4680      	mov	r8, r0
 8009678:	d8be      	bhi.n	80095f8 <_strtod_l+0x480>
 800967a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800967e:	428b      	cmp	r3, r1
 8009680:	bf86      	itte	hi
 8009682:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009714 <_strtod_l+0x59c>
 8009686:	f04f 38ff 	movhi.w	r8, #4294967295
 800968a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800968e:	2300      	movs	r3, #0
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	e07b      	b.n	800978c <_strtod_l+0x614>
 8009694:	07ea      	lsls	r2, r5, #31
 8009696:	d505      	bpl.n	80096a4 <_strtod_l+0x52c>
 8009698:	9b04      	ldr	r3, [sp, #16]
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 ffcb 	bl	8000638 <__aeabi_dmul>
 80096a2:	2301      	movs	r3, #1
 80096a4:	9a04      	ldr	r2, [sp, #16]
 80096a6:	3208      	adds	r2, #8
 80096a8:	f10a 0a01 	add.w	sl, sl, #1
 80096ac:	106d      	asrs	r5, r5, #1
 80096ae:	9204      	str	r2, [sp, #16]
 80096b0:	e7cc      	b.n	800964c <_strtod_l+0x4d4>
 80096b2:	d0ec      	beq.n	800968e <_strtod_l+0x516>
 80096b4:	426d      	negs	r5, r5
 80096b6:	f015 020f 	ands.w	r2, r5, #15
 80096ba:	d00a      	beq.n	80096d2 <_strtod_l+0x55a>
 80096bc:	4b11      	ldr	r3, [pc, #68]	; (8009704 <_strtod_l+0x58c>)
 80096be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096c2:	4640      	mov	r0, r8
 80096c4:	4649      	mov	r1, r9
 80096c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ca:	f7f7 f8df 	bl	800088c <__aeabi_ddiv>
 80096ce:	4680      	mov	r8, r0
 80096d0:	4689      	mov	r9, r1
 80096d2:	112d      	asrs	r5, r5, #4
 80096d4:	d0db      	beq.n	800968e <_strtod_l+0x516>
 80096d6:	2d1f      	cmp	r5, #31
 80096d8:	dd1e      	ble.n	8009718 <_strtod_l+0x5a0>
 80096da:	2500      	movs	r5, #0
 80096dc:	46ab      	mov	fp, r5
 80096de:	9509      	str	r5, [sp, #36]	; 0x24
 80096e0:	9505      	str	r5, [sp, #20]
 80096e2:	2322      	movs	r3, #34	; 0x22
 80096e4:	f04f 0800 	mov.w	r8, #0
 80096e8:	f04f 0900 	mov.w	r9, #0
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	e78d      	b.n	800960c <_strtod_l+0x494>
 80096f0:	0800cb15 	.word	0x0800cb15
 80096f4:	0800cd3c 	.word	0x0800cd3c
 80096f8:	0800cb0d 	.word	0x0800cb0d
 80096fc:	0800cb44 	.word	0x0800cb44
 8009700:	0800cecd 	.word	0x0800cecd
 8009704:	0800cc50 	.word	0x0800cc50
 8009708:	0800cc28 	.word	0x0800cc28
 800970c:	7ff00000 	.word	0x7ff00000
 8009710:	7ca00000 	.word	0x7ca00000
 8009714:	7fefffff 	.word	0x7fefffff
 8009718:	f015 0310 	ands.w	r3, r5, #16
 800971c:	bf18      	it	ne
 800971e:	236a      	movne	r3, #106	; 0x6a
 8009720:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009ac4 <_strtod_l+0x94c>
 8009724:	9304      	str	r3, [sp, #16]
 8009726:	4640      	mov	r0, r8
 8009728:	4649      	mov	r1, r9
 800972a:	2300      	movs	r3, #0
 800972c:	07ea      	lsls	r2, r5, #31
 800972e:	d504      	bpl.n	800973a <_strtod_l+0x5c2>
 8009730:	e9da 2300 	ldrd	r2, r3, [sl]
 8009734:	f7f6 ff80 	bl	8000638 <__aeabi_dmul>
 8009738:	2301      	movs	r3, #1
 800973a:	106d      	asrs	r5, r5, #1
 800973c:	f10a 0a08 	add.w	sl, sl, #8
 8009740:	d1f4      	bne.n	800972c <_strtod_l+0x5b4>
 8009742:	b10b      	cbz	r3, 8009748 <_strtod_l+0x5d0>
 8009744:	4680      	mov	r8, r0
 8009746:	4689      	mov	r9, r1
 8009748:	9b04      	ldr	r3, [sp, #16]
 800974a:	b1bb      	cbz	r3, 800977c <_strtod_l+0x604>
 800974c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009750:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009754:	2b00      	cmp	r3, #0
 8009756:	4649      	mov	r1, r9
 8009758:	dd10      	ble.n	800977c <_strtod_l+0x604>
 800975a:	2b1f      	cmp	r3, #31
 800975c:	f340 811e 	ble.w	800999c <_strtod_l+0x824>
 8009760:	2b34      	cmp	r3, #52	; 0x34
 8009762:	bfde      	ittt	le
 8009764:	f04f 33ff 	movle.w	r3, #4294967295
 8009768:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800976c:	4093      	lslle	r3, r2
 800976e:	f04f 0800 	mov.w	r8, #0
 8009772:	bfcc      	ite	gt
 8009774:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009778:	ea03 0901 	andle.w	r9, r3, r1
 800977c:	2200      	movs	r2, #0
 800977e:	2300      	movs	r3, #0
 8009780:	4640      	mov	r0, r8
 8009782:	4649      	mov	r1, r9
 8009784:	f7f7 f9c0 	bl	8000b08 <__aeabi_dcmpeq>
 8009788:	2800      	cmp	r0, #0
 800978a:	d1a6      	bne.n	80096da <_strtod_l+0x562>
 800978c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009792:	4633      	mov	r3, r6
 8009794:	465a      	mov	r2, fp
 8009796:	4620      	mov	r0, r4
 8009798:	f7ff f8cc 	bl	8008934 <__s2b>
 800979c:	9009      	str	r0, [sp, #36]	; 0x24
 800979e:	2800      	cmp	r0, #0
 80097a0:	f43f af2a 	beq.w	80095f8 <_strtod_l+0x480>
 80097a4:	9a08      	ldr	r2, [sp, #32]
 80097a6:	9b05      	ldr	r3, [sp, #20]
 80097a8:	2a00      	cmp	r2, #0
 80097aa:	eba3 0307 	sub.w	r3, r3, r7
 80097ae:	bfa8      	it	ge
 80097b0:	2300      	movge	r3, #0
 80097b2:	930c      	str	r3, [sp, #48]	; 0x30
 80097b4:	2500      	movs	r5, #0
 80097b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80097ba:	9312      	str	r3, [sp, #72]	; 0x48
 80097bc:	46ab      	mov	fp, r5
 80097be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c0:	4620      	mov	r0, r4
 80097c2:	6859      	ldr	r1, [r3, #4]
 80097c4:	f7ff f80e 	bl	80087e4 <_Balloc>
 80097c8:	9005      	str	r0, [sp, #20]
 80097ca:	2800      	cmp	r0, #0
 80097cc:	f43f af18 	beq.w	8009600 <_strtod_l+0x488>
 80097d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d2:	691a      	ldr	r2, [r3, #16]
 80097d4:	3202      	adds	r2, #2
 80097d6:	f103 010c 	add.w	r1, r3, #12
 80097da:	0092      	lsls	r2, r2, #2
 80097dc:	300c      	adds	r0, #12
 80097de:	f000 fd87 	bl	800a2f0 <memcpy>
 80097e2:	ec49 8b10 	vmov	d0, r8, r9
 80097e6:	aa18      	add	r2, sp, #96	; 0x60
 80097e8:	a917      	add	r1, sp, #92	; 0x5c
 80097ea:	4620      	mov	r0, r4
 80097ec:	f7ff fbd6 	bl	8008f9c <__d2b>
 80097f0:	ec49 8b18 	vmov	d8, r8, r9
 80097f4:	9016      	str	r0, [sp, #88]	; 0x58
 80097f6:	2800      	cmp	r0, #0
 80097f8:	f43f af02 	beq.w	8009600 <_strtod_l+0x488>
 80097fc:	2101      	movs	r1, #1
 80097fe:	4620      	mov	r0, r4
 8009800:	f7ff f930 	bl	8008a64 <__i2b>
 8009804:	4683      	mov	fp, r0
 8009806:	2800      	cmp	r0, #0
 8009808:	f43f aefa 	beq.w	8009600 <_strtod_l+0x488>
 800980c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800980e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009810:	2e00      	cmp	r6, #0
 8009812:	bfab      	itete	ge
 8009814:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009816:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009818:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800981a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800981e:	bfac      	ite	ge
 8009820:	eb06 0a03 	addge.w	sl, r6, r3
 8009824:	1b9f      	sublt	r7, r3, r6
 8009826:	9b04      	ldr	r3, [sp, #16]
 8009828:	1af6      	subs	r6, r6, r3
 800982a:	4416      	add	r6, r2
 800982c:	4ba0      	ldr	r3, [pc, #640]	; (8009ab0 <_strtod_l+0x938>)
 800982e:	3e01      	subs	r6, #1
 8009830:	429e      	cmp	r6, r3
 8009832:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009836:	f280 80c4 	bge.w	80099c2 <_strtod_l+0x84a>
 800983a:	1b9b      	subs	r3, r3, r6
 800983c:	2b1f      	cmp	r3, #31
 800983e:	eba2 0203 	sub.w	r2, r2, r3
 8009842:	f04f 0101 	mov.w	r1, #1
 8009846:	f300 80b0 	bgt.w	80099aa <_strtod_l+0x832>
 800984a:	fa01 f303 	lsl.w	r3, r1, r3
 800984e:	930e      	str	r3, [sp, #56]	; 0x38
 8009850:	2300      	movs	r3, #0
 8009852:	930d      	str	r3, [sp, #52]	; 0x34
 8009854:	eb0a 0602 	add.w	r6, sl, r2
 8009858:	9b04      	ldr	r3, [sp, #16]
 800985a:	45b2      	cmp	sl, r6
 800985c:	4417      	add	r7, r2
 800985e:	441f      	add	r7, r3
 8009860:	4653      	mov	r3, sl
 8009862:	bfa8      	it	ge
 8009864:	4633      	movge	r3, r6
 8009866:	42bb      	cmp	r3, r7
 8009868:	bfa8      	it	ge
 800986a:	463b      	movge	r3, r7
 800986c:	2b00      	cmp	r3, #0
 800986e:	bfc2      	ittt	gt
 8009870:	1af6      	subgt	r6, r6, r3
 8009872:	1aff      	subgt	r7, r7, r3
 8009874:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800987a:	2b00      	cmp	r3, #0
 800987c:	dd17      	ble.n	80098ae <_strtod_l+0x736>
 800987e:	4659      	mov	r1, fp
 8009880:	461a      	mov	r2, r3
 8009882:	4620      	mov	r0, r4
 8009884:	f7ff f9ae 	bl	8008be4 <__pow5mult>
 8009888:	4683      	mov	fp, r0
 800988a:	2800      	cmp	r0, #0
 800988c:	f43f aeb8 	beq.w	8009600 <_strtod_l+0x488>
 8009890:	4601      	mov	r1, r0
 8009892:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009894:	4620      	mov	r0, r4
 8009896:	f7ff f8fb 	bl	8008a90 <__multiply>
 800989a:	900b      	str	r0, [sp, #44]	; 0x2c
 800989c:	2800      	cmp	r0, #0
 800989e:	f43f aeaf 	beq.w	8009600 <_strtod_l+0x488>
 80098a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80098a4:	4620      	mov	r0, r4
 80098a6:	f7fe ffdd 	bl	8008864 <_Bfree>
 80098aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ac:	9316      	str	r3, [sp, #88]	; 0x58
 80098ae:	2e00      	cmp	r6, #0
 80098b0:	f300 808c 	bgt.w	80099cc <_strtod_l+0x854>
 80098b4:	9b08      	ldr	r3, [sp, #32]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	dd08      	ble.n	80098cc <_strtod_l+0x754>
 80098ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098bc:	9905      	ldr	r1, [sp, #20]
 80098be:	4620      	mov	r0, r4
 80098c0:	f7ff f990 	bl	8008be4 <__pow5mult>
 80098c4:	9005      	str	r0, [sp, #20]
 80098c6:	2800      	cmp	r0, #0
 80098c8:	f43f ae9a 	beq.w	8009600 <_strtod_l+0x488>
 80098cc:	2f00      	cmp	r7, #0
 80098ce:	dd08      	ble.n	80098e2 <_strtod_l+0x76a>
 80098d0:	9905      	ldr	r1, [sp, #20]
 80098d2:	463a      	mov	r2, r7
 80098d4:	4620      	mov	r0, r4
 80098d6:	f7ff f9df 	bl	8008c98 <__lshift>
 80098da:	9005      	str	r0, [sp, #20]
 80098dc:	2800      	cmp	r0, #0
 80098de:	f43f ae8f 	beq.w	8009600 <_strtod_l+0x488>
 80098e2:	f1ba 0f00 	cmp.w	sl, #0
 80098e6:	dd08      	ble.n	80098fa <_strtod_l+0x782>
 80098e8:	4659      	mov	r1, fp
 80098ea:	4652      	mov	r2, sl
 80098ec:	4620      	mov	r0, r4
 80098ee:	f7ff f9d3 	bl	8008c98 <__lshift>
 80098f2:	4683      	mov	fp, r0
 80098f4:	2800      	cmp	r0, #0
 80098f6:	f43f ae83 	beq.w	8009600 <_strtod_l+0x488>
 80098fa:	9a05      	ldr	r2, [sp, #20]
 80098fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80098fe:	4620      	mov	r0, r4
 8009900:	f7ff fa52 	bl	8008da8 <__mdiff>
 8009904:	4605      	mov	r5, r0
 8009906:	2800      	cmp	r0, #0
 8009908:	f43f ae7a 	beq.w	8009600 <_strtod_l+0x488>
 800990c:	68c3      	ldr	r3, [r0, #12]
 800990e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009910:	2300      	movs	r3, #0
 8009912:	60c3      	str	r3, [r0, #12]
 8009914:	4659      	mov	r1, fp
 8009916:	f7ff fa2b 	bl	8008d70 <__mcmp>
 800991a:	2800      	cmp	r0, #0
 800991c:	da60      	bge.n	80099e0 <_strtod_l+0x868>
 800991e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009920:	ea53 0308 	orrs.w	r3, r3, r8
 8009924:	f040 8084 	bne.w	8009a30 <_strtod_l+0x8b8>
 8009928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800992c:	2b00      	cmp	r3, #0
 800992e:	d17f      	bne.n	8009a30 <_strtod_l+0x8b8>
 8009930:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009934:	0d1b      	lsrs	r3, r3, #20
 8009936:	051b      	lsls	r3, r3, #20
 8009938:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800993c:	d978      	bls.n	8009a30 <_strtod_l+0x8b8>
 800993e:	696b      	ldr	r3, [r5, #20]
 8009940:	b913      	cbnz	r3, 8009948 <_strtod_l+0x7d0>
 8009942:	692b      	ldr	r3, [r5, #16]
 8009944:	2b01      	cmp	r3, #1
 8009946:	dd73      	ble.n	8009a30 <_strtod_l+0x8b8>
 8009948:	4629      	mov	r1, r5
 800994a:	2201      	movs	r2, #1
 800994c:	4620      	mov	r0, r4
 800994e:	f7ff f9a3 	bl	8008c98 <__lshift>
 8009952:	4659      	mov	r1, fp
 8009954:	4605      	mov	r5, r0
 8009956:	f7ff fa0b 	bl	8008d70 <__mcmp>
 800995a:	2800      	cmp	r0, #0
 800995c:	dd68      	ble.n	8009a30 <_strtod_l+0x8b8>
 800995e:	9904      	ldr	r1, [sp, #16]
 8009960:	4a54      	ldr	r2, [pc, #336]	; (8009ab4 <_strtod_l+0x93c>)
 8009962:	464b      	mov	r3, r9
 8009964:	2900      	cmp	r1, #0
 8009966:	f000 8084 	beq.w	8009a72 <_strtod_l+0x8fa>
 800996a:	ea02 0109 	and.w	r1, r2, r9
 800996e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009972:	dc7e      	bgt.n	8009a72 <_strtod_l+0x8fa>
 8009974:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009978:	f77f aeb3 	ble.w	80096e2 <_strtod_l+0x56a>
 800997c:	4b4e      	ldr	r3, [pc, #312]	; (8009ab8 <_strtod_l+0x940>)
 800997e:	4640      	mov	r0, r8
 8009980:	4649      	mov	r1, r9
 8009982:	2200      	movs	r2, #0
 8009984:	f7f6 fe58 	bl	8000638 <__aeabi_dmul>
 8009988:	4b4a      	ldr	r3, [pc, #296]	; (8009ab4 <_strtod_l+0x93c>)
 800998a:	400b      	ands	r3, r1
 800998c:	4680      	mov	r8, r0
 800998e:	4689      	mov	r9, r1
 8009990:	2b00      	cmp	r3, #0
 8009992:	f47f ae3f 	bne.w	8009614 <_strtod_l+0x49c>
 8009996:	2322      	movs	r3, #34	; 0x22
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	e63b      	b.n	8009614 <_strtod_l+0x49c>
 800999c:	f04f 32ff 	mov.w	r2, #4294967295
 80099a0:	fa02 f303 	lsl.w	r3, r2, r3
 80099a4:	ea03 0808 	and.w	r8, r3, r8
 80099a8:	e6e8      	b.n	800977c <_strtod_l+0x604>
 80099aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80099ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80099b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80099b6:	36e2      	adds	r6, #226	; 0xe2
 80099b8:	fa01 f306 	lsl.w	r3, r1, r6
 80099bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80099c0:	e748      	b.n	8009854 <_strtod_l+0x6dc>
 80099c2:	2100      	movs	r1, #0
 80099c4:	2301      	movs	r3, #1
 80099c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80099ca:	e743      	b.n	8009854 <_strtod_l+0x6dc>
 80099cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80099ce:	4632      	mov	r2, r6
 80099d0:	4620      	mov	r0, r4
 80099d2:	f7ff f961 	bl	8008c98 <__lshift>
 80099d6:	9016      	str	r0, [sp, #88]	; 0x58
 80099d8:	2800      	cmp	r0, #0
 80099da:	f47f af6b 	bne.w	80098b4 <_strtod_l+0x73c>
 80099de:	e60f      	b.n	8009600 <_strtod_l+0x488>
 80099e0:	46ca      	mov	sl, r9
 80099e2:	d171      	bne.n	8009ac8 <_strtod_l+0x950>
 80099e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099ea:	b352      	cbz	r2, 8009a42 <_strtod_l+0x8ca>
 80099ec:	4a33      	ldr	r2, [pc, #204]	; (8009abc <_strtod_l+0x944>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d12a      	bne.n	8009a48 <_strtod_l+0x8d0>
 80099f2:	9b04      	ldr	r3, [sp, #16]
 80099f4:	4641      	mov	r1, r8
 80099f6:	b1fb      	cbz	r3, 8009a38 <_strtod_l+0x8c0>
 80099f8:	4b2e      	ldr	r3, [pc, #184]	; (8009ab4 <_strtod_l+0x93c>)
 80099fa:	ea09 0303 	and.w	r3, r9, r3
 80099fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009a02:	f04f 32ff 	mov.w	r2, #4294967295
 8009a06:	d81a      	bhi.n	8009a3e <_strtod_l+0x8c6>
 8009a08:	0d1b      	lsrs	r3, r3, #20
 8009a0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a12:	4299      	cmp	r1, r3
 8009a14:	d118      	bne.n	8009a48 <_strtod_l+0x8d0>
 8009a16:	4b2a      	ldr	r3, [pc, #168]	; (8009ac0 <_strtod_l+0x948>)
 8009a18:	459a      	cmp	sl, r3
 8009a1a:	d102      	bne.n	8009a22 <_strtod_l+0x8aa>
 8009a1c:	3101      	adds	r1, #1
 8009a1e:	f43f adef 	beq.w	8009600 <_strtod_l+0x488>
 8009a22:	4b24      	ldr	r3, [pc, #144]	; (8009ab4 <_strtod_l+0x93c>)
 8009a24:	ea0a 0303 	and.w	r3, sl, r3
 8009a28:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009a2c:	f04f 0800 	mov.w	r8, #0
 8009a30:	9b04      	ldr	r3, [sp, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1a2      	bne.n	800997c <_strtod_l+0x804>
 8009a36:	e5ed      	b.n	8009614 <_strtod_l+0x49c>
 8009a38:	f04f 33ff 	mov.w	r3, #4294967295
 8009a3c:	e7e9      	b.n	8009a12 <_strtod_l+0x89a>
 8009a3e:	4613      	mov	r3, r2
 8009a40:	e7e7      	b.n	8009a12 <_strtod_l+0x89a>
 8009a42:	ea53 0308 	orrs.w	r3, r3, r8
 8009a46:	d08a      	beq.n	800995e <_strtod_l+0x7e6>
 8009a48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a4a:	b1e3      	cbz	r3, 8009a86 <_strtod_l+0x90e>
 8009a4c:	ea13 0f0a 	tst.w	r3, sl
 8009a50:	d0ee      	beq.n	8009a30 <_strtod_l+0x8b8>
 8009a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a54:	9a04      	ldr	r2, [sp, #16]
 8009a56:	4640      	mov	r0, r8
 8009a58:	4649      	mov	r1, r9
 8009a5a:	b1c3      	cbz	r3, 8009a8e <_strtod_l+0x916>
 8009a5c:	f7ff fb6f 	bl	800913e <sulp>
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	ec51 0b18 	vmov	r0, r1, d8
 8009a68:	f7f6 fc30 	bl	80002cc <__adddf3>
 8009a6c:	4680      	mov	r8, r0
 8009a6e:	4689      	mov	r9, r1
 8009a70:	e7de      	b.n	8009a30 <_strtod_l+0x8b8>
 8009a72:	4013      	ands	r3, r2
 8009a74:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009a78:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009a7c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009a80:	f04f 38ff 	mov.w	r8, #4294967295
 8009a84:	e7d4      	b.n	8009a30 <_strtod_l+0x8b8>
 8009a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a88:	ea13 0f08 	tst.w	r3, r8
 8009a8c:	e7e0      	b.n	8009a50 <_strtod_l+0x8d8>
 8009a8e:	f7ff fb56 	bl	800913e <sulp>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	ec51 0b18 	vmov	r0, r1, d8
 8009a9a:	f7f6 fc15 	bl	80002c8 <__aeabi_dsub>
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	4680      	mov	r8, r0
 8009aa4:	4689      	mov	r9, r1
 8009aa6:	f7f7 f82f 	bl	8000b08 <__aeabi_dcmpeq>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	d0c0      	beq.n	8009a30 <_strtod_l+0x8b8>
 8009aae:	e618      	b.n	80096e2 <_strtod_l+0x56a>
 8009ab0:	fffffc02 	.word	0xfffffc02
 8009ab4:	7ff00000 	.word	0x7ff00000
 8009ab8:	39500000 	.word	0x39500000
 8009abc:	000fffff 	.word	0x000fffff
 8009ac0:	7fefffff 	.word	0x7fefffff
 8009ac4:	0800cd50 	.word	0x0800cd50
 8009ac8:	4659      	mov	r1, fp
 8009aca:	4628      	mov	r0, r5
 8009acc:	f7ff fac0 	bl	8009050 <__ratio>
 8009ad0:	ec57 6b10 	vmov	r6, r7, d0
 8009ad4:	ee10 0a10 	vmov	r0, s0
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ade:	4639      	mov	r1, r7
 8009ae0:	f7f7 f826 	bl	8000b30 <__aeabi_dcmple>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d071      	beq.n	8009bcc <_strtod_l+0xa54>
 8009ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d17c      	bne.n	8009be8 <_strtod_l+0xa70>
 8009aee:	f1b8 0f00 	cmp.w	r8, #0
 8009af2:	d15a      	bne.n	8009baa <_strtod_l+0xa32>
 8009af4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d15d      	bne.n	8009bb8 <_strtod_l+0xa40>
 8009afc:	4b90      	ldr	r3, [pc, #576]	; (8009d40 <_strtod_l+0xbc8>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	4630      	mov	r0, r6
 8009b02:	4639      	mov	r1, r7
 8009b04:	f7f7 f80a 	bl	8000b1c <__aeabi_dcmplt>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d15c      	bne.n	8009bc6 <_strtod_l+0xa4e>
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	4639      	mov	r1, r7
 8009b10:	4b8c      	ldr	r3, [pc, #560]	; (8009d44 <_strtod_l+0xbcc>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	f7f6 fd90 	bl	8000638 <__aeabi_dmul>
 8009b18:	4606      	mov	r6, r0
 8009b1a:	460f      	mov	r7, r1
 8009b1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009b20:	9606      	str	r6, [sp, #24]
 8009b22:	9307      	str	r3, [sp, #28]
 8009b24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009b2c:	4b86      	ldr	r3, [pc, #536]	; (8009d48 <_strtod_l+0xbd0>)
 8009b2e:	ea0a 0303 	and.w	r3, sl, r3
 8009b32:	930d      	str	r3, [sp, #52]	; 0x34
 8009b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b36:	4b85      	ldr	r3, [pc, #532]	; (8009d4c <_strtod_l+0xbd4>)
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	f040 8090 	bne.w	8009c5e <_strtod_l+0xae6>
 8009b3e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009b42:	ec49 8b10 	vmov	d0, r8, r9
 8009b46:	f7ff f9b9 	bl	8008ebc <__ulp>
 8009b4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b4e:	ec51 0b10 	vmov	r0, r1, d0
 8009b52:	f7f6 fd71 	bl	8000638 <__aeabi_dmul>
 8009b56:	4642      	mov	r2, r8
 8009b58:	464b      	mov	r3, r9
 8009b5a:	f7f6 fbb7 	bl	80002cc <__adddf3>
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4979      	ldr	r1, [pc, #484]	; (8009d48 <_strtod_l+0xbd0>)
 8009b62:	4a7b      	ldr	r2, [pc, #492]	; (8009d50 <_strtod_l+0xbd8>)
 8009b64:	4019      	ands	r1, r3
 8009b66:	4291      	cmp	r1, r2
 8009b68:	4680      	mov	r8, r0
 8009b6a:	d944      	bls.n	8009bf6 <_strtod_l+0xa7e>
 8009b6c:	ee18 2a90 	vmov	r2, s17
 8009b70:	4b78      	ldr	r3, [pc, #480]	; (8009d54 <_strtod_l+0xbdc>)
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d104      	bne.n	8009b80 <_strtod_l+0xa08>
 8009b76:	ee18 3a10 	vmov	r3, s16
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	f43f ad40 	beq.w	8009600 <_strtod_l+0x488>
 8009b80:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009d54 <_strtod_l+0xbdc>
 8009b84:	f04f 38ff 	mov.w	r8, #4294967295
 8009b88:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f7fe fe6a 	bl	8008864 <_Bfree>
 8009b90:	9905      	ldr	r1, [sp, #20]
 8009b92:	4620      	mov	r0, r4
 8009b94:	f7fe fe66 	bl	8008864 <_Bfree>
 8009b98:	4659      	mov	r1, fp
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f7fe fe62 	bl	8008864 <_Bfree>
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f7fe fe5e 	bl	8008864 <_Bfree>
 8009ba8:	e609      	b.n	80097be <_strtod_l+0x646>
 8009baa:	f1b8 0f01 	cmp.w	r8, #1
 8009bae:	d103      	bne.n	8009bb8 <_strtod_l+0xa40>
 8009bb0:	f1b9 0f00 	cmp.w	r9, #0
 8009bb4:	f43f ad95 	beq.w	80096e2 <_strtod_l+0x56a>
 8009bb8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009d10 <_strtod_l+0xb98>
 8009bbc:	4f60      	ldr	r7, [pc, #384]	; (8009d40 <_strtod_l+0xbc8>)
 8009bbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009bc2:	2600      	movs	r6, #0
 8009bc4:	e7ae      	b.n	8009b24 <_strtod_l+0x9ac>
 8009bc6:	4f5f      	ldr	r7, [pc, #380]	; (8009d44 <_strtod_l+0xbcc>)
 8009bc8:	2600      	movs	r6, #0
 8009bca:	e7a7      	b.n	8009b1c <_strtod_l+0x9a4>
 8009bcc:	4b5d      	ldr	r3, [pc, #372]	; (8009d44 <_strtod_l+0xbcc>)
 8009bce:	4630      	mov	r0, r6
 8009bd0:	4639      	mov	r1, r7
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f7f6 fd30 	bl	8000638 <__aeabi_dmul>
 8009bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bda:	4606      	mov	r6, r0
 8009bdc:	460f      	mov	r7, r1
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d09c      	beq.n	8009b1c <_strtod_l+0x9a4>
 8009be2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009be6:	e79d      	b.n	8009b24 <_strtod_l+0x9ac>
 8009be8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009d18 <_strtod_l+0xba0>
 8009bec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009bf0:	ec57 6b17 	vmov	r6, r7, d7
 8009bf4:	e796      	b.n	8009b24 <_strtod_l+0x9ac>
 8009bf6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009bfa:	9b04      	ldr	r3, [sp, #16]
 8009bfc:	46ca      	mov	sl, r9
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1c2      	bne.n	8009b88 <_strtod_l+0xa10>
 8009c02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c08:	0d1b      	lsrs	r3, r3, #20
 8009c0a:	051b      	lsls	r3, r3, #20
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d1bb      	bne.n	8009b88 <_strtod_l+0xa10>
 8009c10:	4630      	mov	r0, r6
 8009c12:	4639      	mov	r1, r7
 8009c14:	f7f7 f870 	bl	8000cf8 <__aeabi_d2lz>
 8009c18:	f7f6 fce0 	bl	80005dc <__aeabi_l2d>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4630      	mov	r0, r6
 8009c22:	4639      	mov	r1, r7
 8009c24:	f7f6 fb50 	bl	80002c8 <__aeabi_dsub>
 8009c28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c2e:	ea43 0308 	orr.w	r3, r3, r8
 8009c32:	4313      	orrs	r3, r2
 8009c34:	4606      	mov	r6, r0
 8009c36:	460f      	mov	r7, r1
 8009c38:	d054      	beq.n	8009ce4 <_strtod_l+0xb6c>
 8009c3a:	a339      	add	r3, pc, #228	; (adr r3, 8009d20 <_strtod_l+0xba8>)
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f7f6 ff6c 	bl	8000b1c <__aeabi_dcmplt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f47f ace5 	bne.w	8009614 <_strtod_l+0x49c>
 8009c4a:	a337      	add	r3, pc, #220	; (adr r3, 8009d28 <_strtod_l+0xbb0>)
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	4630      	mov	r0, r6
 8009c52:	4639      	mov	r1, r7
 8009c54:	f7f6 ff80 	bl	8000b58 <__aeabi_dcmpgt>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d095      	beq.n	8009b88 <_strtod_l+0xa10>
 8009c5c:	e4da      	b.n	8009614 <_strtod_l+0x49c>
 8009c5e:	9b04      	ldr	r3, [sp, #16]
 8009c60:	b333      	cbz	r3, 8009cb0 <_strtod_l+0xb38>
 8009c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c68:	d822      	bhi.n	8009cb0 <_strtod_l+0xb38>
 8009c6a:	a331      	add	r3, pc, #196	; (adr r3, 8009d30 <_strtod_l+0xbb8>)
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	4630      	mov	r0, r6
 8009c72:	4639      	mov	r1, r7
 8009c74:	f7f6 ff5c 	bl	8000b30 <__aeabi_dcmple>
 8009c78:	b1a0      	cbz	r0, 8009ca4 <_strtod_l+0xb2c>
 8009c7a:	4639      	mov	r1, r7
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	f7f6 ffb3 	bl	8000be8 <__aeabi_d2uiz>
 8009c82:	2801      	cmp	r0, #1
 8009c84:	bf38      	it	cc
 8009c86:	2001      	movcc	r0, #1
 8009c88:	f7f6 fc5c 	bl	8000544 <__aeabi_ui2d>
 8009c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c8e:	4606      	mov	r6, r0
 8009c90:	460f      	mov	r7, r1
 8009c92:	bb23      	cbnz	r3, 8009cde <_strtod_l+0xb66>
 8009c94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c98:	9010      	str	r0, [sp, #64]	; 0x40
 8009c9a:	9311      	str	r3, [sp, #68]	; 0x44
 8009c9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ca0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ca6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ca8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009cac:	1a9b      	subs	r3, r3, r2
 8009cae:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cb0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009cb4:	eeb0 0a48 	vmov.f32	s0, s16
 8009cb8:	eef0 0a68 	vmov.f32	s1, s17
 8009cbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009cc0:	f7ff f8fc 	bl	8008ebc <__ulp>
 8009cc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009cc8:	ec53 2b10 	vmov	r2, r3, d0
 8009ccc:	f7f6 fcb4 	bl	8000638 <__aeabi_dmul>
 8009cd0:	ec53 2b18 	vmov	r2, r3, d8
 8009cd4:	f7f6 fafa 	bl	80002cc <__adddf3>
 8009cd8:	4680      	mov	r8, r0
 8009cda:	4689      	mov	r9, r1
 8009cdc:	e78d      	b.n	8009bfa <_strtod_l+0xa82>
 8009cde:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009ce2:	e7db      	b.n	8009c9c <_strtod_l+0xb24>
 8009ce4:	a314      	add	r3, pc, #80	; (adr r3, 8009d38 <_strtod_l+0xbc0>)
 8009ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cea:	f7f6 ff17 	bl	8000b1c <__aeabi_dcmplt>
 8009cee:	e7b3      	b.n	8009c58 <_strtod_l+0xae0>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8009cf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009cf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cf8:	6013      	str	r3, [r2, #0]
 8009cfa:	f7ff ba7c 	b.w	80091f6 <_strtod_l+0x7e>
 8009cfe:	2a65      	cmp	r2, #101	; 0x65
 8009d00:	f43f ab75 	beq.w	80093ee <_strtod_l+0x276>
 8009d04:	2a45      	cmp	r2, #69	; 0x45
 8009d06:	f43f ab72 	beq.w	80093ee <_strtod_l+0x276>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f7ff bbaa 	b.w	8009464 <_strtod_l+0x2ec>
 8009d10:	00000000 	.word	0x00000000
 8009d14:	bff00000 	.word	0xbff00000
 8009d18:	00000000 	.word	0x00000000
 8009d1c:	3ff00000 	.word	0x3ff00000
 8009d20:	94a03595 	.word	0x94a03595
 8009d24:	3fdfffff 	.word	0x3fdfffff
 8009d28:	35afe535 	.word	0x35afe535
 8009d2c:	3fe00000 	.word	0x3fe00000
 8009d30:	ffc00000 	.word	0xffc00000
 8009d34:	41dfffff 	.word	0x41dfffff
 8009d38:	94a03595 	.word	0x94a03595
 8009d3c:	3fcfffff 	.word	0x3fcfffff
 8009d40:	3ff00000 	.word	0x3ff00000
 8009d44:	3fe00000 	.word	0x3fe00000
 8009d48:	7ff00000 	.word	0x7ff00000
 8009d4c:	7fe00000 	.word	0x7fe00000
 8009d50:	7c9fffff 	.word	0x7c9fffff
 8009d54:	7fefffff 	.word	0x7fefffff

08009d58 <_strtod_r>:
 8009d58:	4b01      	ldr	r3, [pc, #4]	; (8009d60 <_strtod_r+0x8>)
 8009d5a:	f7ff ba0d 	b.w	8009178 <_strtod_l>
 8009d5e:	bf00      	nop
 8009d60:	2000007c 	.word	0x2000007c

08009d64 <_strtol_l.constprop.0>:
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d6a:	d001      	beq.n	8009d70 <_strtol_l.constprop.0+0xc>
 8009d6c:	2b24      	cmp	r3, #36	; 0x24
 8009d6e:	d906      	bls.n	8009d7e <_strtol_l.constprop.0+0x1a>
 8009d70:	f7fd fd8c 	bl	800788c <__errno>
 8009d74:	2316      	movs	r3, #22
 8009d76:	6003      	str	r3, [r0, #0]
 8009d78:	2000      	movs	r0, #0
 8009d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009e64 <_strtol_l.constprop.0+0x100>
 8009d82:	460d      	mov	r5, r1
 8009d84:	462e      	mov	r6, r5
 8009d86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d8a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009d8e:	f017 0708 	ands.w	r7, r7, #8
 8009d92:	d1f7      	bne.n	8009d84 <_strtol_l.constprop.0+0x20>
 8009d94:	2c2d      	cmp	r4, #45	; 0x2d
 8009d96:	d132      	bne.n	8009dfe <_strtol_l.constprop.0+0x9a>
 8009d98:	782c      	ldrb	r4, [r5, #0]
 8009d9a:	2701      	movs	r7, #1
 8009d9c:	1cb5      	adds	r5, r6, #2
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d05b      	beq.n	8009e5a <_strtol_l.constprop.0+0xf6>
 8009da2:	2b10      	cmp	r3, #16
 8009da4:	d109      	bne.n	8009dba <_strtol_l.constprop.0+0x56>
 8009da6:	2c30      	cmp	r4, #48	; 0x30
 8009da8:	d107      	bne.n	8009dba <_strtol_l.constprop.0+0x56>
 8009daa:	782c      	ldrb	r4, [r5, #0]
 8009dac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009db0:	2c58      	cmp	r4, #88	; 0x58
 8009db2:	d14d      	bne.n	8009e50 <_strtol_l.constprop.0+0xec>
 8009db4:	786c      	ldrb	r4, [r5, #1]
 8009db6:	2310      	movs	r3, #16
 8009db8:	3502      	adds	r5, #2
 8009dba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009dbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8009dc2:	f04f 0e00 	mov.w	lr, #0
 8009dc6:	fbb8 f9f3 	udiv	r9, r8, r3
 8009dca:	4676      	mov	r6, lr
 8009dcc:	fb03 8a19 	mls	sl, r3, r9, r8
 8009dd0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009dd4:	f1bc 0f09 	cmp.w	ip, #9
 8009dd8:	d816      	bhi.n	8009e08 <_strtol_l.constprop.0+0xa4>
 8009dda:	4664      	mov	r4, ip
 8009ddc:	42a3      	cmp	r3, r4
 8009dde:	dd24      	ble.n	8009e2a <_strtol_l.constprop.0+0xc6>
 8009de0:	f1be 3fff 	cmp.w	lr, #4294967295
 8009de4:	d008      	beq.n	8009df8 <_strtol_l.constprop.0+0x94>
 8009de6:	45b1      	cmp	r9, r6
 8009de8:	d31c      	bcc.n	8009e24 <_strtol_l.constprop.0+0xc0>
 8009dea:	d101      	bne.n	8009df0 <_strtol_l.constprop.0+0x8c>
 8009dec:	45a2      	cmp	sl, r4
 8009dee:	db19      	blt.n	8009e24 <_strtol_l.constprop.0+0xc0>
 8009df0:	fb06 4603 	mla	r6, r6, r3, r4
 8009df4:	f04f 0e01 	mov.w	lr, #1
 8009df8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dfc:	e7e8      	b.n	8009dd0 <_strtol_l.constprop.0+0x6c>
 8009dfe:	2c2b      	cmp	r4, #43	; 0x2b
 8009e00:	bf04      	itt	eq
 8009e02:	782c      	ldrbeq	r4, [r5, #0]
 8009e04:	1cb5      	addeq	r5, r6, #2
 8009e06:	e7ca      	b.n	8009d9e <_strtol_l.constprop.0+0x3a>
 8009e08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009e0c:	f1bc 0f19 	cmp.w	ip, #25
 8009e10:	d801      	bhi.n	8009e16 <_strtol_l.constprop.0+0xb2>
 8009e12:	3c37      	subs	r4, #55	; 0x37
 8009e14:	e7e2      	b.n	8009ddc <_strtol_l.constprop.0+0x78>
 8009e16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009e1a:	f1bc 0f19 	cmp.w	ip, #25
 8009e1e:	d804      	bhi.n	8009e2a <_strtol_l.constprop.0+0xc6>
 8009e20:	3c57      	subs	r4, #87	; 0x57
 8009e22:	e7db      	b.n	8009ddc <_strtol_l.constprop.0+0x78>
 8009e24:	f04f 3eff 	mov.w	lr, #4294967295
 8009e28:	e7e6      	b.n	8009df8 <_strtol_l.constprop.0+0x94>
 8009e2a:	f1be 3fff 	cmp.w	lr, #4294967295
 8009e2e:	d105      	bne.n	8009e3c <_strtol_l.constprop.0+0xd8>
 8009e30:	2322      	movs	r3, #34	; 0x22
 8009e32:	6003      	str	r3, [r0, #0]
 8009e34:	4646      	mov	r6, r8
 8009e36:	b942      	cbnz	r2, 8009e4a <_strtol_l.constprop.0+0xe6>
 8009e38:	4630      	mov	r0, r6
 8009e3a:	e79e      	b.n	8009d7a <_strtol_l.constprop.0+0x16>
 8009e3c:	b107      	cbz	r7, 8009e40 <_strtol_l.constprop.0+0xdc>
 8009e3e:	4276      	negs	r6, r6
 8009e40:	2a00      	cmp	r2, #0
 8009e42:	d0f9      	beq.n	8009e38 <_strtol_l.constprop.0+0xd4>
 8009e44:	f1be 0f00 	cmp.w	lr, #0
 8009e48:	d000      	beq.n	8009e4c <_strtol_l.constprop.0+0xe8>
 8009e4a:	1e69      	subs	r1, r5, #1
 8009e4c:	6011      	str	r1, [r2, #0]
 8009e4e:	e7f3      	b.n	8009e38 <_strtol_l.constprop.0+0xd4>
 8009e50:	2430      	movs	r4, #48	; 0x30
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1b1      	bne.n	8009dba <_strtol_l.constprop.0+0x56>
 8009e56:	2308      	movs	r3, #8
 8009e58:	e7af      	b.n	8009dba <_strtol_l.constprop.0+0x56>
 8009e5a:	2c30      	cmp	r4, #48	; 0x30
 8009e5c:	d0a5      	beq.n	8009daa <_strtol_l.constprop.0+0x46>
 8009e5e:	230a      	movs	r3, #10
 8009e60:	e7ab      	b.n	8009dba <_strtol_l.constprop.0+0x56>
 8009e62:	bf00      	nop
 8009e64:	0800cd79 	.word	0x0800cd79

08009e68 <_strtol_r>:
 8009e68:	f7ff bf7c 	b.w	8009d64 <_strtol_l.constprop.0>

08009e6c <__ssputs_r>:
 8009e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e70:	688e      	ldr	r6, [r1, #8]
 8009e72:	461f      	mov	r7, r3
 8009e74:	42be      	cmp	r6, r7
 8009e76:	680b      	ldr	r3, [r1, #0]
 8009e78:	4682      	mov	sl, r0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	4690      	mov	r8, r2
 8009e7e:	d82c      	bhi.n	8009eda <__ssputs_r+0x6e>
 8009e80:	898a      	ldrh	r2, [r1, #12]
 8009e82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e86:	d026      	beq.n	8009ed6 <__ssputs_r+0x6a>
 8009e88:	6965      	ldr	r5, [r4, #20]
 8009e8a:	6909      	ldr	r1, [r1, #16]
 8009e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e90:	eba3 0901 	sub.w	r9, r3, r1
 8009e94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e98:	1c7b      	adds	r3, r7, #1
 8009e9a:	444b      	add	r3, r9
 8009e9c:	106d      	asrs	r5, r5, #1
 8009e9e:	429d      	cmp	r5, r3
 8009ea0:	bf38      	it	cc
 8009ea2:	461d      	movcc	r5, r3
 8009ea4:	0553      	lsls	r3, r2, #21
 8009ea6:	d527      	bpl.n	8009ef8 <__ssputs_r+0x8c>
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	f7fe fc0f 	bl	80086cc <_malloc_r>
 8009eae:	4606      	mov	r6, r0
 8009eb0:	b360      	cbz	r0, 8009f0c <__ssputs_r+0xa0>
 8009eb2:	6921      	ldr	r1, [r4, #16]
 8009eb4:	464a      	mov	r2, r9
 8009eb6:	f000 fa1b 	bl	800a2f0 <memcpy>
 8009eba:	89a3      	ldrh	r3, [r4, #12]
 8009ebc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ec4:	81a3      	strh	r3, [r4, #12]
 8009ec6:	6126      	str	r6, [r4, #16]
 8009ec8:	6165      	str	r5, [r4, #20]
 8009eca:	444e      	add	r6, r9
 8009ecc:	eba5 0509 	sub.w	r5, r5, r9
 8009ed0:	6026      	str	r6, [r4, #0]
 8009ed2:	60a5      	str	r5, [r4, #8]
 8009ed4:	463e      	mov	r6, r7
 8009ed6:	42be      	cmp	r6, r7
 8009ed8:	d900      	bls.n	8009edc <__ssputs_r+0x70>
 8009eda:	463e      	mov	r6, r7
 8009edc:	6820      	ldr	r0, [r4, #0]
 8009ede:	4632      	mov	r2, r6
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	f000 f9c9 	bl	800a278 <memmove>
 8009ee6:	68a3      	ldr	r3, [r4, #8]
 8009ee8:	1b9b      	subs	r3, r3, r6
 8009eea:	60a3      	str	r3, [r4, #8]
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	4433      	add	r3, r6
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef8:	462a      	mov	r2, r5
 8009efa:	f000 fdae 	bl	800aa5a <_realloc_r>
 8009efe:	4606      	mov	r6, r0
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d1e0      	bne.n	8009ec6 <__ssputs_r+0x5a>
 8009f04:	6921      	ldr	r1, [r4, #16]
 8009f06:	4650      	mov	r0, sl
 8009f08:	f7fe fb6c 	bl	80085e4 <_free_r>
 8009f0c:	230c      	movs	r3, #12
 8009f0e:	f8ca 3000 	str.w	r3, [sl]
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1e:	e7e9      	b.n	8009ef4 <__ssputs_r+0x88>

08009f20 <_svfiprintf_r>:
 8009f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f24:	4698      	mov	r8, r3
 8009f26:	898b      	ldrh	r3, [r1, #12]
 8009f28:	061b      	lsls	r3, r3, #24
 8009f2a:	b09d      	sub	sp, #116	; 0x74
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	460d      	mov	r5, r1
 8009f30:	4614      	mov	r4, r2
 8009f32:	d50e      	bpl.n	8009f52 <_svfiprintf_r+0x32>
 8009f34:	690b      	ldr	r3, [r1, #16]
 8009f36:	b963      	cbnz	r3, 8009f52 <_svfiprintf_r+0x32>
 8009f38:	2140      	movs	r1, #64	; 0x40
 8009f3a:	f7fe fbc7 	bl	80086cc <_malloc_r>
 8009f3e:	6028      	str	r0, [r5, #0]
 8009f40:	6128      	str	r0, [r5, #16]
 8009f42:	b920      	cbnz	r0, 8009f4e <_svfiprintf_r+0x2e>
 8009f44:	230c      	movs	r3, #12
 8009f46:	603b      	str	r3, [r7, #0]
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4c:	e0d0      	b.n	800a0f0 <_svfiprintf_r+0x1d0>
 8009f4e:	2340      	movs	r3, #64	; 0x40
 8009f50:	616b      	str	r3, [r5, #20]
 8009f52:	2300      	movs	r3, #0
 8009f54:	9309      	str	r3, [sp, #36]	; 0x24
 8009f56:	2320      	movs	r3, #32
 8009f58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f60:	2330      	movs	r3, #48	; 0x30
 8009f62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a108 <_svfiprintf_r+0x1e8>
 8009f66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f6a:	f04f 0901 	mov.w	r9, #1
 8009f6e:	4623      	mov	r3, r4
 8009f70:	469a      	mov	sl, r3
 8009f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f76:	b10a      	cbz	r2, 8009f7c <_svfiprintf_r+0x5c>
 8009f78:	2a25      	cmp	r2, #37	; 0x25
 8009f7a:	d1f9      	bne.n	8009f70 <_svfiprintf_r+0x50>
 8009f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f80:	d00b      	beq.n	8009f9a <_svfiprintf_r+0x7a>
 8009f82:	465b      	mov	r3, fp
 8009f84:	4622      	mov	r2, r4
 8009f86:	4629      	mov	r1, r5
 8009f88:	4638      	mov	r0, r7
 8009f8a:	f7ff ff6f 	bl	8009e6c <__ssputs_r>
 8009f8e:	3001      	adds	r0, #1
 8009f90:	f000 80a9 	beq.w	800a0e6 <_svfiprintf_r+0x1c6>
 8009f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f96:	445a      	add	r2, fp
 8009f98:	9209      	str	r2, [sp, #36]	; 0x24
 8009f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f000 80a1 	beq.w	800a0e6 <_svfiprintf_r+0x1c6>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fae:	f10a 0a01 	add.w	sl, sl, #1
 8009fb2:	9304      	str	r3, [sp, #16]
 8009fb4:	9307      	str	r3, [sp, #28]
 8009fb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fba:	931a      	str	r3, [sp, #104]	; 0x68
 8009fbc:	4654      	mov	r4, sl
 8009fbe:	2205      	movs	r2, #5
 8009fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc4:	4850      	ldr	r0, [pc, #320]	; (800a108 <_svfiprintf_r+0x1e8>)
 8009fc6:	f7f6 f923 	bl	8000210 <memchr>
 8009fca:	9a04      	ldr	r2, [sp, #16]
 8009fcc:	b9d8      	cbnz	r0, 800a006 <_svfiprintf_r+0xe6>
 8009fce:	06d0      	lsls	r0, r2, #27
 8009fd0:	bf44      	itt	mi
 8009fd2:	2320      	movmi	r3, #32
 8009fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fd8:	0711      	lsls	r1, r2, #28
 8009fda:	bf44      	itt	mi
 8009fdc:	232b      	movmi	r3, #43	; 0x2b
 8009fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe8:	d015      	beq.n	800a016 <_svfiprintf_r+0xf6>
 8009fea:	9a07      	ldr	r2, [sp, #28]
 8009fec:	4654      	mov	r4, sl
 8009fee:	2000      	movs	r0, #0
 8009ff0:	f04f 0c0a 	mov.w	ip, #10
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ffa:	3b30      	subs	r3, #48	; 0x30
 8009ffc:	2b09      	cmp	r3, #9
 8009ffe:	d94d      	bls.n	800a09c <_svfiprintf_r+0x17c>
 800a000:	b1b0      	cbz	r0, 800a030 <_svfiprintf_r+0x110>
 800a002:	9207      	str	r2, [sp, #28]
 800a004:	e014      	b.n	800a030 <_svfiprintf_r+0x110>
 800a006:	eba0 0308 	sub.w	r3, r0, r8
 800a00a:	fa09 f303 	lsl.w	r3, r9, r3
 800a00e:	4313      	orrs	r3, r2
 800a010:	9304      	str	r3, [sp, #16]
 800a012:	46a2      	mov	sl, r4
 800a014:	e7d2      	b.n	8009fbc <_svfiprintf_r+0x9c>
 800a016:	9b03      	ldr	r3, [sp, #12]
 800a018:	1d19      	adds	r1, r3, #4
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	9103      	str	r1, [sp, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	bfbb      	ittet	lt
 800a022:	425b      	neglt	r3, r3
 800a024:	f042 0202 	orrlt.w	r2, r2, #2
 800a028:	9307      	strge	r3, [sp, #28]
 800a02a:	9307      	strlt	r3, [sp, #28]
 800a02c:	bfb8      	it	lt
 800a02e:	9204      	strlt	r2, [sp, #16]
 800a030:	7823      	ldrb	r3, [r4, #0]
 800a032:	2b2e      	cmp	r3, #46	; 0x2e
 800a034:	d10c      	bne.n	800a050 <_svfiprintf_r+0x130>
 800a036:	7863      	ldrb	r3, [r4, #1]
 800a038:	2b2a      	cmp	r3, #42	; 0x2a
 800a03a:	d134      	bne.n	800a0a6 <_svfiprintf_r+0x186>
 800a03c:	9b03      	ldr	r3, [sp, #12]
 800a03e:	1d1a      	adds	r2, r3, #4
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	9203      	str	r2, [sp, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	bfb8      	it	lt
 800a048:	f04f 33ff 	movlt.w	r3, #4294967295
 800a04c:	3402      	adds	r4, #2
 800a04e:	9305      	str	r3, [sp, #20]
 800a050:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a118 <_svfiprintf_r+0x1f8>
 800a054:	7821      	ldrb	r1, [r4, #0]
 800a056:	2203      	movs	r2, #3
 800a058:	4650      	mov	r0, sl
 800a05a:	f7f6 f8d9 	bl	8000210 <memchr>
 800a05e:	b138      	cbz	r0, 800a070 <_svfiprintf_r+0x150>
 800a060:	9b04      	ldr	r3, [sp, #16]
 800a062:	eba0 000a 	sub.w	r0, r0, sl
 800a066:	2240      	movs	r2, #64	; 0x40
 800a068:	4082      	lsls	r2, r0
 800a06a:	4313      	orrs	r3, r2
 800a06c:	3401      	adds	r4, #1
 800a06e:	9304      	str	r3, [sp, #16]
 800a070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a074:	4825      	ldr	r0, [pc, #148]	; (800a10c <_svfiprintf_r+0x1ec>)
 800a076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a07a:	2206      	movs	r2, #6
 800a07c:	f7f6 f8c8 	bl	8000210 <memchr>
 800a080:	2800      	cmp	r0, #0
 800a082:	d038      	beq.n	800a0f6 <_svfiprintf_r+0x1d6>
 800a084:	4b22      	ldr	r3, [pc, #136]	; (800a110 <_svfiprintf_r+0x1f0>)
 800a086:	bb1b      	cbnz	r3, 800a0d0 <_svfiprintf_r+0x1b0>
 800a088:	9b03      	ldr	r3, [sp, #12]
 800a08a:	3307      	adds	r3, #7
 800a08c:	f023 0307 	bic.w	r3, r3, #7
 800a090:	3308      	adds	r3, #8
 800a092:	9303      	str	r3, [sp, #12]
 800a094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a096:	4433      	add	r3, r6
 800a098:	9309      	str	r3, [sp, #36]	; 0x24
 800a09a:	e768      	b.n	8009f6e <_svfiprintf_r+0x4e>
 800a09c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0a0:	460c      	mov	r4, r1
 800a0a2:	2001      	movs	r0, #1
 800a0a4:	e7a6      	b.n	8009ff4 <_svfiprintf_r+0xd4>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	3401      	adds	r4, #1
 800a0aa:	9305      	str	r3, [sp, #20]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f04f 0c0a 	mov.w	ip, #10
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0b8:	3a30      	subs	r2, #48	; 0x30
 800a0ba:	2a09      	cmp	r2, #9
 800a0bc:	d903      	bls.n	800a0c6 <_svfiprintf_r+0x1a6>
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0c6      	beq.n	800a050 <_svfiprintf_r+0x130>
 800a0c2:	9105      	str	r1, [sp, #20]
 800a0c4:	e7c4      	b.n	800a050 <_svfiprintf_r+0x130>
 800a0c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e7f0      	b.n	800a0b2 <_svfiprintf_r+0x192>
 800a0d0:	ab03      	add	r3, sp, #12
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	462a      	mov	r2, r5
 800a0d6:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <_svfiprintf_r+0x1f4>)
 800a0d8:	a904      	add	r1, sp, #16
 800a0da:	4638      	mov	r0, r7
 800a0dc:	f7fc fc66 	bl	80069ac <_printf_float>
 800a0e0:	1c42      	adds	r2, r0, #1
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	d1d6      	bne.n	800a094 <_svfiprintf_r+0x174>
 800a0e6:	89ab      	ldrh	r3, [r5, #12]
 800a0e8:	065b      	lsls	r3, r3, #25
 800a0ea:	f53f af2d 	bmi.w	8009f48 <_svfiprintf_r+0x28>
 800a0ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0f0:	b01d      	add	sp, #116	; 0x74
 800a0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f6:	ab03      	add	r3, sp, #12
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	462a      	mov	r2, r5
 800a0fc:	4b05      	ldr	r3, [pc, #20]	; (800a114 <_svfiprintf_r+0x1f4>)
 800a0fe:	a904      	add	r1, sp, #16
 800a100:	4638      	mov	r0, r7
 800a102:	f7fc fef7 	bl	8006ef4 <_printf_i>
 800a106:	e7eb      	b.n	800a0e0 <_svfiprintf_r+0x1c0>
 800a108:	0800ce79 	.word	0x0800ce79
 800a10c:	0800ce83 	.word	0x0800ce83
 800a110:	080069ad 	.word	0x080069ad
 800a114:	08009e6d 	.word	0x08009e6d
 800a118:	0800ce7f 	.word	0x0800ce7f

0800a11c <__sflush_r>:
 800a11c:	898a      	ldrh	r2, [r1, #12]
 800a11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a122:	4605      	mov	r5, r0
 800a124:	0710      	lsls	r0, r2, #28
 800a126:	460c      	mov	r4, r1
 800a128:	d458      	bmi.n	800a1dc <__sflush_r+0xc0>
 800a12a:	684b      	ldr	r3, [r1, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dc05      	bgt.n	800a13c <__sflush_r+0x20>
 800a130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a132:	2b00      	cmp	r3, #0
 800a134:	dc02      	bgt.n	800a13c <__sflush_r+0x20>
 800a136:	2000      	movs	r0, #0
 800a138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a13c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a13e:	2e00      	cmp	r6, #0
 800a140:	d0f9      	beq.n	800a136 <__sflush_r+0x1a>
 800a142:	2300      	movs	r3, #0
 800a144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a148:	682f      	ldr	r7, [r5, #0]
 800a14a:	6a21      	ldr	r1, [r4, #32]
 800a14c:	602b      	str	r3, [r5, #0]
 800a14e:	d032      	beq.n	800a1b6 <__sflush_r+0x9a>
 800a150:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	075a      	lsls	r2, r3, #29
 800a156:	d505      	bpl.n	800a164 <__sflush_r+0x48>
 800a158:	6863      	ldr	r3, [r4, #4]
 800a15a:	1ac0      	subs	r0, r0, r3
 800a15c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a15e:	b10b      	cbz	r3, 800a164 <__sflush_r+0x48>
 800a160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a162:	1ac0      	subs	r0, r0, r3
 800a164:	2300      	movs	r3, #0
 800a166:	4602      	mov	r2, r0
 800a168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a16a:	6a21      	ldr	r1, [r4, #32]
 800a16c:	4628      	mov	r0, r5
 800a16e:	47b0      	blx	r6
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	d106      	bne.n	800a184 <__sflush_r+0x68>
 800a176:	6829      	ldr	r1, [r5, #0]
 800a178:	291d      	cmp	r1, #29
 800a17a:	d82b      	bhi.n	800a1d4 <__sflush_r+0xb8>
 800a17c:	4a29      	ldr	r2, [pc, #164]	; (800a224 <__sflush_r+0x108>)
 800a17e:	410a      	asrs	r2, r1
 800a180:	07d6      	lsls	r6, r2, #31
 800a182:	d427      	bmi.n	800a1d4 <__sflush_r+0xb8>
 800a184:	2200      	movs	r2, #0
 800a186:	6062      	str	r2, [r4, #4]
 800a188:	04d9      	lsls	r1, r3, #19
 800a18a:	6922      	ldr	r2, [r4, #16]
 800a18c:	6022      	str	r2, [r4, #0]
 800a18e:	d504      	bpl.n	800a19a <__sflush_r+0x7e>
 800a190:	1c42      	adds	r2, r0, #1
 800a192:	d101      	bne.n	800a198 <__sflush_r+0x7c>
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	b903      	cbnz	r3, 800a19a <__sflush_r+0x7e>
 800a198:	6560      	str	r0, [r4, #84]	; 0x54
 800a19a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a19c:	602f      	str	r7, [r5, #0]
 800a19e:	2900      	cmp	r1, #0
 800a1a0:	d0c9      	beq.n	800a136 <__sflush_r+0x1a>
 800a1a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1a6:	4299      	cmp	r1, r3
 800a1a8:	d002      	beq.n	800a1b0 <__sflush_r+0x94>
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f7fe fa1a 	bl	80085e4 <_free_r>
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	6360      	str	r0, [r4, #52]	; 0x34
 800a1b4:	e7c0      	b.n	800a138 <__sflush_r+0x1c>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	47b0      	blx	r6
 800a1bc:	1c41      	adds	r1, r0, #1
 800a1be:	d1c8      	bne.n	800a152 <__sflush_r+0x36>
 800a1c0:	682b      	ldr	r3, [r5, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0c5      	beq.n	800a152 <__sflush_r+0x36>
 800a1c6:	2b1d      	cmp	r3, #29
 800a1c8:	d001      	beq.n	800a1ce <__sflush_r+0xb2>
 800a1ca:	2b16      	cmp	r3, #22
 800a1cc:	d101      	bne.n	800a1d2 <__sflush_r+0xb6>
 800a1ce:	602f      	str	r7, [r5, #0]
 800a1d0:	e7b1      	b.n	800a136 <__sflush_r+0x1a>
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	e7ad      	b.n	800a138 <__sflush_r+0x1c>
 800a1dc:	690f      	ldr	r7, [r1, #16]
 800a1de:	2f00      	cmp	r7, #0
 800a1e0:	d0a9      	beq.n	800a136 <__sflush_r+0x1a>
 800a1e2:	0793      	lsls	r3, r2, #30
 800a1e4:	680e      	ldr	r6, [r1, #0]
 800a1e6:	bf08      	it	eq
 800a1e8:	694b      	ldreq	r3, [r1, #20]
 800a1ea:	600f      	str	r7, [r1, #0]
 800a1ec:	bf18      	it	ne
 800a1ee:	2300      	movne	r3, #0
 800a1f0:	eba6 0807 	sub.w	r8, r6, r7
 800a1f4:	608b      	str	r3, [r1, #8]
 800a1f6:	f1b8 0f00 	cmp.w	r8, #0
 800a1fa:	dd9c      	ble.n	800a136 <__sflush_r+0x1a>
 800a1fc:	6a21      	ldr	r1, [r4, #32]
 800a1fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a200:	4643      	mov	r3, r8
 800a202:	463a      	mov	r2, r7
 800a204:	4628      	mov	r0, r5
 800a206:	47b0      	blx	r6
 800a208:	2800      	cmp	r0, #0
 800a20a:	dc06      	bgt.n	800a21a <__sflush_r+0xfe>
 800a20c:	89a3      	ldrh	r3, [r4, #12]
 800a20e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a212:	81a3      	strh	r3, [r4, #12]
 800a214:	f04f 30ff 	mov.w	r0, #4294967295
 800a218:	e78e      	b.n	800a138 <__sflush_r+0x1c>
 800a21a:	4407      	add	r7, r0
 800a21c:	eba8 0800 	sub.w	r8, r8, r0
 800a220:	e7e9      	b.n	800a1f6 <__sflush_r+0xda>
 800a222:	bf00      	nop
 800a224:	dfbffffe 	.word	0xdfbffffe

0800a228 <_fflush_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	690b      	ldr	r3, [r1, #16]
 800a22c:	4605      	mov	r5, r0
 800a22e:	460c      	mov	r4, r1
 800a230:	b913      	cbnz	r3, 800a238 <_fflush_r+0x10>
 800a232:	2500      	movs	r5, #0
 800a234:	4628      	mov	r0, r5
 800a236:	bd38      	pop	{r3, r4, r5, pc}
 800a238:	b118      	cbz	r0, 800a242 <_fflush_r+0x1a>
 800a23a:	6a03      	ldr	r3, [r0, #32]
 800a23c:	b90b      	cbnz	r3, 800a242 <_fflush_r+0x1a>
 800a23e:	f7fd fa05 	bl	800764c <__sinit>
 800a242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0f3      	beq.n	800a232 <_fflush_r+0xa>
 800a24a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a24c:	07d0      	lsls	r0, r2, #31
 800a24e:	d404      	bmi.n	800a25a <_fflush_r+0x32>
 800a250:	0599      	lsls	r1, r3, #22
 800a252:	d402      	bmi.n	800a25a <_fflush_r+0x32>
 800a254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a256:	f7fd fb43 	bl	80078e0 <__retarget_lock_acquire_recursive>
 800a25a:	4628      	mov	r0, r5
 800a25c:	4621      	mov	r1, r4
 800a25e:	f7ff ff5d 	bl	800a11c <__sflush_r>
 800a262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a264:	07da      	lsls	r2, r3, #31
 800a266:	4605      	mov	r5, r0
 800a268:	d4e4      	bmi.n	800a234 <_fflush_r+0xc>
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	059b      	lsls	r3, r3, #22
 800a26e:	d4e1      	bmi.n	800a234 <_fflush_r+0xc>
 800a270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a272:	f7fd fb36 	bl	80078e2 <__retarget_lock_release_recursive>
 800a276:	e7dd      	b.n	800a234 <_fflush_r+0xc>

0800a278 <memmove>:
 800a278:	4288      	cmp	r0, r1
 800a27a:	b510      	push	{r4, lr}
 800a27c:	eb01 0402 	add.w	r4, r1, r2
 800a280:	d902      	bls.n	800a288 <memmove+0x10>
 800a282:	4284      	cmp	r4, r0
 800a284:	4623      	mov	r3, r4
 800a286:	d807      	bhi.n	800a298 <memmove+0x20>
 800a288:	1e43      	subs	r3, r0, #1
 800a28a:	42a1      	cmp	r1, r4
 800a28c:	d008      	beq.n	800a2a0 <memmove+0x28>
 800a28e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a292:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a296:	e7f8      	b.n	800a28a <memmove+0x12>
 800a298:	4402      	add	r2, r0
 800a29a:	4601      	mov	r1, r0
 800a29c:	428a      	cmp	r2, r1
 800a29e:	d100      	bne.n	800a2a2 <memmove+0x2a>
 800a2a0:	bd10      	pop	{r4, pc}
 800a2a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2aa:	e7f7      	b.n	800a29c <memmove+0x24>

0800a2ac <strncmp>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	b16a      	cbz	r2, 800a2cc <strncmp+0x20>
 800a2b0:	3901      	subs	r1, #1
 800a2b2:	1884      	adds	r4, r0, r2
 800a2b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d103      	bne.n	800a2c8 <strncmp+0x1c>
 800a2c0:	42a0      	cmp	r0, r4
 800a2c2:	d001      	beq.n	800a2c8 <strncmp+0x1c>
 800a2c4:	2a00      	cmp	r2, #0
 800a2c6:	d1f5      	bne.n	800a2b4 <strncmp+0x8>
 800a2c8:	1ad0      	subs	r0, r2, r3
 800a2ca:	bd10      	pop	{r4, pc}
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	e7fc      	b.n	800a2ca <strncmp+0x1e>

0800a2d0 <_sbrk_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4d06      	ldr	r5, [pc, #24]	; (800a2ec <_sbrk_r+0x1c>)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4608      	mov	r0, r1
 800a2da:	602b      	str	r3, [r5, #0]
 800a2dc:	f7f9 f83e 	bl	800335c <_sbrk>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d102      	bne.n	800a2ea <_sbrk_r+0x1a>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	b103      	cbz	r3, 800a2ea <_sbrk_r+0x1a>
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	200005d4 	.word	0x200005d4

0800a2f0 <memcpy>:
 800a2f0:	440a      	add	r2, r1
 800a2f2:	4291      	cmp	r1, r2
 800a2f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2f8:	d100      	bne.n	800a2fc <memcpy+0xc>
 800a2fa:	4770      	bx	lr
 800a2fc:	b510      	push	{r4, lr}
 800a2fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a302:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a306:	4291      	cmp	r1, r2
 800a308:	d1f9      	bne.n	800a2fe <memcpy+0xe>
 800a30a:	bd10      	pop	{r4, pc}
 800a30c:	0000      	movs	r0, r0
	...

0800a310 <nan>:
 800a310:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a318 <nan+0x8>
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	00000000 	.word	0x00000000
 800a31c:	7ff80000 	.word	0x7ff80000

0800a320 <__assert_func>:
 800a320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a322:	4614      	mov	r4, r2
 800a324:	461a      	mov	r2, r3
 800a326:	4b09      	ldr	r3, [pc, #36]	; (800a34c <__assert_func+0x2c>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4605      	mov	r5, r0
 800a32c:	68d8      	ldr	r0, [r3, #12]
 800a32e:	b14c      	cbz	r4, 800a344 <__assert_func+0x24>
 800a330:	4b07      	ldr	r3, [pc, #28]	; (800a350 <__assert_func+0x30>)
 800a332:	9100      	str	r1, [sp, #0]
 800a334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a338:	4906      	ldr	r1, [pc, #24]	; (800a354 <__assert_func+0x34>)
 800a33a:	462b      	mov	r3, r5
 800a33c:	f000 fbca 	bl	800aad4 <fiprintf>
 800a340:	f000 fbda 	bl	800aaf8 <abort>
 800a344:	4b04      	ldr	r3, [pc, #16]	; (800a358 <__assert_func+0x38>)
 800a346:	461c      	mov	r4, r3
 800a348:	e7f3      	b.n	800a332 <__assert_func+0x12>
 800a34a:	bf00      	nop
 800a34c:	20000078 	.word	0x20000078
 800a350:	0800ce92 	.word	0x0800ce92
 800a354:	0800ce9f 	.word	0x0800ce9f
 800a358:	0800cecd 	.word	0x0800cecd

0800a35c <_calloc_r>:
 800a35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a35e:	fba1 2402 	umull	r2, r4, r1, r2
 800a362:	b94c      	cbnz	r4, 800a378 <_calloc_r+0x1c>
 800a364:	4611      	mov	r1, r2
 800a366:	9201      	str	r2, [sp, #4]
 800a368:	f7fe f9b0 	bl	80086cc <_malloc_r>
 800a36c:	9a01      	ldr	r2, [sp, #4]
 800a36e:	4605      	mov	r5, r0
 800a370:	b930      	cbnz	r0, 800a380 <_calloc_r+0x24>
 800a372:	4628      	mov	r0, r5
 800a374:	b003      	add	sp, #12
 800a376:	bd30      	pop	{r4, r5, pc}
 800a378:	220c      	movs	r2, #12
 800a37a:	6002      	str	r2, [r0, #0]
 800a37c:	2500      	movs	r5, #0
 800a37e:	e7f8      	b.n	800a372 <_calloc_r+0x16>
 800a380:	4621      	mov	r1, r4
 800a382:	f7fd fa30 	bl	80077e6 <memset>
 800a386:	e7f4      	b.n	800a372 <_calloc_r+0x16>

0800a388 <rshift>:
 800a388:	6903      	ldr	r3, [r0, #16]
 800a38a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a38e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a392:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a396:	f100 0414 	add.w	r4, r0, #20
 800a39a:	dd45      	ble.n	800a428 <rshift+0xa0>
 800a39c:	f011 011f 	ands.w	r1, r1, #31
 800a3a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3a8:	d10c      	bne.n	800a3c4 <rshift+0x3c>
 800a3aa:	f100 0710 	add.w	r7, r0, #16
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	42b1      	cmp	r1, r6
 800a3b2:	d334      	bcc.n	800a41e <rshift+0x96>
 800a3b4:	1a9b      	subs	r3, r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	1eea      	subs	r2, r5, #3
 800a3ba:	4296      	cmp	r6, r2
 800a3bc:	bf38      	it	cc
 800a3be:	2300      	movcc	r3, #0
 800a3c0:	4423      	add	r3, r4
 800a3c2:	e015      	b.n	800a3f0 <rshift+0x68>
 800a3c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3c8:	f1c1 0820 	rsb	r8, r1, #32
 800a3cc:	40cf      	lsrs	r7, r1
 800a3ce:	f105 0e04 	add.w	lr, r5, #4
 800a3d2:	46a1      	mov	r9, r4
 800a3d4:	4576      	cmp	r6, lr
 800a3d6:	46f4      	mov	ip, lr
 800a3d8:	d815      	bhi.n	800a406 <rshift+0x7e>
 800a3da:	1a9a      	subs	r2, r3, r2
 800a3dc:	0092      	lsls	r2, r2, #2
 800a3de:	3a04      	subs	r2, #4
 800a3e0:	3501      	adds	r5, #1
 800a3e2:	42ae      	cmp	r6, r5
 800a3e4:	bf38      	it	cc
 800a3e6:	2200      	movcc	r2, #0
 800a3e8:	18a3      	adds	r3, r4, r2
 800a3ea:	50a7      	str	r7, [r4, r2]
 800a3ec:	b107      	cbz	r7, 800a3f0 <rshift+0x68>
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	1b1a      	subs	r2, r3, r4
 800a3f2:	42a3      	cmp	r3, r4
 800a3f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3f8:	bf08      	it	eq
 800a3fa:	2300      	moveq	r3, #0
 800a3fc:	6102      	str	r2, [r0, #16]
 800a3fe:	bf08      	it	eq
 800a400:	6143      	streq	r3, [r0, #20]
 800a402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a406:	f8dc c000 	ldr.w	ip, [ip]
 800a40a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a40e:	ea4c 0707 	orr.w	r7, ip, r7
 800a412:	f849 7b04 	str.w	r7, [r9], #4
 800a416:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a41a:	40cf      	lsrs	r7, r1
 800a41c:	e7da      	b.n	800a3d4 <rshift+0x4c>
 800a41e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a422:	f847 cf04 	str.w	ip, [r7, #4]!
 800a426:	e7c3      	b.n	800a3b0 <rshift+0x28>
 800a428:	4623      	mov	r3, r4
 800a42a:	e7e1      	b.n	800a3f0 <rshift+0x68>

0800a42c <__hexdig_fun>:
 800a42c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a430:	2b09      	cmp	r3, #9
 800a432:	d802      	bhi.n	800a43a <__hexdig_fun+0xe>
 800a434:	3820      	subs	r0, #32
 800a436:	b2c0      	uxtb	r0, r0
 800a438:	4770      	bx	lr
 800a43a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a43e:	2b05      	cmp	r3, #5
 800a440:	d801      	bhi.n	800a446 <__hexdig_fun+0x1a>
 800a442:	3847      	subs	r0, #71	; 0x47
 800a444:	e7f7      	b.n	800a436 <__hexdig_fun+0xa>
 800a446:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a44a:	2b05      	cmp	r3, #5
 800a44c:	d801      	bhi.n	800a452 <__hexdig_fun+0x26>
 800a44e:	3827      	subs	r0, #39	; 0x27
 800a450:	e7f1      	b.n	800a436 <__hexdig_fun+0xa>
 800a452:	2000      	movs	r0, #0
 800a454:	4770      	bx	lr
	...

0800a458 <__gethex>:
 800a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	4617      	mov	r7, r2
 800a45e:	680a      	ldr	r2, [r1, #0]
 800a460:	b085      	sub	sp, #20
 800a462:	f102 0b02 	add.w	fp, r2, #2
 800a466:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a46a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a46e:	4681      	mov	r9, r0
 800a470:	468a      	mov	sl, r1
 800a472:	9302      	str	r3, [sp, #8]
 800a474:	32fe      	adds	r2, #254	; 0xfe
 800a476:	eb02 030b 	add.w	r3, r2, fp
 800a47a:	46d8      	mov	r8, fp
 800a47c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	2830      	cmp	r0, #48	; 0x30
 800a484:	d0f7      	beq.n	800a476 <__gethex+0x1e>
 800a486:	f7ff ffd1 	bl	800a42c <__hexdig_fun>
 800a48a:	4604      	mov	r4, r0
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d138      	bne.n	800a502 <__gethex+0xaa>
 800a490:	49a7      	ldr	r1, [pc, #668]	; (800a730 <__gethex+0x2d8>)
 800a492:	2201      	movs	r2, #1
 800a494:	4640      	mov	r0, r8
 800a496:	f7ff ff09 	bl	800a2ac <strncmp>
 800a49a:	4606      	mov	r6, r0
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d169      	bne.n	800a574 <__gethex+0x11c>
 800a4a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a4a4:	465d      	mov	r5, fp
 800a4a6:	f7ff ffc1 	bl	800a42c <__hexdig_fun>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d064      	beq.n	800a578 <__gethex+0x120>
 800a4ae:	465a      	mov	r2, fp
 800a4b0:	7810      	ldrb	r0, [r2, #0]
 800a4b2:	2830      	cmp	r0, #48	; 0x30
 800a4b4:	4690      	mov	r8, r2
 800a4b6:	f102 0201 	add.w	r2, r2, #1
 800a4ba:	d0f9      	beq.n	800a4b0 <__gethex+0x58>
 800a4bc:	f7ff ffb6 	bl	800a42c <__hexdig_fun>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	fab0 f480 	clz	r4, r0
 800a4c6:	0964      	lsrs	r4, r4, #5
 800a4c8:	465e      	mov	r6, fp
 800a4ca:	9301      	str	r3, [sp, #4]
 800a4cc:	4642      	mov	r2, r8
 800a4ce:	4615      	mov	r5, r2
 800a4d0:	3201      	adds	r2, #1
 800a4d2:	7828      	ldrb	r0, [r5, #0]
 800a4d4:	f7ff ffaa 	bl	800a42c <__hexdig_fun>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d1f8      	bne.n	800a4ce <__gethex+0x76>
 800a4dc:	4994      	ldr	r1, [pc, #592]	; (800a730 <__gethex+0x2d8>)
 800a4de:	2201      	movs	r2, #1
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f7ff fee3 	bl	800a2ac <strncmp>
 800a4e6:	b978      	cbnz	r0, 800a508 <__gethex+0xb0>
 800a4e8:	b946      	cbnz	r6, 800a4fc <__gethex+0xa4>
 800a4ea:	1c6e      	adds	r6, r5, #1
 800a4ec:	4632      	mov	r2, r6
 800a4ee:	4615      	mov	r5, r2
 800a4f0:	3201      	adds	r2, #1
 800a4f2:	7828      	ldrb	r0, [r5, #0]
 800a4f4:	f7ff ff9a 	bl	800a42c <__hexdig_fun>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d1f8      	bne.n	800a4ee <__gethex+0x96>
 800a4fc:	1b73      	subs	r3, r6, r5
 800a4fe:	009e      	lsls	r6, r3, #2
 800a500:	e004      	b.n	800a50c <__gethex+0xb4>
 800a502:	2400      	movs	r4, #0
 800a504:	4626      	mov	r6, r4
 800a506:	e7e1      	b.n	800a4cc <__gethex+0x74>
 800a508:	2e00      	cmp	r6, #0
 800a50a:	d1f7      	bne.n	800a4fc <__gethex+0xa4>
 800a50c:	782b      	ldrb	r3, [r5, #0]
 800a50e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a512:	2b50      	cmp	r3, #80	; 0x50
 800a514:	d13d      	bne.n	800a592 <__gethex+0x13a>
 800a516:	786b      	ldrb	r3, [r5, #1]
 800a518:	2b2b      	cmp	r3, #43	; 0x2b
 800a51a:	d02f      	beq.n	800a57c <__gethex+0x124>
 800a51c:	2b2d      	cmp	r3, #45	; 0x2d
 800a51e:	d031      	beq.n	800a584 <__gethex+0x12c>
 800a520:	1c69      	adds	r1, r5, #1
 800a522:	f04f 0b00 	mov.w	fp, #0
 800a526:	7808      	ldrb	r0, [r1, #0]
 800a528:	f7ff ff80 	bl	800a42c <__hexdig_fun>
 800a52c:	1e42      	subs	r2, r0, #1
 800a52e:	b2d2      	uxtb	r2, r2
 800a530:	2a18      	cmp	r2, #24
 800a532:	d82e      	bhi.n	800a592 <__gethex+0x13a>
 800a534:	f1a0 0210 	sub.w	r2, r0, #16
 800a538:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a53c:	f7ff ff76 	bl	800a42c <__hexdig_fun>
 800a540:	f100 3cff 	add.w	ip, r0, #4294967295
 800a544:	fa5f fc8c 	uxtb.w	ip, ip
 800a548:	f1bc 0f18 	cmp.w	ip, #24
 800a54c:	d91d      	bls.n	800a58a <__gethex+0x132>
 800a54e:	f1bb 0f00 	cmp.w	fp, #0
 800a552:	d000      	beq.n	800a556 <__gethex+0xfe>
 800a554:	4252      	negs	r2, r2
 800a556:	4416      	add	r6, r2
 800a558:	f8ca 1000 	str.w	r1, [sl]
 800a55c:	b1dc      	cbz	r4, 800a596 <__gethex+0x13e>
 800a55e:	9b01      	ldr	r3, [sp, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	bf14      	ite	ne
 800a564:	f04f 0800 	movne.w	r8, #0
 800a568:	f04f 0806 	moveq.w	r8, #6
 800a56c:	4640      	mov	r0, r8
 800a56e:	b005      	add	sp, #20
 800a570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a574:	4645      	mov	r5, r8
 800a576:	4626      	mov	r6, r4
 800a578:	2401      	movs	r4, #1
 800a57a:	e7c7      	b.n	800a50c <__gethex+0xb4>
 800a57c:	f04f 0b00 	mov.w	fp, #0
 800a580:	1ca9      	adds	r1, r5, #2
 800a582:	e7d0      	b.n	800a526 <__gethex+0xce>
 800a584:	f04f 0b01 	mov.w	fp, #1
 800a588:	e7fa      	b.n	800a580 <__gethex+0x128>
 800a58a:	230a      	movs	r3, #10
 800a58c:	fb03 0002 	mla	r0, r3, r2, r0
 800a590:	e7d0      	b.n	800a534 <__gethex+0xdc>
 800a592:	4629      	mov	r1, r5
 800a594:	e7e0      	b.n	800a558 <__gethex+0x100>
 800a596:	eba5 0308 	sub.w	r3, r5, r8
 800a59a:	3b01      	subs	r3, #1
 800a59c:	4621      	mov	r1, r4
 800a59e:	2b07      	cmp	r3, #7
 800a5a0:	dc0a      	bgt.n	800a5b8 <__gethex+0x160>
 800a5a2:	4648      	mov	r0, r9
 800a5a4:	f7fe f91e 	bl	80087e4 <_Balloc>
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	b940      	cbnz	r0, 800a5be <__gethex+0x166>
 800a5ac:	4b61      	ldr	r3, [pc, #388]	; (800a734 <__gethex+0x2dc>)
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	21e4      	movs	r1, #228	; 0xe4
 800a5b2:	4861      	ldr	r0, [pc, #388]	; (800a738 <__gethex+0x2e0>)
 800a5b4:	f7ff feb4 	bl	800a320 <__assert_func>
 800a5b8:	3101      	adds	r1, #1
 800a5ba:	105b      	asrs	r3, r3, #1
 800a5bc:	e7ef      	b.n	800a59e <__gethex+0x146>
 800a5be:	f100 0a14 	add.w	sl, r0, #20
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	495a      	ldr	r1, [pc, #360]	; (800a730 <__gethex+0x2d8>)
 800a5c6:	f8cd a004 	str.w	sl, [sp, #4]
 800a5ca:	469b      	mov	fp, r3
 800a5cc:	45a8      	cmp	r8, r5
 800a5ce:	d342      	bcc.n	800a656 <__gethex+0x1fe>
 800a5d0:	9801      	ldr	r0, [sp, #4]
 800a5d2:	f840 bb04 	str.w	fp, [r0], #4
 800a5d6:	eba0 000a 	sub.w	r0, r0, sl
 800a5da:	1080      	asrs	r0, r0, #2
 800a5dc:	6120      	str	r0, [r4, #16]
 800a5de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a5e2:	4658      	mov	r0, fp
 800a5e4:	f7fe f9f0 	bl	80089c8 <__hi0bits>
 800a5e8:	683d      	ldr	r5, [r7, #0]
 800a5ea:	eba8 0000 	sub.w	r0, r8, r0
 800a5ee:	42a8      	cmp	r0, r5
 800a5f0:	dd59      	ble.n	800a6a6 <__gethex+0x24e>
 800a5f2:	eba0 0805 	sub.w	r8, r0, r5
 800a5f6:	4641      	mov	r1, r8
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f7fe fd7f 	bl	80090fc <__any_on>
 800a5fe:	4683      	mov	fp, r0
 800a600:	b1b8      	cbz	r0, 800a632 <__gethex+0x1da>
 800a602:	f108 33ff 	add.w	r3, r8, #4294967295
 800a606:	1159      	asrs	r1, r3, #5
 800a608:	f003 021f 	and.w	r2, r3, #31
 800a60c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a610:	f04f 0b01 	mov.w	fp, #1
 800a614:	fa0b f202 	lsl.w	r2, fp, r2
 800a618:	420a      	tst	r2, r1
 800a61a:	d00a      	beq.n	800a632 <__gethex+0x1da>
 800a61c:	455b      	cmp	r3, fp
 800a61e:	dd06      	ble.n	800a62e <__gethex+0x1d6>
 800a620:	f1a8 0102 	sub.w	r1, r8, #2
 800a624:	4620      	mov	r0, r4
 800a626:	f7fe fd69 	bl	80090fc <__any_on>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d138      	bne.n	800a6a0 <__gethex+0x248>
 800a62e:	f04f 0b02 	mov.w	fp, #2
 800a632:	4641      	mov	r1, r8
 800a634:	4620      	mov	r0, r4
 800a636:	f7ff fea7 	bl	800a388 <rshift>
 800a63a:	4446      	add	r6, r8
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	42b3      	cmp	r3, r6
 800a640:	da41      	bge.n	800a6c6 <__gethex+0x26e>
 800a642:	4621      	mov	r1, r4
 800a644:	4648      	mov	r0, r9
 800a646:	f7fe f90d 	bl	8008864 <_Bfree>
 800a64a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a64c:	2300      	movs	r3, #0
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a654:	e78a      	b.n	800a56c <__gethex+0x114>
 800a656:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a65a:	2a2e      	cmp	r2, #46	; 0x2e
 800a65c:	d014      	beq.n	800a688 <__gethex+0x230>
 800a65e:	2b20      	cmp	r3, #32
 800a660:	d106      	bne.n	800a670 <__gethex+0x218>
 800a662:	9b01      	ldr	r3, [sp, #4]
 800a664:	f843 bb04 	str.w	fp, [r3], #4
 800a668:	f04f 0b00 	mov.w	fp, #0
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	465b      	mov	r3, fp
 800a670:	7828      	ldrb	r0, [r5, #0]
 800a672:	9303      	str	r3, [sp, #12]
 800a674:	f7ff feda 	bl	800a42c <__hexdig_fun>
 800a678:	9b03      	ldr	r3, [sp, #12]
 800a67a:	f000 000f 	and.w	r0, r0, #15
 800a67e:	4098      	lsls	r0, r3
 800a680:	ea4b 0b00 	orr.w	fp, fp, r0
 800a684:	3304      	adds	r3, #4
 800a686:	e7a1      	b.n	800a5cc <__gethex+0x174>
 800a688:	45a8      	cmp	r8, r5
 800a68a:	d8e8      	bhi.n	800a65e <__gethex+0x206>
 800a68c:	2201      	movs	r2, #1
 800a68e:	4628      	mov	r0, r5
 800a690:	9303      	str	r3, [sp, #12]
 800a692:	f7ff fe0b 	bl	800a2ac <strncmp>
 800a696:	4926      	ldr	r1, [pc, #152]	; (800a730 <__gethex+0x2d8>)
 800a698:	9b03      	ldr	r3, [sp, #12]
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d1df      	bne.n	800a65e <__gethex+0x206>
 800a69e:	e795      	b.n	800a5cc <__gethex+0x174>
 800a6a0:	f04f 0b03 	mov.w	fp, #3
 800a6a4:	e7c5      	b.n	800a632 <__gethex+0x1da>
 800a6a6:	da0b      	bge.n	800a6c0 <__gethex+0x268>
 800a6a8:	eba5 0800 	sub.w	r8, r5, r0
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	4642      	mov	r2, r8
 800a6b0:	4648      	mov	r0, r9
 800a6b2:	f7fe faf1 	bl	8008c98 <__lshift>
 800a6b6:	eba6 0608 	sub.w	r6, r6, r8
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	f100 0a14 	add.w	sl, r0, #20
 800a6c0:	f04f 0b00 	mov.w	fp, #0
 800a6c4:	e7ba      	b.n	800a63c <__gethex+0x1e4>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	42b3      	cmp	r3, r6
 800a6ca:	dd73      	ble.n	800a7b4 <__gethex+0x35c>
 800a6cc:	1b9e      	subs	r6, r3, r6
 800a6ce:	42b5      	cmp	r5, r6
 800a6d0:	dc34      	bgt.n	800a73c <__gethex+0x2e4>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d023      	beq.n	800a720 <__gethex+0x2c8>
 800a6d8:	2b03      	cmp	r3, #3
 800a6da:	d025      	beq.n	800a728 <__gethex+0x2d0>
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d115      	bne.n	800a70c <__gethex+0x2b4>
 800a6e0:	42b5      	cmp	r5, r6
 800a6e2:	d113      	bne.n	800a70c <__gethex+0x2b4>
 800a6e4:	2d01      	cmp	r5, #1
 800a6e6:	d10b      	bne.n	800a700 <__gethex+0x2a8>
 800a6e8:	9a02      	ldr	r2, [sp, #8]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	6123      	str	r3, [r4, #16]
 800a6f2:	f8ca 3000 	str.w	r3, [sl]
 800a6f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a6fc:	601c      	str	r4, [r3, #0]
 800a6fe:	e735      	b.n	800a56c <__gethex+0x114>
 800a700:	1e69      	subs	r1, r5, #1
 800a702:	4620      	mov	r0, r4
 800a704:	f7fe fcfa 	bl	80090fc <__any_on>
 800a708:	2800      	cmp	r0, #0
 800a70a:	d1ed      	bne.n	800a6e8 <__gethex+0x290>
 800a70c:	4621      	mov	r1, r4
 800a70e:	4648      	mov	r0, r9
 800a710:	f7fe f8a8 	bl	8008864 <_Bfree>
 800a714:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a716:	2300      	movs	r3, #0
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a71e:	e725      	b.n	800a56c <__gethex+0x114>
 800a720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1f2      	bne.n	800a70c <__gethex+0x2b4>
 800a726:	e7df      	b.n	800a6e8 <__gethex+0x290>
 800a728:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1dc      	bne.n	800a6e8 <__gethex+0x290>
 800a72e:	e7ed      	b.n	800a70c <__gethex+0x2b4>
 800a730:	0800cd24 	.word	0x0800cd24
 800a734:	0800cbbd 	.word	0x0800cbbd
 800a738:	0800cece 	.word	0x0800cece
 800a73c:	f106 38ff 	add.w	r8, r6, #4294967295
 800a740:	f1bb 0f00 	cmp.w	fp, #0
 800a744:	d133      	bne.n	800a7ae <__gethex+0x356>
 800a746:	f1b8 0f00 	cmp.w	r8, #0
 800a74a:	d004      	beq.n	800a756 <__gethex+0x2fe>
 800a74c:	4641      	mov	r1, r8
 800a74e:	4620      	mov	r0, r4
 800a750:	f7fe fcd4 	bl	80090fc <__any_on>
 800a754:	4683      	mov	fp, r0
 800a756:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a75a:	2301      	movs	r3, #1
 800a75c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a760:	f008 081f 	and.w	r8, r8, #31
 800a764:	fa03 f308 	lsl.w	r3, r3, r8
 800a768:	4213      	tst	r3, r2
 800a76a:	4631      	mov	r1, r6
 800a76c:	4620      	mov	r0, r4
 800a76e:	bf18      	it	ne
 800a770:	f04b 0b02 	orrne.w	fp, fp, #2
 800a774:	1bad      	subs	r5, r5, r6
 800a776:	f7ff fe07 	bl	800a388 <rshift>
 800a77a:	687e      	ldr	r6, [r7, #4]
 800a77c:	f04f 0802 	mov.w	r8, #2
 800a780:	f1bb 0f00 	cmp.w	fp, #0
 800a784:	d04a      	beq.n	800a81c <__gethex+0x3c4>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d016      	beq.n	800a7ba <__gethex+0x362>
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d018      	beq.n	800a7c2 <__gethex+0x36a>
 800a790:	2b01      	cmp	r3, #1
 800a792:	d109      	bne.n	800a7a8 <__gethex+0x350>
 800a794:	f01b 0f02 	tst.w	fp, #2
 800a798:	d006      	beq.n	800a7a8 <__gethex+0x350>
 800a79a:	f8da 3000 	ldr.w	r3, [sl]
 800a79e:	ea4b 0b03 	orr.w	fp, fp, r3
 800a7a2:	f01b 0f01 	tst.w	fp, #1
 800a7a6:	d10f      	bne.n	800a7c8 <__gethex+0x370>
 800a7a8:	f048 0810 	orr.w	r8, r8, #16
 800a7ac:	e036      	b.n	800a81c <__gethex+0x3c4>
 800a7ae:	f04f 0b01 	mov.w	fp, #1
 800a7b2:	e7d0      	b.n	800a756 <__gethex+0x2fe>
 800a7b4:	f04f 0801 	mov.w	r8, #1
 800a7b8:	e7e2      	b.n	800a780 <__gethex+0x328>
 800a7ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7bc:	f1c3 0301 	rsb	r3, r3, #1
 800a7c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d0ef      	beq.n	800a7a8 <__gethex+0x350>
 800a7c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7cc:	f104 0214 	add.w	r2, r4, #20
 800a7d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a7da:	2300      	movs	r3, #0
 800a7dc:	4694      	mov	ip, r2
 800a7de:	f852 1b04 	ldr.w	r1, [r2], #4
 800a7e2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a7e6:	d01e      	beq.n	800a826 <__gethex+0x3ce>
 800a7e8:	3101      	adds	r1, #1
 800a7ea:	f8cc 1000 	str.w	r1, [ip]
 800a7ee:	f1b8 0f02 	cmp.w	r8, #2
 800a7f2:	f104 0214 	add.w	r2, r4, #20
 800a7f6:	d13d      	bne.n	800a874 <__gethex+0x41c>
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	42ab      	cmp	r3, r5
 800a7fe:	d10b      	bne.n	800a818 <__gethex+0x3c0>
 800a800:	1169      	asrs	r1, r5, #5
 800a802:	2301      	movs	r3, #1
 800a804:	f005 051f 	and.w	r5, r5, #31
 800a808:	fa03 f505 	lsl.w	r5, r3, r5
 800a80c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a810:	421d      	tst	r5, r3
 800a812:	bf18      	it	ne
 800a814:	f04f 0801 	movne.w	r8, #1
 800a818:	f048 0820 	orr.w	r8, r8, #32
 800a81c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a81e:	601c      	str	r4, [r3, #0]
 800a820:	9b02      	ldr	r3, [sp, #8]
 800a822:	601e      	str	r6, [r3, #0]
 800a824:	e6a2      	b.n	800a56c <__gethex+0x114>
 800a826:	4290      	cmp	r0, r2
 800a828:	f842 3c04 	str.w	r3, [r2, #-4]
 800a82c:	d8d6      	bhi.n	800a7dc <__gethex+0x384>
 800a82e:	68a2      	ldr	r2, [r4, #8]
 800a830:	4593      	cmp	fp, r2
 800a832:	db17      	blt.n	800a864 <__gethex+0x40c>
 800a834:	6861      	ldr	r1, [r4, #4]
 800a836:	4648      	mov	r0, r9
 800a838:	3101      	adds	r1, #1
 800a83a:	f7fd ffd3 	bl	80087e4 <_Balloc>
 800a83e:	4682      	mov	sl, r0
 800a840:	b918      	cbnz	r0, 800a84a <__gethex+0x3f2>
 800a842:	4b1b      	ldr	r3, [pc, #108]	; (800a8b0 <__gethex+0x458>)
 800a844:	4602      	mov	r2, r0
 800a846:	2184      	movs	r1, #132	; 0x84
 800a848:	e6b3      	b.n	800a5b2 <__gethex+0x15a>
 800a84a:	6922      	ldr	r2, [r4, #16]
 800a84c:	3202      	adds	r2, #2
 800a84e:	f104 010c 	add.w	r1, r4, #12
 800a852:	0092      	lsls	r2, r2, #2
 800a854:	300c      	adds	r0, #12
 800a856:	f7ff fd4b 	bl	800a2f0 <memcpy>
 800a85a:	4621      	mov	r1, r4
 800a85c:	4648      	mov	r0, r9
 800a85e:	f7fe f801 	bl	8008864 <_Bfree>
 800a862:	4654      	mov	r4, sl
 800a864:	6922      	ldr	r2, [r4, #16]
 800a866:	1c51      	adds	r1, r2, #1
 800a868:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a86c:	6121      	str	r1, [r4, #16]
 800a86e:	2101      	movs	r1, #1
 800a870:	6151      	str	r1, [r2, #20]
 800a872:	e7bc      	b.n	800a7ee <__gethex+0x396>
 800a874:	6921      	ldr	r1, [r4, #16]
 800a876:	4559      	cmp	r1, fp
 800a878:	dd0b      	ble.n	800a892 <__gethex+0x43a>
 800a87a:	2101      	movs	r1, #1
 800a87c:	4620      	mov	r0, r4
 800a87e:	f7ff fd83 	bl	800a388 <rshift>
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	3601      	adds	r6, #1
 800a886:	42b3      	cmp	r3, r6
 800a888:	f6ff aedb 	blt.w	800a642 <__gethex+0x1ea>
 800a88c:	f04f 0801 	mov.w	r8, #1
 800a890:	e7c2      	b.n	800a818 <__gethex+0x3c0>
 800a892:	f015 051f 	ands.w	r5, r5, #31
 800a896:	d0f9      	beq.n	800a88c <__gethex+0x434>
 800a898:	9b01      	ldr	r3, [sp, #4]
 800a89a:	441a      	add	r2, r3
 800a89c:	f1c5 0520 	rsb	r5, r5, #32
 800a8a0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a8a4:	f7fe f890 	bl	80089c8 <__hi0bits>
 800a8a8:	42a8      	cmp	r0, r5
 800a8aa:	dbe6      	blt.n	800a87a <__gethex+0x422>
 800a8ac:	e7ee      	b.n	800a88c <__gethex+0x434>
 800a8ae:	bf00      	nop
 800a8b0:	0800cbbd 	.word	0x0800cbbd

0800a8b4 <L_shift>:
 800a8b4:	f1c2 0208 	rsb	r2, r2, #8
 800a8b8:	0092      	lsls	r2, r2, #2
 800a8ba:	b570      	push	{r4, r5, r6, lr}
 800a8bc:	f1c2 0620 	rsb	r6, r2, #32
 800a8c0:	6843      	ldr	r3, [r0, #4]
 800a8c2:	6804      	ldr	r4, [r0, #0]
 800a8c4:	fa03 f506 	lsl.w	r5, r3, r6
 800a8c8:	432c      	orrs	r4, r5
 800a8ca:	40d3      	lsrs	r3, r2
 800a8cc:	6004      	str	r4, [r0, #0]
 800a8ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8d2:	4288      	cmp	r0, r1
 800a8d4:	d3f4      	bcc.n	800a8c0 <L_shift+0xc>
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}

0800a8d8 <__match>:
 800a8d8:	b530      	push	{r4, r5, lr}
 800a8da:	6803      	ldr	r3, [r0, #0]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8e2:	b914      	cbnz	r4, 800a8ea <__match+0x12>
 800a8e4:	6003      	str	r3, [r0, #0]
 800a8e6:	2001      	movs	r0, #1
 800a8e8:	bd30      	pop	{r4, r5, pc}
 800a8ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a8f2:	2d19      	cmp	r5, #25
 800a8f4:	bf98      	it	ls
 800a8f6:	3220      	addls	r2, #32
 800a8f8:	42a2      	cmp	r2, r4
 800a8fa:	d0f0      	beq.n	800a8de <__match+0x6>
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e7f3      	b.n	800a8e8 <__match+0x10>

0800a900 <__hexnan>:
 800a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	680b      	ldr	r3, [r1, #0]
 800a906:	6801      	ldr	r1, [r0, #0]
 800a908:	115e      	asrs	r6, r3, #5
 800a90a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a90e:	f013 031f 	ands.w	r3, r3, #31
 800a912:	b087      	sub	sp, #28
 800a914:	bf18      	it	ne
 800a916:	3604      	addne	r6, #4
 800a918:	2500      	movs	r5, #0
 800a91a:	1f37      	subs	r7, r6, #4
 800a91c:	4682      	mov	sl, r0
 800a91e:	4690      	mov	r8, r2
 800a920:	9301      	str	r3, [sp, #4]
 800a922:	f846 5c04 	str.w	r5, [r6, #-4]
 800a926:	46b9      	mov	r9, r7
 800a928:	463c      	mov	r4, r7
 800a92a:	9502      	str	r5, [sp, #8]
 800a92c:	46ab      	mov	fp, r5
 800a92e:	784a      	ldrb	r2, [r1, #1]
 800a930:	1c4b      	adds	r3, r1, #1
 800a932:	9303      	str	r3, [sp, #12]
 800a934:	b342      	cbz	r2, 800a988 <__hexnan+0x88>
 800a936:	4610      	mov	r0, r2
 800a938:	9105      	str	r1, [sp, #20]
 800a93a:	9204      	str	r2, [sp, #16]
 800a93c:	f7ff fd76 	bl	800a42c <__hexdig_fun>
 800a940:	2800      	cmp	r0, #0
 800a942:	d14f      	bne.n	800a9e4 <__hexnan+0xe4>
 800a944:	9a04      	ldr	r2, [sp, #16]
 800a946:	9905      	ldr	r1, [sp, #20]
 800a948:	2a20      	cmp	r2, #32
 800a94a:	d818      	bhi.n	800a97e <__hexnan+0x7e>
 800a94c:	9b02      	ldr	r3, [sp, #8]
 800a94e:	459b      	cmp	fp, r3
 800a950:	dd13      	ble.n	800a97a <__hexnan+0x7a>
 800a952:	454c      	cmp	r4, r9
 800a954:	d206      	bcs.n	800a964 <__hexnan+0x64>
 800a956:	2d07      	cmp	r5, #7
 800a958:	dc04      	bgt.n	800a964 <__hexnan+0x64>
 800a95a:	462a      	mov	r2, r5
 800a95c:	4649      	mov	r1, r9
 800a95e:	4620      	mov	r0, r4
 800a960:	f7ff ffa8 	bl	800a8b4 <L_shift>
 800a964:	4544      	cmp	r4, r8
 800a966:	d950      	bls.n	800aa0a <__hexnan+0x10a>
 800a968:	2300      	movs	r3, #0
 800a96a:	f1a4 0904 	sub.w	r9, r4, #4
 800a96e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a972:	f8cd b008 	str.w	fp, [sp, #8]
 800a976:	464c      	mov	r4, r9
 800a978:	461d      	mov	r5, r3
 800a97a:	9903      	ldr	r1, [sp, #12]
 800a97c:	e7d7      	b.n	800a92e <__hexnan+0x2e>
 800a97e:	2a29      	cmp	r2, #41	; 0x29
 800a980:	d155      	bne.n	800aa2e <__hexnan+0x12e>
 800a982:	3102      	adds	r1, #2
 800a984:	f8ca 1000 	str.w	r1, [sl]
 800a988:	f1bb 0f00 	cmp.w	fp, #0
 800a98c:	d04f      	beq.n	800aa2e <__hexnan+0x12e>
 800a98e:	454c      	cmp	r4, r9
 800a990:	d206      	bcs.n	800a9a0 <__hexnan+0xa0>
 800a992:	2d07      	cmp	r5, #7
 800a994:	dc04      	bgt.n	800a9a0 <__hexnan+0xa0>
 800a996:	462a      	mov	r2, r5
 800a998:	4649      	mov	r1, r9
 800a99a:	4620      	mov	r0, r4
 800a99c:	f7ff ff8a 	bl	800a8b4 <L_shift>
 800a9a0:	4544      	cmp	r4, r8
 800a9a2:	d934      	bls.n	800aa0e <__hexnan+0x10e>
 800a9a4:	f1a8 0204 	sub.w	r2, r8, #4
 800a9a8:	4623      	mov	r3, r4
 800a9aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800a9ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800a9b2:	429f      	cmp	r7, r3
 800a9b4:	d2f9      	bcs.n	800a9aa <__hexnan+0xaa>
 800a9b6:	1b3b      	subs	r3, r7, r4
 800a9b8:	f023 0303 	bic.w	r3, r3, #3
 800a9bc:	3304      	adds	r3, #4
 800a9be:	3e03      	subs	r6, #3
 800a9c0:	3401      	adds	r4, #1
 800a9c2:	42a6      	cmp	r6, r4
 800a9c4:	bf38      	it	cc
 800a9c6:	2304      	movcc	r3, #4
 800a9c8:	4443      	add	r3, r8
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f843 2b04 	str.w	r2, [r3], #4
 800a9d0:	429f      	cmp	r7, r3
 800a9d2:	d2fb      	bcs.n	800a9cc <__hexnan+0xcc>
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	b91b      	cbnz	r3, 800a9e0 <__hexnan+0xe0>
 800a9d8:	4547      	cmp	r7, r8
 800a9da:	d126      	bne.n	800aa2a <__hexnan+0x12a>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	603b      	str	r3, [r7, #0]
 800a9e0:	2005      	movs	r0, #5
 800a9e2:	e025      	b.n	800aa30 <__hexnan+0x130>
 800a9e4:	3501      	adds	r5, #1
 800a9e6:	2d08      	cmp	r5, #8
 800a9e8:	f10b 0b01 	add.w	fp, fp, #1
 800a9ec:	dd06      	ble.n	800a9fc <__hexnan+0xfc>
 800a9ee:	4544      	cmp	r4, r8
 800a9f0:	d9c3      	bls.n	800a97a <__hexnan+0x7a>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9f8:	2501      	movs	r5, #1
 800a9fa:	3c04      	subs	r4, #4
 800a9fc:	6822      	ldr	r2, [r4, #0]
 800a9fe:	f000 000f 	and.w	r0, r0, #15
 800aa02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa06:	6020      	str	r0, [r4, #0]
 800aa08:	e7b7      	b.n	800a97a <__hexnan+0x7a>
 800aa0a:	2508      	movs	r5, #8
 800aa0c:	e7b5      	b.n	800a97a <__hexnan+0x7a>
 800aa0e:	9b01      	ldr	r3, [sp, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d0df      	beq.n	800a9d4 <__hexnan+0xd4>
 800aa14:	f1c3 0320 	rsb	r3, r3, #32
 800aa18:	f04f 32ff 	mov.w	r2, #4294967295
 800aa1c:	40da      	lsrs	r2, r3
 800aa1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aa22:	4013      	ands	r3, r2
 800aa24:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa28:	e7d4      	b.n	800a9d4 <__hexnan+0xd4>
 800aa2a:	3f04      	subs	r7, #4
 800aa2c:	e7d2      	b.n	800a9d4 <__hexnan+0xd4>
 800aa2e:	2004      	movs	r0, #4
 800aa30:	b007      	add	sp, #28
 800aa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa36 <__ascii_mbtowc>:
 800aa36:	b082      	sub	sp, #8
 800aa38:	b901      	cbnz	r1, 800aa3c <__ascii_mbtowc+0x6>
 800aa3a:	a901      	add	r1, sp, #4
 800aa3c:	b142      	cbz	r2, 800aa50 <__ascii_mbtowc+0x1a>
 800aa3e:	b14b      	cbz	r3, 800aa54 <__ascii_mbtowc+0x1e>
 800aa40:	7813      	ldrb	r3, [r2, #0]
 800aa42:	600b      	str	r3, [r1, #0]
 800aa44:	7812      	ldrb	r2, [r2, #0]
 800aa46:	1e10      	subs	r0, r2, #0
 800aa48:	bf18      	it	ne
 800aa4a:	2001      	movne	r0, #1
 800aa4c:	b002      	add	sp, #8
 800aa4e:	4770      	bx	lr
 800aa50:	4610      	mov	r0, r2
 800aa52:	e7fb      	b.n	800aa4c <__ascii_mbtowc+0x16>
 800aa54:	f06f 0001 	mvn.w	r0, #1
 800aa58:	e7f8      	b.n	800aa4c <__ascii_mbtowc+0x16>

0800aa5a <_realloc_r>:
 800aa5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5e:	4680      	mov	r8, r0
 800aa60:	4614      	mov	r4, r2
 800aa62:	460e      	mov	r6, r1
 800aa64:	b921      	cbnz	r1, 800aa70 <_realloc_r+0x16>
 800aa66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	f7fd be2e 	b.w	80086cc <_malloc_r>
 800aa70:	b92a      	cbnz	r2, 800aa7e <_realloc_r+0x24>
 800aa72:	f7fd fdb7 	bl	80085e4 <_free_r>
 800aa76:	4625      	mov	r5, r4
 800aa78:	4628      	mov	r0, r5
 800aa7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa7e:	f000 f842 	bl	800ab06 <_malloc_usable_size_r>
 800aa82:	4284      	cmp	r4, r0
 800aa84:	4607      	mov	r7, r0
 800aa86:	d802      	bhi.n	800aa8e <_realloc_r+0x34>
 800aa88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa8c:	d812      	bhi.n	800aab4 <_realloc_r+0x5a>
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4640      	mov	r0, r8
 800aa92:	f7fd fe1b 	bl	80086cc <_malloc_r>
 800aa96:	4605      	mov	r5, r0
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d0ed      	beq.n	800aa78 <_realloc_r+0x1e>
 800aa9c:	42bc      	cmp	r4, r7
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	bf28      	it	cs
 800aaa4:	463a      	movcs	r2, r7
 800aaa6:	f7ff fc23 	bl	800a2f0 <memcpy>
 800aaaa:	4631      	mov	r1, r6
 800aaac:	4640      	mov	r0, r8
 800aaae:	f7fd fd99 	bl	80085e4 <_free_r>
 800aab2:	e7e1      	b.n	800aa78 <_realloc_r+0x1e>
 800aab4:	4635      	mov	r5, r6
 800aab6:	e7df      	b.n	800aa78 <_realloc_r+0x1e>

0800aab8 <__ascii_wctomb>:
 800aab8:	b149      	cbz	r1, 800aace <__ascii_wctomb+0x16>
 800aaba:	2aff      	cmp	r2, #255	; 0xff
 800aabc:	bf85      	ittet	hi
 800aabe:	238a      	movhi	r3, #138	; 0x8a
 800aac0:	6003      	strhi	r3, [r0, #0]
 800aac2:	700a      	strbls	r2, [r1, #0]
 800aac4:	f04f 30ff 	movhi.w	r0, #4294967295
 800aac8:	bf98      	it	ls
 800aaca:	2001      	movls	r0, #1
 800aacc:	4770      	bx	lr
 800aace:	4608      	mov	r0, r1
 800aad0:	4770      	bx	lr
	...

0800aad4 <fiprintf>:
 800aad4:	b40e      	push	{r1, r2, r3}
 800aad6:	b503      	push	{r0, r1, lr}
 800aad8:	4601      	mov	r1, r0
 800aada:	ab03      	add	r3, sp, #12
 800aadc:	4805      	ldr	r0, [pc, #20]	; (800aaf4 <fiprintf+0x20>)
 800aade:	f853 2b04 	ldr.w	r2, [r3], #4
 800aae2:	6800      	ldr	r0, [r0, #0]
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	f000 f83f 	bl	800ab68 <_vfiprintf_r>
 800aaea:	b002      	add	sp, #8
 800aaec:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaf0:	b003      	add	sp, #12
 800aaf2:	4770      	bx	lr
 800aaf4:	20000078 	.word	0x20000078

0800aaf8 <abort>:
 800aaf8:	b508      	push	{r3, lr}
 800aafa:	2006      	movs	r0, #6
 800aafc:	f000 fa0c 	bl	800af18 <raise>
 800ab00:	2001      	movs	r0, #1
 800ab02:	f7f8 fbb3 	bl	800326c <_exit>

0800ab06 <_malloc_usable_size_r>:
 800ab06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab0a:	1f18      	subs	r0, r3, #4
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	bfbc      	itt	lt
 800ab10:	580b      	ldrlt	r3, [r1, r0]
 800ab12:	18c0      	addlt	r0, r0, r3
 800ab14:	4770      	bx	lr

0800ab16 <__sfputc_r>:
 800ab16:	6893      	ldr	r3, [r2, #8]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	b410      	push	{r4}
 800ab1e:	6093      	str	r3, [r2, #8]
 800ab20:	da08      	bge.n	800ab34 <__sfputc_r+0x1e>
 800ab22:	6994      	ldr	r4, [r2, #24]
 800ab24:	42a3      	cmp	r3, r4
 800ab26:	db01      	blt.n	800ab2c <__sfputc_r+0x16>
 800ab28:	290a      	cmp	r1, #10
 800ab2a:	d103      	bne.n	800ab34 <__sfputc_r+0x1e>
 800ab2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab30:	f000 b934 	b.w	800ad9c <__swbuf_r>
 800ab34:	6813      	ldr	r3, [r2, #0]
 800ab36:	1c58      	adds	r0, r3, #1
 800ab38:	6010      	str	r0, [r2, #0]
 800ab3a:	7019      	strb	r1, [r3, #0]
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <__sfputs_r>:
 800ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab46:	4606      	mov	r6, r0
 800ab48:	460f      	mov	r7, r1
 800ab4a:	4614      	mov	r4, r2
 800ab4c:	18d5      	adds	r5, r2, r3
 800ab4e:	42ac      	cmp	r4, r5
 800ab50:	d101      	bne.n	800ab56 <__sfputs_r+0x12>
 800ab52:	2000      	movs	r0, #0
 800ab54:	e007      	b.n	800ab66 <__sfputs_r+0x22>
 800ab56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5a:	463a      	mov	r2, r7
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f7ff ffda 	bl	800ab16 <__sfputc_r>
 800ab62:	1c43      	adds	r3, r0, #1
 800ab64:	d1f3      	bne.n	800ab4e <__sfputs_r+0xa>
 800ab66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab68 <_vfiprintf_r>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	460d      	mov	r5, r1
 800ab6e:	b09d      	sub	sp, #116	; 0x74
 800ab70:	4614      	mov	r4, r2
 800ab72:	4698      	mov	r8, r3
 800ab74:	4606      	mov	r6, r0
 800ab76:	b118      	cbz	r0, 800ab80 <_vfiprintf_r+0x18>
 800ab78:	6a03      	ldr	r3, [r0, #32]
 800ab7a:	b90b      	cbnz	r3, 800ab80 <_vfiprintf_r+0x18>
 800ab7c:	f7fc fd66 	bl	800764c <__sinit>
 800ab80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab82:	07d9      	lsls	r1, r3, #31
 800ab84:	d405      	bmi.n	800ab92 <_vfiprintf_r+0x2a>
 800ab86:	89ab      	ldrh	r3, [r5, #12]
 800ab88:	059a      	lsls	r2, r3, #22
 800ab8a:	d402      	bmi.n	800ab92 <_vfiprintf_r+0x2a>
 800ab8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab8e:	f7fc fea7 	bl	80078e0 <__retarget_lock_acquire_recursive>
 800ab92:	89ab      	ldrh	r3, [r5, #12]
 800ab94:	071b      	lsls	r3, r3, #28
 800ab96:	d501      	bpl.n	800ab9c <_vfiprintf_r+0x34>
 800ab98:	692b      	ldr	r3, [r5, #16]
 800ab9a:	b99b      	cbnz	r3, 800abc4 <_vfiprintf_r+0x5c>
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f000 f93a 	bl	800ae18 <__swsetup_r>
 800aba4:	b170      	cbz	r0, 800abc4 <_vfiprintf_r+0x5c>
 800aba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aba8:	07dc      	lsls	r4, r3, #31
 800abaa:	d504      	bpl.n	800abb6 <_vfiprintf_r+0x4e>
 800abac:	f04f 30ff 	mov.w	r0, #4294967295
 800abb0:	b01d      	add	sp, #116	; 0x74
 800abb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb6:	89ab      	ldrh	r3, [r5, #12]
 800abb8:	0598      	lsls	r0, r3, #22
 800abba:	d4f7      	bmi.n	800abac <_vfiprintf_r+0x44>
 800abbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abbe:	f7fc fe90 	bl	80078e2 <__retarget_lock_release_recursive>
 800abc2:	e7f3      	b.n	800abac <_vfiprintf_r+0x44>
 800abc4:	2300      	movs	r3, #0
 800abc6:	9309      	str	r3, [sp, #36]	; 0x24
 800abc8:	2320      	movs	r3, #32
 800abca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abce:	f8cd 800c 	str.w	r8, [sp, #12]
 800abd2:	2330      	movs	r3, #48	; 0x30
 800abd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ad88 <_vfiprintf_r+0x220>
 800abd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abdc:	f04f 0901 	mov.w	r9, #1
 800abe0:	4623      	mov	r3, r4
 800abe2:	469a      	mov	sl, r3
 800abe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abe8:	b10a      	cbz	r2, 800abee <_vfiprintf_r+0x86>
 800abea:	2a25      	cmp	r2, #37	; 0x25
 800abec:	d1f9      	bne.n	800abe2 <_vfiprintf_r+0x7a>
 800abee:	ebba 0b04 	subs.w	fp, sl, r4
 800abf2:	d00b      	beq.n	800ac0c <_vfiprintf_r+0xa4>
 800abf4:	465b      	mov	r3, fp
 800abf6:	4622      	mov	r2, r4
 800abf8:	4629      	mov	r1, r5
 800abfa:	4630      	mov	r0, r6
 800abfc:	f7ff ffa2 	bl	800ab44 <__sfputs_r>
 800ac00:	3001      	adds	r0, #1
 800ac02:	f000 80a9 	beq.w	800ad58 <_vfiprintf_r+0x1f0>
 800ac06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac08:	445a      	add	r2, fp
 800ac0a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f000 80a1 	beq.w	800ad58 <_vfiprintf_r+0x1f0>
 800ac16:	2300      	movs	r3, #0
 800ac18:	f04f 32ff 	mov.w	r2, #4294967295
 800ac1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac20:	f10a 0a01 	add.w	sl, sl, #1
 800ac24:	9304      	str	r3, [sp, #16]
 800ac26:	9307      	str	r3, [sp, #28]
 800ac28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac2c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac2e:	4654      	mov	r4, sl
 800ac30:	2205      	movs	r2, #5
 800ac32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac36:	4854      	ldr	r0, [pc, #336]	; (800ad88 <_vfiprintf_r+0x220>)
 800ac38:	f7f5 faea 	bl	8000210 <memchr>
 800ac3c:	9a04      	ldr	r2, [sp, #16]
 800ac3e:	b9d8      	cbnz	r0, 800ac78 <_vfiprintf_r+0x110>
 800ac40:	06d1      	lsls	r1, r2, #27
 800ac42:	bf44      	itt	mi
 800ac44:	2320      	movmi	r3, #32
 800ac46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac4a:	0713      	lsls	r3, r2, #28
 800ac4c:	bf44      	itt	mi
 800ac4e:	232b      	movmi	r3, #43	; 0x2b
 800ac50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac54:	f89a 3000 	ldrb.w	r3, [sl]
 800ac58:	2b2a      	cmp	r3, #42	; 0x2a
 800ac5a:	d015      	beq.n	800ac88 <_vfiprintf_r+0x120>
 800ac5c:	9a07      	ldr	r2, [sp, #28]
 800ac5e:	4654      	mov	r4, sl
 800ac60:	2000      	movs	r0, #0
 800ac62:	f04f 0c0a 	mov.w	ip, #10
 800ac66:	4621      	mov	r1, r4
 800ac68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac6c:	3b30      	subs	r3, #48	; 0x30
 800ac6e:	2b09      	cmp	r3, #9
 800ac70:	d94d      	bls.n	800ad0e <_vfiprintf_r+0x1a6>
 800ac72:	b1b0      	cbz	r0, 800aca2 <_vfiprintf_r+0x13a>
 800ac74:	9207      	str	r2, [sp, #28]
 800ac76:	e014      	b.n	800aca2 <_vfiprintf_r+0x13a>
 800ac78:	eba0 0308 	sub.w	r3, r0, r8
 800ac7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ac80:	4313      	orrs	r3, r2
 800ac82:	9304      	str	r3, [sp, #16]
 800ac84:	46a2      	mov	sl, r4
 800ac86:	e7d2      	b.n	800ac2e <_vfiprintf_r+0xc6>
 800ac88:	9b03      	ldr	r3, [sp, #12]
 800ac8a:	1d19      	adds	r1, r3, #4
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	9103      	str	r1, [sp, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	bfbb      	ittet	lt
 800ac94:	425b      	neglt	r3, r3
 800ac96:	f042 0202 	orrlt.w	r2, r2, #2
 800ac9a:	9307      	strge	r3, [sp, #28]
 800ac9c:	9307      	strlt	r3, [sp, #28]
 800ac9e:	bfb8      	it	lt
 800aca0:	9204      	strlt	r2, [sp, #16]
 800aca2:	7823      	ldrb	r3, [r4, #0]
 800aca4:	2b2e      	cmp	r3, #46	; 0x2e
 800aca6:	d10c      	bne.n	800acc2 <_vfiprintf_r+0x15a>
 800aca8:	7863      	ldrb	r3, [r4, #1]
 800acaa:	2b2a      	cmp	r3, #42	; 0x2a
 800acac:	d134      	bne.n	800ad18 <_vfiprintf_r+0x1b0>
 800acae:	9b03      	ldr	r3, [sp, #12]
 800acb0:	1d1a      	adds	r2, r3, #4
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	9203      	str	r2, [sp, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	bfb8      	it	lt
 800acba:	f04f 33ff 	movlt.w	r3, #4294967295
 800acbe:	3402      	adds	r4, #2
 800acc0:	9305      	str	r3, [sp, #20]
 800acc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ad98 <_vfiprintf_r+0x230>
 800acc6:	7821      	ldrb	r1, [r4, #0]
 800acc8:	2203      	movs	r2, #3
 800acca:	4650      	mov	r0, sl
 800accc:	f7f5 faa0 	bl	8000210 <memchr>
 800acd0:	b138      	cbz	r0, 800ace2 <_vfiprintf_r+0x17a>
 800acd2:	9b04      	ldr	r3, [sp, #16]
 800acd4:	eba0 000a 	sub.w	r0, r0, sl
 800acd8:	2240      	movs	r2, #64	; 0x40
 800acda:	4082      	lsls	r2, r0
 800acdc:	4313      	orrs	r3, r2
 800acde:	3401      	adds	r4, #1
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace6:	4829      	ldr	r0, [pc, #164]	; (800ad8c <_vfiprintf_r+0x224>)
 800ace8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acec:	2206      	movs	r2, #6
 800acee:	f7f5 fa8f 	bl	8000210 <memchr>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d03f      	beq.n	800ad76 <_vfiprintf_r+0x20e>
 800acf6:	4b26      	ldr	r3, [pc, #152]	; (800ad90 <_vfiprintf_r+0x228>)
 800acf8:	bb1b      	cbnz	r3, 800ad42 <_vfiprintf_r+0x1da>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	3307      	adds	r3, #7
 800acfe:	f023 0307 	bic.w	r3, r3, #7
 800ad02:	3308      	adds	r3, #8
 800ad04:	9303      	str	r3, [sp, #12]
 800ad06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad08:	443b      	add	r3, r7
 800ad0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0c:	e768      	b.n	800abe0 <_vfiprintf_r+0x78>
 800ad0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad12:	460c      	mov	r4, r1
 800ad14:	2001      	movs	r0, #1
 800ad16:	e7a6      	b.n	800ac66 <_vfiprintf_r+0xfe>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	3401      	adds	r4, #1
 800ad1c:	9305      	str	r3, [sp, #20]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	f04f 0c0a 	mov.w	ip, #10
 800ad24:	4620      	mov	r0, r4
 800ad26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad2a:	3a30      	subs	r2, #48	; 0x30
 800ad2c:	2a09      	cmp	r2, #9
 800ad2e:	d903      	bls.n	800ad38 <_vfiprintf_r+0x1d0>
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d0c6      	beq.n	800acc2 <_vfiprintf_r+0x15a>
 800ad34:	9105      	str	r1, [sp, #20]
 800ad36:	e7c4      	b.n	800acc2 <_vfiprintf_r+0x15a>
 800ad38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e7f0      	b.n	800ad24 <_vfiprintf_r+0x1bc>
 800ad42:	ab03      	add	r3, sp, #12
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	462a      	mov	r2, r5
 800ad48:	4b12      	ldr	r3, [pc, #72]	; (800ad94 <_vfiprintf_r+0x22c>)
 800ad4a:	a904      	add	r1, sp, #16
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	f7fb fe2d 	bl	80069ac <_printf_float>
 800ad52:	4607      	mov	r7, r0
 800ad54:	1c78      	adds	r0, r7, #1
 800ad56:	d1d6      	bne.n	800ad06 <_vfiprintf_r+0x19e>
 800ad58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad5a:	07d9      	lsls	r1, r3, #31
 800ad5c:	d405      	bmi.n	800ad6a <_vfiprintf_r+0x202>
 800ad5e:	89ab      	ldrh	r3, [r5, #12]
 800ad60:	059a      	lsls	r2, r3, #22
 800ad62:	d402      	bmi.n	800ad6a <_vfiprintf_r+0x202>
 800ad64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad66:	f7fc fdbc 	bl	80078e2 <__retarget_lock_release_recursive>
 800ad6a:	89ab      	ldrh	r3, [r5, #12]
 800ad6c:	065b      	lsls	r3, r3, #25
 800ad6e:	f53f af1d 	bmi.w	800abac <_vfiprintf_r+0x44>
 800ad72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad74:	e71c      	b.n	800abb0 <_vfiprintf_r+0x48>
 800ad76:	ab03      	add	r3, sp, #12
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	462a      	mov	r2, r5
 800ad7c:	4b05      	ldr	r3, [pc, #20]	; (800ad94 <_vfiprintf_r+0x22c>)
 800ad7e:	a904      	add	r1, sp, #16
 800ad80:	4630      	mov	r0, r6
 800ad82:	f7fc f8b7 	bl	8006ef4 <_printf_i>
 800ad86:	e7e4      	b.n	800ad52 <_vfiprintf_r+0x1ea>
 800ad88:	0800ce79 	.word	0x0800ce79
 800ad8c:	0800ce83 	.word	0x0800ce83
 800ad90:	080069ad 	.word	0x080069ad
 800ad94:	0800ab45 	.word	0x0800ab45
 800ad98:	0800ce7f 	.word	0x0800ce7f

0800ad9c <__swbuf_r>:
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9e:	460e      	mov	r6, r1
 800ada0:	4614      	mov	r4, r2
 800ada2:	4605      	mov	r5, r0
 800ada4:	b118      	cbz	r0, 800adae <__swbuf_r+0x12>
 800ada6:	6a03      	ldr	r3, [r0, #32]
 800ada8:	b90b      	cbnz	r3, 800adae <__swbuf_r+0x12>
 800adaa:	f7fc fc4f 	bl	800764c <__sinit>
 800adae:	69a3      	ldr	r3, [r4, #24]
 800adb0:	60a3      	str	r3, [r4, #8]
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	071a      	lsls	r2, r3, #28
 800adb6:	d525      	bpl.n	800ae04 <__swbuf_r+0x68>
 800adb8:	6923      	ldr	r3, [r4, #16]
 800adba:	b31b      	cbz	r3, 800ae04 <__swbuf_r+0x68>
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	6922      	ldr	r2, [r4, #16]
 800adc0:	1a98      	subs	r0, r3, r2
 800adc2:	6963      	ldr	r3, [r4, #20]
 800adc4:	b2f6      	uxtb	r6, r6
 800adc6:	4283      	cmp	r3, r0
 800adc8:	4637      	mov	r7, r6
 800adca:	dc04      	bgt.n	800add6 <__swbuf_r+0x3a>
 800adcc:	4621      	mov	r1, r4
 800adce:	4628      	mov	r0, r5
 800add0:	f7ff fa2a 	bl	800a228 <_fflush_r>
 800add4:	b9e0      	cbnz	r0, 800ae10 <__swbuf_r+0x74>
 800add6:	68a3      	ldr	r3, [r4, #8]
 800add8:	3b01      	subs	r3, #1
 800adda:	60a3      	str	r3, [r4, #8]
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	6022      	str	r2, [r4, #0]
 800ade2:	701e      	strb	r6, [r3, #0]
 800ade4:	6962      	ldr	r2, [r4, #20]
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	429a      	cmp	r2, r3
 800adea:	d004      	beq.n	800adf6 <__swbuf_r+0x5a>
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	07db      	lsls	r3, r3, #31
 800adf0:	d506      	bpl.n	800ae00 <__swbuf_r+0x64>
 800adf2:	2e0a      	cmp	r6, #10
 800adf4:	d104      	bne.n	800ae00 <__swbuf_r+0x64>
 800adf6:	4621      	mov	r1, r4
 800adf8:	4628      	mov	r0, r5
 800adfa:	f7ff fa15 	bl	800a228 <_fflush_r>
 800adfe:	b938      	cbnz	r0, 800ae10 <__swbuf_r+0x74>
 800ae00:	4638      	mov	r0, r7
 800ae02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae04:	4621      	mov	r1, r4
 800ae06:	4628      	mov	r0, r5
 800ae08:	f000 f806 	bl	800ae18 <__swsetup_r>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d0d5      	beq.n	800adbc <__swbuf_r+0x20>
 800ae10:	f04f 37ff 	mov.w	r7, #4294967295
 800ae14:	e7f4      	b.n	800ae00 <__swbuf_r+0x64>
	...

0800ae18 <__swsetup_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4b2a      	ldr	r3, [pc, #168]	; (800aec4 <__swsetup_r+0xac>)
 800ae1c:	4605      	mov	r5, r0
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	460c      	mov	r4, r1
 800ae22:	b118      	cbz	r0, 800ae2c <__swsetup_r+0x14>
 800ae24:	6a03      	ldr	r3, [r0, #32]
 800ae26:	b90b      	cbnz	r3, 800ae2c <__swsetup_r+0x14>
 800ae28:	f7fc fc10 	bl	800764c <__sinit>
 800ae2c:	89a3      	ldrh	r3, [r4, #12]
 800ae2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae32:	0718      	lsls	r0, r3, #28
 800ae34:	d422      	bmi.n	800ae7c <__swsetup_r+0x64>
 800ae36:	06d9      	lsls	r1, r3, #27
 800ae38:	d407      	bmi.n	800ae4a <__swsetup_r+0x32>
 800ae3a:	2309      	movs	r3, #9
 800ae3c:	602b      	str	r3, [r5, #0]
 800ae3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae42:	81a3      	strh	r3, [r4, #12]
 800ae44:	f04f 30ff 	mov.w	r0, #4294967295
 800ae48:	e034      	b.n	800aeb4 <__swsetup_r+0x9c>
 800ae4a:	0758      	lsls	r0, r3, #29
 800ae4c:	d512      	bpl.n	800ae74 <__swsetup_r+0x5c>
 800ae4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae50:	b141      	cbz	r1, 800ae64 <__swsetup_r+0x4c>
 800ae52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae56:	4299      	cmp	r1, r3
 800ae58:	d002      	beq.n	800ae60 <__swsetup_r+0x48>
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f7fd fbc2 	bl	80085e4 <_free_r>
 800ae60:	2300      	movs	r3, #0
 800ae62:	6363      	str	r3, [r4, #52]	; 0x34
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae6a:	81a3      	strh	r3, [r4, #12]
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	6063      	str	r3, [r4, #4]
 800ae70:	6923      	ldr	r3, [r4, #16]
 800ae72:	6023      	str	r3, [r4, #0]
 800ae74:	89a3      	ldrh	r3, [r4, #12]
 800ae76:	f043 0308 	orr.w	r3, r3, #8
 800ae7a:	81a3      	strh	r3, [r4, #12]
 800ae7c:	6923      	ldr	r3, [r4, #16]
 800ae7e:	b94b      	cbnz	r3, 800ae94 <__swsetup_r+0x7c>
 800ae80:	89a3      	ldrh	r3, [r4, #12]
 800ae82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae8a:	d003      	beq.n	800ae94 <__swsetup_r+0x7c>
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	4628      	mov	r0, r5
 800ae90:	f000 f884 	bl	800af9c <__smakebuf_r>
 800ae94:	89a0      	ldrh	r0, [r4, #12]
 800ae96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae9a:	f010 0301 	ands.w	r3, r0, #1
 800ae9e:	d00a      	beq.n	800aeb6 <__swsetup_r+0x9e>
 800aea0:	2300      	movs	r3, #0
 800aea2:	60a3      	str	r3, [r4, #8]
 800aea4:	6963      	ldr	r3, [r4, #20]
 800aea6:	425b      	negs	r3, r3
 800aea8:	61a3      	str	r3, [r4, #24]
 800aeaa:	6923      	ldr	r3, [r4, #16]
 800aeac:	b943      	cbnz	r3, 800aec0 <__swsetup_r+0xa8>
 800aeae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aeb2:	d1c4      	bne.n	800ae3e <__swsetup_r+0x26>
 800aeb4:	bd38      	pop	{r3, r4, r5, pc}
 800aeb6:	0781      	lsls	r1, r0, #30
 800aeb8:	bf58      	it	pl
 800aeba:	6963      	ldrpl	r3, [r4, #20]
 800aebc:	60a3      	str	r3, [r4, #8]
 800aebe:	e7f4      	b.n	800aeaa <__swsetup_r+0x92>
 800aec0:	2000      	movs	r0, #0
 800aec2:	e7f7      	b.n	800aeb4 <__swsetup_r+0x9c>
 800aec4:	20000078 	.word	0x20000078

0800aec8 <_raise_r>:
 800aec8:	291f      	cmp	r1, #31
 800aeca:	b538      	push	{r3, r4, r5, lr}
 800aecc:	4604      	mov	r4, r0
 800aece:	460d      	mov	r5, r1
 800aed0:	d904      	bls.n	800aedc <_raise_r+0x14>
 800aed2:	2316      	movs	r3, #22
 800aed4:	6003      	str	r3, [r0, #0]
 800aed6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeda:	bd38      	pop	{r3, r4, r5, pc}
 800aedc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aede:	b112      	cbz	r2, 800aee6 <_raise_r+0x1e>
 800aee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aee4:	b94b      	cbnz	r3, 800aefa <_raise_r+0x32>
 800aee6:	4620      	mov	r0, r4
 800aee8:	f000 f830 	bl	800af4c <_getpid_r>
 800aeec:	462a      	mov	r2, r5
 800aeee:	4601      	mov	r1, r0
 800aef0:	4620      	mov	r0, r4
 800aef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aef6:	f000 b817 	b.w	800af28 <_kill_r>
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d00a      	beq.n	800af14 <_raise_r+0x4c>
 800aefe:	1c59      	adds	r1, r3, #1
 800af00:	d103      	bne.n	800af0a <_raise_r+0x42>
 800af02:	2316      	movs	r3, #22
 800af04:	6003      	str	r3, [r0, #0]
 800af06:	2001      	movs	r0, #1
 800af08:	e7e7      	b.n	800aeda <_raise_r+0x12>
 800af0a:	2400      	movs	r4, #0
 800af0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af10:	4628      	mov	r0, r5
 800af12:	4798      	blx	r3
 800af14:	2000      	movs	r0, #0
 800af16:	e7e0      	b.n	800aeda <_raise_r+0x12>

0800af18 <raise>:
 800af18:	4b02      	ldr	r3, [pc, #8]	; (800af24 <raise+0xc>)
 800af1a:	4601      	mov	r1, r0
 800af1c:	6818      	ldr	r0, [r3, #0]
 800af1e:	f7ff bfd3 	b.w	800aec8 <_raise_r>
 800af22:	bf00      	nop
 800af24:	20000078 	.word	0x20000078

0800af28 <_kill_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4d07      	ldr	r5, [pc, #28]	; (800af48 <_kill_r+0x20>)
 800af2c:	2300      	movs	r3, #0
 800af2e:	4604      	mov	r4, r0
 800af30:	4608      	mov	r0, r1
 800af32:	4611      	mov	r1, r2
 800af34:	602b      	str	r3, [r5, #0]
 800af36:	f7f8 f989 	bl	800324c <_kill>
 800af3a:	1c43      	adds	r3, r0, #1
 800af3c:	d102      	bne.n	800af44 <_kill_r+0x1c>
 800af3e:	682b      	ldr	r3, [r5, #0]
 800af40:	b103      	cbz	r3, 800af44 <_kill_r+0x1c>
 800af42:	6023      	str	r3, [r4, #0]
 800af44:	bd38      	pop	{r3, r4, r5, pc}
 800af46:	bf00      	nop
 800af48:	200005d4 	.word	0x200005d4

0800af4c <_getpid_r>:
 800af4c:	f7f8 b976 	b.w	800323c <_getpid>

0800af50 <__swhatbuf_r>:
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	460c      	mov	r4, r1
 800af54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af58:	2900      	cmp	r1, #0
 800af5a:	b096      	sub	sp, #88	; 0x58
 800af5c:	4615      	mov	r5, r2
 800af5e:	461e      	mov	r6, r3
 800af60:	da0d      	bge.n	800af7e <__swhatbuf_r+0x2e>
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800af68:	f04f 0100 	mov.w	r1, #0
 800af6c:	bf0c      	ite	eq
 800af6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800af72:	2340      	movne	r3, #64	; 0x40
 800af74:	2000      	movs	r0, #0
 800af76:	6031      	str	r1, [r6, #0]
 800af78:	602b      	str	r3, [r5, #0]
 800af7a:	b016      	add	sp, #88	; 0x58
 800af7c:	bd70      	pop	{r4, r5, r6, pc}
 800af7e:	466a      	mov	r2, sp
 800af80:	f000 f848 	bl	800b014 <_fstat_r>
 800af84:	2800      	cmp	r0, #0
 800af86:	dbec      	blt.n	800af62 <__swhatbuf_r+0x12>
 800af88:	9901      	ldr	r1, [sp, #4]
 800af8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800af8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800af92:	4259      	negs	r1, r3
 800af94:	4159      	adcs	r1, r3
 800af96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af9a:	e7eb      	b.n	800af74 <__swhatbuf_r+0x24>

0800af9c <__smakebuf_r>:
 800af9c:	898b      	ldrh	r3, [r1, #12]
 800af9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afa0:	079d      	lsls	r5, r3, #30
 800afa2:	4606      	mov	r6, r0
 800afa4:	460c      	mov	r4, r1
 800afa6:	d507      	bpl.n	800afb8 <__smakebuf_r+0x1c>
 800afa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	6123      	str	r3, [r4, #16]
 800afb0:	2301      	movs	r3, #1
 800afb2:	6163      	str	r3, [r4, #20]
 800afb4:	b002      	add	sp, #8
 800afb6:	bd70      	pop	{r4, r5, r6, pc}
 800afb8:	ab01      	add	r3, sp, #4
 800afba:	466a      	mov	r2, sp
 800afbc:	f7ff ffc8 	bl	800af50 <__swhatbuf_r>
 800afc0:	9900      	ldr	r1, [sp, #0]
 800afc2:	4605      	mov	r5, r0
 800afc4:	4630      	mov	r0, r6
 800afc6:	f7fd fb81 	bl	80086cc <_malloc_r>
 800afca:	b948      	cbnz	r0, 800afe0 <__smakebuf_r+0x44>
 800afcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afd0:	059a      	lsls	r2, r3, #22
 800afd2:	d4ef      	bmi.n	800afb4 <__smakebuf_r+0x18>
 800afd4:	f023 0303 	bic.w	r3, r3, #3
 800afd8:	f043 0302 	orr.w	r3, r3, #2
 800afdc:	81a3      	strh	r3, [r4, #12]
 800afde:	e7e3      	b.n	800afa8 <__smakebuf_r+0xc>
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	6020      	str	r0, [r4, #0]
 800afe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afe8:	81a3      	strh	r3, [r4, #12]
 800afea:	9b00      	ldr	r3, [sp, #0]
 800afec:	6163      	str	r3, [r4, #20]
 800afee:	9b01      	ldr	r3, [sp, #4]
 800aff0:	6120      	str	r0, [r4, #16]
 800aff2:	b15b      	cbz	r3, 800b00c <__smakebuf_r+0x70>
 800aff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aff8:	4630      	mov	r0, r6
 800affa:	f000 f81d 	bl	800b038 <_isatty_r>
 800affe:	b128      	cbz	r0, 800b00c <__smakebuf_r+0x70>
 800b000:	89a3      	ldrh	r3, [r4, #12]
 800b002:	f023 0303 	bic.w	r3, r3, #3
 800b006:	f043 0301 	orr.w	r3, r3, #1
 800b00a:	81a3      	strh	r3, [r4, #12]
 800b00c:	89a3      	ldrh	r3, [r4, #12]
 800b00e:	431d      	orrs	r5, r3
 800b010:	81a5      	strh	r5, [r4, #12]
 800b012:	e7cf      	b.n	800afb4 <__smakebuf_r+0x18>

0800b014 <_fstat_r>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4d07      	ldr	r5, [pc, #28]	; (800b034 <_fstat_r+0x20>)
 800b018:	2300      	movs	r3, #0
 800b01a:	4604      	mov	r4, r0
 800b01c:	4608      	mov	r0, r1
 800b01e:	4611      	mov	r1, r2
 800b020:	602b      	str	r3, [r5, #0]
 800b022:	f7f8 f972 	bl	800330a <_fstat>
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	d102      	bne.n	800b030 <_fstat_r+0x1c>
 800b02a:	682b      	ldr	r3, [r5, #0]
 800b02c:	b103      	cbz	r3, 800b030 <_fstat_r+0x1c>
 800b02e:	6023      	str	r3, [r4, #0]
 800b030:	bd38      	pop	{r3, r4, r5, pc}
 800b032:	bf00      	nop
 800b034:	200005d4 	.word	0x200005d4

0800b038 <_isatty_r>:
 800b038:	b538      	push	{r3, r4, r5, lr}
 800b03a:	4d06      	ldr	r5, [pc, #24]	; (800b054 <_isatty_r+0x1c>)
 800b03c:	2300      	movs	r3, #0
 800b03e:	4604      	mov	r4, r0
 800b040:	4608      	mov	r0, r1
 800b042:	602b      	str	r3, [r5, #0]
 800b044:	f7f8 f971 	bl	800332a <_isatty>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d102      	bne.n	800b052 <_isatty_r+0x1a>
 800b04c:	682b      	ldr	r3, [r5, #0]
 800b04e:	b103      	cbz	r3, 800b052 <_isatty_r+0x1a>
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	200005d4 	.word	0x200005d4

0800b058 <asin>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	ed2d 8b02 	vpush	{d8}
 800b05e:	ec55 4b10 	vmov	r4, r5, d0
 800b062:	f000 fcc1 	bl	800b9e8 <__ieee754_asin>
 800b066:	4622      	mov	r2, r4
 800b068:	462b      	mov	r3, r5
 800b06a:	4620      	mov	r0, r4
 800b06c:	4629      	mov	r1, r5
 800b06e:	eeb0 8a40 	vmov.f32	s16, s0
 800b072:	eef0 8a60 	vmov.f32	s17, s1
 800b076:	f7f5 fd79 	bl	8000b6c <__aeabi_dcmpun>
 800b07a:	b9a8      	cbnz	r0, 800b0a8 <asin+0x50>
 800b07c:	ec45 4b10 	vmov	d0, r4, r5
 800b080:	f000 f9ea 	bl	800b458 <fabs>
 800b084:	4b0c      	ldr	r3, [pc, #48]	; (800b0b8 <asin+0x60>)
 800b086:	ec51 0b10 	vmov	r0, r1, d0
 800b08a:	2200      	movs	r2, #0
 800b08c:	f7f5 fd64 	bl	8000b58 <__aeabi_dcmpgt>
 800b090:	b150      	cbz	r0, 800b0a8 <asin+0x50>
 800b092:	f7fc fbfb 	bl	800788c <__errno>
 800b096:	ecbd 8b02 	vpop	{d8}
 800b09a:	2321      	movs	r3, #33	; 0x21
 800b09c:	6003      	str	r3, [r0, #0]
 800b09e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0a2:	4806      	ldr	r0, [pc, #24]	; (800b0bc <asin+0x64>)
 800b0a4:	f7ff b934 	b.w	800a310 <nan>
 800b0a8:	eeb0 0a48 	vmov.f32	s0, s16
 800b0ac:	eef0 0a68 	vmov.f32	s1, s17
 800b0b0:	ecbd 8b02 	vpop	{d8}
 800b0b4:	bd38      	pop	{r3, r4, r5, pc}
 800b0b6:	bf00      	nop
 800b0b8:	3ff00000 	.word	0x3ff00000
 800b0bc:	0800cecd 	.word	0x0800cecd

0800b0c0 <sqrt>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	ed2d 8b02 	vpush	{d8}
 800b0c6:	ec55 4b10 	vmov	r4, r5, d0
 800b0ca:	f000 fa29 	bl	800b520 <__ieee754_sqrt>
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	462b      	mov	r3, r5
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	4629      	mov	r1, r5
 800b0d6:	eeb0 8a40 	vmov.f32	s16, s0
 800b0da:	eef0 8a60 	vmov.f32	s17, s1
 800b0de:	f7f5 fd45 	bl	8000b6c <__aeabi_dcmpun>
 800b0e2:	b990      	cbnz	r0, 800b10a <sqrt+0x4a>
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	f7f5 fd16 	bl	8000b1c <__aeabi_dcmplt>
 800b0f0:	b158      	cbz	r0, 800b10a <sqrt+0x4a>
 800b0f2:	f7fc fbcb 	bl	800788c <__errno>
 800b0f6:	2321      	movs	r3, #33	; 0x21
 800b0f8:	6003      	str	r3, [r0, #0]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4610      	mov	r0, r2
 800b100:	4619      	mov	r1, r3
 800b102:	f7f5 fbc3 	bl	800088c <__aeabi_ddiv>
 800b106:	ec41 0b18 	vmov	d8, r0, r1
 800b10a:	eeb0 0a48 	vmov.f32	s0, s16
 800b10e:	eef0 0a68 	vmov.f32	s1, s17
 800b112:	ecbd 8b02 	vpop	{d8}
 800b116:	bd38      	pop	{r3, r4, r5, pc}

0800b118 <atan>:
 800b118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11c:	ec55 4b10 	vmov	r4, r5, d0
 800b120:	4bc3      	ldr	r3, [pc, #780]	; (800b430 <atan+0x318>)
 800b122:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b126:	429e      	cmp	r6, r3
 800b128:	46ab      	mov	fp, r5
 800b12a:	dd18      	ble.n	800b15e <atan+0x46>
 800b12c:	4bc1      	ldr	r3, [pc, #772]	; (800b434 <atan+0x31c>)
 800b12e:	429e      	cmp	r6, r3
 800b130:	dc01      	bgt.n	800b136 <atan+0x1e>
 800b132:	d109      	bne.n	800b148 <atan+0x30>
 800b134:	b144      	cbz	r4, 800b148 <atan+0x30>
 800b136:	4622      	mov	r2, r4
 800b138:	462b      	mov	r3, r5
 800b13a:	4620      	mov	r0, r4
 800b13c:	4629      	mov	r1, r5
 800b13e:	f7f5 f8c5 	bl	80002cc <__adddf3>
 800b142:	4604      	mov	r4, r0
 800b144:	460d      	mov	r5, r1
 800b146:	e006      	b.n	800b156 <atan+0x3e>
 800b148:	f1bb 0f00 	cmp.w	fp, #0
 800b14c:	f300 8131 	bgt.w	800b3b2 <atan+0x29a>
 800b150:	a59b      	add	r5, pc, #620	; (adr r5, 800b3c0 <atan+0x2a8>)
 800b152:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b156:	ec45 4b10 	vmov	d0, r4, r5
 800b15a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15e:	4bb6      	ldr	r3, [pc, #728]	; (800b438 <atan+0x320>)
 800b160:	429e      	cmp	r6, r3
 800b162:	dc14      	bgt.n	800b18e <atan+0x76>
 800b164:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b168:	429e      	cmp	r6, r3
 800b16a:	dc0d      	bgt.n	800b188 <atan+0x70>
 800b16c:	a396      	add	r3, pc, #600	; (adr r3, 800b3c8 <atan+0x2b0>)
 800b16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b172:	ee10 0a10 	vmov	r0, s0
 800b176:	4629      	mov	r1, r5
 800b178:	f7f5 f8a8 	bl	80002cc <__adddf3>
 800b17c:	4baf      	ldr	r3, [pc, #700]	; (800b43c <atan+0x324>)
 800b17e:	2200      	movs	r2, #0
 800b180:	f7f5 fcea 	bl	8000b58 <__aeabi_dcmpgt>
 800b184:	2800      	cmp	r0, #0
 800b186:	d1e6      	bne.n	800b156 <atan+0x3e>
 800b188:	f04f 3aff 	mov.w	sl, #4294967295
 800b18c:	e02b      	b.n	800b1e6 <atan+0xce>
 800b18e:	f000 f963 	bl	800b458 <fabs>
 800b192:	4bab      	ldr	r3, [pc, #684]	; (800b440 <atan+0x328>)
 800b194:	429e      	cmp	r6, r3
 800b196:	ec55 4b10 	vmov	r4, r5, d0
 800b19a:	f300 80bf 	bgt.w	800b31c <atan+0x204>
 800b19e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b1a2:	429e      	cmp	r6, r3
 800b1a4:	f300 80a0 	bgt.w	800b2e8 <atan+0x1d0>
 800b1a8:	ee10 2a10 	vmov	r2, s0
 800b1ac:	ee10 0a10 	vmov	r0, s0
 800b1b0:	462b      	mov	r3, r5
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	f7f5 f88a 	bl	80002cc <__adddf3>
 800b1b8:	4ba0      	ldr	r3, [pc, #640]	; (800b43c <atan+0x324>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f7f5 f884 	bl	80002c8 <__aeabi_dsub>
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	f7f5 f87d 	bl	80002cc <__adddf3>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	4639      	mov	r1, r7
 800b1da:	f7f5 fb57 	bl	800088c <__aeabi_ddiv>
 800b1de:	f04f 0a00 	mov.w	sl, #0
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	460d      	mov	r5, r1
 800b1e6:	4622      	mov	r2, r4
 800b1e8:	462b      	mov	r3, r5
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	f7f5 fa23 	bl	8000638 <__aeabi_dmul>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	4680      	mov	r8, r0
 800b1f8:	4689      	mov	r9, r1
 800b1fa:	f7f5 fa1d 	bl	8000638 <__aeabi_dmul>
 800b1fe:	a374      	add	r3, pc, #464	; (adr r3, 800b3d0 <atan+0x2b8>)
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	4606      	mov	r6, r0
 800b206:	460f      	mov	r7, r1
 800b208:	f7f5 fa16 	bl	8000638 <__aeabi_dmul>
 800b20c:	a372      	add	r3, pc, #456	; (adr r3, 800b3d8 <atan+0x2c0>)
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f7f5 f85b 	bl	80002cc <__adddf3>
 800b216:	4632      	mov	r2, r6
 800b218:	463b      	mov	r3, r7
 800b21a:	f7f5 fa0d 	bl	8000638 <__aeabi_dmul>
 800b21e:	a370      	add	r3, pc, #448	; (adr r3, 800b3e0 <atan+0x2c8>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f5 f852 	bl	80002cc <__adddf3>
 800b228:	4632      	mov	r2, r6
 800b22a:	463b      	mov	r3, r7
 800b22c:	f7f5 fa04 	bl	8000638 <__aeabi_dmul>
 800b230:	a36d      	add	r3, pc, #436	; (adr r3, 800b3e8 <atan+0x2d0>)
 800b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b236:	f7f5 f849 	bl	80002cc <__adddf3>
 800b23a:	4632      	mov	r2, r6
 800b23c:	463b      	mov	r3, r7
 800b23e:	f7f5 f9fb 	bl	8000638 <__aeabi_dmul>
 800b242:	a36b      	add	r3, pc, #428	; (adr r3, 800b3f0 <atan+0x2d8>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	f7f5 f840 	bl	80002cc <__adddf3>
 800b24c:	4632      	mov	r2, r6
 800b24e:	463b      	mov	r3, r7
 800b250:	f7f5 f9f2 	bl	8000638 <__aeabi_dmul>
 800b254:	a368      	add	r3, pc, #416	; (adr r3, 800b3f8 <atan+0x2e0>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	f7f5 f837 	bl	80002cc <__adddf3>
 800b25e:	4642      	mov	r2, r8
 800b260:	464b      	mov	r3, r9
 800b262:	f7f5 f9e9 	bl	8000638 <__aeabi_dmul>
 800b266:	a366      	add	r3, pc, #408	; (adr r3, 800b400 <atan+0x2e8>)
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	4680      	mov	r8, r0
 800b26e:	4689      	mov	r9, r1
 800b270:	4630      	mov	r0, r6
 800b272:	4639      	mov	r1, r7
 800b274:	f7f5 f9e0 	bl	8000638 <__aeabi_dmul>
 800b278:	a363      	add	r3, pc, #396	; (adr r3, 800b408 <atan+0x2f0>)
 800b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27e:	f7f5 f823 	bl	80002c8 <__aeabi_dsub>
 800b282:	4632      	mov	r2, r6
 800b284:	463b      	mov	r3, r7
 800b286:	f7f5 f9d7 	bl	8000638 <__aeabi_dmul>
 800b28a:	a361      	add	r3, pc, #388	; (adr r3, 800b410 <atan+0x2f8>)
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f7f5 f81a 	bl	80002c8 <__aeabi_dsub>
 800b294:	4632      	mov	r2, r6
 800b296:	463b      	mov	r3, r7
 800b298:	f7f5 f9ce 	bl	8000638 <__aeabi_dmul>
 800b29c:	a35e      	add	r3, pc, #376	; (adr r3, 800b418 <atan+0x300>)
 800b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a2:	f7f5 f811 	bl	80002c8 <__aeabi_dsub>
 800b2a6:	4632      	mov	r2, r6
 800b2a8:	463b      	mov	r3, r7
 800b2aa:	f7f5 f9c5 	bl	8000638 <__aeabi_dmul>
 800b2ae:	a35c      	add	r3, pc, #368	; (adr r3, 800b420 <atan+0x308>)
 800b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b4:	f7f5 f808 	bl	80002c8 <__aeabi_dsub>
 800b2b8:	4632      	mov	r2, r6
 800b2ba:	463b      	mov	r3, r7
 800b2bc:	f7f5 f9bc 	bl	8000638 <__aeabi_dmul>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4640      	mov	r0, r8
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	f7f5 f800 	bl	80002cc <__adddf3>
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	462b      	mov	r3, r5
 800b2d0:	f7f5 f9b2 	bl	8000638 <__aeabi_dmul>
 800b2d4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	d14b      	bne.n	800b376 <atan+0x25e>
 800b2de:	4620      	mov	r0, r4
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	f7f4 fff1 	bl	80002c8 <__aeabi_dsub>
 800b2e6:	e72c      	b.n	800b142 <atan+0x2a>
 800b2e8:	ee10 0a10 	vmov	r0, s0
 800b2ec:	4b53      	ldr	r3, [pc, #332]	; (800b43c <atan+0x324>)
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7f4 ffe9 	bl	80002c8 <__aeabi_dsub>
 800b2f6:	4b51      	ldr	r3, [pc, #324]	; (800b43c <atan+0x324>)
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	460f      	mov	r7, r1
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	4620      	mov	r0, r4
 800b300:	4629      	mov	r1, r5
 800b302:	f7f4 ffe3 	bl	80002cc <__adddf3>
 800b306:	4602      	mov	r2, r0
 800b308:	460b      	mov	r3, r1
 800b30a:	4630      	mov	r0, r6
 800b30c:	4639      	mov	r1, r7
 800b30e:	f7f5 fabd 	bl	800088c <__aeabi_ddiv>
 800b312:	f04f 0a01 	mov.w	sl, #1
 800b316:	4604      	mov	r4, r0
 800b318:	460d      	mov	r5, r1
 800b31a:	e764      	b.n	800b1e6 <atan+0xce>
 800b31c:	4b49      	ldr	r3, [pc, #292]	; (800b444 <atan+0x32c>)
 800b31e:	429e      	cmp	r6, r3
 800b320:	da1d      	bge.n	800b35e <atan+0x246>
 800b322:	ee10 0a10 	vmov	r0, s0
 800b326:	4b48      	ldr	r3, [pc, #288]	; (800b448 <atan+0x330>)
 800b328:	2200      	movs	r2, #0
 800b32a:	4629      	mov	r1, r5
 800b32c:	f7f4 ffcc 	bl	80002c8 <__aeabi_dsub>
 800b330:	4b45      	ldr	r3, [pc, #276]	; (800b448 <atan+0x330>)
 800b332:	4606      	mov	r6, r0
 800b334:	460f      	mov	r7, r1
 800b336:	2200      	movs	r2, #0
 800b338:	4620      	mov	r0, r4
 800b33a:	4629      	mov	r1, r5
 800b33c:	f7f5 f97c 	bl	8000638 <__aeabi_dmul>
 800b340:	4b3e      	ldr	r3, [pc, #248]	; (800b43c <atan+0x324>)
 800b342:	2200      	movs	r2, #0
 800b344:	f7f4 ffc2 	bl	80002cc <__adddf3>
 800b348:	4602      	mov	r2, r0
 800b34a:	460b      	mov	r3, r1
 800b34c:	4630      	mov	r0, r6
 800b34e:	4639      	mov	r1, r7
 800b350:	f7f5 fa9c 	bl	800088c <__aeabi_ddiv>
 800b354:	f04f 0a02 	mov.w	sl, #2
 800b358:	4604      	mov	r4, r0
 800b35a:	460d      	mov	r5, r1
 800b35c:	e743      	b.n	800b1e6 <atan+0xce>
 800b35e:	462b      	mov	r3, r5
 800b360:	ee10 2a10 	vmov	r2, s0
 800b364:	4939      	ldr	r1, [pc, #228]	; (800b44c <atan+0x334>)
 800b366:	2000      	movs	r0, #0
 800b368:	f7f5 fa90 	bl	800088c <__aeabi_ddiv>
 800b36c:	f04f 0a03 	mov.w	sl, #3
 800b370:	4604      	mov	r4, r0
 800b372:	460d      	mov	r5, r1
 800b374:	e737      	b.n	800b1e6 <atan+0xce>
 800b376:	4b36      	ldr	r3, [pc, #216]	; (800b450 <atan+0x338>)
 800b378:	4e36      	ldr	r6, [pc, #216]	; (800b454 <atan+0x33c>)
 800b37a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	f7f4 ffa1 	bl	80002c8 <__aeabi_dsub>
 800b386:	4622      	mov	r2, r4
 800b388:	462b      	mov	r3, r5
 800b38a:	f7f4 ff9d 	bl	80002c8 <__aeabi_dsub>
 800b38e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b392:	4602      	mov	r2, r0
 800b394:	460b      	mov	r3, r1
 800b396:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b39a:	f7f4 ff95 	bl	80002c8 <__aeabi_dsub>
 800b39e:	f1bb 0f00 	cmp.w	fp, #0
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	460d      	mov	r5, r1
 800b3a6:	f6bf aed6 	bge.w	800b156 <atan+0x3e>
 800b3aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3ae:	461d      	mov	r5, r3
 800b3b0:	e6d1      	b.n	800b156 <atan+0x3e>
 800b3b2:	a51d      	add	r5, pc, #116	; (adr r5, 800b428 <atan+0x310>)
 800b3b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3b8:	e6cd      	b.n	800b156 <atan+0x3e>
 800b3ba:	bf00      	nop
 800b3bc:	f3af 8000 	nop.w
 800b3c0:	54442d18 	.word	0x54442d18
 800b3c4:	bff921fb 	.word	0xbff921fb
 800b3c8:	8800759c 	.word	0x8800759c
 800b3cc:	7e37e43c 	.word	0x7e37e43c
 800b3d0:	e322da11 	.word	0xe322da11
 800b3d4:	3f90ad3a 	.word	0x3f90ad3a
 800b3d8:	24760deb 	.word	0x24760deb
 800b3dc:	3fa97b4b 	.word	0x3fa97b4b
 800b3e0:	a0d03d51 	.word	0xa0d03d51
 800b3e4:	3fb10d66 	.word	0x3fb10d66
 800b3e8:	c54c206e 	.word	0xc54c206e
 800b3ec:	3fb745cd 	.word	0x3fb745cd
 800b3f0:	920083ff 	.word	0x920083ff
 800b3f4:	3fc24924 	.word	0x3fc24924
 800b3f8:	5555550d 	.word	0x5555550d
 800b3fc:	3fd55555 	.word	0x3fd55555
 800b400:	2c6a6c2f 	.word	0x2c6a6c2f
 800b404:	bfa2b444 	.word	0xbfa2b444
 800b408:	52defd9a 	.word	0x52defd9a
 800b40c:	3fadde2d 	.word	0x3fadde2d
 800b410:	af749a6d 	.word	0xaf749a6d
 800b414:	3fb3b0f2 	.word	0x3fb3b0f2
 800b418:	fe231671 	.word	0xfe231671
 800b41c:	3fbc71c6 	.word	0x3fbc71c6
 800b420:	9998ebc4 	.word	0x9998ebc4
 800b424:	3fc99999 	.word	0x3fc99999
 800b428:	54442d18 	.word	0x54442d18
 800b42c:	3ff921fb 	.word	0x3ff921fb
 800b430:	440fffff 	.word	0x440fffff
 800b434:	7ff00000 	.word	0x7ff00000
 800b438:	3fdbffff 	.word	0x3fdbffff
 800b43c:	3ff00000 	.word	0x3ff00000
 800b440:	3ff2ffff 	.word	0x3ff2ffff
 800b444:	40038000 	.word	0x40038000
 800b448:	3ff80000 	.word	0x3ff80000
 800b44c:	bff00000 	.word	0xbff00000
 800b450:	0800cf50 	.word	0x0800cf50
 800b454:	0800cf30 	.word	0x0800cf30

0800b458 <fabs>:
 800b458:	ec51 0b10 	vmov	r0, r1, d0
 800b45c:	ee10 2a10 	vmov	r2, s0
 800b460:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b464:	ec43 2b10 	vmov	d0, r2, r3
 800b468:	4770      	bx	lr
 800b46a:	0000      	movs	r0, r0
 800b46c:	0000      	movs	r0, r0
	...

0800b470 <sin>:
 800b470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b472:	ec53 2b10 	vmov	r2, r3, d0
 800b476:	4828      	ldr	r0, [pc, #160]	; (800b518 <sin+0xa8>)
 800b478:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b47c:	4281      	cmp	r1, r0
 800b47e:	dc07      	bgt.n	800b490 <sin+0x20>
 800b480:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b510 <sin+0xa0>
 800b484:	2000      	movs	r0, #0
 800b486:	b005      	add	sp, #20
 800b488:	f85d eb04 	ldr.w	lr, [sp], #4
 800b48c:	f000 b9ec 	b.w	800b868 <__kernel_sin>
 800b490:	4822      	ldr	r0, [pc, #136]	; (800b51c <sin+0xac>)
 800b492:	4281      	cmp	r1, r0
 800b494:	dd09      	ble.n	800b4aa <sin+0x3a>
 800b496:	ee10 0a10 	vmov	r0, s0
 800b49a:	4619      	mov	r1, r3
 800b49c:	f7f4 ff14 	bl	80002c8 <__aeabi_dsub>
 800b4a0:	ec41 0b10 	vmov	d0, r0, r1
 800b4a4:	b005      	add	sp, #20
 800b4a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b4aa:	4668      	mov	r0, sp
 800b4ac:	f000 fcb0 	bl	800be10 <__ieee754_rem_pio2>
 800b4b0:	f000 0003 	and.w	r0, r0, #3
 800b4b4:	2801      	cmp	r0, #1
 800b4b6:	d00c      	beq.n	800b4d2 <sin+0x62>
 800b4b8:	2802      	cmp	r0, #2
 800b4ba:	d011      	beq.n	800b4e0 <sin+0x70>
 800b4bc:	b9f0      	cbnz	r0, 800b4fc <sin+0x8c>
 800b4be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b4c2:	ed9d 0b00 	vldr	d0, [sp]
 800b4c6:	2001      	movs	r0, #1
 800b4c8:	f000 f9ce 	bl	800b868 <__kernel_sin>
 800b4cc:	ec51 0b10 	vmov	r0, r1, d0
 800b4d0:	e7e6      	b.n	800b4a0 <sin+0x30>
 800b4d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b4d6:	ed9d 0b00 	vldr	d0, [sp]
 800b4da:	f000 f8fd 	bl	800b6d8 <__kernel_cos>
 800b4de:	e7f5      	b.n	800b4cc <sin+0x5c>
 800b4e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b4e4:	ed9d 0b00 	vldr	d0, [sp]
 800b4e8:	2001      	movs	r0, #1
 800b4ea:	f000 f9bd 	bl	800b868 <__kernel_sin>
 800b4ee:	ec53 2b10 	vmov	r2, r3, d0
 800b4f2:	ee10 0a10 	vmov	r0, s0
 800b4f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b4fa:	e7d1      	b.n	800b4a0 <sin+0x30>
 800b4fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b500:	ed9d 0b00 	vldr	d0, [sp]
 800b504:	f000 f8e8 	bl	800b6d8 <__kernel_cos>
 800b508:	e7f1      	b.n	800b4ee <sin+0x7e>
 800b50a:	bf00      	nop
 800b50c:	f3af 8000 	nop.w
	...
 800b518:	3fe921fb 	.word	0x3fe921fb
 800b51c:	7fefffff 	.word	0x7fefffff

0800b520 <__ieee754_sqrt>:
 800b520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b524:	ec55 4b10 	vmov	r4, r5, d0
 800b528:	4e67      	ldr	r6, [pc, #412]	; (800b6c8 <__ieee754_sqrt+0x1a8>)
 800b52a:	43ae      	bics	r6, r5
 800b52c:	ee10 0a10 	vmov	r0, s0
 800b530:	ee10 2a10 	vmov	r2, s0
 800b534:	4629      	mov	r1, r5
 800b536:	462b      	mov	r3, r5
 800b538:	d10d      	bne.n	800b556 <__ieee754_sqrt+0x36>
 800b53a:	f7f5 f87d 	bl	8000638 <__aeabi_dmul>
 800b53e:	4602      	mov	r2, r0
 800b540:	460b      	mov	r3, r1
 800b542:	4620      	mov	r0, r4
 800b544:	4629      	mov	r1, r5
 800b546:	f7f4 fec1 	bl	80002cc <__adddf3>
 800b54a:	4604      	mov	r4, r0
 800b54c:	460d      	mov	r5, r1
 800b54e:	ec45 4b10 	vmov	d0, r4, r5
 800b552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b556:	2d00      	cmp	r5, #0
 800b558:	dc0b      	bgt.n	800b572 <__ieee754_sqrt+0x52>
 800b55a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b55e:	4326      	orrs	r6, r4
 800b560:	d0f5      	beq.n	800b54e <__ieee754_sqrt+0x2e>
 800b562:	b135      	cbz	r5, 800b572 <__ieee754_sqrt+0x52>
 800b564:	f7f4 feb0 	bl	80002c8 <__aeabi_dsub>
 800b568:	4602      	mov	r2, r0
 800b56a:	460b      	mov	r3, r1
 800b56c:	f7f5 f98e 	bl	800088c <__aeabi_ddiv>
 800b570:	e7eb      	b.n	800b54a <__ieee754_sqrt+0x2a>
 800b572:	1509      	asrs	r1, r1, #20
 800b574:	f000 808d 	beq.w	800b692 <__ieee754_sqrt+0x172>
 800b578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b57c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b584:	07c9      	lsls	r1, r1, #31
 800b586:	bf5c      	itt	pl
 800b588:	005b      	lslpl	r3, r3, #1
 800b58a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b58e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b592:	bf58      	it	pl
 800b594:	0052      	lslpl	r2, r2, #1
 800b596:	2500      	movs	r5, #0
 800b598:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b59c:	1076      	asrs	r6, r6, #1
 800b59e:	0052      	lsls	r2, r2, #1
 800b5a0:	f04f 0e16 	mov.w	lr, #22
 800b5a4:	46ac      	mov	ip, r5
 800b5a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5aa:	eb0c 0001 	add.w	r0, ip, r1
 800b5ae:	4298      	cmp	r0, r3
 800b5b0:	bfde      	ittt	le
 800b5b2:	1a1b      	suble	r3, r3, r0
 800b5b4:	eb00 0c01 	addle.w	ip, r0, r1
 800b5b8:	186d      	addle	r5, r5, r1
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	f1be 0e01 	subs.w	lr, lr, #1
 800b5c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b5c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b5c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b5cc:	d1ed      	bne.n	800b5aa <__ieee754_sqrt+0x8a>
 800b5ce:	4674      	mov	r4, lr
 800b5d0:	2720      	movs	r7, #32
 800b5d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b5d6:	4563      	cmp	r3, ip
 800b5d8:	eb01 000e 	add.w	r0, r1, lr
 800b5dc:	dc02      	bgt.n	800b5e4 <__ieee754_sqrt+0xc4>
 800b5de:	d113      	bne.n	800b608 <__ieee754_sqrt+0xe8>
 800b5e0:	4290      	cmp	r0, r2
 800b5e2:	d811      	bhi.n	800b608 <__ieee754_sqrt+0xe8>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	eb00 0e01 	add.w	lr, r0, r1
 800b5ea:	da57      	bge.n	800b69c <__ieee754_sqrt+0x17c>
 800b5ec:	f1be 0f00 	cmp.w	lr, #0
 800b5f0:	db54      	blt.n	800b69c <__ieee754_sqrt+0x17c>
 800b5f2:	f10c 0801 	add.w	r8, ip, #1
 800b5f6:	eba3 030c 	sub.w	r3, r3, ip
 800b5fa:	4290      	cmp	r0, r2
 800b5fc:	bf88      	it	hi
 800b5fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b602:	1a12      	subs	r2, r2, r0
 800b604:	440c      	add	r4, r1
 800b606:	46c4      	mov	ip, r8
 800b608:	005b      	lsls	r3, r3, #1
 800b60a:	3f01      	subs	r7, #1
 800b60c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b610:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b614:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b618:	d1dd      	bne.n	800b5d6 <__ieee754_sqrt+0xb6>
 800b61a:	4313      	orrs	r3, r2
 800b61c:	d01b      	beq.n	800b656 <__ieee754_sqrt+0x136>
 800b61e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b6cc <__ieee754_sqrt+0x1ac>
 800b622:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b6d0 <__ieee754_sqrt+0x1b0>
 800b626:	e9da 0100 	ldrd	r0, r1, [sl]
 800b62a:	e9db 2300 	ldrd	r2, r3, [fp]
 800b62e:	f7f4 fe4b 	bl	80002c8 <__aeabi_dsub>
 800b632:	e9da 8900 	ldrd	r8, r9, [sl]
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4640      	mov	r0, r8
 800b63c:	4649      	mov	r1, r9
 800b63e:	f7f5 fa77 	bl	8000b30 <__aeabi_dcmple>
 800b642:	b140      	cbz	r0, 800b656 <__ieee754_sqrt+0x136>
 800b644:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b648:	e9da 0100 	ldrd	r0, r1, [sl]
 800b64c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b650:	d126      	bne.n	800b6a0 <__ieee754_sqrt+0x180>
 800b652:	3501      	adds	r5, #1
 800b654:	463c      	mov	r4, r7
 800b656:	106a      	asrs	r2, r5, #1
 800b658:	0863      	lsrs	r3, r4, #1
 800b65a:	07e9      	lsls	r1, r5, #31
 800b65c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b660:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b664:	bf48      	it	mi
 800b666:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b66a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b66e:	461c      	mov	r4, r3
 800b670:	e76d      	b.n	800b54e <__ieee754_sqrt+0x2e>
 800b672:	0ad3      	lsrs	r3, r2, #11
 800b674:	3815      	subs	r0, #21
 800b676:	0552      	lsls	r2, r2, #21
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d0fa      	beq.n	800b672 <__ieee754_sqrt+0x152>
 800b67c:	02dc      	lsls	r4, r3, #11
 800b67e:	d50a      	bpl.n	800b696 <__ieee754_sqrt+0x176>
 800b680:	f1c1 0420 	rsb	r4, r1, #32
 800b684:	fa22 f404 	lsr.w	r4, r2, r4
 800b688:	1e4d      	subs	r5, r1, #1
 800b68a:	408a      	lsls	r2, r1
 800b68c:	4323      	orrs	r3, r4
 800b68e:	1b41      	subs	r1, r0, r5
 800b690:	e772      	b.n	800b578 <__ieee754_sqrt+0x58>
 800b692:	4608      	mov	r0, r1
 800b694:	e7f0      	b.n	800b678 <__ieee754_sqrt+0x158>
 800b696:	005b      	lsls	r3, r3, #1
 800b698:	3101      	adds	r1, #1
 800b69a:	e7ef      	b.n	800b67c <__ieee754_sqrt+0x15c>
 800b69c:	46e0      	mov	r8, ip
 800b69e:	e7aa      	b.n	800b5f6 <__ieee754_sqrt+0xd6>
 800b6a0:	f7f4 fe14 	bl	80002cc <__adddf3>
 800b6a4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4640      	mov	r0, r8
 800b6ae:	4649      	mov	r1, r9
 800b6b0:	f7f5 fa34 	bl	8000b1c <__aeabi_dcmplt>
 800b6b4:	b120      	cbz	r0, 800b6c0 <__ieee754_sqrt+0x1a0>
 800b6b6:	1ca0      	adds	r0, r4, #2
 800b6b8:	bf08      	it	eq
 800b6ba:	3501      	addeq	r5, #1
 800b6bc:	3402      	adds	r4, #2
 800b6be:	e7ca      	b.n	800b656 <__ieee754_sqrt+0x136>
 800b6c0:	3401      	adds	r4, #1
 800b6c2:	f024 0401 	bic.w	r4, r4, #1
 800b6c6:	e7c6      	b.n	800b656 <__ieee754_sqrt+0x136>
 800b6c8:	7ff00000 	.word	0x7ff00000
 800b6cc:	200001e8 	.word	0x200001e8
 800b6d0:	200001f0 	.word	0x200001f0
 800b6d4:	00000000 	.word	0x00000000

0800b6d8 <__kernel_cos>:
 800b6d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	ec57 6b10 	vmov	r6, r7, d0
 800b6e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b6e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b6e8:	ed8d 1b00 	vstr	d1, [sp]
 800b6ec:	da07      	bge.n	800b6fe <__kernel_cos+0x26>
 800b6ee:	ee10 0a10 	vmov	r0, s0
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	f7f5 fa50 	bl	8000b98 <__aeabi_d2iz>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	f000 8088 	beq.w	800b80e <__kernel_cos+0x136>
 800b6fe:	4632      	mov	r2, r6
 800b700:	463b      	mov	r3, r7
 800b702:	4630      	mov	r0, r6
 800b704:	4639      	mov	r1, r7
 800b706:	f7f4 ff97 	bl	8000638 <__aeabi_dmul>
 800b70a:	4b51      	ldr	r3, [pc, #324]	; (800b850 <__kernel_cos+0x178>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	4604      	mov	r4, r0
 800b710:	460d      	mov	r5, r1
 800b712:	f7f4 ff91 	bl	8000638 <__aeabi_dmul>
 800b716:	a340      	add	r3, pc, #256	; (adr r3, 800b818 <__kernel_cos+0x140>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	4682      	mov	sl, r0
 800b71e:	468b      	mov	fp, r1
 800b720:	4620      	mov	r0, r4
 800b722:	4629      	mov	r1, r5
 800b724:	f7f4 ff88 	bl	8000638 <__aeabi_dmul>
 800b728:	a33d      	add	r3, pc, #244	; (adr r3, 800b820 <__kernel_cos+0x148>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f4 fdcd 	bl	80002cc <__adddf3>
 800b732:	4622      	mov	r2, r4
 800b734:	462b      	mov	r3, r5
 800b736:	f7f4 ff7f 	bl	8000638 <__aeabi_dmul>
 800b73a:	a33b      	add	r3, pc, #236	; (adr r3, 800b828 <__kernel_cos+0x150>)
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	f7f4 fdc2 	bl	80002c8 <__aeabi_dsub>
 800b744:	4622      	mov	r2, r4
 800b746:	462b      	mov	r3, r5
 800b748:	f7f4 ff76 	bl	8000638 <__aeabi_dmul>
 800b74c:	a338      	add	r3, pc, #224	; (adr r3, 800b830 <__kernel_cos+0x158>)
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f7f4 fdbb 	bl	80002cc <__adddf3>
 800b756:	4622      	mov	r2, r4
 800b758:	462b      	mov	r3, r5
 800b75a:	f7f4 ff6d 	bl	8000638 <__aeabi_dmul>
 800b75e:	a336      	add	r3, pc, #216	; (adr r3, 800b838 <__kernel_cos+0x160>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f7f4 fdb0 	bl	80002c8 <__aeabi_dsub>
 800b768:	4622      	mov	r2, r4
 800b76a:	462b      	mov	r3, r5
 800b76c:	f7f4 ff64 	bl	8000638 <__aeabi_dmul>
 800b770:	a333      	add	r3, pc, #204	; (adr r3, 800b840 <__kernel_cos+0x168>)
 800b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b776:	f7f4 fda9 	bl	80002cc <__adddf3>
 800b77a:	4622      	mov	r2, r4
 800b77c:	462b      	mov	r3, r5
 800b77e:	f7f4 ff5b 	bl	8000638 <__aeabi_dmul>
 800b782:	4622      	mov	r2, r4
 800b784:	462b      	mov	r3, r5
 800b786:	f7f4 ff57 	bl	8000638 <__aeabi_dmul>
 800b78a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b78e:	4604      	mov	r4, r0
 800b790:	460d      	mov	r5, r1
 800b792:	4630      	mov	r0, r6
 800b794:	4639      	mov	r1, r7
 800b796:	f7f4 ff4f 	bl	8000638 <__aeabi_dmul>
 800b79a:	460b      	mov	r3, r1
 800b79c:	4602      	mov	r2, r0
 800b79e:	4629      	mov	r1, r5
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f7f4 fd91 	bl	80002c8 <__aeabi_dsub>
 800b7a6:	4b2b      	ldr	r3, [pc, #172]	; (800b854 <__kernel_cos+0x17c>)
 800b7a8:	4598      	cmp	r8, r3
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	dc10      	bgt.n	800b7d2 <__kernel_cos+0xfa>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4650      	mov	r0, sl
 800b7b6:	4659      	mov	r1, fp
 800b7b8:	f7f4 fd86 	bl	80002c8 <__aeabi_dsub>
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4926      	ldr	r1, [pc, #152]	; (800b858 <__kernel_cos+0x180>)
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	2000      	movs	r0, #0
 800b7c4:	f7f4 fd80 	bl	80002c8 <__aeabi_dsub>
 800b7c8:	ec41 0b10 	vmov	d0, r0, r1
 800b7cc:	b003      	add	sp, #12
 800b7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d2:	4b22      	ldr	r3, [pc, #136]	; (800b85c <__kernel_cos+0x184>)
 800b7d4:	4920      	ldr	r1, [pc, #128]	; (800b858 <__kernel_cos+0x180>)
 800b7d6:	4598      	cmp	r8, r3
 800b7d8:	bfcc      	ite	gt
 800b7da:	4d21      	ldrgt	r5, [pc, #132]	; (800b860 <__kernel_cos+0x188>)
 800b7dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b7e0:	2400      	movs	r4, #0
 800b7e2:	4622      	mov	r2, r4
 800b7e4:	462b      	mov	r3, r5
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	f7f4 fd6e 	bl	80002c8 <__aeabi_dsub>
 800b7ec:	4622      	mov	r2, r4
 800b7ee:	4680      	mov	r8, r0
 800b7f0:	4689      	mov	r9, r1
 800b7f2:	462b      	mov	r3, r5
 800b7f4:	4650      	mov	r0, sl
 800b7f6:	4659      	mov	r1, fp
 800b7f8:	f7f4 fd66 	bl	80002c8 <__aeabi_dsub>
 800b7fc:	4632      	mov	r2, r6
 800b7fe:	463b      	mov	r3, r7
 800b800:	f7f4 fd62 	bl	80002c8 <__aeabi_dsub>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	4640      	mov	r0, r8
 800b80a:	4649      	mov	r1, r9
 800b80c:	e7da      	b.n	800b7c4 <__kernel_cos+0xec>
 800b80e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b848 <__kernel_cos+0x170>
 800b812:	e7db      	b.n	800b7cc <__kernel_cos+0xf4>
 800b814:	f3af 8000 	nop.w
 800b818:	be8838d4 	.word	0xbe8838d4
 800b81c:	bda8fae9 	.word	0xbda8fae9
 800b820:	bdb4b1c4 	.word	0xbdb4b1c4
 800b824:	3e21ee9e 	.word	0x3e21ee9e
 800b828:	809c52ad 	.word	0x809c52ad
 800b82c:	3e927e4f 	.word	0x3e927e4f
 800b830:	19cb1590 	.word	0x19cb1590
 800b834:	3efa01a0 	.word	0x3efa01a0
 800b838:	16c15177 	.word	0x16c15177
 800b83c:	3f56c16c 	.word	0x3f56c16c
 800b840:	5555554c 	.word	0x5555554c
 800b844:	3fa55555 	.word	0x3fa55555
 800b848:	00000000 	.word	0x00000000
 800b84c:	3ff00000 	.word	0x3ff00000
 800b850:	3fe00000 	.word	0x3fe00000
 800b854:	3fd33332 	.word	0x3fd33332
 800b858:	3ff00000 	.word	0x3ff00000
 800b85c:	3fe90000 	.word	0x3fe90000
 800b860:	3fd20000 	.word	0x3fd20000
 800b864:	00000000 	.word	0x00000000

0800b868 <__kernel_sin>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	ed2d 8b04 	vpush	{d8-d9}
 800b870:	eeb0 8a41 	vmov.f32	s16, s2
 800b874:	eef0 8a61 	vmov.f32	s17, s3
 800b878:	ec55 4b10 	vmov	r4, r5, d0
 800b87c:	b083      	sub	sp, #12
 800b87e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b882:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b886:	9001      	str	r0, [sp, #4]
 800b888:	da06      	bge.n	800b898 <__kernel_sin+0x30>
 800b88a:	ee10 0a10 	vmov	r0, s0
 800b88e:	4629      	mov	r1, r5
 800b890:	f7f5 f982 	bl	8000b98 <__aeabi_d2iz>
 800b894:	2800      	cmp	r0, #0
 800b896:	d051      	beq.n	800b93c <__kernel_sin+0xd4>
 800b898:	4622      	mov	r2, r4
 800b89a:	462b      	mov	r3, r5
 800b89c:	4620      	mov	r0, r4
 800b89e:	4629      	mov	r1, r5
 800b8a0:	f7f4 feca 	bl	8000638 <__aeabi_dmul>
 800b8a4:	4682      	mov	sl, r0
 800b8a6:	468b      	mov	fp, r1
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	f7f4 fec2 	bl	8000638 <__aeabi_dmul>
 800b8b4:	a341      	add	r3, pc, #260	; (adr r3, 800b9bc <__kernel_sin+0x154>)
 800b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ba:	4680      	mov	r8, r0
 800b8bc:	4689      	mov	r9, r1
 800b8be:	4650      	mov	r0, sl
 800b8c0:	4659      	mov	r1, fp
 800b8c2:	f7f4 feb9 	bl	8000638 <__aeabi_dmul>
 800b8c6:	a33f      	add	r3, pc, #252	; (adr r3, 800b9c4 <__kernel_sin+0x15c>)
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	f7f4 fcfc 	bl	80002c8 <__aeabi_dsub>
 800b8d0:	4652      	mov	r2, sl
 800b8d2:	465b      	mov	r3, fp
 800b8d4:	f7f4 feb0 	bl	8000638 <__aeabi_dmul>
 800b8d8:	a33c      	add	r3, pc, #240	; (adr r3, 800b9cc <__kernel_sin+0x164>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	f7f4 fcf5 	bl	80002cc <__adddf3>
 800b8e2:	4652      	mov	r2, sl
 800b8e4:	465b      	mov	r3, fp
 800b8e6:	f7f4 fea7 	bl	8000638 <__aeabi_dmul>
 800b8ea:	a33a      	add	r3, pc, #232	; (adr r3, 800b9d4 <__kernel_sin+0x16c>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	f7f4 fcea 	bl	80002c8 <__aeabi_dsub>
 800b8f4:	4652      	mov	r2, sl
 800b8f6:	465b      	mov	r3, fp
 800b8f8:	f7f4 fe9e 	bl	8000638 <__aeabi_dmul>
 800b8fc:	a337      	add	r3, pc, #220	; (adr r3, 800b9dc <__kernel_sin+0x174>)
 800b8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b902:	f7f4 fce3 	bl	80002cc <__adddf3>
 800b906:	9b01      	ldr	r3, [sp, #4]
 800b908:	4606      	mov	r6, r0
 800b90a:	460f      	mov	r7, r1
 800b90c:	b9eb      	cbnz	r3, 800b94a <__kernel_sin+0xe2>
 800b90e:	4602      	mov	r2, r0
 800b910:	460b      	mov	r3, r1
 800b912:	4650      	mov	r0, sl
 800b914:	4659      	mov	r1, fp
 800b916:	f7f4 fe8f 	bl	8000638 <__aeabi_dmul>
 800b91a:	a325      	add	r3, pc, #148	; (adr r3, 800b9b0 <__kernel_sin+0x148>)
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	f7f4 fcd2 	bl	80002c8 <__aeabi_dsub>
 800b924:	4642      	mov	r2, r8
 800b926:	464b      	mov	r3, r9
 800b928:	f7f4 fe86 	bl	8000638 <__aeabi_dmul>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4620      	mov	r0, r4
 800b932:	4629      	mov	r1, r5
 800b934:	f7f4 fcca 	bl	80002cc <__adddf3>
 800b938:	4604      	mov	r4, r0
 800b93a:	460d      	mov	r5, r1
 800b93c:	ec45 4b10 	vmov	d0, r4, r5
 800b940:	b003      	add	sp, #12
 800b942:	ecbd 8b04 	vpop	{d8-d9}
 800b946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94a:	4b1b      	ldr	r3, [pc, #108]	; (800b9b8 <__kernel_sin+0x150>)
 800b94c:	ec51 0b18 	vmov	r0, r1, d8
 800b950:	2200      	movs	r2, #0
 800b952:	f7f4 fe71 	bl	8000638 <__aeabi_dmul>
 800b956:	4632      	mov	r2, r6
 800b958:	ec41 0b19 	vmov	d9, r0, r1
 800b95c:	463b      	mov	r3, r7
 800b95e:	4640      	mov	r0, r8
 800b960:	4649      	mov	r1, r9
 800b962:	f7f4 fe69 	bl	8000638 <__aeabi_dmul>
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	ec51 0b19 	vmov	r0, r1, d9
 800b96e:	f7f4 fcab 	bl	80002c8 <__aeabi_dsub>
 800b972:	4652      	mov	r2, sl
 800b974:	465b      	mov	r3, fp
 800b976:	f7f4 fe5f 	bl	8000638 <__aeabi_dmul>
 800b97a:	ec53 2b18 	vmov	r2, r3, d8
 800b97e:	f7f4 fca3 	bl	80002c8 <__aeabi_dsub>
 800b982:	a30b      	add	r3, pc, #44	; (adr r3, 800b9b0 <__kernel_sin+0x148>)
 800b984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b988:	4606      	mov	r6, r0
 800b98a:	460f      	mov	r7, r1
 800b98c:	4640      	mov	r0, r8
 800b98e:	4649      	mov	r1, r9
 800b990:	f7f4 fe52 	bl	8000638 <__aeabi_dmul>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4630      	mov	r0, r6
 800b99a:	4639      	mov	r1, r7
 800b99c:	f7f4 fc96 	bl	80002cc <__adddf3>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	4629      	mov	r1, r5
 800b9a8:	f7f4 fc8e 	bl	80002c8 <__aeabi_dsub>
 800b9ac:	e7c4      	b.n	800b938 <__kernel_sin+0xd0>
 800b9ae:	bf00      	nop
 800b9b0:	55555549 	.word	0x55555549
 800b9b4:	3fc55555 	.word	0x3fc55555
 800b9b8:	3fe00000 	.word	0x3fe00000
 800b9bc:	5acfd57c 	.word	0x5acfd57c
 800b9c0:	3de5d93a 	.word	0x3de5d93a
 800b9c4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b9c8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b9cc:	57b1fe7d 	.word	0x57b1fe7d
 800b9d0:	3ec71de3 	.word	0x3ec71de3
 800b9d4:	19c161d5 	.word	0x19c161d5
 800b9d8:	3f2a01a0 	.word	0x3f2a01a0
 800b9dc:	1110f8a6 	.word	0x1110f8a6
 800b9e0:	3f811111 	.word	0x3f811111
 800b9e4:	00000000 	.word	0x00000000

0800b9e8 <__ieee754_asin>:
 800b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ec:	ed2d 8b04 	vpush	{d8-d9}
 800b9f0:	ec55 4b10 	vmov	r4, r5, d0
 800b9f4:	4bcc      	ldr	r3, [pc, #816]	; (800bd28 <__ieee754_asin+0x340>)
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b9fc:	4598      	cmp	r8, r3
 800b9fe:	9501      	str	r5, [sp, #4]
 800ba00:	dd33      	ble.n	800ba6a <__ieee754_asin+0x82>
 800ba02:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800ba06:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800ba0a:	ea58 0804 	orrs.w	r8, r8, r4
 800ba0e:	d117      	bne.n	800ba40 <__ieee754_asin+0x58>
 800ba10:	a3ab      	add	r3, pc, #684	; (adr r3, 800bcc0 <__ieee754_asin+0x2d8>)
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	ee10 0a10 	vmov	r0, s0
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	f7f4 fe0c 	bl	8000638 <__aeabi_dmul>
 800ba20:	a3a9      	add	r3, pc, #676	; (adr r3, 800bcc8 <__ieee754_asin+0x2e0>)
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	4606      	mov	r6, r0
 800ba28:	460f      	mov	r7, r1
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	f7f4 fe03 	bl	8000638 <__aeabi_dmul>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	4630      	mov	r0, r6
 800ba38:	4639      	mov	r1, r7
 800ba3a:	f7f4 fc47 	bl	80002cc <__adddf3>
 800ba3e:	e00b      	b.n	800ba58 <__ieee754_asin+0x70>
 800ba40:	ee10 2a10 	vmov	r2, s0
 800ba44:	462b      	mov	r3, r5
 800ba46:	ee10 0a10 	vmov	r0, s0
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	f7f4 fc3c 	bl	80002c8 <__aeabi_dsub>
 800ba50:	4602      	mov	r2, r0
 800ba52:	460b      	mov	r3, r1
 800ba54:	f7f4 ff1a 	bl	800088c <__aeabi_ddiv>
 800ba58:	4604      	mov	r4, r0
 800ba5a:	460d      	mov	r5, r1
 800ba5c:	ec45 4b10 	vmov	d0, r4, r5
 800ba60:	b003      	add	sp, #12
 800ba62:	ecbd 8b04 	vpop	{d8-d9}
 800ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6a:	4bb0      	ldr	r3, [pc, #704]	; (800bd2c <__ieee754_asin+0x344>)
 800ba6c:	4598      	cmp	r8, r3
 800ba6e:	dc11      	bgt.n	800ba94 <__ieee754_asin+0xac>
 800ba70:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ba74:	f280 80ae 	bge.w	800bbd4 <__ieee754_asin+0x1ec>
 800ba78:	a395      	add	r3, pc, #596	; (adr r3, 800bcd0 <__ieee754_asin+0x2e8>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	ee10 0a10 	vmov	r0, s0
 800ba82:	4629      	mov	r1, r5
 800ba84:	f7f4 fc22 	bl	80002cc <__adddf3>
 800ba88:	4ba9      	ldr	r3, [pc, #676]	; (800bd30 <__ieee754_asin+0x348>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f7f5 f864 	bl	8000b58 <__aeabi_dcmpgt>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d1e3      	bne.n	800ba5c <__ieee754_asin+0x74>
 800ba94:	ec45 4b10 	vmov	d0, r4, r5
 800ba98:	f7ff fcde 	bl	800b458 <fabs>
 800ba9c:	49a4      	ldr	r1, [pc, #656]	; (800bd30 <__ieee754_asin+0x348>)
 800ba9e:	ec53 2b10 	vmov	r2, r3, d0
 800baa2:	2000      	movs	r0, #0
 800baa4:	f7f4 fc10 	bl	80002c8 <__aeabi_dsub>
 800baa8:	4ba2      	ldr	r3, [pc, #648]	; (800bd34 <__ieee754_asin+0x34c>)
 800baaa:	2200      	movs	r2, #0
 800baac:	f7f4 fdc4 	bl	8000638 <__aeabi_dmul>
 800bab0:	a389      	add	r3, pc, #548	; (adr r3, 800bcd8 <__ieee754_asin+0x2f0>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	4604      	mov	r4, r0
 800bab8:	460d      	mov	r5, r1
 800baba:	f7f4 fdbd 	bl	8000638 <__aeabi_dmul>
 800babe:	a388      	add	r3, pc, #544	; (adr r3, 800bce0 <__ieee754_asin+0x2f8>)
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	f7f4 fc02 	bl	80002cc <__adddf3>
 800bac8:	4622      	mov	r2, r4
 800baca:	462b      	mov	r3, r5
 800bacc:	f7f4 fdb4 	bl	8000638 <__aeabi_dmul>
 800bad0:	a385      	add	r3, pc, #532	; (adr r3, 800bce8 <__ieee754_asin+0x300>)
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	f7f4 fbf7 	bl	80002c8 <__aeabi_dsub>
 800bada:	4622      	mov	r2, r4
 800badc:	462b      	mov	r3, r5
 800bade:	f7f4 fdab 	bl	8000638 <__aeabi_dmul>
 800bae2:	a383      	add	r3, pc, #524	; (adr r3, 800bcf0 <__ieee754_asin+0x308>)
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	f7f4 fbf0 	bl	80002cc <__adddf3>
 800baec:	4622      	mov	r2, r4
 800baee:	462b      	mov	r3, r5
 800baf0:	f7f4 fda2 	bl	8000638 <__aeabi_dmul>
 800baf4:	a380      	add	r3, pc, #512	; (adr r3, 800bcf8 <__ieee754_asin+0x310>)
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	f7f4 fbe5 	bl	80002c8 <__aeabi_dsub>
 800bafe:	4622      	mov	r2, r4
 800bb00:	462b      	mov	r3, r5
 800bb02:	f7f4 fd99 	bl	8000638 <__aeabi_dmul>
 800bb06:	a37e      	add	r3, pc, #504	; (adr r3, 800bd00 <__ieee754_asin+0x318>)
 800bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0c:	f7f4 fbde 	bl	80002cc <__adddf3>
 800bb10:	4622      	mov	r2, r4
 800bb12:	462b      	mov	r3, r5
 800bb14:	f7f4 fd90 	bl	8000638 <__aeabi_dmul>
 800bb18:	a37b      	add	r3, pc, #492	; (adr r3, 800bd08 <__ieee754_asin+0x320>)
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	ec41 0b18 	vmov	d8, r0, r1
 800bb22:	4620      	mov	r0, r4
 800bb24:	4629      	mov	r1, r5
 800bb26:	f7f4 fd87 	bl	8000638 <__aeabi_dmul>
 800bb2a:	a379      	add	r3, pc, #484	; (adr r3, 800bd10 <__ieee754_asin+0x328>)
 800bb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb30:	f7f4 fbca 	bl	80002c8 <__aeabi_dsub>
 800bb34:	4622      	mov	r2, r4
 800bb36:	462b      	mov	r3, r5
 800bb38:	f7f4 fd7e 	bl	8000638 <__aeabi_dmul>
 800bb3c:	a376      	add	r3, pc, #472	; (adr r3, 800bd18 <__ieee754_asin+0x330>)
 800bb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb42:	f7f4 fbc3 	bl	80002cc <__adddf3>
 800bb46:	4622      	mov	r2, r4
 800bb48:	462b      	mov	r3, r5
 800bb4a:	f7f4 fd75 	bl	8000638 <__aeabi_dmul>
 800bb4e:	a374      	add	r3, pc, #464	; (adr r3, 800bd20 <__ieee754_asin+0x338>)
 800bb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb54:	f7f4 fbb8 	bl	80002c8 <__aeabi_dsub>
 800bb58:	4622      	mov	r2, r4
 800bb5a:	462b      	mov	r3, r5
 800bb5c:	f7f4 fd6c 	bl	8000638 <__aeabi_dmul>
 800bb60:	4b73      	ldr	r3, [pc, #460]	; (800bd30 <__ieee754_asin+0x348>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	f7f4 fbb2 	bl	80002cc <__adddf3>
 800bb68:	ec45 4b10 	vmov	d0, r4, r5
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	460f      	mov	r7, r1
 800bb70:	f7ff fcd6 	bl	800b520 <__ieee754_sqrt>
 800bb74:	4b70      	ldr	r3, [pc, #448]	; (800bd38 <__ieee754_asin+0x350>)
 800bb76:	4598      	cmp	r8, r3
 800bb78:	ec5b ab10 	vmov	sl, fp, d0
 800bb7c:	f340 80de 	ble.w	800bd3c <__ieee754_asin+0x354>
 800bb80:	4632      	mov	r2, r6
 800bb82:	463b      	mov	r3, r7
 800bb84:	ec51 0b18 	vmov	r0, r1, d8
 800bb88:	f7f4 fe80 	bl	800088c <__aeabi_ddiv>
 800bb8c:	4652      	mov	r2, sl
 800bb8e:	465b      	mov	r3, fp
 800bb90:	f7f4 fd52 	bl	8000638 <__aeabi_dmul>
 800bb94:	4652      	mov	r2, sl
 800bb96:	465b      	mov	r3, fp
 800bb98:	f7f4 fb98 	bl	80002cc <__adddf3>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	f7f4 fb94 	bl	80002cc <__adddf3>
 800bba4:	a348      	add	r3, pc, #288	; (adr r3, 800bcc8 <__ieee754_asin+0x2e0>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	f7f4 fb8d 	bl	80002c8 <__aeabi_dsub>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	a143      	add	r1, pc, #268	; (adr r1, 800bcc0 <__ieee754_asin+0x2d8>)
 800bbb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbb8:	f7f4 fb86 	bl	80002c8 <__aeabi_dsub>
 800bbbc:	9b01      	ldr	r3, [sp, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	bfdc      	itt	le
 800bbc2:	4602      	movle	r2, r0
 800bbc4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800bbc8:	4604      	mov	r4, r0
 800bbca:	460d      	mov	r5, r1
 800bbcc:	bfdc      	itt	le
 800bbce:	4614      	movle	r4, r2
 800bbd0:	461d      	movle	r5, r3
 800bbd2:	e743      	b.n	800ba5c <__ieee754_asin+0x74>
 800bbd4:	ee10 2a10 	vmov	r2, s0
 800bbd8:	ee10 0a10 	vmov	r0, s0
 800bbdc:	462b      	mov	r3, r5
 800bbde:	4629      	mov	r1, r5
 800bbe0:	f7f4 fd2a 	bl	8000638 <__aeabi_dmul>
 800bbe4:	a33c      	add	r3, pc, #240	; (adr r3, 800bcd8 <__ieee754_asin+0x2f0>)
 800bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbea:	4606      	mov	r6, r0
 800bbec:	460f      	mov	r7, r1
 800bbee:	f7f4 fd23 	bl	8000638 <__aeabi_dmul>
 800bbf2:	a33b      	add	r3, pc, #236	; (adr r3, 800bce0 <__ieee754_asin+0x2f8>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	f7f4 fb68 	bl	80002cc <__adddf3>
 800bbfc:	4632      	mov	r2, r6
 800bbfe:	463b      	mov	r3, r7
 800bc00:	f7f4 fd1a 	bl	8000638 <__aeabi_dmul>
 800bc04:	a338      	add	r3, pc, #224	; (adr r3, 800bce8 <__ieee754_asin+0x300>)
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	f7f4 fb5d 	bl	80002c8 <__aeabi_dsub>
 800bc0e:	4632      	mov	r2, r6
 800bc10:	463b      	mov	r3, r7
 800bc12:	f7f4 fd11 	bl	8000638 <__aeabi_dmul>
 800bc16:	a336      	add	r3, pc, #216	; (adr r3, 800bcf0 <__ieee754_asin+0x308>)
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	f7f4 fb56 	bl	80002cc <__adddf3>
 800bc20:	4632      	mov	r2, r6
 800bc22:	463b      	mov	r3, r7
 800bc24:	f7f4 fd08 	bl	8000638 <__aeabi_dmul>
 800bc28:	a333      	add	r3, pc, #204	; (adr r3, 800bcf8 <__ieee754_asin+0x310>)
 800bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2e:	f7f4 fb4b 	bl	80002c8 <__aeabi_dsub>
 800bc32:	4632      	mov	r2, r6
 800bc34:	463b      	mov	r3, r7
 800bc36:	f7f4 fcff 	bl	8000638 <__aeabi_dmul>
 800bc3a:	a331      	add	r3, pc, #196	; (adr r3, 800bd00 <__ieee754_asin+0x318>)
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	f7f4 fb44 	bl	80002cc <__adddf3>
 800bc44:	4632      	mov	r2, r6
 800bc46:	463b      	mov	r3, r7
 800bc48:	f7f4 fcf6 	bl	8000638 <__aeabi_dmul>
 800bc4c:	a32e      	add	r3, pc, #184	; (adr r3, 800bd08 <__ieee754_asin+0x320>)
 800bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc52:	4680      	mov	r8, r0
 800bc54:	4689      	mov	r9, r1
 800bc56:	4630      	mov	r0, r6
 800bc58:	4639      	mov	r1, r7
 800bc5a:	f7f4 fced 	bl	8000638 <__aeabi_dmul>
 800bc5e:	a32c      	add	r3, pc, #176	; (adr r3, 800bd10 <__ieee754_asin+0x328>)
 800bc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc64:	f7f4 fb30 	bl	80002c8 <__aeabi_dsub>
 800bc68:	4632      	mov	r2, r6
 800bc6a:	463b      	mov	r3, r7
 800bc6c:	f7f4 fce4 	bl	8000638 <__aeabi_dmul>
 800bc70:	a329      	add	r3, pc, #164	; (adr r3, 800bd18 <__ieee754_asin+0x330>)
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	f7f4 fb29 	bl	80002cc <__adddf3>
 800bc7a:	4632      	mov	r2, r6
 800bc7c:	463b      	mov	r3, r7
 800bc7e:	f7f4 fcdb 	bl	8000638 <__aeabi_dmul>
 800bc82:	a327      	add	r3, pc, #156	; (adr r3, 800bd20 <__ieee754_asin+0x338>)
 800bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc88:	f7f4 fb1e 	bl	80002c8 <__aeabi_dsub>
 800bc8c:	4632      	mov	r2, r6
 800bc8e:	463b      	mov	r3, r7
 800bc90:	f7f4 fcd2 	bl	8000638 <__aeabi_dmul>
 800bc94:	4b26      	ldr	r3, [pc, #152]	; (800bd30 <__ieee754_asin+0x348>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	f7f4 fb18 	bl	80002cc <__adddf3>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4640      	mov	r0, r8
 800bca2:	4649      	mov	r1, r9
 800bca4:	f7f4 fdf2 	bl	800088c <__aeabi_ddiv>
 800bca8:	4622      	mov	r2, r4
 800bcaa:	462b      	mov	r3, r5
 800bcac:	f7f4 fcc4 	bl	8000638 <__aeabi_dmul>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	e6bf      	b.n	800ba3a <__ieee754_asin+0x52>
 800bcba:	bf00      	nop
 800bcbc:	f3af 8000 	nop.w
 800bcc0:	54442d18 	.word	0x54442d18
 800bcc4:	3ff921fb 	.word	0x3ff921fb
 800bcc8:	33145c07 	.word	0x33145c07
 800bccc:	3c91a626 	.word	0x3c91a626
 800bcd0:	8800759c 	.word	0x8800759c
 800bcd4:	7e37e43c 	.word	0x7e37e43c
 800bcd8:	0dfdf709 	.word	0x0dfdf709
 800bcdc:	3f023de1 	.word	0x3f023de1
 800bce0:	7501b288 	.word	0x7501b288
 800bce4:	3f49efe0 	.word	0x3f49efe0
 800bce8:	b5688f3b 	.word	0xb5688f3b
 800bcec:	3fa48228 	.word	0x3fa48228
 800bcf0:	0e884455 	.word	0x0e884455
 800bcf4:	3fc9c155 	.word	0x3fc9c155
 800bcf8:	03eb6f7d 	.word	0x03eb6f7d
 800bcfc:	3fd4d612 	.word	0x3fd4d612
 800bd00:	55555555 	.word	0x55555555
 800bd04:	3fc55555 	.word	0x3fc55555
 800bd08:	b12e9282 	.word	0xb12e9282
 800bd0c:	3fb3b8c5 	.word	0x3fb3b8c5
 800bd10:	1b8d0159 	.word	0x1b8d0159
 800bd14:	3fe6066c 	.word	0x3fe6066c
 800bd18:	9c598ac8 	.word	0x9c598ac8
 800bd1c:	40002ae5 	.word	0x40002ae5
 800bd20:	1c8a2d4b 	.word	0x1c8a2d4b
 800bd24:	40033a27 	.word	0x40033a27
 800bd28:	3fefffff 	.word	0x3fefffff
 800bd2c:	3fdfffff 	.word	0x3fdfffff
 800bd30:	3ff00000 	.word	0x3ff00000
 800bd34:	3fe00000 	.word	0x3fe00000
 800bd38:	3fef3332 	.word	0x3fef3332
 800bd3c:	ee10 2a10 	vmov	r2, s0
 800bd40:	ee10 0a10 	vmov	r0, s0
 800bd44:	465b      	mov	r3, fp
 800bd46:	4659      	mov	r1, fp
 800bd48:	f7f4 fac0 	bl	80002cc <__adddf3>
 800bd4c:	4632      	mov	r2, r6
 800bd4e:	463b      	mov	r3, r7
 800bd50:	ec41 0b19 	vmov	d9, r0, r1
 800bd54:	ec51 0b18 	vmov	r0, r1, d8
 800bd58:	f7f4 fd98 	bl	800088c <__aeabi_ddiv>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	ec51 0b19 	vmov	r0, r1, d9
 800bd64:	f7f4 fc68 	bl	8000638 <__aeabi_dmul>
 800bd68:	f04f 0800 	mov.w	r8, #0
 800bd6c:	4606      	mov	r6, r0
 800bd6e:	460f      	mov	r7, r1
 800bd70:	4642      	mov	r2, r8
 800bd72:	465b      	mov	r3, fp
 800bd74:	4640      	mov	r0, r8
 800bd76:	4659      	mov	r1, fp
 800bd78:	f7f4 fc5e 	bl	8000638 <__aeabi_dmul>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	460b      	mov	r3, r1
 800bd80:	4620      	mov	r0, r4
 800bd82:	4629      	mov	r1, r5
 800bd84:	f7f4 faa0 	bl	80002c8 <__aeabi_dsub>
 800bd88:	4642      	mov	r2, r8
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	460d      	mov	r5, r1
 800bd8e:	465b      	mov	r3, fp
 800bd90:	4650      	mov	r0, sl
 800bd92:	4659      	mov	r1, fp
 800bd94:	f7f4 fa9a 	bl	80002cc <__adddf3>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	4629      	mov	r1, r5
 800bda0:	f7f4 fd74 	bl	800088c <__aeabi_ddiv>
 800bda4:	4602      	mov	r2, r0
 800bda6:	460b      	mov	r3, r1
 800bda8:	f7f4 fa90 	bl	80002cc <__adddf3>
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	a113      	add	r1, pc, #76	; (adr r1, 800be00 <__ieee754_asin+0x418>)
 800bdb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdb6:	f7f4 fa87 	bl	80002c8 <__aeabi_dsub>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	f7f4 fa81 	bl	80002c8 <__aeabi_dsub>
 800bdc6:	4642      	mov	r2, r8
 800bdc8:	4604      	mov	r4, r0
 800bdca:	460d      	mov	r5, r1
 800bdcc:	465b      	mov	r3, fp
 800bdce:	4640      	mov	r0, r8
 800bdd0:	4659      	mov	r1, fp
 800bdd2:	f7f4 fa7b 	bl	80002cc <__adddf3>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	a10b      	add	r1, pc, #44	; (adr r1, 800be08 <__ieee754_asin+0x420>)
 800bddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bde0:	f7f4 fa72 	bl	80002c8 <__aeabi_dsub>
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	4620      	mov	r0, r4
 800bdea:	4629      	mov	r1, r5
 800bdec:	f7f4 fa6c 	bl	80002c8 <__aeabi_dsub>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	a104      	add	r1, pc, #16	; (adr r1, 800be08 <__ieee754_asin+0x420>)
 800bdf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdfa:	e6dd      	b.n	800bbb8 <__ieee754_asin+0x1d0>
 800bdfc:	f3af 8000 	nop.w
 800be00:	33145c07 	.word	0x33145c07
 800be04:	3c91a626 	.word	0x3c91a626
 800be08:	54442d18 	.word	0x54442d18
 800be0c:	3fe921fb 	.word	0x3fe921fb

0800be10 <__ieee754_rem_pio2>:
 800be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be14:	ed2d 8b02 	vpush	{d8}
 800be18:	ec55 4b10 	vmov	r4, r5, d0
 800be1c:	4bca      	ldr	r3, [pc, #808]	; (800c148 <__ieee754_rem_pio2+0x338>)
 800be1e:	b08b      	sub	sp, #44	; 0x2c
 800be20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800be24:	4598      	cmp	r8, r3
 800be26:	4682      	mov	sl, r0
 800be28:	9502      	str	r5, [sp, #8]
 800be2a:	dc08      	bgt.n	800be3e <__ieee754_rem_pio2+0x2e>
 800be2c:	2200      	movs	r2, #0
 800be2e:	2300      	movs	r3, #0
 800be30:	ed80 0b00 	vstr	d0, [r0]
 800be34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800be38:	f04f 0b00 	mov.w	fp, #0
 800be3c:	e028      	b.n	800be90 <__ieee754_rem_pio2+0x80>
 800be3e:	4bc3      	ldr	r3, [pc, #780]	; (800c14c <__ieee754_rem_pio2+0x33c>)
 800be40:	4598      	cmp	r8, r3
 800be42:	dc78      	bgt.n	800bf36 <__ieee754_rem_pio2+0x126>
 800be44:	9b02      	ldr	r3, [sp, #8]
 800be46:	4ec2      	ldr	r6, [pc, #776]	; (800c150 <__ieee754_rem_pio2+0x340>)
 800be48:	2b00      	cmp	r3, #0
 800be4a:	ee10 0a10 	vmov	r0, s0
 800be4e:	a3b0      	add	r3, pc, #704	; (adr r3, 800c110 <__ieee754_rem_pio2+0x300>)
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	4629      	mov	r1, r5
 800be56:	dd39      	ble.n	800becc <__ieee754_rem_pio2+0xbc>
 800be58:	f7f4 fa36 	bl	80002c8 <__aeabi_dsub>
 800be5c:	45b0      	cmp	r8, r6
 800be5e:	4604      	mov	r4, r0
 800be60:	460d      	mov	r5, r1
 800be62:	d01b      	beq.n	800be9c <__ieee754_rem_pio2+0x8c>
 800be64:	a3ac      	add	r3, pc, #688	; (adr r3, 800c118 <__ieee754_rem_pio2+0x308>)
 800be66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6a:	f7f4 fa2d 	bl	80002c8 <__aeabi_dsub>
 800be6e:	4602      	mov	r2, r0
 800be70:	460b      	mov	r3, r1
 800be72:	e9ca 2300 	strd	r2, r3, [sl]
 800be76:	4620      	mov	r0, r4
 800be78:	4629      	mov	r1, r5
 800be7a:	f7f4 fa25 	bl	80002c8 <__aeabi_dsub>
 800be7e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c118 <__ieee754_rem_pio2+0x308>)
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	f7f4 fa20 	bl	80002c8 <__aeabi_dsub>
 800be88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800be8c:	f04f 0b01 	mov.w	fp, #1
 800be90:	4658      	mov	r0, fp
 800be92:	b00b      	add	sp, #44	; 0x2c
 800be94:	ecbd 8b02 	vpop	{d8}
 800be98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9c:	a3a0      	add	r3, pc, #640	; (adr r3, 800c120 <__ieee754_rem_pio2+0x310>)
 800be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea2:	f7f4 fa11 	bl	80002c8 <__aeabi_dsub>
 800bea6:	a3a0      	add	r3, pc, #640	; (adr r3, 800c128 <__ieee754_rem_pio2+0x318>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	4604      	mov	r4, r0
 800beae:	460d      	mov	r5, r1
 800beb0:	f7f4 fa0a 	bl	80002c8 <__aeabi_dsub>
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	e9ca 2300 	strd	r2, r3, [sl]
 800bebc:	4620      	mov	r0, r4
 800bebe:	4629      	mov	r1, r5
 800bec0:	f7f4 fa02 	bl	80002c8 <__aeabi_dsub>
 800bec4:	a398      	add	r3, pc, #608	; (adr r3, 800c128 <__ieee754_rem_pio2+0x318>)
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	e7db      	b.n	800be84 <__ieee754_rem_pio2+0x74>
 800becc:	f7f4 f9fe 	bl	80002cc <__adddf3>
 800bed0:	45b0      	cmp	r8, r6
 800bed2:	4604      	mov	r4, r0
 800bed4:	460d      	mov	r5, r1
 800bed6:	d016      	beq.n	800bf06 <__ieee754_rem_pio2+0xf6>
 800bed8:	a38f      	add	r3, pc, #572	; (adr r3, 800c118 <__ieee754_rem_pio2+0x308>)
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	f7f4 f9f5 	bl	80002cc <__adddf3>
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	e9ca 2300 	strd	r2, r3, [sl]
 800beea:	4620      	mov	r0, r4
 800beec:	4629      	mov	r1, r5
 800beee:	f7f4 f9eb 	bl	80002c8 <__aeabi_dsub>
 800bef2:	a389      	add	r3, pc, #548	; (adr r3, 800c118 <__ieee754_rem_pio2+0x308>)
 800bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef8:	f7f4 f9e8 	bl	80002cc <__adddf3>
 800befc:	f04f 3bff 	mov.w	fp, #4294967295
 800bf00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bf04:	e7c4      	b.n	800be90 <__ieee754_rem_pio2+0x80>
 800bf06:	a386      	add	r3, pc, #536	; (adr r3, 800c120 <__ieee754_rem_pio2+0x310>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f7f4 f9de 	bl	80002cc <__adddf3>
 800bf10:	a385      	add	r3, pc, #532	; (adr r3, 800c128 <__ieee754_rem_pio2+0x318>)
 800bf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf16:	4604      	mov	r4, r0
 800bf18:	460d      	mov	r5, r1
 800bf1a:	f7f4 f9d7 	bl	80002cc <__adddf3>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	e9ca 2300 	strd	r2, r3, [sl]
 800bf26:	4620      	mov	r0, r4
 800bf28:	4629      	mov	r1, r5
 800bf2a:	f7f4 f9cd 	bl	80002c8 <__aeabi_dsub>
 800bf2e:	a37e      	add	r3, pc, #504	; (adr r3, 800c128 <__ieee754_rem_pio2+0x318>)
 800bf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf34:	e7e0      	b.n	800bef8 <__ieee754_rem_pio2+0xe8>
 800bf36:	4b87      	ldr	r3, [pc, #540]	; (800c154 <__ieee754_rem_pio2+0x344>)
 800bf38:	4598      	cmp	r8, r3
 800bf3a:	f300 80d8 	bgt.w	800c0ee <__ieee754_rem_pio2+0x2de>
 800bf3e:	f7ff fa8b 	bl	800b458 <fabs>
 800bf42:	ec55 4b10 	vmov	r4, r5, d0
 800bf46:	ee10 0a10 	vmov	r0, s0
 800bf4a:	a379      	add	r3, pc, #484	; (adr r3, 800c130 <__ieee754_rem_pio2+0x320>)
 800bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf50:	4629      	mov	r1, r5
 800bf52:	f7f4 fb71 	bl	8000638 <__aeabi_dmul>
 800bf56:	4b80      	ldr	r3, [pc, #512]	; (800c158 <__ieee754_rem_pio2+0x348>)
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f7f4 f9b7 	bl	80002cc <__adddf3>
 800bf5e:	f7f4 fe1b 	bl	8000b98 <__aeabi_d2iz>
 800bf62:	4683      	mov	fp, r0
 800bf64:	f7f4 fafe 	bl	8000564 <__aeabi_i2d>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	ec43 2b18 	vmov	d8, r2, r3
 800bf70:	a367      	add	r3, pc, #412	; (adr r3, 800c110 <__ieee754_rem_pio2+0x300>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	f7f4 fb5f 	bl	8000638 <__aeabi_dmul>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	4620      	mov	r0, r4
 800bf80:	4629      	mov	r1, r5
 800bf82:	f7f4 f9a1 	bl	80002c8 <__aeabi_dsub>
 800bf86:	a364      	add	r3, pc, #400	; (adr r3, 800c118 <__ieee754_rem_pio2+0x308>)
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	4606      	mov	r6, r0
 800bf8e:	460f      	mov	r7, r1
 800bf90:	ec51 0b18 	vmov	r0, r1, d8
 800bf94:	f7f4 fb50 	bl	8000638 <__aeabi_dmul>
 800bf98:	f1bb 0f1f 	cmp.w	fp, #31
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	460d      	mov	r5, r1
 800bfa0:	dc0d      	bgt.n	800bfbe <__ieee754_rem_pio2+0x1ae>
 800bfa2:	4b6e      	ldr	r3, [pc, #440]	; (800c15c <__ieee754_rem_pio2+0x34c>)
 800bfa4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bfa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfac:	4543      	cmp	r3, r8
 800bfae:	d006      	beq.n	800bfbe <__ieee754_rem_pio2+0x1ae>
 800bfb0:	4622      	mov	r2, r4
 800bfb2:	462b      	mov	r3, r5
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	4639      	mov	r1, r7
 800bfb8:	f7f4 f986 	bl	80002c8 <__aeabi_dsub>
 800bfbc:	e00e      	b.n	800bfdc <__ieee754_rem_pio2+0x1cc>
 800bfbe:	462b      	mov	r3, r5
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	4639      	mov	r1, r7
 800bfc6:	f7f4 f97f 	bl	80002c8 <__aeabi_dsub>
 800bfca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bfce:	9303      	str	r3, [sp, #12]
 800bfd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bfd4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800bfd8:	2b10      	cmp	r3, #16
 800bfda:	dc02      	bgt.n	800bfe2 <__ieee754_rem_pio2+0x1d2>
 800bfdc:	e9ca 0100 	strd	r0, r1, [sl]
 800bfe0:	e039      	b.n	800c056 <__ieee754_rem_pio2+0x246>
 800bfe2:	a34f      	add	r3, pc, #316	; (adr r3, 800c120 <__ieee754_rem_pio2+0x310>)
 800bfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe8:	ec51 0b18 	vmov	r0, r1, d8
 800bfec:	f7f4 fb24 	bl	8000638 <__aeabi_dmul>
 800bff0:	4604      	mov	r4, r0
 800bff2:	460d      	mov	r5, r1
 800bff4:	4602      	mov	r2, r0
 800bff6:	460b      	mov	r3, r1
 800bff8:	4630      	mov	r0, r6
 800bffa:	4639      	mov	r1, r7
 800bffc:	f7f4 f964 	bl	80002c8 <__aeabi_dsub>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4680      	mov	r8, r0
 800c006:	4689      	mov	r9, r1
 800c008:	4630      	mov	r0, r6
 800c00a:	4639      	mov	r1, r7
 800c00c:	f7f4 f95c 	bl	80002c8 <__aeabi_dsub>
 800c010:	4622      	mov	r2, r4
 800c012:	462b      	mov	r3, r5
 800c014:	f7f4 f958 	bl	80002c8 <__aeabi_dsub>
 800c018:	a343      	add	r3, pc, #268	; (adr r3, 800c128 <__ieee754_rem_pio2+0x318>)
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	4604      	mov	r4, r0
 800c020:	460d      	mov	r5, r1
 800c022:	ec51 0b18 	vmov	r0, r1, d8
 800c026:	f7f4 fb07 	bl	8000638 <__aeabi_dmul>
 800c02a:	4622      	mov	r2, r4
 800c02c:	462b      	mov	r3, r5
 800c02e:	f7f4 f94b 	bl	80002c8 <__aeabi_dsub>
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	4604      	mov	r4, r0
 800c038:	460d      	mov	r5, r1
 800c03a:	4640      	mov	r0, r8
 800c03c:	4649      	mov	r1, r9
 800c03e:	f7f4 f943 	bl	80002c8 <__aeabi_dsub>
 800c042:	9a03      	ldr	r2, [sp, #12]
 800c044:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	2b31      	cmp	r3, #49	; 0x31
 800c04c:	dc24      	bgt.n	800c098 <__ieee754_rem_pio2+0x288>
 800c04e:	e9ca 0100 	strd	r0, r1, [sl]
 800c052:	4646      	mov	r6, r8
 800c054:	464f      	mov	r7, r9
 800c056:	e9da 8900 	ldrd	r8, r9, [sl]
 800c05a:	4630      	mov	r0, r6
 800c05c:	4642      	mov	r2, r8
 800c05e:	464b      	mov	r3, r9
 800c060:	4639      	mov	r1, r7
 800c062:	f7f4 f931 	bl	80002c8 <__aeabi_dsub>
 800c066:	462b      	mov	r3, r5
 800c068:	4622      	mov	r2, r4
 800c06a:	f7f4 f92d 	bl	80002c8 <__aeabi_dsub>
 800c06e:	9b02      	ldr	r3, [sp, #8]
 800c070:	2b00      	cmp	r3, #0
 800c072:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c076:	f6bf af0b 	bge.w	800be90 <__ieee754_rem_pio2+0x80>
 800c07a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c07e:	f8ca 3004 	str.w	r3, [sl, #4]
 800c082:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c086:	f8ca 8000 	str.w	r8, [sl]
 800c08a:	f8ca 0008 	str.w	r0, [sl, #8]
 800c08e:	f8ca 300c 	str.w	r3, [sl, #12]
 800c092:	f1cb 0b00 	rsb	fp, fp, #0
 800c096:	e6fb      	b.n	800be90 <__ieee754_rem_pio2+0x80>
 800c098:	a327      	add	r3, pc, #156	; (adr r3, 800c138 <__ieee754_rem_pio2+0x328>)
 800c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09e:	ec51 0b18 	vmov	r0, r1, d8
 800c0a2:	f7f4 fac9 	bl	8000638 <__aeabi_dmul>
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	460d      	mov	r5, r1
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	4640      	mov	r0, r8
 800c0b0:	4649      	mov	r1, r9
 800c0b2:	f7f4 f909 	bl	80002c8 <__aeabi_dsub>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	460f      	mov	r7, r1
 800c0be:	4640      	mov	r0, r8
 800c0c0:	4649      	mov	r1, r9
 800c0c2:	f7f4 f901 	bl	80002c8 <__aeabi_dsub>
 800c0c6:	4622      	mov	r2, r4
 800c0c8:	462b      	mov	r3, r5
 800c0ca:	f7f4 f8fd 	bl	80002c8 <__aeabi_dsub>
 800c0ce:	a31c      	add	r3, pc, #112	; (adr r3, 800c140 <__ieee754_rem_pio2+0x330>)
 800c0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	460d      	mov	r5, r1
 800c0d8:	ec51 0b18 	vmov	r0, r1, d8
 800c0dc:	f7f4 faac 	bl	8000638 <__aeabi_dmul>
 800c0e0:	4622      	mov	r2, r4
 800c0e2:	462b      	mov	r3, r5
 800c0e4:	f7f4 f8f0 	bl	80002c8 <__aeabi_dsub>
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	460d      	mov	r5, r1
 800c0ec:	e760      	b.n	800bfb0 <__ieee754_rem_pio2+0x1a0>
 800c0ee:	4b1c      	ldr	r3, [pc, #112]	; (800c160 <__ieee754_rem_pio2+0x350>)
 800c0f0:	4598      	cmp	r8, r3
 800c0f2:	dd37      	ble.n	800c164 <__ieee754_rem_pio2+0x354>
 800c0f4:	ee10 2a10 	vmov	r2, s0
 800c0f8:	462b      	mov	r3, r5
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	f7f4 f8e3 	bl	80002c8 <__aeabi_dsub>
 800c102:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c106:	e9ca 0100 	strd	r0, r1, [sl]
 800c10a:	e695      	b.n	800be38 <__ieee754_rem_pio2+0x28>
 800c10c:	f3af 8000 	nop.w
 800c110:	54400000 	.word	0x54400000
 800c114:	3ff921fb 	.word	0x3ff921fb
 800c118:	1a626331 	.word	0x1a626331
 800c11c:	3dd0b461 	.word	0x3dd0b461
 800c120:	1a600000 	.word	0x1a600000
 800c124:	3dd0b461 	.word	0x3dd0b461
 800c128:	2e037073 	.word	0x2e037073
 800c12c:	3ba3198a 	.word	0x3ba3198a
 800c130:	6dc9c883 	.word	0x6dc9c883
 800c134:	3fe45f30 	.word	0x3fe45f30
 800c138:	2e000000 	.word	0x2e000000
 800c13c:	3ba3198a 	.word	0x3ba3198a
 800c140:	252049c1 	.word	0x252049c1
 800c144:	397b839a 	.word	0x397b839a
 800c148:	3fe921fb 	.word	0x3fe921fb
 800c14c:	4002d97b 	.word	0x4002d97b
 800c150:	3ff921fb 	.word	0x3ff921fb
 800c154:	413921fb 	.word	0x413921fb
 800c158:	3fe00000 	.word	0x3fe00000
 800c15c:	0800cf70 	.word	0x0800cf70
 800c160:	7fefffff 	.word	0x7fefffff
 800c164:	ea4f 5628 	mov.w	r6, r8, asr #20
 800c168:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800c16c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800c170:	4620      	mov	r0, r4
 800c172:	460d      	mov	r5, r1
 800c174:	f7f4 fd10 	bl	8000b98 <__aeabi_d2iz>
 800c178:	f7f4 f9f4 	bl	8000564 <__aeabi_i2d>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	4620      	mov	r0, r4
 800c182:	4629      	mov	r1, r5
 800c184:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c188:	f7f4 f89e 	bl	80002c8 <__aeabi_dsub>
 800c18c:	4b21      	ldr	r3, [pc, #132]	; (800c214 <__ieee754_rem_pio2+0x404>)
 800c18e:	2200      	movs	r2, #0
 800c190:	f7f4 fa52 	bl	8000638 <__aeabi_dmul>
 800c194:	460d      	mov	r5, r1
 800c196:	4604      	mov	r4, r0
 800c198:	f7f4 fcfe 	bl	8000b98 <__aeabi_d2iz>
 800c19c:	f7f4 f9e2 	bl	8000564 <__aeabi_i2d>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1ac:	f7f4 f88c 	bl	80002c8 <__aeabi_dsub>
 800c1b0:	4b18      	ldr	r3, [pc, #96]	; (800c214 <__ieee754_rem_pio2+0x404>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f7f4 fa40 	bl	8000638 <__aeabi_dmul>
 800c1b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c1bc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800c1c0:	2703      	movs	r7, #3
 800c1c2:	2400      	movs	r4, #0
 800c1c4:	2500      	movs	r5, #0
 800c1c6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800c1ca:	4622      	mov	r2, r4
 800c1cc:	462b      	mov	r3, r5
 800c1ce:	46b9      	mov	r9, r7
 800c1d0:	3f01      	subs	r7, #1
 800c1d2:	f7f4 fc99 	bl	8000b08 <__aeabi_dcmpeq>
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	d1f5      	bne.n	800c1c6 <__ieee754_rem_pio2+0x3b6>
 800c1da:	4b0f      	ldr	r3, [pc, #60]	; (800c218 <__ieee754_rem_pio2+0x408>)
 800c1dc:	9301      	str	r3, [sp, #4]
 800c1de:	2302      	movs	r3, #2
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	4632      	mov	r2, r6
 800c1e4:	464b      	mov	r3, r9
 800c1e6:	4651      	mov	r1, sl
 800c1e8:	a804      	add	r0, sp, #16
 800c1ea:	f000 f819 	bl	800c220 <__kernel_rem_pio2>
 800c1ee:	9b02      	ldr	r3, [sp, #8]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	4683      	mov	fp, r0
 800c1f4:	f6bf ae4c 	bge.w	800be90 <__ieee754_rem_pio2+0x80>
 800c1f8:	e9da 2100 	ldrd	r2, r1, [sl]
 800c1fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c200:	e9ca 2300 	strd	r2, r3, [sl]
 800c204:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c208:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c20c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c210:	e73f      	b.n	800c092 <__ieee754_rem_pio2+0x282>
 800c212:	bf00      	nop
 800c214:	41700000 	.word	0x41700000
 800c218:	0800cff0 	.word	0x0800cff0
 800c21c:	00000000 	.word	0x00000000

0800c220 <__kernel_rem_pio2>:
 800c220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c224:	ed2d 8b02 	vpush	{d8}
 800c228:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c22c:	f112 0f14 	cmn.w	r2, #20
 800c230:	9306      	str	r3, [sp, #24]
 800c232:	9104      	str	r1, [sp, #16]
 800c234:	4bc2      	ldr	r3, [pc, #776]	; (800c540 <__kernel_rem_pio2+0x320>)
 800c236:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c238:	9009      	str	r0, [sp, #36]	; 0x24
 800c23a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	9b06      	ldr	r3, [sp, #24]
 800c242:	f103 33ff 	add.w	r3, r3, #4294967295
 800c246:	bfa8      	it	ge
 800c248:	1ed4      	subge	r4, r2, #3
 800c24a:	9305      	str	r3, [sp, #20]
 800c24c:	bfb2      	itee	lt
 800c24e:	2400      	movlt	r4, #0
 800c250:	2318      	movge	r3, #24
 800c252:	fb94 f4f3 	sdivge	r4, r4, r3
 800c256:	f06f 0317 	mvn.w	r3, #23
 800c25a:	fb04 3303 	mla	r3, r4, r3, r3
 800c25e:	eb03 0a02 	add.w	sl, r3, r2
 800c262:	9b00      	ldr	r3, [sp, #0]
 800c264:	9a05      	ldr	r2, [sp, #20]
 800c266:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800c530 <__kernel_rem_pio2+0x310>
 800c26a:	eb03 0802 	add.w	r8, r3, r2
 800c26e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c270:	1aa7      	subs	r7, r4, r2
 800c272:	ae20      	add	r6, sp, #128	; 0x80
 800c274:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c278:	2500      	movs	r5, #0
 800c27a:	4545      	cmp	r5, r8
 800c27c:	dd13      	ble.n	800c2a6 <__kernel_rem_pio2+0x86>
 800c27e:	9b06      	ldr	r3, [sp, #24]
 800c280:	aa20      	add	r2, sp, #128	; 0x80
 800c282:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c286:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c28a:	f04f 0800 	mov.w	r8, #0
 800c28e:	9b00      	ldr	r3, [sp, #0]
 800c290:	4598      	cmp	r8, r3
 800c292:	dc31      	bgt.n	800c2f8 <__kernel_rem_pio2+0xd8>
 800c294:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800c530 <__kernel_rem_pio2+0x310>
 800c298:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c29c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2a0:	462f      	mov	r7, r5
 800c2a2:	2600      	movs	r6, #0
 800c2a4:	e01b      	b.n	800c2de <__kernel_rem_pio2+0xbe>
 800c2a6:	42ef      	cmn	r7, r5
 800c2a8:	d407      	bmi.n	800c2ba <__kernel_rem_pio2+0x9a>
 800c2aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c2ae:	f7f4 f959 	bl	8000564 <__aeabi_i2d>
 800c2b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c2b6:	3501      	adds	r5, #1
 800c2b8:	e7df      	b.n	800c27a <__kernel_rem_pio2+0x5a>
 800c2ba:	ec51 0b18 	vmov	r0, r1, d8
 800c2be:	e7f8      	b.n	800c2b2 <__kernel_rem_pio2+0x92>
 800c2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c2c8:	f7f4 f9b6 	bl	8000638 <__aeabi_dmul>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2d4:	f7f3 fffa 	bl	80002cc <__adddf3>
 800c2d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2dc:	3601      	adds	r6, #1
 800c2de:	9b05      	ldr	r3, [sp, #20]
 800c2e0:	429e      	cmp	r6, r3
 800c2e2:	f1a7 0708 	sub.w	r7, r7, #8
 800c2e6:	ddeb      	ble.n	800c2c0 <__kernel_rem_pio2+0xa0>
 800c2e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2ec:	f108 0801 	add.w	r8, r8, #1
 800c2f0:	ecab 7b02 	vstmia	fp!, {d7}
 800c2f4:	3508      	adds	r5, #8
 800c2f6:	e7ca      	b.n	800c28e <__kernel_rem_pio2+0x6e>
 800c2f8:	9b00      	ldr	r3, [sp, #0]
 800c2fa:	aa0c      	add	r2, sp, #48	; 0x30
 800c2fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c300:	930b      	str	r3, [sp, #44]	; 0x2c
 800c302:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c304:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c308:	9c00      	ldr	r4, [sp, #0]
 800c30a:	930a      	str	r3, [sp, #40]	; 0x28
 800c30c:	00e3      	lsls	r3, r4, #3
 800c30e:	9308      	str	r3, [sp, #32]
 800c310:	ab98      	add	r3, sp, #608	; 0x260
 800c312:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c316:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c31a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800c31e:	ab70      	add	r3, sp, #448	; 0x1c0
 800c320:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c324:	46c3      	mov	fp, r8
 800c326:	46a1      	mov	r9, r4
 800c328:	f1b9 0f00 	cmp.w	r9, #0
 800c32c:	f1a5 0508 	sub.w	r5, r5, #8
 800c330:	dc77      	bgt.n	800c422 <__kernel_rem_pio2+0x202>
 800c332:	ec47 6b10 	vmov	d0, r6, r7
 800c336:	4650      	mov	r0, sl
 800c338:	f000 fac2 	bl	800c8c0 <scalbn>
 800c33c:	ec57 6b10 	vmov	r6, r7, d0
 800c340:	2200      	movs	r2, #0
 800c342:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c346:	ee10 0a10 	vmov	r0, s0
 800c34a:	4639      	mov	r1, r7
 800c34c:	f7f4 f974 	bl	8000638 <__aeabi_dmul>
 800c350:	ec41 0b10 	vmov	d0, r0, r1
 800c354:	f000 fb34 	bl	800c9c0 <floor>
 800c358:	4b7a      	ldr	r3, [pc, #488]	; (800c544 <__kernel_rem_pio2+0x324>)
 800c35a:	ec51 0b10 	vmov	r0, r1, d0
 800c35e:	2200      	movs	r2, #0
 800c360:	f7f4 f96a 	bl	8000638 <__aeabi_dmul>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	4630      	mov	r0, r6
 800c36a:	4639      	mov	r1, r7
 800c36c:	f7f3 ffac 	bl	80002c8 <__aeabi_dsub>
 800c370:	460f      	mov	r7, r1
 800c372:	4606      	mov	r6, r0
 800c374:	f7f4 fc10 	bl	8000b98 <__aeabi_d2iz>
 800c378:	9002      	str	r0, [sp, #8]
 800c37a:	f7f4 f8f3 	bl	8000564 <__aeabi_i2d>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	4630      	mov	r0, r6
 800c384:	4639      	mov	r1, r7
 800c386:	f7f3 ff9f 	bl	80002c8 <__aeabi_dsub>
 800c38a:	f1ba 0f00 	cmp.w	sl, #0
 800c38e:	4606      	mov	r6, r0
 800c390:	460f      	mov	r7, r1
 800c392:	dd6d      	ble.n	800c470 <__kernel_rem_pio2+0x250>
 800c394:	1e61      	subs	r1, r4, #1
 800c396:	ab0c      	add	r3, sp, #48	; 0x30
 800c398:	9d02      	ldr	r5, [sp, #8]
 800c39a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c39e:	f1ca 0018 	rsb	r0, sl, #24
 800c3a2:	fa43 f200 	asr.w	r2, r3, r0
 800c3a6:	4415      	add	r5, r2
 800c3a8:	4082      	lsls	r2, r0
 800c3aa:	1a9b      	subs	r3, r3, r2
 800c3ac:	aa0c      	add	r2, sp, #48	; 0x30
 800c3ae:	9502      	str	r5, [sp, #8]
 800c3b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c3b4:	f1ca 0217 	rsb	r2, sl, #23
 800c3b8:	fa43 fb02 	asr.w	fp, r3, r2
 800c3bc:	f1bb 0f00 	cmp.w	fp, #0
 800c3c0:	dd65      	ble.n	800c48e <__kernel_rem_pio2+0x26e>
 800c3c2:	9b02      	ldr	r3, [sp, #8]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	9302      	str	r3, [sp, #8]
 800c3ca:	4615      	mov	r5, r2
 800c3cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c3d0:	4294      	cmp	r4, r2
 800c3d2:	f300 809f 	bgt.w	800c514 <__kernel_rem_pio2+0x2f4>
 800c3d6:	f1ba 0f00 	cmp.w	sl, #0
 800c3da:	dd07      	ble.n	800c3ec <__kernel_rem_pio2+0x1cc>
 800c3dc:	f1ba 0f01 	cmp.w	sl, #1
 800c3e0:	f000 80c1 	beq.w	800c566 <__kernel_rem_pio2+0x346>
 800c3e4:	f1ba 0f02 	cmp.w	sl, #2
 800c3e8:	f000 80c7 	beq.w	800c57a <__kernel_rem_pio2+0x35a>
 800c3ec:	f1bb 0f02 	cmp.w	fp, #2
 800c3f0:	d14d      	bne.n	800c48e <__kernel_rem_pio2+0x26e>
 800c3f2:	4632      	mov	r2, r6
 800c3f4:	463b      	mov	r3, r7
 800c3f6:	4954      	ldr	r1, [pc, #336]	; (800c548 <__kernel_rem_pio2+0x328>)
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	f7f3 ff65 	bl	80002c8 <__aeabi_dsub>
 800c3fe:	4606      	mov	r6, r0
 800c400:	460f      	mov	r7, r1
 800c402:	2d00      	cmp	r5, #0
 800c404:	d043      	beq.n	800c48e <__kernel_rem_pio2+0x26e>
 800c406:	4650      	mov	r0, sl
 800c408:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800c538 <__kernel_rem_pio2+0x318>
 800c40c:	f000 fa58 	bl	800c8c0 <scalbn>
 800c410:	4630      	mov	r0, r6
 800c412:	4639      	mov	r1, r7
 800c414:	ec53 2b10 	vmov	r2, r3, d0
 800c418:	f7f3 ff56 	bl	80002c8 <__aeabi_dsub>
 800c41c:	4606      	mov	r6, r0
 800c41e:	460f      	mov	r7, r1
 800c420:	e035      	b.n	800c48e <__kernel_rem_pio2+0x26e>
 800c422:	4b4a      	ldr	r3, [pc, #296]	; (800c54c <__kernel_rem_pio2+0x32c>)
 800c424:	2200      	movs	r2, #0
 800c426:	4630      	mov	r0, r6
 800c428:	4639      	mov	r1, r7
 800c42a:	f7f4 f905 	bl	8000638 <__aeabi_dmul>
 800c42e:	f7f4 fbb3 	bl	8000b98 <__aeabi_d2iz>
 800c432:	f7f4 f897 	bl	8000564 <__aeabi_i2d>
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	ec43 2b18 	vmov	d8, r2, r3
 800c43e:	4b44      	ldr	r3, [pc, #272]	; (800c550 <__kernel_rem_pio2+0x330>)
 800c440:	2200      	movs	r2, #0
 800c442:	f7f4 f8f9 	bl	8000638 <__aeabi_dmul>
 800c446:	4602      	mov	r2, r0
 800c448:	460b      	mov	r3, r1
 800c44a:	4630      	mov	r0, r6
 800c44c:	4639      	mov	r1, r7
 800c44e:	f7f3 ff3b 	bl	80002c8 <__aeabi_dsub>
 800c452:	f7f4 fba1 	bl	8000b98 <__aeabi_d2iz>
 800c456:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c45a:	f84b 0b04 	str.w	r0, [fp], #4
 800c45e:	ec51 0b18 	vmov	r0, r1, d8
 800c462:	f7f3 ff33 	bl	80002cc <__adddf3>
 800c466:	f109 39ff 	add.w	r9, r9, #4294967295
 800c46a:	4606      	mov	r6, r0
 800c46c:	460f      	mov	r7, r1
 800c46e:	e75b      	b.n	800c328 <__kernel_rem_pio2+0x108>
 800c470:	d106      	bne.n	800c480 <__kernel_rem_pio2+0x260>
 800c472:	1e63      	subs	r3, r4, #1
 800c474:	aa0c      	add	r2, sp, #48	; 0x30
 800c476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c47a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800c47e:	e79d      	b.n	800c3bc <__kernel_rem_pio2+0x19c>
 800c480:	4b34      	ldr	r3, [pc, #208]	; (800c554 <__kernel_rem_pio2+0x334>)
 800c482:	2200      	movs	r2, #0
 800c484:	f7f4 fb5e 	bl	8000b44 <__aeabi_dcmpge>
 800c488:	2800      	cmp	r0, #0
 800c48a:	d140      	bne.n	800c50e <__kernel_rem_pio2+0x2ee>
 800c48c:	4683      	mov	fp, r0
 800c48e:	2200      	movs	r2, #0
 800c490:	2300      	movs	r3, #0
 800c492:	4630      	mov	r0, r6
 800c494:	4639      	mov	r1, r7
 800c496:	f7f4 fb37 	bl	8000b08 <__aeabi_dcmpeq>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	f000 80c1 	beq.w	800c622 <__kernel_rem_pio2+0x402>
 800c4a0:	1e65      	subs	r5, r4, #1
 800c4a2:	462b      	mov	r3, r5
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	9900      	ldr	r1, [sp, #0]
 800c4a8:	428b      	cmp	r3, r1
 800c4aa:	da6d      	bge.n	800c588 <__kernel_rem_pio2+0x368>
 800c4ac:	2a00      	cmp	r2, #0
 800c4ae:	f000 808a 	beq.w	800c5c6 <__kernel_rem_pio2+0x3a6>
 800c4b2:	ab0c      	add	r3, sp, #48	; 0x30
 800c4b4:	f1aa 0a18 	sub.w	sl, sl, #24
 800c4b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f000 80ae 	beq.w	800c61e <__kernel_rem_pio2+0x3fe>
 800c4c2:	4650      	mov	r0, sl
 800c4c4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800c538 <__kernel_rem_pio2+0x318>
 800c4c8:	f000 f9fa 	bl	800c8c0 <scalbn>
 800c4cc:	1c6b      	adds	r3, r5, #1
 800c4ce:	00da      	lsls	r2, r3, #3
 800c4d0:	9205      	str	r2, [sp, #20]
 800c4d2:	ec57 6b10 	vmov	r6, r7, d0
 800c4d6:	aa70      	add	r2, sp, #448	; 0x1c0
 800c4d8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800c54c <__kernel_rem_pio2+0x32c>
 800c4dc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800c4e0:	462c      	mov	r4, r5
 800c4e2:	f04f 0800 	mov.w	r8, #0
 800c4e6:	2c00      	cmp	r4, #0
 800c4e8:	f280 80d4 	bge.w	800c694 <__kernel_rem_pio2+0x474>
 800c4ec:	462c      	mov	r4, r5
 800c4ee:	2c00      	cmp	r4, #0
 800c4f0:	f2c0 8102 	blt.w	800c6f8 <__kernel_rem_pio2+0x4d8>
 800c4f4:	4b18      	ldr	r3, [pc, #96]	; (800c558 <__kernel_rem_pio2+0x338>)
 800c4f6:	461e      	mov	r6, r3
 800c4f8:	ab70      	add	r3, sp, #448	; 0x1c0
 800c4fa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800c4fe:	1b2b      	subs	r3, r5, r4
 800c500:	f04f 0900 	mov.w	r9, #0
 800c504:	f04f 0a00 	mov.w	sl, #0
 800c508:	2700      	movs	r7, #0
 800c50a:	9306      	str	r3, [sp, #24]
 800c50c:	e0e6      	b.n	800c6dc <__kernel_rem_pio2+0x4bc>
 800c50e:	f04f 0b02 	mov.w	fp, #2
 800c512:	e756      	b.n	800c3c2 <__kernel_rem_pio2+0x1a2>
 800c514:	f8d8 3000 	ldr.w	r3, [r8]
 800c518:	bb05      	cbnz	r5, 800c55c <__kernel_rem_pio2+0x33c>
 800c51a:	b123      	cbz	r3, 800c526 <__kernel_rem_pio2+0x306>
 800c51c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c520:	f8c8 3000 	str.w	r3, [r8]
 800c524:	2301      	movs	r3, #1
 800c526:	3201      	adds	r2, #1
 800c528:	f108 0804 	add.w	r8, r8, #4
 800c52c:	461d      	mov	r5, r3
 800c52e:	e74f      	b.n	800c3d0 <__kernel_rem_pio2+0x1b0>
	...
 800c53c:	3ff00000 	.word	0x3ff00000
 800c540:	0800d138 	.word	0x0800d138
 800c544:	40200000 	.word	0x40200000
 800c548:	3ff00000 	.word	0x3ff00000
 800c54c:	3e700000 	.word	0x3e700000
 800c550:	41700000 	.word	0x41700000
 800c554:	3fe00000 	.word	0x3fe00000
 800c558:	0800d0f8 	.word	0x0800d0f8
 800c55c:	1acb      	subs	r3, r1, r3
 800c55e:	f8c8 3000 	str.w	r3, [r8]
 800c562:	462b      	mov	r3, r5
 800c564:	e7df      	b.n	800c526 <__kernel_rem_pio2+0x306>
 800c566:	1e62      	subs	r2, r4, #1
 800c568:	ab0c      	add	r3, sp, #48	; 0x30
 800c56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c56e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c572:	a90c      	add	r1, sp, #48	; 0x30
 800c574:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c578:	e738      	b.n	800c3ec <__kernel_rem_pio2+0x1cc>
 800c57a:	1e62      	subs	r2, r4, #1
 800c57c:	ab0c      	add	r3, sp, #48	; 0x30
 800c57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c582:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c586:	e7f4      	b.n	800c572 <__kernel_rem_pio2+0x352>
 800c588:	a90c      	add	r1, sp, #48	; 0x30
 800c58a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c58e:	3b01      	subs	r3, #1
 800c590:	430a      	orrs	r2, r1
 800c592:	e788      	b.n	800c4a6 <__kernel_rem_pio2+0x286>
 800c594:	3301      	adds	r3, #1
 800c596:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c59a:	2900      	cmp	r1, #0
 800c59c:	d0fa      	beq.n	800c594 <__kernel_rem_pio2+0x374>
 800c59e:	9a08      	ldr	r2, [sp, #32]
 800c5a0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800c5a4:	446a      	add	r2, sp
 800c5a6:	3a98      	subs	r2, #152	; 0x98
 800c5a8:	9208      	str	r2, [sp, #32]
 800c5aa:	9a06      	ldr	r2, [sp, #24]
 800c5ac:	a920      	add	r1, sp, #128	; 0x80
 800c5ae:	18a2      	adds	r2, r4, r2
 800c5b0:	18e3      	adds	r3, r4, r3
 800c5b2:	f104 0801 	add.w	r8, r4, #1
 800c5b6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c5ba:	9302      	str	r3, [sp, #8]
 800c5bc:	9b02      	ldr	r3, [sp, #8]
 800c5be:	4543      	cmp	r3, r8
 800c5c0:	da04      	bge.n	800c5cc <__kernel_rem_pio2+0x3ac>
 800c5c2:	461c      	mov	r4, r3
 800c5c4:	e6a2      	b.n	800c30c <__kernel_rem_pio2+0xec>
 800c5c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e7e4      	b.n	800c596 <__kernel_rem_pio2+0x376>
 800c5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c5d2:	f7f3 ffc7 	bl	8000564 <__aeabi_i2d>
 800c5d6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5dc:	46ab      	mov	fp, r5
 800c5de:	461c      	mov	r4, r3
 800c5e0:	f04f 0900 	mov.w	r9, #0
 800c5e4:	2600      	movs	r6, #0
 800c5e6:	2700      	movs	r7, #0
 800c5e8:	9b05      	ldr	r3, [sp, #20]
 800c5ea:	4599      	cmp	r9, r3
 800c5ec:	dd06      	ble.n	800c5fc <__kernel_rem_pio2+0x3dc>
 800c5ee:	9b08      	ldr	r3, [sp, #32]
 800c5f0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c5f4:	f108 0801 	add.w	r8, r8, #1
 800c5f8:	9308      	str	r3, [sp, #32]
 800c5fa:	e7df      	b.n	800c5bc <__kernel_rem_pio2+0x39c>
 800c5fc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c600:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c604:	f7f4 f818 	bl	8000638 <__aeabi_dmul>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4630      	mov	r0, r6
 800c60e:	4639      	mov	r1, r7
 800c610:	f7f3 fe5c 	bl	80002cc <__adddf3>
 800c614:	f109 0901 	add.w	r9, r9, #1
 800c618:	4606      	mov	r6, r0
 800c61a:	460f      	mov	r7, r1
 800c61c:	e7e4      	b.n	800c5e8 <__kernel_rem_pio2+0x3c8>
 800c61e:	3d01      	subs	r5, #1
 800c620:	e747      	b.n	800c4b2 <__kernel_rem_pio2+0x292>
 800c622:	ec47 6b10 	vmov	d0, r6, r7
 800c626:	f1ca 0000 	rsb	r0, sl, #0
 800c62a:	f000 f949 	bl	800c8c0 <scalbn>
 800c62e:	ec57 6b10 	vmov	r6, r7, d0
 800c632:	4ba0      	ldr	r3, [pc, #640]	; (800c8b4 <__kernel_rem_pio2+0x694>)
 800c634:	ee10 0a10 	vmov	r0, s0
 800c638:	2200      	movs	r2, #0
 800c63a:	4639      	mov	r1, r7
 800c63c:	f7f4 fa82 	bl	8000b44 <__aeabi_dcmpge>
 800c640:	b1f8      	cbz	r0, 800c682 <__kernel_rem_pio2+0x462>
 800c642:	4b9d      	ldr	r3, [pc, #628]	; (800c8b8 <__kernel_rem_pio2+0x698>)
 800c644:	2200      	movs	r2, #0
 800c646:	4630      	mov	r0, r6
 800c648:	4639      	mov	r1, r7
 800c64a:	f7f3 fff5 	bl	8000638 <__aeabi_dmul>
 800c64e:	f7f4 faa3 	bl	8000b98 <__aeabi_d2iz>
 800c652:	4680      	mov	r8, r0
 800c654:	f7f3 ff86 	bl	8000564 <__aeabi_i2d>
 800c658:	4b96      	ldr	r3, [pc, #600]	; (800c8b4 <__kernel_rem_pio2+0x694>)
 800c65a:	2200      	movs	r2, #0
 800c65c:	f7f3 ffec 	bl	8000638 <__aeabi_dmul>
 800c660:	460b      	mov	r3, r1
 800c662:	4602      	mov	r2, r0
 800c664:	4639      	mov	r1, r7
 800c666:	4630      	mov	r0, r6
 800c668:	f7f3 fe2e 	bl	80002c8 <__aeabi_dsub>
 800c66c:	f7f4 fa94 	bl	8000b98 <__aeabi_d2iz>
 800c670:	1c65      	adds	r5, r4, #1
 800c672:	ab0c      	add	r3, sp, #48	; 0x30
 800c674:	f10a 0a18 	add.w	sl, sl, #24
 800c678:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c67c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c680:	e71f      	b.n	800c4c2 <__kernel_rem_pio2+0x2a2>
 800c682:	4630      	mov	r0, r6
 800c684:	4639      	mov	r1, r7
 800c686:	f7f4 fa87 	bl	8000b98 <__aeabi_d2iz>
 800c68a:	ab0c      	add	r3, sp, #48	; 0x30
 800c68c:	4625      	mov	r5, r4
 800c68e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c692:	e716      	b.n	800c4c2 <__kernel_rem_pio2+0x2a2>
 800c694:	ab0c      	add	r3, sp, #48	; 0x30
 800c696:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c69a:	f7f3 ff63 	bl	8000564 <__aeabi_i2d>
 800c69e:	4632      	mov	r2, r6
 800c6a0:	463b      	mov	r3, r7
 800c6a2:	f7f3 ffc9 	bl	8000638 <__aeabi_dmul>
 800c6a6:	4642      	mov	r2, r8
 800c6a8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c6ac:	464b      	mov	r3, r9
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	4639      	mov	r1, r7
 800c6b2:	f7f3 ffc1 	bl	8000638 <__aeabi_dmul>
 800c6b6:	3c01      	subs	r4, #1
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	460f      	mov	r7, r1
 800c6bc:	e713      	b.n	800c4e6 <__kernel_rem_pio2+0x2c6>
 800c6be:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800c6c2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800c6c6:	f7f3 ffb7 	bl	8000638 <__aeabi_dmul>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4648      	mov	r0, r9
 800c6d0:	4651      	mov	r1, sl
 800c6d2:	f7f3 fdfb 	bl	80002cc <__adddf3>
 800c6d6:	3701      	adds	r7, #1
 800c6d8:	4681      	mov	r9, r0
 800c6da:	468a      	mov	sl, r1
 800c6dc:	9b00      	ldr	r3, [sp, #0]
 800c6de:	429f      	cmp	r7, r3
 800c6e0:	dc02      	bgt.n	800c6e8 <__kernel_rem_pio2+0x4c8>
 800c6e2:	9b06      	ldr	r3, [sp, #24]
 800c6e4:	429f      	cmp	r7, r3
 800c6e6:	ddea      	ble.n	800c6be <__kernel_rem_pio2+0x49e>
 800c6e8:	9a06      	ldr	r2, [sp, #24]
 800c6ea:	ab48      	add	r3, sp, #288	; 0x120
 800c6ec:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800c6f0:	e9c6 9a00 	strd	r9, sl, [r6]
 800c6f4:	3c01      	subs	r4, #1
 800c6f6:	e6fa      	b.n	800c4ee <__kernel_rem_pio2+0x2ce>
 800c6f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	dc0b      	bgt.n	800c716 <__kernel_rem_pio2+0x4f6>
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	dc39      	bgt.n	800c776 <__kernel_rem_pio2+0x556>
 800c702:	d05d      	beq.n	800c7c0 <__kernel_rem_pio2+0x5a0>
 800c704:	9b02      	ldr	r3, [sp, #8]
 800c706:	f003 0007 	and.w	r0, r3, #7
 800c70a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c70e:	ecbd 8b02 	vpop	{d8}
 800c712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c716:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c718:	2b03      	cmp	r3, #3
 800c71a:	d1f3      	bne.n	800c704 <__kernel_rem_pio2+0x4e4>
 800c71c:	9b05      	ldr	r3, [sp, #20]
 800c71e:	9500      	str	r5, [sp, #0]
 800c720:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c724:	eb0d 0403 	add.w	r4, sp, r3
 800c728:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800c72c:	46a2      	mov	sl, r4
 800c72e:	9b00      	ldr	r3, [sp, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	f1aa 0a08 	sub.w	sl, sl, #8
 800c736:	dc69      	bgt.n	800c80c <__kernel_rem_pio2+0x5ec>
 800c738:	46aa      	mov	sl, r5
 800c73a:	f1ba 0f01 	cmp.w	sl, #1
 800c73e:	f1a4 0408 	sub.w	r4, r4, #8
 800c742:	f300 8083 	bgt.w	800c84c <__kernel_rem_pio2+0x62c>
 800c746:	9c05      	ldr	r4, [sp, #20]
 800c748:	ab48      	add	r3, sp, #288	; 0x120
 800c74a:	441c      	add	r4, r3
 800c74c:	2000      	movs	r0, #0
 800c74e:	2100      	movs	r1, #0
 800c750:	2d01      	cmp	r5, #1
 800c752:	f300 809a 	bgt.w	800c88a <__kernel_rem_pio2+0x66a>
 800c756:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800c75a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c75e:	f1bb 0f00 	cmp.w	fp, #0
 800c762:	f040 8098 	bne.w	800c896 <__kernel_rem_pio2+0x676>
 800c766:	9b04      	ldr	r3, [sp, #16]
 800c768:	e9c3 7800 	strd	r7, r8, [r3]
 800c76c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c770:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c774:	e7c6      	b.n	800c704 <__kernel_rem_pio2+0x4e4>
 800c776:	9e05      	ldr	r6, [sp, #20]
 800c778:	ab48      	add	r3, sp, #288	; 0x120
 800c77a:	441e      	add	r6, r3
 800c77c:	462c      	mov	r4, r5
 800c77e:	2000      	movs	r0, #0
 800c780:	2100      	movs	r1, #0
 800c782:	2c00      	cmp	r4, #0
 800c784:	da33      	bge.n	800c7ee <__kernel_rem_pio2+0x5ce>
 800c786:	f1bb 0f00 	cmp.w	fp, #0
 800c78a:	d036      	beq.n	800c7fa <__kernel_rem_pio2+0x5da>
 800c78c:	4602      	mov	r2, r0
 800c78e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c792:	9c04      	ldr	r4, [sp, #16]
 800c794:	e9c4 2300 	strd	r2, r3, [r4]
 800c798:	4602      	mov	r2, r0
 800c79a:	460b      	mov	r3, r1
 800c79c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c7a0:	f7f3 fd92 	bl	80002c8 <__aeabi_dsub>
 800c7a4:	ae4a      	add	r6, sp, #296	; 0x128
 800c7a6:	2401      	movs	r4, #1
 800c7a8:	42a5      	cmp	r5, r4
 800c7aa:	da29      	bge.n	800c800 <__kernel_rem_pio2+0x5e0>
 800c7ac:	f1bb 0f00 	cmp.w	fp, #0
 800c7b0:	d002      	beq.n	800c7b8 <__kernel_rem_pio2+0x598>
 800c7b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	9b04      	ldr	r3, [sp, #16]
 800c7ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c7be:	e7a1      	b.n	800c704 <__kernel_rem_pio2+0x4e4>
 800c7c0:	9c05      	ldr	r4, [sp, #20]
 800c7c2:	ab48      	add	r3, sp, #288	; 0x120
 800c7c4:	441c      	add	r4, r3
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	2d00      	cmp	r5, #0
 800c7cc:	da09      	bge.n	800c7e2 <__kernel_rem_pio2+0x5c2>
 800c7ce:	f1bb 0f00 	cmp.w	fp, #0
 800c7d2:	d002      	beq.n	800c7da <__kernel_rem_pio2+0x5ba>
 800c7d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7d8:	4619      	mov	r1, r3
 800c7da:	9b04      	ldr	r3, [sp, #16]
 800c7dc:	e9c3 0100 	strd	r0, r1, [r3]
 800c7e0:	e790      	b.n	800c704 <__kernel_rem_pio2+0x4e4>
 800c7e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c7e6:	f7f3 fd71 	bl	80002cc <__adddf3>
 800c7ea:	3d01      	subs	r5, #1
 800c7ec:	e7ed      	b.n	800c7ca <__kernel_rem_pio2+0x5aa>
 800c7ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c7f2:	f7f3 fd6b 	bl	80002cc <__adddf3>
 800c7f6:	3c01      	subs	r4, #1
 800c7f8:	e7c3      	b.n	800c782 <__kernel_rem_pio2+0x562>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	e7c8      	b.n	800c792 <__kernel_rem_pio2+0x572>
 800c800:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c804:	f7f3 fd62 	bl	80002cc <__adddf3>
 800c808:	3401      	adds	r4, #1
 800c80a:	e7cd      	b.n	800c7a8 <__kernel_rem_pio2+0x588>
 800c80c:	e9da 8900 	ldrd	r8, r9, [sl]
 800c810:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c814:	9b00      	ldr	r3, [sp, #0]
 800c816:	3b01      	subs	r3, #1
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	4632      	mov	r2, r6
 800c81c:	463b      	mov	r3, r7
 800c81e:	4640      	mov	r0, r8
 800c820:	4649      	mov	r1, r9
 800c822:	f7f3 fd53 	bl	80002cc <__adddf3>
 800c826:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c82a:	4602      	mov	r2, r0
 800c82c:	460b      	mov	r3, r1
 800c82e:	4640      	mov	r0, r8
 800c830:	4649      	mov	r1, r9
 800c832:	f7f3 fd49 	bl	80002c8 <__aeabi_dsub>
 800c836:	4632      	mov	r2, r6
 800c838:	463b      	mov	r3, r7
 800c83a:	f7f3 fd47 	bl	80002cc <__adddf3>
 800c83e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c842:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c846:	ed8a 7b00 	vstr	d7, [sl]
 800c84a:	e770      	b.n	800c72e <__kernel_rem_pio2+0x50e>
 800c84c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c850:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c854:	4640      	mov	r0, r8
 800c856:	4632      	mov	r2, r6
 800c858:	463b      	mov	r3, r7
 800c85a:	4649      	mov	r1, r9
 800c85c:	f7f3 fd36 	bl	80002cc <__adddf3>
 800c860:	e9cd 0100 	strd	r0, r1, [sp]
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	4640      	mov	r0, r8
 800c86a:	4649      	mov	r1, r9
 800c86c:	f7f3 fd2c 	bl	80002c8 <__aeabi_dsub>
 800c870:	4632      	mov	r2, r6
 800c872:	463b      	mov	r3, r7
 800c874:	f7f3 fd2a 	bl	80002cc <__adddf3>
 800c878:	ed9d 7b00 	vldr	d7, [sp]
 800c87c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c880:	ed84 7b00 	vstr	d7, [r4]
 800c884:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c888:	e757      	b.n	800c73a <__kernel_rem_pio2+0x51a>
 800c88a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c88e:	f7f3 fd1d 	bl	80002cc <__adddf3>
 800c892:	3d01      	subs	r5, #1
 800c894:	e75c      	b.n	800c750 <__kernel_rem_pio2+0x530>
 800c896:	9b04      	ldr	r3, [sp, #16]
 800c898:	9a04      	ldr	r2, [sp, #16]
 800c89a:	601f      	str	r7, [r3, #0]
 800c89c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c8a0:	605c      	str	r4, [r3, #4]
 800c8a2:	609d      	str	r5, [r3, #8]
 800c8a4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c8a8:	60d3      	str	r3, [r2, #12]
 800c8aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8ae:	6110      	str	r0, [r2, #16]
 800c8b0:	6153      	str	r3, [r2, #20]
 800c8b2:	e727      	b.n	800c704 <__kernel_rem_pio2+0x4e4>
 800c8b4:	41700000 	.word	0x41700000
 800c8b8:	3e700000 	.word	0x3e700000
 800c8bc:	00000000 	.word	0x00000000

0800c8c0 <scalbn>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	ec55 4b10 	vmov	r4, r5, d0
 800c8c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c8ca:	4606      	mov	r6, r0
 800c8cc:	462b      	mov	r3, r5
 800c8ce:	b999      	cbnz	r1, 800c8f8 <scalbn+0x38>
 800c8d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8d4:	4323      	orrs	r3, r4
 800c8d6:	d03f      	beq.n	800c958 <scalbn+0x98>
 800c8d8:	4b35      	ldr	r3, [pc, #212]	; (800c9b0 <scalbn+0xf0>)
 800c8da:	4629      	mov	r1, r5
 800c8dc:	ee10 0a10 	vmov	r0, s0
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f7f3 fea9 	bl	8000638 <__aeabi_dmul>
 800c8e6:	4b33      	ldr	r3, [pc, #204]	; (800c9b4 <scalbn+0xf4>)
 800c8e8:	429e      	cmp	r6, r3
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	460d      	mov	r5, r1
 800c8ee:	da10      	bge.n	800c912 <scalbn+0x52>
 800c8f0:	a327      	add	r3, pc, #156	; (adr r3, 800c990 <scalbn+0xd0>)
 800c8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f6:	e01f      	b.n	800c938 <scalbn+0x78>
 800c8f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c8fc:	4291      	cmp	r1, r2
 800c8fe:	d10c      	bne.n	800c91a <scalbn+0x5a>
 800c900:	ee10 2a10 	vmov	r2, s0
 800c904:	4620      	mov	r0, r4
 800c906:	4629      	mov	r1, r5
 800c908:	f7f3 fce0 	bl	80002cc <__adddf3>
 800c90c:	4604      	mov	r4, r0
 800c90e:	460d      	mov	r5, r1
 800c910:	e022      	b.n	800c958 <scalbn+0x98>
 800c912:	460b      	mov	r3, r1
 800c914:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c918:	3936      	subs	r1, #54	; 0x36
 800c91a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c91e:	4296      	cmp	r6, r2
 800c920:	dd0d      	ble.n	800c93e <scalbn+0x7e>
 800c922:	2d00      	cmp	r5, #0
 800c924:	a11c      	add	r1, pc, #112	; (adr r1, 800c998 <scalbn+0xd8>)
 800c926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c92a:	da02      	bge.n	800c932 <scalbn+0x72>
 800c92c:	a11c      	add	r1, pc, #112	; (adr r1, 800c9a0 <scalbn+0xe0>)
 800c92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c932:	a319      	add	r3, pc, #100	; (adr r3, 800c998 <scalbn+0xd8>)
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	f7f3 fe7e 	bl	8000638 <__aeabi_dmul>
 800c93c:	e7e6      	b.n	800c90c <scalbn+0x4c>
 800c93e:	1872      	adds	r2, r6, r1
 800c940:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c944:	428a      	cmp	r2, r1
 800c946:	dcec      	bgt.n	800c922 <scalbn+0x62>
 800c948:	2a00      	cmp	r2, #0
 800c94a:	dd08      	ble.n	800c95e <scalbn+0x9e>
 800c94c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c950:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c954:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c958:	ec45 4b10 	vmov	d0, r4, r5
 800c95c:	bd70      	pop	{r4, r5, r6, pc}
 800c95e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c962:	da08      	bge.n	800c976 <scalbn+0xb6>
 800c964:	2d00      	cmp	r5, #0
 800c966:	a10a      	add	r1, pc, #40	; (adr r1, 800c990 <scalbn+0xd0>)
 800c968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c96c:	dac0      	bge.n	800c8f0 <scalbn+0x30>
 800c96e:	a10e      	add	r1, pc, #56	; (adr r1, 800c9a8 <scalbn+0xe8>)
 800c970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c974:	e7bc      	b.n	800c8f0 <scalbn+0x30>
 800c976:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c97a:	3236      	adds	r2, #54	; 0x36
 800c97c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c980:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c984:	4620      	mov	r0, r4
 800c986:	4b0c      	ldr	r3, [pc, #48]	; (800c9b8 <scalbn+0xf8>)
 800c988:	2200      	movs	r2, #0
 800c98a:	e7d5      	b.n	800c938 <scalbn+0x78>
 800c98c:	f3af 8000 	nop.w
 800c990:	c2f8f359 	.word	0xc2f8f359
 800c994:	01a56e1f 	.word	0x01a56e1f
 800c998:	8800759c 	.word	0x8800759c
 800c99c:	7e37e43c 	.word	0x7e37e43c
 800c9a0:	8800759c 	.word	0x8800759c
 800c9a4:	fe37e43c 	.word	0xfe37e43c
 800c9a8:	c2f8f359 	.word	0xc2f8f359
 800c9ac:	81a56e1f 	.word	0x81a56e1f
 800c9b0:	43500000 	.word	0x43500000
 800c9b4:	ffff3cb0 	.word	0xffff3cb0
 800c9b8:	3c900000 	.word	0x3c900000
 800c9bc:	00000000 	.word	0x00000000

0800c9c0 <floor>:
 800c9c0:	ec51 0b10 	vmov	r0, r1, d0
 800c9c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9cc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800c9d0:	2e13      	cmp	r6, #19
 800c9d2:	ee10 5a10 	vmov	r5, s0
 800c9d6:	ee10 8a10 	vmov	r8, s0
 800c9da:	460c      	mov	r4, r1
 800c9dc:	dc31      	bgt.n	800ca42 <floor+0x82>
 800c9de:	2e00      	cmp	r6, #0
 800c9e0:	da14      	bge.n	800ca0c <floor+0x4c>
 800c9e2:	a333      	add	r3, pc, #204	; (adr r3, 800cab0 <floor+0xf0>)
 800c9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e8:	f7f3 fc70 	bl	80002cc <__adddf3>
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	f7f4 f8b2 	bl	8000b58 <__aeabi_dcmpgt>
 800c9f4:	b138      	cbz	r0, 800ca06 <floor+0x46>
 800c9f6:	2c00      	cmp	r4, #0
 800c9f8:	da53      	bge.n	800caa2 <floor+0xe2>
 800c9fa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c9fe:	4325      	orrs	r5, r4
 800ca00:	d052      	beq.n	800caa8 <floor+0xe8>
 800ca02:	4c2d      	ldr	r4, [pc, #180]	; (800cab8 <floor+0xf8>)
 800ca04:	2500      	movs	r5, #0
 800ca06:	4621      	mov	r1, r4
 800ca08:	4628      	mov	r0, r5
 800ca0a:	e024      	b.n	800ca56 <floor+0x96>
 800ca0c:	4f2b      	ldr	r7, [pc, #172]	; (800cabc <floor+0xfc>)
 800ca0e:	4137      	asrs	r7, r6
 800ca10:	ea01 0307 	and.w	r3, r1, r7
 800ca14:	4303      	orrs	r3, r0
 800ca16:	d01e      	beq.n	800ca56 <floor+0x96>
 800ca18:	a325      	add	r3, pc, #148	; (adr r3, 800cab0 <floor+0xf0>)
 800ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1e:	f7f3 fc55 	bl	80002cc <__adddf3>
 800ca22:	2200      	movs	r2, #0
 800ca24:	2300      	movs	r3, #0
 800ca26:	f7f4 f897 	bl	8000b58 <__aeabi_dcmpgt>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d0eb      	beq.n	800ca06 <floor+0x46>
 800ca2e:	2c00      	cmp	r4, #0
 800ca30:	bfbe      	ittt	lt
 800ca32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ca36:	4133      	asrlt	r3, r6
 800ca38:	18e4      	addlt	r4, r4, r3
 800ca3a:	ea24 0407 	bic.w	r4, r4, r7
 800ca3e:	2500      	movs	r5, #0
 800ca40:	e7e1      	b.n	800ca06 <floor+0x46>
 800ca42:	2e33      	cmp	r6, #51	; 0x33
 800ca44:	dd0b      	ble.n	800ca5e <floor+0x9e>
 800ca46:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ca4a:	d104      	bne.n	800ca56 <floor+0x96>
 800ca4c:	ee10 2a10 	vmov	r2, s0
 800ca50:	460b      	mov	r3, r1
 800ca52:	f7f3 fc3b 	bl	80002cc <__adddf3>
 800ca56:	ec41 0b10 	vmov	d0, r0, r1
 800ca5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca5e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ca62:	f04f 37ff 	mov.w	r7, #4294967295
 800ca66:	40df      	lsrs	r7, r3
 800ca68:	4238      	tst	r0, r7
 800ca6a:	d0f4      	beq.n	800ca56 <floor+0x96>
 800ca6c:	a310      	add	r3, pc, #64	; (adr r3, 800cab0 <floor+0xf0>)
 800ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca72:	f7f3 fc2b 	bl	80002cc <__adddf3>
 800ca76:	2200      	movs	r2, #0
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f7f4 f86d 	bl	8000b58 <__aeabi_dcmpgt>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d0c1      	beq.n	800ca06 <floor+0x46>
 800ca82:	2c00      	cmp	r4, #0
 800ca84:	da0a      	bge.n	800ca9c <floor+0xdc>
 800ca86:	2e14      	cmp	r6, #20
 800ca88:	d101      	bne.n	800ca8e <floor+0xce>
 800ca8a:	3401      	adds	r4, #1
 800ca8c:	e006      	b.n	800ca9c <floor+0xdc>
 800ca8e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ca92:	2301      	movs	r3, #1
 800ca94:	40b3      	lsls	r3, r6
 800ca96:	441d      	add	r5, r3
 800ca98:	45a8      	cmp	r8, r5
 800ca9a:	d8f6      	bhi.n	800ca8a <floor+0xca>
 800ca9c:	ea25 0507 	bic.w	r5, r5, r7
 800caa0:	e7b1      	b.n	800ca06 <floor+0x46>
 800caa2:	2500      	movs	r5, #0
 800caa4:	462c      	mov	r4, r5
 800caa6:	e7ae      	b.n	800ca06 <floor+0x46>
 800caa8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800caac:	e7ab      	b.n	800ca06 <floor+0x46>
 800caae:	bf00      	nop
 800cab0:	8800759c 	.word	0x8800759c
 800cab4:	7e37e43c 	.word	0x7e37e43c
 800cab8:	bff00000 	.word	0xbff00000
 800cabc:	000fffff 	.word	0x000fffff

0800cac0 <_init>:
 800cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac2:	bf00      	nop
 800cac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cac6:	bc08      	pop	{r3}
 800cac8:	469e      	mov	lr, r3
 800caca:	4770      	bx	lr

0800cacc <_fini>:
 800cacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cace:	bf00      	nop
 800cad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cad2:	bc08      	pop	{r3}
 800cad4:	469e      	mov	lr, r3
 800cad6:	4770      	bx	lr
