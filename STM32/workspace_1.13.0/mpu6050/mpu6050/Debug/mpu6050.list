
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006190  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006358  08006358  00016358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006550  08006550  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006558  08006558  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006560  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000070  080065d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  080065d0  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9e2  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017b6  00000000  00000000  0002aac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  0002c280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074f  00000000  00000000  0002cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021438  00000000  00000000  0002d317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfb6  00000000  00000000  0004e74f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cad54  00000000  00000000  0005b705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d3c  00000000  00000000  0012645c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00129198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006340 	.word	0x08006340

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08006340 	.word	0x08006340

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b970 	b.w	8000ec8 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9e08      	ldr	r6, [sp, #32]
 8000c06:	460d      	mov	r5, r1
 8000c08:	4604      	mov	r4, r0
 8000c0a:	460f      	mov	r7, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d14a      	bne.n	8000ca6 <__udivmoddi4+0xa6>
 8000c10:	428a      	cmp	r2, r1
 8000c12:	4694      	mov	ip, r2
 8000c14:	d965      	bls.n	8000ce2 <__udivmoddi4+0xe2>
 8000c16:	fab2 f382 	clz	r3, r2
 8000c1a:	b143      	cbz	r3, 8000c2e <__udivmoddi4+0x2e>
 8000c1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c20:	f1c3 0220 	rsb	r2, r3, #32
 8000c24:	409f      	lsls	r7, r3
 8000c26:	fa20 f202 	lsr.w	r2, r0, r2
 8000c2a:	4317      	orrs	r7, r2
 8000c2c:	409c      	lsls	r4, r3
 8000c2e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c32:	fa1f f58c 	uxth.w	r5, ip
 8000c36:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c3a:	0c22      	lsrs	r2, r4, #16
 8000c3c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c44:	fb01 f005 	mul.w	r0, r1, r5
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x62>
 8000c4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c50:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c54:	f080 811c 	bcs.w	8000e90 <__udivmoddi4+0x290>
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	f240 8119 	bls.w	8000e90 <__udivmoddi4+0x290>
 8000c5e:	3902      	subs	r1, #2
 8000c60:	4462      	add	r2, ip
 8000c62:	1a12      	subs	r2, r2, r0
 8000c64:	b2a4      	uxth	r4, r4
 8000c66:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c6a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c72:	fb00 f505 	mul.w	r5, r0, r5
 8000c76:	42a5      	cmp	r5, r4
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x90>
 8000c7a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c82:	f080 8107 	bcs.w	8000e94 <__udivmoddi4+0x294>
 8000c86:	42a5      	cmp	r5, r4
 8000c88:	f240 8104 	bls.w	8000e94 <__udivmoddi4+0x294>
 8000c8c:	4464      	add	r4, ip
 8000c8e:	3802      	subs	r0, #2
 8000c90:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c94:	1b64      	subs	r4, r4, r5
 8000c96:	2100      	movs	r1, #0
 8000c98:	b11e      	cbz	r6, 8000ca2 <__udivmoddi4+0xa2>
 8000c9a:	40dc      	lsrs	r4, r3
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0xbc>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	f000 80ed 	beq.w	8000e8a <__udivmoddi4+0x28a>
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	fab3 f183 	clz	r1, r3
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	d149      	bne.n	8000d58 <__udivmoddi4+0x158>
 8000cc4:	42ab      	cmp	r3, r5
 8000cc6:	d302      	bcc.n	8000cce <__udivmoddi4+0xce>
 8000cc8:	4282      	cmp	r2, r0
 8000cca:	f200 80f8 	bhi.w	8000ebe <__udivmoddi4+0x2be>
 8000cce:	1a84      	subs	r4, r0, r2
 8000cd0:	eb65 0203 	sbc.w	r2, r5, r3
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	4617      	mov	r7, r2
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	d0e2      	beq.n	8000ca2 <__udivmoddi4+0xa2>
 8000cdc:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce0:	e7df      	b.n	8000ca2 <__udivmoddi4+0xa2>
 8000ce2:	b902      	cbnz	r2, 8000ce6 <__udivmoddi4+0xe6>
 8000ce4:	deff      	udf	#255	; 0xff
 8000ce6:	fab2 f382 	clz	r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 8090 	bne.w	8000e10 <__udivmoddi4+0x210>
 8000cf0:	1a8a      	subs	r2, r1, r2
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d00:	fb07 2015 	mls	r0, r7, r5, r2
 8000d04:	0c22      	lsrs	r2, r4, #16
 8000d06:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d0a:	fb0e f005 	mul.w	r0, lr, r5
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x124>
 8000d12:	eb1c 0202 	adds.w	r2, ip, r2
 8000d16:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x122>
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2b8>
 8000d22:	4645      	mov	r5, r8
 8000d24:	1a12      	subs	r2, r2, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d2c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x14e>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x14c>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2c2>
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d56:	e79f      	b.n	8000c98 <__udivmoddi4+0x98>
 8000d58:	f1c1 0720 	rsb	r7, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa05 f401 	lsl.w	r4, r5, r1
 8000d6a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d6e:	40fd      	lsrs	r5, r7
 8000d70:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d74:	4323      	orrs	r3, r4
 8000d76:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d7a:	fa1f fe8c 	uxth.w	lr, ip
 8000d7e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d82:	0c1c      	lsrs	r4, r3, #16
 8000d84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d88:	fb08 f50e 	mul.w	r5, r8, lr
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f001 	lsl.w	r0, r0, r1
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b0>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2b4>
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2b4>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4464      	add	r4, ip
 8000db0:	1b64      	subs	r4, r4, r5
 8000db2:	b29d      	uxth	r5, r3
 8000db4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dbc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dc4:	45a6      	cmp	lr, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1da>
 8000dc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dcc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2ac>
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2ac>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	4464      	add	r4, ip
 8000dda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dde:	fba3 9502 	umull	r9, r5, r3, r2
 8000de2:	eba4 040e 	sub.w	r4, r4, lr
 8000de6:	42ac      	cmp	r4, r5
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46ae      	mov	lr, r5
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x29c>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x298>
 8000df0:	b156      	cbz	r6, 8000e08 <__udivmoddi4+0x208>
 8000df2:	ebb0 0208 	subs.w	r2, r0, r8
 8000df6:	eb64 040e 	sbc.w	r4, r4, lr
 8000dfa:	fa04 f707 	lsl.w	r7, r4, r7
 8000dfe:	40ca      	lsrs	r2, r1
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	4317      	orrs	r7, r2
 8000e04:	e9c6 7400 	strd	r7, r4, [r6]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	f1c3 0120 	rsb	r1, r3, #32
 8000e14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e18:	fa20 f201 	lsr.w	r2, r0, r1
 8000e1c:	fa25 f101 	lsr.w	r1, r5, r1
 8000e20:	409d      	lsls	r5, r3
 8000e22:	432a      	orrs	r2, r5
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e30:	fb07 1510 	mls	r5, r7, r0, r1
 8000e34:	0c11      	lsrs	r1, r2, #16
 8000e36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e3a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e3e:	428d      	cmp	r5, r1
 8000e40:	fa04 f403 	lsl.w	r4, r4, r3
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x258>
 8000e46:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e50:	428d      	cmp	r5, r1
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4461      	add	r1, ip
 8000e58:	1b49      	subs	r1, r1, r5
 8000e5a:	b292      	uxth	r2, r2
 8000e5c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e60:	fb07 1115 	mls	r1, r7, r5, r1
 8000e64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e68:	fb05 f10e 	mul.w	r1, r5, lr
 8000e6c:	4291      	cmp	r1, r2
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x282>
 8000e70:	eb1c 0202 	adds.w	r2, ip, r2
 8000e74:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e7a:	4291      	cmp	r1, r2
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e7e:	3d02      	subs	r5, #2
 8000e80:	4462      	add	r2, ip
 8000e82:	1a52      	subs	r2, r2, r1
 8000e84:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0xfc>
 8000e8a:	4631      	mov	r1, r6
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xa2>
 8000e90:	4639      	mov	r1, r7
 8000e92:	e6e6      	b.n	8000c62 <__udivmoddi4+0x62>
 8000e94:	4610      	mov	r0, r2
 8000e96:	e6fb      	b.n	8000c90 <__udivmoddi4+0x90>
 8000e98:	4548      	cmp	r0, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f0>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f0>
 8000ea8:	4645      	mov	r5, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x282>
 8000eac:	462b      	mov	r3, r5
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1da>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x258>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b0>
 8000eb8:	3d02      	subs	r5, #2
 8000eba:	4462      	add	r2, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x124>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e70a      	b.n	8000cd8 <__udivmoddi4+0xd8>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x14e>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	0000      	movs	r0, r0
	...

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f001 f822 	bl	8001f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 fcd0 	bl	8001880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f000 fdec 	bl	8001abc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ee4:	f000 fdc0 	bl	8001a68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ee8:	f000 fd38 	bl	800195c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000eec:	f000 fd92 	bl	8001a14 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000ef0:	f000 fd62 	bl	80019b8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  // PWR_MGMT_1 CNFG
      data = 0x00;
 8000ef4:	4b9f      	ldr	r3, [pc, #636]	; (8001174 <main+0x2a4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
      HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	2301      	movs	r3, #1
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	4b9b      	ldr	r3, [pc, #620]	; (8001174 <main+0x2a4>)
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	226b      	movs	r2, #107	; 0x6b
 8000f0c:	21d0      	movs	r1, #208	; 0xd0
 8000f0e:	489a      	ldr	r0, [pc, #616]	; (8001178 <main+0x2a8>)
 8000f10:	f001 ffb2 	bl	8002e78 <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write (&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	9302      	str	r3, [sp, #8]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	4b95      	ldr	r3, [pc, #596]	; (8001174 <main+0x2a4>)
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2301      	movs	r3, #1
 8000f24:	226b      	movs	r2, #107	; 0x6b
 8000f26:	21d0      	movs	r1, #208	; 0xd0
 8000f28:	4894      	ldr	r0, [pc, #592]	; (800117c <main+0x2ac>)
 8000f2a:	f001 ffa5 	bl	8002e78 <HAL_I2C_Mem_Write>

      //kullanılan birimin pointer olarak döndürülmesi, cihaz slave adresi, register adresi, register boyutu, verinin pointer
      //olarak döndürülmesi, verinin boyutu , zaman aşımıı değeri
      // GYRO CNFG --> +-500 derece/saniye --> 08
      data = 0x08;
 8000f2e:	4b91      	ldr	r3, [pc, #580]	; (8001174 <main+0x2a4>)
 8000f30:	2208      	movs	r2, #8
 8000f32:	701a      	strb	r2, [r3, #0]
      HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, GYRO_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	9302      	str	r3, [sp, #8]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	4b8d      	ldr	r3, [pc, #564]	; (8001174 <main+0x2a4>)
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	221b      	movs	r2, #27
 8000f46:	21d0      	movs	r1, #208	; 0xd0
 8000f48:	488b      	ldr	r0, [pc, #556]	; (8001178 <main+0x2a8>)
 8000f4a:	f001 ff95 	bl	8002e78 <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write (&hi2c2, MPU6050_ADDR, GYRO_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	9302      	str	r3, [sp, #8]
 8000f54:	2301      	movs	r3, #1
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	4b86      	ldr	r3, [pc, #536]	; (8001174 <main+0x2a4>)
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	221b      	movs	r2, #27
 8000f60:	21d0      	movs	r1, #208	; 0xd0
 8000f62:	4886      	ldr	r0, [pc, #536]	; (800117c <main+0x2ac>)
 8000f64:	f001 ff88 	bl	8002e78 <HAL_I2C_Mem_Write>

      // ACC CNFG --> +-8g --> 10
      data = 0x10;
 8000f68:	4b82      	ldr	r3, [pc, #520]	; (8001174 <main+0x2a4>)
 8000f6a:	2210      	movs	r2, #16
 8000f6c:	701a      	strb	r2, [r3, #0]

      HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, ACC_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	9302      	str	r3, [sp, #8]
 8000f74:	2301      	movs	r3, #1
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	4b7e      	ldr	r3, [pc, #504]	; (8001174 <main+0x2a4>)
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	221c      	movs	r2, #28
 8000f80:	21d0      	movs	r1, #208	; 0xd0
 8000f82:	487d      	ldr	r0, [pc, #500]	; (8001178 <main+0x2a8>)
 8000f84:	f001 ff78 	bl	8002e78 <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write (&hi2c2, MPU6050_ADDR, ACC_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	4b78      	ldr	r3, [pc, #480]	; (8001174 <main+0x2a4>)
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	221c      	movs	r2, #28
 8000f9a:	21d0      	movs	r1, #208	; 0xd0
 8000f9c:	4877      	ldr	r0, [pc, #476]	; (800117c <main+0x2ac>)
 8000f9e:	f001 ff6b 	bl	8002e78 <HAL_I2C_Mem_Write>

      data = 0x03;
 8000fa2:	4b74      	ldr	r3, [pc, #464]	; (8001174 <main+0x2a4>)
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	701a      	strb	r2, [r3, #0]

      HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, LPF_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	4b70      	ldr	r3, [pc, #448]	; (8001174 <main+0x2a4>)
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	221a      	movs	r2, #26
 8000fba:	21d0      	movs	r1, #208	; 0xd0
 8000fbc:	486e      	ldr	r0, [pc, #440]	; (8001178 <main+0x2a8>)
 8000fbe:	f001 ff5b 	bl	8002e78 <HAL_I2C_Mem_Write>
      HAL_I2C_Mem_Write (&hi2c2, MPU6050_ADDR, LPF_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	4b69      	ldr	r3, [pc, #420]	; (8001174 <main+0x2a4>)
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	221a      	movs	r2, #26
 8000fd4:	21d0      	movs	r1, #208	; 0xd0
 8000fd6:	4869      	ldr	r0, [pc, #420]	; (800117c <main+0x2ac>)
 8000fd8:	f001 ff4e 	bl	8002e78 <HAL_I2C_Mem_Write>

      for(i=0; i<200; i++)
 8000fdc:	4b68      	ldr	r3, [pc, #416]	; (8001180 <main+0x2b0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e098      	b.n	8001116 <main+0x246>
      {
    	  prevtime2 = time2;
 8000fe4:	4b67      	ldr	r3, [pc, #412]	; (8001184 <main+0x2b4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a67      	ldr	r2, [pc, #412]	; (8001188 <main+0x2b8>)
 8000fea:	6013      	str	r3, [r2, #0]
    	  time2 = HAL_GetTick();
 8000fec:	f000 fffe 	bl	8001fec <HAL_GetTick>
 8000ff0:	ee07 0a90 	vmov	s15, r0
 8000ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ff8:	4b62      	ldr	r3, [pc, #392]	; (8001184 <main+0x2b4>)
 8000ffa:	edc3 7a00 	vstr	s15, [r3]
    	  elapsedtime2=(time2-prevtime2)*1000;
 8000ffe:	4b61      	ldr	r3, [pc, #388]	; (8001184 <main+0x2b4>)
 8001000:	ed93 7a00 	vldr	s14, [r3]
 8001004:	4b60      	ldr	r3, [pc, #384]	; (8001188 <main+0x2b8>)
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800118c <main+0x2bc>
 8001012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001016:	4b5e      	ldr	r3, [pc, #376]	; (8001190 <main+0x2c0>)
 8001018:	edc3 7a00 	vstr	s15, [r3]

    	  cuffer[0]=0x43;
 800101c:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <main+0x2c4>)
 800101e:	2243      	movs	r2, #67	; 0x43
 8001020:	701a      	strb	r2, [r3, #0]
    	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,cuffer,1,HAL_MAX_DELAY);
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	4a5a      	ldr	r2, [pc, #360]	; (8001194 <main+0x2c4>)
 800102c:	21d0      	movs	r1, #208	; 0xd0
 800102e:	4852      	ldr	r0, [pc, #328]	; (8001178 <main+0x2a8>)
 8001030:	f001 fbfe 	bl	8002830 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,cuffer,6,HAL_MAX_DELAY);
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2306      	movs	r3, #6
 800103c:	4a55      	ldr	r2, [pc, #340]	; (8001194 <main+0x2c4>)
 800103e:	21d0      	movs	r1, #208	; 0xd0
 8001040:	484d      	ldr	r0, [pc, #308]	; (8001178 <main+0x2a8>)
 8001042:	f001 fcf3 	bl	8002a2c <HAL_I2C_Master_Receive>
			HAL_I2C_Master_Transmit(&hi2c2,MPU6050_ADDR,cuffer,1,HAL_MAX_DELAY);
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	4a51      	ldr	r2, [pc, #324]	; (8001194 <main+0x2c4>)
 8001050:	21d0      	movs	r1, #208	; 0xd0
 8001052:	484a      	ldr	r0, [pc, #296]	; (800117c <main+0x2ac>)
 8001054:	f001 fbec 	bl	8002830 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c2,MPU6050_ADDR,cuffer,6,HAL_MAX_DELAY);
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2306      	movs	r3, #6
 8001060:	4a4c      	ldr	r2, [pc, #304]	; (8001194 <main+0x2c4>)
 8001062:	21d0      	movs	r1, #208	; 0xd0
 8001064:	4845      	ldr	r0, [pc, #276]	; (800117c <main+0x2ac>)
 8001066:	f001 fce1 	bl	8002a2c <HAL_I2C_Master_Receive>

    	  gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]);
 800106a:	4b4a      	ldr	r3, [pc, #296]	; (8001194 <main+0x2c4>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	4b48      	ldr	r3, [pc, #288]	; (8001194 <main+0x2c4>)
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	4b46      	ldr	r3, [pc, #280]	; (8001198 <main+0x2c8>)
 800107e:	801a      	strh	r2, [r3, #0]
    	  gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]);
 8001080:	4b44      	ldr	r3, [pc, #272]	; (8001194 <main+0x2c4>)
 8001082:	789b      	ldrb	r3, [r3, #2]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b42      	ldr	r3, [pc, #264]	; (8001194 <main+0x2c4>)
 800108a:	78db      	ldrb	r3, [r3, #3]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b41      	ldr	r3, [pc, #260]	; (8001198 <main+0x2c8>)
 8001094:	805a      	strh	r2, [r3, #2]
    	  gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]);
 8001096:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <main+0x2c4>)
 8001098:	791b      	ldrb	r3, [r3, #4]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <main+0x2c4>)
 80010a0:	795b      	ldrb	r3, [r3, #5]
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <main+0x2c8>)
 80010aa:	809a      	strh	r2, [r3, #4]

    	  gyro_cal[0] += gyro_raw[0];
 80010ac:	4b3b      	ldr	r3, [pc, #236]	; (800119c <main+0x2cc>)
 80010ae:	ed93 7a00 	vldr	s14, [r3]
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <main+0x2c8>)
 80010b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <main+0x2cc>)
 80010c6:	edc3 7a00 	vstr	s15, [r3]
    	  gyro_cal[1] += gyro_raw[1];
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <main+0x2cc>)
 80010cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <main+0x2c8>)
 80010d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e2:	4b2e      	ldr	r3, [pc, #184]	; (800119c <main+0x2cc>)
 80010e4:	edc3 7a01 	vstr	s15, [r3, #4]
    	  gyro_cal[2] += gyro_raw[2];
 80010e8:	4b2c      	ldr	r3, [pc, #176]	; (800119c <main+0x2cc>)
 80010ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <main+0x2c8>)
 80010f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <main+0x2cc>)
 8001102:	edc3 7a02 	vstr	s15, [r3, #8]

    	  HAL_Delay(3);
 8001106:	2003      	movs	r0, #3
 8001108:	f000 ff7c 	bl	8002004 <HAL_Delay>
      for(i=0; i<200; i++)
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <main+0x2b0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <main+0x2b0>)
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <main+0x2b0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2bc7      	cmp	r3, #199	; 0xc7
 800111c:	f77f af62 	ble.w	8000fe4 <main+0x114>

      }

      gyro_cal[0] /= 200;
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <main+0x2cc>)
 8001122:	ed93 7a00 	vldr	s14, [r3]
 8001126:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80011a0 <main+0x2d0>
 800112a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <main+0x2cc>)
 8001130:	edc3 7a00 	vstr	s15, [r3]
      gyro_cal[1] /= 200;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <main+0x2cc>)
 8001136:	ed93 7a01 	vldr	s14, [r3, #4]
 800113a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80011a0 <main+0x2d0>
 800113e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <main+0x2cc>)
 8001144:	edc3 7a01 	vstr	s15, [r3, #4]
      gyro_cal[2] /= 200;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <main+0x2cc>)
 800114a:	ed93 7a02 	vldr	s14, [r3, #8]
 800114e:	eddf 6a14 	vldr	s13, [pc, #80]	; 80011a0 <main+0x2d0>
 8001152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <main+0x2cc>)
 8001158:	edc3 7a02 	vstr	s15, [r3, #8]

      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800115c:	2120      	movs	r1, #32
 800115e:	4811      	ldr	r0, [pc, #68]	; (80011a4 <main+0x2d4>)
 8001160:	f001 fa07 	bl	8002572 <HAL_GPIO_TogglePin>
      HAL_Delay(1000);
 8001164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001168:	f000 ff4c 	bl	8002004 <HAL_Delay>
//          		  address[k] = j;
//          		  k++;
//          	  }
//
//            }
      for(int i = 0; i < 255; i++){
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	e034      	b.n	80011dc <main+0x30c>
 8001172:	bf00      	nop
 8001174:	200001bc 	.word	0x200001bc
 8001178:	2000008c 	.word	0x2000008c
 800117c:	200000e0 	.word	0x200000e0
 8001180:	20000214 	.word	0x20000214
 8001184:	2000022c 	.word	0x2000022c
 8001188:	20000228 	.word	0x20000228
 800118c:	447a0000 	.word	0x447a0000
 8001190:	20000230 	.word	0x20000230
 8001194:	200001cc 	.word	0x200001cc
 8001198:	200001d4 	.word	0x200001d4
 800119c:	200001e4 	.word	0x200001e4
 80011a0:	43480000 	.word	0x43480000
 80011a4:	40020000 	.word	0x40020000
          	  if(!HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 100)){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	b299      	uxth	r1, r3
 80011ac:	2364      	movs	r3, #100	; 0x64
 80011ae:	2201      	movs	r2, #1
 80011b0:	48af      	ldr	r0, [pc, #700]	; (8001470 <main+0x5a0>)
 80011b2:	f001 ff5b 	bl	800306c <HAL_I2C_IsDeviceReady>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10c      	bne.n	80011d6 <main+0x306>
          		  address1[m] = i;
 80011bc:	4bad      	ldr	r3, [pc, #692]	; (8001474 <main+0x5a4>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	b2d9      	uxtb	r1, r3
 80011c6:	4bac      	ldr	r3, [pc, #688]	; (8001478 <main+0x5a8>)
 80011c8:	5499      	strb	r1, [r3, r2]
          		  m++;
 80011ca:	4baa      	ldr	r3, [pc, #680]	; (8001474 <main+0x5a4>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4ba8      	ldr	r3, [pc, #672]	; (8001474 <main+0x5a4>)
 80011d4:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < 255; i++){
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3301      	adds	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2bfe      	cmp	r3, #254	; 0xfe
 80011e0:	dde2      	ble.n	80011a8 <main+0x2d8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  prevtime1 = time1;
 80011e2:	4ba6      	ldr	r3, [pc, #664]	; (800147c <main+0x5ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4aa6      	ldr	r2, [pc, #664]	; (8001480 <main+0x5b0>)
 80011e8:	6013      	str	r3, [r2, #0]
	 	  	  time1 = HAL_GetTick();
 80011ea:	f000 feff 	bl	8001fec <HAL_GetTick>
 80011ee:	ee07 0a90 	vmov	s15, r0
 80011f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f6:	4ba1      	ldr	r3, [pc, #644]	; (800147c <main+0x5ac>)
 80011f8:	edc3 7a00 	vstr	s15, [r3]
	 	  	  elapsedtime1=(time1-prevtime1)*1000;
 80011fc:	4b9f      	ldr	r3, [pc, #636]	; (800147c <main+0x5ac>)
 80011fe:	ed93 7a00 	vldr	s14, [r3]
 8001202:	4b9f      	ldr	r3, [pc, #636]	; (8001480 <main+0x5b0>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001484 <main+0x5b4>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	4b9c      	ldr	r3, [pc, #624]	; (8001488 <main+0x5b8>)
 8001216:	edc3 7a00 	vstr	s15, [r3]

	 	  	  tuffer[0]=0x3B;
 800121a:	4b9c      	ldr	r3, [pc, #624]	; (800148c <main+0x5bc>)
 800121c:	223b      	movs	r2, #59	; 0x3b
 800121e:	701a      	strb	r2, [r3, #0]
	 	  	 HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,tuffer,1,HAL_MAX_DELAY);
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	4a98      	ldr	r2, [pc, #608]	; (800148c <main+0x5bc>)
 800122a:	21d0      	movs	r1, #208	; 0xd0
 800122c:	4890      	ldr	r0, [pc, #576]	; (8001470 <main+0x5a0>)
 800122e:	f001 faff 	bl	8002830 <HAL_I2C_Master_Transmit>
	   	     HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,tuffer,6,HAL_MAX_DELAY);
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2306      	movs	r3, #6
 800123a:	4a94      	ldr	r2, [pc, #592]	; (800148c <main+0x5bc>)
 800123c:	21d0      	movs	r1, #208	; 0xd0
 800123e:	488c      	ldr	r0, [pc, #560]	; (8001470 <main+0x5a0>)
 8001240:	f001 fbf4 	bl	8002a2c <HAL_I2C_Master_Receive>
	 	  	 HAL_I2C_Master_Transmit(&hi2c2,MPU6050_ADDR,tuffer,1,HAL_MAX_DELAY);
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2301      	movs	r3, #1
 800124c:	4a8f      	ldr	r2, [pc, #572]	; (800148c <main+0x5bc>)
 800124e:	21d0      	movs	r1, #208	; 0xd0
 8001250:	488f      	ldr	r0, [pc, #572]	; (8001490 <main+0x5c0>)
 8001252:	f001 faed 	bl	8002830 <HAL_I2C_Master_Transmit>
	 	  	 HAL_I2C_Master_Receive(&hi2c2,MPU6050_ADDR,tuffer,6,HAL_MAX_DELAY);
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2306      	movs	r3, #6
 800125e:	4a8b      	ldr	r2, [pc, #556]	; (800148c <main+0x5bc>)
 8001260:	21d0      	movs	r1, #208	; 0xd0
 8001262:	488b      	ldr	r0, [pc, #556]	; (8001490 <main+0x5c0>)
 8001264:	f001 fbe2 	bl	8002a2c <HAL_I2C_Master_Receive>

	 	  	  // Acc Raw Values
	 	  	  acc_raw[0] = (tuffer[0] << 8 | tuffer[1]);
 8001268:	4b88      	ldr	r3, [pc, #544]	; (800148c <main+0x5bc>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	4b86      	ldr	r3, [pc, #536]	; (800148c <main+0x5bc>)
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b21a      	sxth	r2, r3
 800127a:	4b86      	ldr	r3, [pc, #536]	; (8001494 <main+0x5c4>)
 800127c:	801a      	strh	r2, [r3, #0]
	 	  	  acc_raw[1] = (tuffer[2] << 8 | tuffer[3]);
 800127e:	4b83      	ldr	r3, [pc, #524]	; (800148c <main+0x5bc>)
 8001280:	789b      	ldrb	r3, [r3, #2]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	4b81      	ldr	r3, [pc, #516]	; (800148c <main+0x5bc>)
 8001288:	78db      	ldrb	r3, [r3, #3]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	4b80      	ldr	r3, [pc, #512]	; (8001494 <main+0x5c4>)
 8001292:	805a      	strh	r2, [r3, #2]
	 	  	  acc_raw[2] = (tuffer[4] << 8 | tuffer[5]);
 8001294:	4b7d      	ldr	r3, [pc, #500]	; (800148c <main+0x5bc>)
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	4b7b      	ldr	r3, [pc, #492]	; (800148c <main+0x5bc>)
 800129e:	795b      	ldrb	r3, [r3, #5]
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <main+0x5c4>)
 80012a8:	809a      	strh	r2, [r3, #4]


	 	  	  buffer[0]=0x41;
 80012aa:	4b7b      	ldr	r3, [pc, #492]	; (8001498 <main+0x5c8>)
 80012ac:	2241      	movs	r2, #65	; 0x41
 80012ae:	701a      	strb	r2, [r3, #0]
	 	  	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,buffer,1,HAL_MAX_DELAY);
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	4a77      	ldr	r2, [pc, #476]	; (8001498 <main+0x5c8>)
 80012ba:	21d0      	movs	r1, #208	; 0xd0
 80012bc:	486c      	ldr	r0, [pc, #432]	; (8001470 <main+0x5a0>)
 80012be:	f001 fab7 	bl	8002830 <HAL_I2C_Master_Transmit>
	 	  	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,buffer,2,HAL_MAX_DELAY);
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2302      	movs	r3, #2
 80012ca:	4a73      	ldr	r2, [pc, #460]	; (8001498 <main+0x5c8>)
 80012cc:	21d0      	movs	r1, #208	; 0xd0
 80012ce:	4868      	ldr	r0, [pc, #416]	; (8001470 <main+0x5a0>)
 80012d0:	f001 fbac 	bl	8002a2c <HAL_I2C_Master_Receive>
	 	  	  HAL_I2C_Master_Transmit(&hi2c2,MPU6050_ADDR,buffer,1,HAL_MAX_DELAY);
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	4a6e      	ldr	r2, [pc, #440]	; (8001498 <main+0x5c8>)
 80012de:	21d0      	movs	r1, #208	; 0xd0
 80012e0:	486b      	ldr	r0, [pc, #428]	; (8001490 <main+0x5c0>)
 80012e2:	f001 faa5 	bl	8002830 <HAL_I2C_Master_Transmit>
	 	  	  HAL_I2C_Master_Receive(&hi2c2,MPU6050_ADDR,buffer,2,HAL_MAX_DELAY);
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2302      	movs	r3, #2
 80012ee:	4a6a      	ldr	r2, [pc, #424]	; (8001498 <main+0x5c8>)
 80012f0:	21d0      	movs	r1, #208	; 0xd0
 80012f2:	4867      	ldr	r0, [pc, #412]	; (8001490 <main+0x5c0>)
 80012f4:	f001 fb9a 	bl	8002a2c <HAL_I2C_Master_Receive>

	 	  	  // Temperature Values
	 	  	  raw_temp = (buffer[0] << 8 | buffer[1]);
 80012f8:	4b67      	ldr	r3, [pc, #412]	; (8001498 <main+0x5c8>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	b21a      	sxth	r2, r3
 8001300:	4b65      	ldr	r3, [pc, #404]	; (8001498 <main+0x5c8>)
 8001302:	785b      	ldrb	r3, [r3, #1]
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b21a      	sxth	r2, r3
 800130a:	4b64      	ldr	r3, [pc, #400]	; (800149c <main+0x5cc>)
 800130c:	801a      	strh	r2, [r3, #0]
	 	  	  temp = (raw_temp / 340.0) + 36.53;
 800130e:	4b63      	ldr	r3, [pc, #396]	; (800149c <main+0x5cc>)
 8001310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f8c9 	bl	80004ac <__aeabi_i2d>
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b60      	ldr	r3, [pc, #384]	; (80014a0 <main+0x5d0>)
 8001320:	f7ff fa58 	bl	80007d4 <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	a34e      	add	r3, pc, #312	; (adr r3, 8001468 <main+0x598>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7fe ff6f 	bl	8000214 <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fbf7 	bl	8000b30 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a57      	ldr	r2, [pc, #348]	; (80014a4 <main+0x5d4>)
 8001346:	6013      	str	r3, [r2, #0]


	 	  	  cuffer[0]=0x43;
 8001348:	4b57      	ldr	r3, [pc, #348]	; (80014a8 <main+0x5d8>)
 800134a:	2243      	movs	r2, #67	; 0x43
 800134c:	701a      	strb	r2, [r3, #0]
	 	  	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,cuffer,1,HAL_MAX_DELAY);
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	4a54      	ldr	r2, [pc, #336]	; (80014a8 <main+0x5d8>)
 8001358:	21d0      	movs	r1, #208	; 0xd0
 800135a:	4845      	ldr	r0, [pc, #276]	; (8001470 <main+0x5a0>)
 800135c:	f001 fa68 	bl	8002830 <HAL_I2C_Master_Transmit>
	 	  	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,cuffer,6,HAL_MAX_DELAY);
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2306      	movs	r3, #6
 8001368:	4a4f      	ldr	r2, [pc, #316]	; (80014a8 <main+0x5d8>)
 800136a:	21d0      	movs	r1, #208	; 0xd0
 800136c:	4840      	ldr	r0, [pc, #256]	; (8001470 <main+0x5a0>)
 800136e:	f001 fb5d 	bl	8002a2c <HAL_I2C_Master_Receive>
	 	  	  HAL_I2C_Master_Transmit(&hi2c2,MPU6050_ADDR,cuffer,1,HAL_MAX_DELAY);
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	4a4b      	ldr	r2, [pc, #300]	; (80014a8 <main+0x5d8>)
 800137c:	21d0      	movs	r1, #208	; 0xd0
 800137e:	4844      	ldr	r0, [pc, #272]	; (8001490 <main+0x5c0>)
 8001380:	f001 fa56 	bl	8002830 <HAL_I2C_Master_Transmit>
	 	  	  HAL_I2C_Master_Receive(&hi2c2,MPU6050_ADDR,cuffer,6,HAL_MAX_DELAY);
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2306      	movs	r3, #6
 800138c:	4a46      	ldr	r2, [pc, #280]	; (80014a8 <main+0x5d8>)
 800138e:	21d0      	movs	r1, #208	; 0xd0
 8001390:	483f      	ldr	r0, [pc, #252]	; (8001490 <main+0x5c0>)
 8001392:	f001 fb4b 	bl	8002a2c <HAL_I2C_Master_Receive>
	 	  	  // Gyro Raw Values
	 	  	  gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]);
 8001396:	4b44      	ldr	r3, [pc, #272]	; (80014a8 <main+0x5d8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	b21a      	sxth	r2, r3
 800139e:	4b42      	ldr	r3, [pc, #264]	; (80014a8 <main+0x5d8>)
 80013a0:	785b      	ldrb	r3, [r3, #1]
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	4b40      	ldr	r3, [pc, #256]	; (80014ac <main+0x5dc>)
 80013aa:	801a      	strh	r2, [r3, #0]
	 	  	  gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]);
 80013ac:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <main+0x5d8>)
 80013ae:	789b      	ldrb	r3, [r3, #2]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	4b3c      	ldr	r3, [pc, #240]	; (80014a8 <main+0x5d8>)
 80013b6:	78db      	ldrb	r3, [r3, #3]
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <main+0x5dc>)
 80013c0:	805a      	strh	r2, [r3, #2]
	 	  	  gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]);
 80013c2:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <main+0x5d8>)
 80013c4:	791b      	ldrb	r3, [r3, #4]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	4b37      	ldr	r3, [pc, #220]	; (80014a8 <main+0x5d8>)
 80013cc:	795b      	ldrb	r3, [r3, #5]
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <main+0x5dc>)
 80013d6:	809a      	strh	r2, [r3, #4]

	 	  	  gyro_raw[0] -= gyro_cal[0];
 80013d8:	4b34      	ldr	r3, [pc, #208]	; (80014ac <main+0x5dc>)
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e6:	4b32      	ldr	r3, [pc, #200]	; (80014b0 <main+0x5e0>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f4:	ee17 3a90 	vmov	r3, s15
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <main+0x5dc>)
 80013fc:	801a      	strh	r2, [r3, #0]
	 	  	  gyro_raw[1] -= gyro_cal[1];
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <main+0x5dc>)
 8001400:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <main+0x5e0>)
 800140e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141a:	ee17 3a90 	vmov	r3, s15
 800141e:	b21a      	sxth	r2, r3
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <main+0x5dc>)
 8001422:	805a      	strh	r2, [r3, #2]
	 	  	  gyro_raw[2] -= gyro_cal[2];
 8001424:	4b21      	ldr	r3, [pc, #132]	; (80014ac <main+0x5dc>)
 8001426:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <main+0x5e0>)
 8001434:	edd3 7a02 	vldr	s15, [r3, #8]
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001440:	ee17 3a90 	vmov	r3, s15
 8001444:	b21a      	sxth	r2, r3
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <main+0x5dc>)
 8001448:	809a      	strh	r2, [r3, #4]


	 	  	  angle_pitch_gyro += gyro_raw[0] * 0.0000611;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <main+0x5e4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f83e 	bl	80004d0 <__aeabi_f2d>
 8001454:	4604      	mov	r4, r0
 8001456:	460d      	mov	r5, r1
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <main+0x5dc>)
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f824 	bl	80004ac <__aeabi_i2d>
 8001464:	e028      	b.n	80014b8 <main+0x5e8>
 8001466:	bf00      	nop
 8001468:	0a3d70a4 	.word	0x0a3d70a4
 800146c:	404243d7 	.word	0x404243d7
 8001470:	2000008c 	.word	0x2000008c
 8001474:	20000242 	.word	0x20000242
 8001478:	20000238 	.word	0x20000238
 800147c:	20000220 	.word	0x20000220
 8001480:	2000021c 	.word	0x2000021c
 8001484:	447a0000 	.word	0x447a0000
 8001488:	20000224 	.word	0x20000224
 800148c:	200001c4 	.word	0x200001c4
 8001490:	200000e0 	.word	0x200000e0
 8001494:	200001dc 	.word	0x200001dc
 8001498:	200001c0 	.word	0x200001c0
 800149c:	2000020c 	.word	0x2000020c
 80014a0:	40754000 	.word	0x40754000
 80014a4:	20000210 	.word	0x20000210
 80014a8:	200001cc 	.word	0x200001cc
 80014ac:	200001d4 	.word	0x200001d4
 80014b0:	200001e4 	.word	0x200001e4
 80014b4:	200001f4 	.word	0x200001f4
 80014b8:	a3c1      	add	r3, pc, #772	; (adr r3, 80017c0 <main+0x8f0>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f7ff f85f 	bl	8000580 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7fe fea3 	bl	8000214 <__adddf3>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fb2b 	bl	8000b30 <__aeabi_d2f>
 80014da:	4603      	mov	r3, r0
 80014dc:	4ac4      	ldr	r2, [pc, #784]	; (80017f0 <main+0x920>)
 80014de:	6013      	str	r3, [r2, #0]
	 	  	  angle_roll_gyro += gyro_raw[1] * 0.0000611;
 80014e0:	4bc4      	ldr	r3, [pc, #784]	; (80017f4 <main+0x924>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe fff3 	bl	80004d0 <__aeabi_f2d>
 80014ea:	4604      	mov	r4, r0
 80014ec:	460d      	mov	r5, r1
 80014ee:	4bc2      	ldr	r3, [pc, #776]	; (80017f8 <main+0x928>)
 80014f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ffd9 	bl	80004ac <__aeabi_i2d>
 80014fa:	a3b1      	add	r3, pc, #708	; (adr r3, 80017c0 <main+0x8f0>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7ff f83e 	bl	8000580 <__aeabi_dmul>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4620      	mov	r0, r4
 800150a:	4629      	mov	r1, r5
 800150c:	f7fe fe82 	bl	8000214 <__adddf3>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb0a 	bl	8000b30 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	4ab5      	ldr	r2, [pc, #724]	; (80017f4 <main+0x924>)
 8001520:	6013      	str	r3, [r2, #0]

	 	  	  angle_pitch_gyro += angle_roll_gyro * sin(gyro_raw[2] * 0.000001066);
 8001522:	4bb3      	ldr	r3, [pc, #716]	; (80017f0 <main+0x920>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe ffd2 	bl	80004d0 <__aeabi_f2d>
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
 8001530:	4bb0      	ldr	r3, [pc, #704]	; (80017f4 <main+0x924>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe ffcb 	bl	80004d0 <__aeabi_f2d>
 800153a:	4680      	mov	r8, r0
 800153c:	4689      	mov	r9, r1
 800153e:	4bae      	ldr	r3, [pc, #696]	; (80017f8 <main+0x928>)
 8001540:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ffb1 	bl	80004ac <__aeabi_i2d>
 800154a:	a39f      	add	r3, pc, #636	; (adr r3, 80017c8 <main+0x8f8>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f816 	bl	8000580 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	ec43 2b17 	vmov	d7, r2, r3
 800155c:	eeb0 0a47 	vmov.f32	s0, s14
 8001560:	eef0 0a67 	vmov.f32	s1, s15
 8001564:	f003 fbbc 	bl	8004ce0 <sin>
 8001568:	ec53 2b10 	vmov	r2, r3, d0
 800156c:	4640      	mov	r0, r8
 800156e:	4649      	mov	r1, r9
 8001570:	f7ff f806 	bl	8000580 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4620      	mov	r0, r4
 800157a:	4629      	mov	r1, r5
 800157c:	f7fe fe4a 	bl	8000214 <__adddf3>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fad2 	bl	8000b30 <__aeabi_d2f>
 800158c:	4603      	mov	r3, r0
 800158e:	4a98      	ldr	r2, [pc, #608]	; (80017f0 <main+0x920>)
 8001590:	6013      	str	r3, [r2, #0]
	 	  	  angle_roll_gyro -= angle_pitch_gyro * sin(gyro_raw[2] * 0.000001066);
 8001592:	4b98      	ldr	r3, [pc, #608]	; (80017f4 <main+0x924>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ff9a 	bl	80004d0 <__aeabi_f2d>
 800159c:	4604      	mov	r4, r0
 800159e:	460d      	mov	r5, r1
 80015a0:	4b93      	ldr	r3, [pc, #588]	; (80017f0 <main+0x920>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ff93 	bl	80004d0 <__aeabi_f2d>
 80015aa:	4680      	mov	r8, r0
 80015ac:	4689      	mov	r9, r1
 80015ae:	4b92      	ldr	r3, [pc, #584]	; (80017f8 <main+0x928>)
 80015b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ff79 	bl	80004ac <__aeabi_i2d>
 80015ba:	a383      	add	r3, pc, #524	; (adr r3, 80017c8 <main+0x8f8>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe ffde 	bl	8000580 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	ec43 2b17 	vmov	d7, r2, r3
 80015cc:	eeb0 0a47 	vmov.f32	s0, s14
 80015d0:	eef0 0a67 	vmov.f32	s1, s15
 80015d4:	f003 fb84 	bl	8004ce0 <sin>
 80015d8:	ec53 2b10 	vmov	r2, r3, d0
 80015dc:	4640      	mov	r0, r8
 80015de:	4649      	mov	r1, r9
 80015e0:	f7fe ffce 	bl	8000580 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7fe fe10 	bl	8000210 <__aeabi_dsub>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fa9a 	bl	8000b30 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a7d      	ldr	r2, [pc, #500]	; (80017f4 <main+0x924>)
 8001600:	6013      	str	r3, [r2, #0]


	 	  	  acc_total_vector = sqrt((acc_raw[0]*acc_raw[0])+(acc_raw[1]*acc_raw[1])+(acc_raw[2]*acc_raw[2]));
 8001602:	4b7e      	ldr	r3, [pc, #504]	; (80017fc <main+0x92c>)
 8001604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001608:	461a      	mov	r2, r3
 800160a:	4b7c      	ldr	r3, [pc, #496]	; (80017fc <main+0x92c>)
 800160c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001610:	fb03 f202 	mul.w	r2, r3, r2
 8001614:	4b79      	ldr	r3, [pc, #484]	; (80017fc <main+0x92c>)
 8001616:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800161a:	4619      	mov	r1, r3
 800161c:	4b77      	ldr	r3, [pc, #476]	; (80017fc <main+0x92c>)
 800161e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001622:	fb01 f303 	mul.w	r3, r1, r3
 8001626:	441a      	add	r2, r3
 8001628:	4b74      	ldr	r3, [pc, #464]	; (80017fc <main+0x92c>)
 800162a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800162e:	4619      	mov	r1, r3
 8001630:	4b72      	ldr	r3, [pc, #456]	; (80017fc <main+0x92c>)
 8001632:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	4413      	add	r3, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff35 	bl	80004ac <__aeabi_i2d>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	ec43 2b10 	vmov	d0, r2, r3
 800164a:	f003 fb11 	bl	8004c70 <sqrt>
 800164e:	ec53 2b10 	vmov	r2, r3, d0
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff fa43 	bl	8000ae0 <__aeabi_d2iz>
 800165a:	4603      	mov	r3, r0
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b68      	ldr	r3, [pc, #416]	; (8001800 <main+0x930>)
 8001660:	801a      	strh	r2, [r3, #0]

	 	  	  //57.296 = 1 / (3.142 / 180)
	 	  	  angle_pitch_acc = asin((float)acc_raw[1]/acc_total_vector)* 57.296;
 8001662:	4b66      	ldr	r3, [pc, #408]	; (80017fc <main+0x92c>)
 8001664:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001670:	4b63      	ldr	r3, [pc, #396]	; (8001800 <main+0x930>)
 8001672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001682:	ee16 0a90 	vmov	r0, s13
 8001686:	f7fe ff23 	bl	80004d0 <__aeabi_f2d>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	ec43 2b10 	vmov	d0, r2, r3
 8001692:	f003 fab9 	bl	8004c08 <asin>
 8001696:	ec51 0b10 	vmov	r0, r1, d0
 800169a:	a34d      	add	r3, pc, #308	; (adr r3, 80017d0 <main+0x900>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ff6e 	bl	8000580 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fa40 	bl	8000b30 <__aeabi_d2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a54      	ldr	r2, [pc, #336]	; (8001804 <main+0x934>)
 80016b4:	6013      	str	r3, [r2, #0]
	 	  	  angle_roll_acc = asin((float)acc_raw[0]/acc_total_vector)* -57.296;
 80016b6:	4b51      	ldr	r3, [pc, #324]	; (80017fc <main+0x92c>)
 80016b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c4:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <main+0x930>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016d6:	ee16 0a90 	vmov	r0, s13
 80016da:	f7fe fef9 	bl	80004d0 <__aeabi_f2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	ec43 2b10 	vmov	d0, r2, r3
 80016e6:	f003 fa8f 	bl	8004c08 <asin>
 80016ea:	ec51 0b10 	vmov	r0, r1, d0
 80016ee:	a33a      	add	r3, pc, #232	; (adr r3, 80017d8 <main+0x908>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ff44 	bl	8000580 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa16 	bl	8000b30 <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	4a40      	ldr	r2, [pc, #256]	; (8001808 <main+0x938>)
 8001708:	6013      	str	r3, [r2, #0]


	 	  	  angle_pitch_acc -= 0;//0.05;
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <main+0x934>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <main+0x934>)
 8001710:	6013      	str	r3, [r2, #0]
	 	  	  angle_roll_acc -= 0;//-1.32;
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <main+0x938>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a3c      	ldr	r2, [pc, #240]	; (8001808 <main+0x938>)
 8001718:	6013      	str	r3, [r2, #0]

	 	  	  if(set_gyro){
 800171a:	4b3c      	ldr	r3, [pc, #240]	; (800180c <main+0x93c>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d07a      	beq.n	8001818 <main+0x948>
	 	  		  angle_pitch = angle_pitch_gyro * 0.9996 + angle_pitch_acc * 0.0004;
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <main+0x920>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fed2 	bl	80004d0 <__aeabi_f2d>
 800172c:	a32c      	add	r3, pc, #176	; (adr r3, 80017e0 <main+0x910>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe ff25 	bl	8000580 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4614      	mov	r4, r2
 800173c:	461d      	mov	r5, r3
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <main+0x934>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fec4 	bl	80004d0 <__aeabi_f2d>
 8001748:	a327      	add	r3, pc, #156	; (adr r3, 80017e8 <main+0x918>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe ff17 	bl	8000580 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4620      	mov	r0, r4
 8001758:	4629      	mov	r1, r5
 800175a:	f7fe fd5b 	bl	8000214 <__adddf3>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff f9e3 	bl	8000b30 <__aeabi_d2f>
 800176a:	4603      	mov	r3, r0
 800176c:	4a28      	ldr	r2, [pc, #160]	; (8001810 <main+0x940>)
 800176e:	6013      	str	r3, [r2, #0]
	 	  		  angle_roll = angle_roll_gyro * 0.9996 + angle_roll_acc * 0.0004;
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <main+0x924>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe feab 	bl	80004d0 <__aeabi_f2d>
 800177a:	a319      	add	r3, pc, #100	; (adr r3, 80017e0 <main+0x910>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe fefe 	bl	8000580 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <main+0x938>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fe9d 	bl	80004d0 <__aeabi_f2d>
 8001796:	a314      	add	r3, pc, #80	; (adr r3, 80017e8 <main+0x918>)
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	f7fe fef0 	bl	8000580 <__aeabi_dmul>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe fd34 	bl	8000214 <__adddf3>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff f9bc 	bl	8000b30 <__aeabi_d2f>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4a16      	ldr	r2, [pc, #88]	; (8001814 <main+0x944>)
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e032      	b.n	8001826 <main+0x956>
 80017c0:	01d41596 	.word	0x01d41596
 80017c4:	3f10045a 	.word	0x3f10045a
 80017c8:	652c6e62 	.word	0x652c6e62
 80017cc:	3eb1e26f 	.word	0x3eb1e26f
 80017d0:	53f7ced9 	.word	0x53f7ced9
 80017d4:	404ca5e3 	.word	0x404ca5e3
 80017d8:	53f7ced9 	.word	0x53f7ced9
 80017dc:	c04ca5e3 	.word	0xc04ca5e3
 80017e0:	23a29c78 	.word	0x23a29c78
 80017e4:	3feffcb9 	.word	0x3feffcb9
 80017e8:	eb1c432d 	.word	0xeb1c432d
 80017ec:	3f3a36e2 	.word	0x3f3a36e2
 80017f0:	200001f4 	.word	0x200001f4
 80017f4:	200001f8 	.word	0x200001f8
 80017f8:	200001d4 	.word	0x200001d4
 80017fc:	200001dc 	.word	0x200001dc
 8001800:	200001f0 	.word	0x200001f0
 8001804:	200001fc 	.word	0x200001fc
 8001808:	20000200 	.word	0x20000200
 800180c:	20000234 	.word	0x20000234
 8001810:	20000204 	.word	0x20000204
 8001814:	20000208 	.word	0x20000208
	 	  		}
	 	  	  else
	 	  	  {
	 	  		  angle_pitch = angle_pitch_acc;
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <main+0x998>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a13      	ldr	r2, [pc, #76]	; (800186c <main+0x99c>)
 800181e:	6013      	str	r3, [r2, #0]
	 	  		  set_gyro = true;
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <main+0x9a0>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
	 	  		}

	 	  	  while((HAL_GetTick() - prevtime)*1000 < 4000);
 8001826:	bf00      	nop
 8001828:	f000 fbe0 	bl	8001fec <HAL_GetTick>
 800182c:	ee07 0a90 	vmov	s15, r0
 8001830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <main+0x9a4>)
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001878 <main+0x9a8>
 8001842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001846:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800187c <main+0x9ac>
 800184a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	d4e9      	bmi.n	8001828 <main+0x958>
	 	  	  prevtime = HAL_GetTick();
 8001854:	f000 fbca 	bl	8001fec <HAL_GetTick>
 8001858:	ee07 0a90 	vmov	s15, r0
 800185c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <main+0x9a4>)
 8001862:	edc3 7a00 	vstr	s15, [r3]
	  prevtime1 = time1;
 8001866:	e4bc      	b.n	80011e2 <main+0x312>
 8001868:	200001fc 	.word	0x200001fc
 800186c:	20000204 	.word	0x20000204
 8001870:	20000234 	.word	0x20000234
 8001874:	20000218 	.word	0x20000218
 8001878:	447a0000 	.word	0x447a0000
 800187c:	457a0000 	.word	0x457a0000

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b094      	sub	sp, #80	; 0x50
 8001884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	2234      	movs	r2, #52	; 0x34
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f003 f988 	bl	8004ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <SystemClock_Config+0xd4>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a29      	ldr	r2, [pc, #164]	; (8001954 <SystemClock_Config+0xd4>)
 80018ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <SystemClock_Config+0xd4>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018c0:	2300      	movs	r3, #0
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <SystemClock_Config+0xd8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <SystemClock_Config+0xd8>)
 80018ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <SystemClock_Config+0xd8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e4:	2301      	movs	r3, #1
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e8:	2310      	movs	r3, #16
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ec:	2302      	movs	r3, #2
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018f0:	2300      	movs	r3, #0
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018f4:	2310      	movs	r3, #16
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018fe:	2304      	movs	r3, #4
 8001900:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001902:	2302      	movs	r3, #2
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001906:	2302      	movs	r3, #2
 8001908:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4618      	mov	r0, r3
 8001910:	f002 fbe8 	bl	80040e4 <HAL_RCC_OscConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800191a:	f000 f953 	bl	8001bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191e:	230f      	movs	r3, #15
 8001920:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001922:	2302      	movs	r3, #2
 8001924:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800192a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	2102      	movs	r1, #2
 800193a:	4618      	mov	r0, r3
 800193c:	f002 f888 	bl	8003a50 <HAL_RCC_ClockConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001946:	f000 f93d 	bl	8001bc4 <Error_Handler>
  }
}
 800194a:	bf00      	nop
 800194c:	3750      	adds	r7, #80	; 0x50
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000

0800195c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <MX_I2C1_Init+0x50>)
 8001962:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <MX_I2C1_Init+0x54>)
 8001964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_I2C1_Init+0x50>)
 8001968:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <MX_I2C1_Init+0x58>)
 800196a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_I2C1_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_I2C1_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_I2C1_Init+0x50>)
 800197a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800197e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <MX_I2C1_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_I2C1_Init+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <MX_I2C1_Init+0x50>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_I2C1_Init+0x50>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_I2C1_Init+0x50>)
 800199a:	f000 fe05 	bl	80025a8 <HAL_I2C_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019a4:	f000 f90e 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000008c 	.word	0x2000008c
 80019b0:	40005400 	.word	0x40005400
 80019b4:	00061a80 	.word	0x00061a80

080019b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <MX_I2C2_Init+0x50>)
 80019be:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <MX_I2C2_Init+0x54>)
 80019c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <MX_I2C2_Init+0x50>)
 80019c4:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <MX_I2C2_Init+0x58>)
 80019c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MX_I2C2_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <MX_I2C2_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_I2C2_Init+0x50>)
 80019d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <MX_I2C2_Init+0x50>)
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_I2C2_Init+0x50>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <MX_I2C2_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_I2C2_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	; (8001a08 <MX_I2C2_Init+0x50>)
 80019f6:	f000 fdd7 	bl	80025a8 <HAL_I2C_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a00:	f000 f8e0 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200000e0 	.word	0x200000e0
 8001a0c:	40005800 	.word	0x40005800
 8001a10:	000186a0 	.word	0x000186a0

08001a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <MX_USART1_UART_Init+0x50>)
 8001a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_USART1_UART_Init+0x4c>)
 8001a4c:	f002 fde8 	bl	8004620 <HAL_UART_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a56:	f000 f8b5 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000134 	.word	0x20000134
 8001a64:	40011000 	.word	0x40011000

08001a68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <MX_USART2_UART_Init+0x50>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_USART2_UART_Init+0x4c>)
 8001aa0:	f002 fdbe 	bl	8004620 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aaa:	f000 f88b 	bl	8001bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000178 	.word	0x20000178
 8001ab8:	40004400 	.word	0x40004400

08001abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <MX_GPIO_Init+0xfc>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a37      	ldr	r2, [pc, #220]	; (8001bb8 <MX_GPIO_Init+0xfc>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <MX_GPIO_Init+0xfc>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <MX_GPIO_Init+0xfc>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a30      	ldr	r2, [pc, #192]	; (8001bb8 <MX_GPIO_Init+0xfc>)
 8001af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <MX_GPIO_Init+0xfc>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <MX_GPIO_Init+0xfc>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a29      	ldr	r2, [pc, #164]	; (8001bb8 <MX_GPIO_Init+0xfc>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <MX_GPIO_Init+0xfc>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <MX_GPIO_Init+0xfc>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <MX_GPIO_Init+0xfc>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <MX_GPIO_Init+0xfc>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2120      	movs	r1, #32
 8001b46:	481d      	ldr	r0, [pc, #116]	; (8001bbc <MX_GPIO_Init+0x100>)
 8001b48:	f000 fcfa 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001b52:	481b      	ldr	r0, [pc, #108]	; (8001bc0 <MX_GPIO_Init+0x104>)
 8001b54:	f000 fcf4 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <MX_GPIO_Init+0x104>)
 8001b70:	f000 fb52 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b74:	2320      	movs	r3, #32
 8001b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480c      	ldr	r0, [pc, #48]	; (8001bbc <MX_GPIO_Init+0x100>)
 8001b8c:	f000 fb44 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b90:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_GPIO_Init+0x104>)
 8001baa:	f000 fb35 	bl	8002218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	; 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40020800 	.word	0x40020800

08001bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc8:	b672      	cpsid	i
}
 8001bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <Error_Handler+0x8>
	...

08001bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_MspInit+0x4c>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <HAL_MspInit+0x4c>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_MspInit+0x4c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_MspInit+0x4c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <HAL_MspInit+0x4c>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_MspInit+0x4c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c0e:	2007      	movs	r0, #7
 8001c10:	f000 face 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08c      	sub	sp, #48	; 0x30
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a42      	ldr	r2, [pc, #264]	; (8001d48 <HAL_I2C_MspInit+0x128>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d12c      	bne.n	8001c9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c5e:	23c0      	movs	r3, #192	; 0xc0
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c62:	2312      	movs	r3, #18
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4835      	ldr	r0, [pc, #212]	; (8001d50 <HAL_I2C_MspInit+0x130>)
 8001c7a:	f000 facd 	bl	8002218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a31      	ldr	r2, [pc, #196]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001c88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c9a:	e050      	b.n	8001d3e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a2c      	ldr	r2, [pc, #176]	; (8001d54 <HAL_I2C_MspInit+0x134>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d14b      	bne.n	8001d3e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a20      	ldr	r2, [pc, #128]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce4:	2312      	movs	r3, #18
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4815      	ldr	r0, [pc, #84]	; (8001d50 <HAL_I2C_MspInit+0x130>)
 8001cfc:	f000 fa8c 	bl	8002218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d06:	2312      	movs	r3, #18
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d12:	2304      	movs	r3, #4
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480e      	ldr	r0, [pc, #56]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001d1e:	f000 fa7b 	bl	8002218 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001d2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d30:	6413      	str	r3, [r2, #64]	; 0x40
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_I2C_MspInit+0x12c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
}
 8001d3e:	bf00      	nop
 8001d40:	3730      	adds	r7, #48	; 0x30
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40005800 	.word	0x40005800
 8001d58:	40020800 	.word	0x40020800

08001d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	; 0x30
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <HAL_UART_MspInit+0xe8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d12d      	bne.n	8001dda <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_UART_MspInit+0xec>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a30      	ldr	r2, [pc, #192]	; (8001e48 <HAL_UART_MspInit+0xec>)
 8001d88:	f043 0310 	orr.w	r3, r3, #16
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_UART_MspInit+0xec>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_UART_MspInit+0xec>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <HAL_UART_MspInit+0xec>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_UART_MspInit+0xec>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001db6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dc8:	2307      	movs	r3, #7
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	481e      	ldr	r0, [pc, #120]	; (8001e4c <HAL_UART_MspInit+0xf0>)
 8001dd4:	f000 fa20 	bl	8002218 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dd8:	e030      	b.n	8001e3c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_UART_MspInit+0xf4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d12b      	bne.n	8001e3c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_UART_MspInit+0xec>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <HAL_UART_MspInit+0xec>)
 8001dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df2:	6413      	str	r3, [r2, #64]	; 0x40
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_UART_MspInit+0xec>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_UART_MspInit+0xec>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <HAL_UART_MspInit+0xec>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_UART_MspInit+0xec>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e1c:	230c      	movs	r3, #12
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <HAL_UART_MspInit+0xf0>)
 8001e38:	f000 f9ee 	bl	8002218 <HAL_GPIO_Init>
}
 8001e3c:	bf00      	nop
 8001e3e:	3730      	adds	r7, #48	; 0x30
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40011000 	.word	0x40011000
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40004400 	.word	0x40004400

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <NMI_Handler+0x4>

08001e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <MemManage_Handler+0x4>

08001e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <BusFault_Handler+0x4>

08001e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <UsageFault_Handler+0x4>

08001e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea0:	f000 f890 	bl	8001fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <SystemInit+0x20>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <SystemInit+0x20>)
 8001eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed2:	490e      	ldr	r1, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee8:	4c0b      	ldr	r4, [pc, #44]	; (8001f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef6:	f7ff ffd7 	bl	8001ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efa:	f002 fe61 	bl	8004bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efe:	f7fe ffe7 	bl	8000ed0 <main>
  bx  lr    
 8001f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f0c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f10:	08006560 	.word	0x08006560
  ldr r2, =_sbss
 8001f14:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f18:	20000380 	.word	0x20000380

08001f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <ADC_IRQHandler>
	...

08001f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <HAL_Init+0x40>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_Init+0x40>)
 8001f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_Init+0x40>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f000 f931 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f808 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f54:	f7ff fe3c 	bl	8001bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x54>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x58>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f93b 	bl	80021fe <HAL_SYSTICK_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00e      	b.n	8001fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d80a      	bhi.n	8001fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f000 f911 	bl	80021c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <HAL_InitTick+0x5c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	20000004 	.word	0x20000004

08001fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x20>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	20000244 	.word	0x20000244

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_GetTick+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000244 	.word	0x20000244

08002004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800200c:	f7ff ffee 	bl	8001fec <HAL_GetTick>
 8002010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d005      	beq.n	800202a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_Delay+0x44>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800202a:	bf00      	nop
 800202c:	f7ff ffde 	bl	8001fec <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	429a      	cmp	r2, r3
 800203a:	d8f7      	bhi.n	800202c <HAL_Delay+0x28>
  {
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000008 	.word	0x20000008

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	; (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	; (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800217c:	d301      	bcc.n	8002182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217e:	2301      	movs	r3, #1
 8002180:	e00f      	b.n	80021a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002182:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <SysTick_Config+0x40>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218a:	210f      	movs	r1, #15
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f7ff ff8e 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <SysTick_Config+0x40>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219a:	4b04      	ldr	r3, [pc, #16]	; (80021ac <SysTick_Config+0x40>)
 800219c:	2207      	movs	r2, #7
 800219e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	e000e010 	.word	0xe000e010

080021b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ff47 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d8:	f7ff ff5c 	bl	8002094 <__NVIC_GetPriorityGrouping>
 80021dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f7ff ff8e 	bl	8002104 <NVIC_EncodePriority>
 80021e8:	4602      	mov	r2, r0
 80021ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff5d 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffb0 	bl	800216c <SysTick_Config>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	e165      	b.n	8002500 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	429a      	cmp	r2, r3
 800224e:	f040 8154 	bne.w	80024fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d005      	beq.n	800226a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002266:	2b02      	cmp	r3, #2
 8002268:	d130      	bne.n	80022cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	2203      	movs	r2, #3
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a0:	2201      	movs	r2, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 0201 	and.w	r2, r3, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d017      	beq.n	8002308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d123      	bne.n	800235c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	08da      	lsrs	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3208      	adds	r2, #8
 800231c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0203 	and.w	r2, r3, #3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80ae 	beq.w	80024fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b5d      	ldr	r3, [pc, #372]	; (8002518 <HAL_GPIO_Init+0x300>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	4a5c      	ldr	r2, [pc, #368]	; (8002518 <HAL_GPIO_Init+0x300>)
 80023a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ac:	6453      	str	r3, [r2, #68]	; 0x44
 80023ae:	4b5a      	ldr	r3, [pc, #360]	; (8002518 <HAL_GPIO_Init+0x300>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ba:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_GPIO_Init+0x304>)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	3302      	adds	r3, #2
 80023c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	220f      	movs	r2, #15
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4f      	ldr	r2, [pc, #316]	; (8002520 <HAL_GPIO_Init+0x308>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d025      	beq.n	8002432 <HAL_GPIO_Init+0x21a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4e      	ldr	r2, [pc, #312]	; (8002524 <HAL_GPIO_Init+0x30c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01f      	beq.n	800242e <HAL_GPIO_Init+0x216>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_GPIO_Init+0x310>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d019      	beq.n	800242a <HAL_GPIO_Init+0x212>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4c      	ldr	r2, [pc, #304]	; (800252c <HAL_GPIO_Init+0x314>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0x20e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4b      	ldr	r2, [pc, #300]	; (8002530 <HAL_GPIO_Init+0x318>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_GPIO_Init+0x20a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4a      	ldr	r2, [pc, #296]	; (8002534 <HAL_GPIO_Init+0x31c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x206>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a49      	ldr	r2, [pc, #292]	; (8002538 <HAL_GPIO_Init+0x320>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_GPIO_Init+0x202>
 8002416:	2306      	movs	r3, #6
 8002418:	e00c      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 800241a:	2307      	movs	r3, #7
 800241c:	e00a      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 800241e:	2305      	movs	r3, #5
 8002420:	e008      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 8002422:	2304      	movs	r3, #4
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 8002426:	2303      	movs	r3, #3
 8002428:	e004      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 800242a:	2302      	movs	r3, #2
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_GPIO_Init+0x21c>
 8002432:	2300      	movs	r3, #0
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	f002 0203 	and.w	r2, r2, #3
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	4093      	lsls	r3, r2
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002444:	4935      	ldr	r1, [pc, #212]	; (800251c <HAL_GPIO_Init+0x304>)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002452:	4b3a      	ldr	r3, [pc, #232]	; (800253c <HAL_GPIO_Init+0x324>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002476:	4a31      	ldr	r2, [pc, #196]	; (800253c <HAL_GPIO_Init+0x324>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800247c:	4b2f      	ldr	r3, [pc, #188]	; (800253c <HAL_GPIO_Init+0x324>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a0:	4a26      	ldr	r2, [pc, #152]	; (800253c <HAL_GPIO_Init+0x324>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a6:	4b25      	ldr	r3, [pc, #148]	; (800253c <HAL_GPIO_Init+0x324>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_GPIO_Init+0x324>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_GPIO_Init+0x324>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <HAL_GPIO_Init+0x324>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3301      	adds	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	f67f ae96 	bls.w	8002234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3724      	adds	r7, #36	; 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40013800 	.word	0x40013800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400
 8002528:	40020800 	.word	0x40020800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40021000 	.word	0x40021000
 8002534:	40021400 	.word	0x40021400
 8002538:	40021800 	.word	0x40021800
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800255c:	e003      	b.n	8002566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	041a      	lsls	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	619a      	str	r2, [r3, #24]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002584:	887a      	ldrh	r2, [r7, #2]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	041a      	lsls	r2, r3, #16
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43d9      	mvns	r1, r3
 8002590:	887b      	ldrh	r3, [r7, #2]
 8002592:	400b      	ands	r3, r1
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e12b      	b.n	8002812 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fb26 	bl	8001c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2224      	movs	r2, #36	; 0x24
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800260a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800260c:	f001 fb12 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 8002610:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a81      	ldr	r2, [pc, #516]	; (800281c <HAL_I2C_Init+0x274>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d807      	bhi.n	800262c <HAL_I2C_Init+0x84>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a80      	ldr	r2, [pc, #512]	; (8002820 <HAL_I2C_Init+0x278>)
 8002620:	4293      	cmp	r3, r2
 8002622:	bf94      	ite	ls
 8002624:	2301      	movls	r3, #1
 8002626:	2300      	movhi	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	e006      	b.n	800263a <HAL_I2C_Init+0x92>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4a7d      	ldr	r2, [pc, #500]	; (8002824 <HAL_I2C_Init+0x27c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	bf94      	ite	ls
 8002634:	2301      	movls	r3, #1
 8002636:	2300      	movhi	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0e7      	b.n	8002812 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a78      	ldr	r2, [pc, #480]	; (8002828 <HAL_I2C_Init+0x280>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	0c9b      	lsrs	r3, r3, #18
 800264c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a6a      	ldr	r2, [pc, #424]	; (800281c <HAL_I2C_Init+0x274>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d802      	bhi.n	800267c <HAL_I2C_Init+0xd4>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3301      	adds	r3, #1
 800267a:	e009      	b.n	8002690 <HAL_I2C_Init+0xe8>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	4a69      	ldr	r2, [pc, #420]	; (800282c <HAL_I2C_Init+0x284>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	3301      	adds	r3, #1
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	430b      	orrs	r3, r1
 8002696:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	495c      	ldr	r1, [pc, #368]	; (800281c <HAL_I2C_Init+0x274>)
 80026ac:	428b      	cmp	r3, r1
 80026ae:	d819      	bhi.n	80026e4 <HAL_I2C_Init+0x13c>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1e59      	subs	r1, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80026be:	1c59      	adds	r1, r3, #1
 80026c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026c4:	400b      	ands	r3, r1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_I2C_Init+0x138>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1e59      	subs	r1, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026de:	e051      	b.n	8002784 <HAL_I2C_Init+0x1dc>
 80026e0:	2304      	movs	r3, #4
 80026e2:	e04f      	b.n	8002784 <HAL_I2C_Init+0x1dc>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d111      	bne.n	8002710 <HAL_I2C_Init+0x168>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1e58      	subs	r0, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	440b      	add	r3, r1
 80026fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	e012      	b.n	8002736 <HAL_I2C_Init+0x18e>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e58      	subs	r0, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	0099      	lsls	r1, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	fbb0 f3f3 	udiv	r3, r0, r3
 8002726:	3301      	adds	r3, #1
 8002728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf0c      	ite	eq
 8002730:	2301      	moveq	r3, #1
 8002732:	2300      	movne	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Init+0x196>
 800273a:	2301      	movs	r3, #1
 800273c:	e022      	b.n	8002784 <HAL_I2C_Init+0x1dc>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10e      	bne.n	8002764 <HAL_I2C_Init+0x1bc>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1e58      	subs	r0, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	440b      	add	r3, r1
 8002754:	fbb0 f3f3 	udiv	r3, r0, r3
 8002758:	3301      	adds	r3, #1
 800275a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002762:	e00f      	b.n	8002784 <HAL_I2C_Init+0x1dc>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1e58      	subs	r0, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	0099      	lsls	r1, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	6809      	ldr	r1, [r1, #0]
 8002788:	4313      	orrs	r3, r2
 800278a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6911      	ldr	r1, [r2, #16]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68d2      	ldr	r2, [r2, #12]
 80027be:	4311      	orrs	r1, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	000186a0 	.word	0x000186a0
 8002820:	001e847f 	.word	0x001e847f
 8002824:	003d08ff 	.word	0x003d08ff
 8002828:	431bde83 	.word	0x431bde83
 800282c:	10624dd3 	.word	0x10624dd3

08002830 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	461a      	mov	r2, r3
 800283c:	460b      	mov	r3, r1
 800283e:	817b      	strh	r3, [r7, #10]
 8002840:	4613      	mov	r3, r2
 8002842:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002844:	f7ff fbd2 	bl	8001fec <HAL_GetTick>
 8002848:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b20      	cmp	r3, #32
 8002854:	f040 80e0 	bne.w	8002a18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2319      	movs	r3, #25
 800285e:	2201      	movs	r2, #1
 8002860:	4970      	ldr	r1, [pc, #448]	; (8002a24 <HAL_I2C_Master_Transmit+0x1f4>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 ff16 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
 8002870:	e0d3      	b.n	8002a1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_I2C_Master_Transmit+0x50>
 800287c:	2302      	movs	r3, #2
 800287e:	e0cc      	b.n	8002a1a <HAL_I2C_Master_Transmit+0x1ea>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d007      	beq.n	80028a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2221      	movs	r2, #33	; 0x21
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2210      	movs	r2, #16
 80028c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	893a      	ldrh	r2, [r7, #8]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4a50      	ldr	r2, [pc, #320]	; (8002a28 <HAL_I2C_Master_Transmit+0x1f8>)
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	6a3a      	ldr	r2, [r7, #32]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fcea 	bl	80032c8 <I2C_MasterRequestWrite>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e08d      	b.n	8002a1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002914:	e066      	b.n	80029e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	6a39      	ldr	r1, [r7, #32]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 ff90 	bl	8003840 <I2C_WaitOnTXEFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00d      	beq.n	8002942 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b04      	cmp	r3, #4
 800292c:	d107      	bne.n	800293e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e06b      	b.n	8002a1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	781a      	ldrb	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b04      	cmp	r3, #4
 800297e:	d11b      	bne.n	80029b8 <HAL_I2C_Master_Transmit+0x188>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	2b00      	cmp	r3, #0
 8002986:	d017      	beq.n	80029b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	6a39      	ldr	r1, [r7, #32]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 ff80 	bl	80038c2 <I2C_WaitOnBTFFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00d      	beq.n	80029e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d107      	bne.n	80029e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e01a      	b.n	8002a1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d194      	bne.n	8002916 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e000      	b.n	8002a1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
  }
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	00100002 	.word	0x00100002
 8002a28:	ffff0000 	.word	0xffff0000

08002a2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08c      	sub	sp, #48	; 0x30
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	461a      	mov	r2, r3
 8002a38:	460b      	mov	r3, r1
 8002a3a:	817b      	strh	r3, [r7, #10]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff fad4 	bl	8001fec <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	f040 820b 	bne.w	8002e6a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2319      	movs	r3, #25
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	497c      	ldr	r1, [pc, #496]	; (8002c50 <HAL_I2C_Master_Receive+0x224>)
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fe18 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e1fe      	b.n	8002e6c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_I2C_Master_Receive+0x50>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e1f7      	b.n	8002e6c <HAL_I2C_Master_Receive+0x440>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d007      	beq.n	8002aa2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2222      	movs	r2, #34	; 0x22
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2210      	movs	r2, #16
 8002abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	893a      	ldrh	r2, [r7, #8]
 8002ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4a5c      	ldr	r2, [pc, #368]	; (8002c54 <HAL_I2C_Master_Receive+0x228>)
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ae4:	8979      	ldrh	r1, [r7, #10]
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fc6e 	bl	80033cc <I2C_MasterRequestRead>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1b8      	b.n	8002e6c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d113      	bne.n	8002b2a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b02:	2300      	movs	r3, #0
 8002b04:	623b      	str	r3, [r7, #32]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	623b      	str	r3, [r7, #32]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	623b      	str	r3, [r7, #32]
 8002b16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e18c      	b.n	8002e44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d11b      	bne.n	8002b6a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e16c      	b.n	8002e44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d11b      	bne.n	8002baa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	e14c      	b.n	8002e44 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bd0:	e138      	b.n	8002e44 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	f200 80f1 	bhi.w	8002dbe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d123      	bne.n	8002c2c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 feab 	bl	8003944 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e139      	b.n	8002e6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c2a:	e10b      	b.n	8002e44 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d14e      	bne.n	8002cd2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	4906      	ldr	r1, [pc, #24]	; (8002c58 <HAL_I2C_Master_Receive+0x22c>)
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fd28 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e10e      	b.n	8002e6c <HAL_I2C_Master_Receive+0x440>
 8002c4e:	bf00      	nop
 8002c50:	00100002 	.word	0x00100002
 8002c54:	ffff0000 	.word	0xffff0000
 8002c58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cd0:	e0b8      	b.n	8002e44 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4966      	ldr	r1, [pc, #408]	; (8002e74 <HAL_I2C_Master_Receive+0x448>)
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fcd9 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0bf      	b.n	8002e6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	2200      	movs	r2, #0
 8002d36:	494f      	ldr	r1, [pc, #316]	; (8002e74 <HAL_I2C_Master_Receive+0x448>)
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fcab 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e091      	b.n	8002e6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dbc:	e042      	b.n	8002e44 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fdbe 	bl	8003944 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e04c      	b.n	8002e6c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d118      	bne.n	8002e44 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f47f aec2 	bne.w	8002bd2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e000      	b.n	8002e6c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
  }
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3728      	adds	r7, #40	; 0x28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	00010004 	.word	0x00010004

08002e78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	817b      	strh	r3, [r7, #10]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	813b      	strh	r3, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e92:	f7ff f8ab 	bl	8001fec <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	f040 80d9 	bne.w	8003058 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2319      	movs	r3, #25
 8002eac:	2201      	movs	r2, #1
 8002eae:	496d      	ldr	r1, [pc, #436]	; (8003064 <HAL_I2C_Mem_Write+0x1ec>)
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fbef 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e0cc      	b.n	800305a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Mem_Write+0x56>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0c5      	b.n	800305a <HAL_I2C_Mem_Write+0x1e2>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d007      	beq.n	8002ef4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2221      	movs	r2, #33	; 0x21
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2240      	movs	r2, #64	; 0x40
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a3a      	ldr	r2, [r7, #32]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a4d      	ldr	r2, [pc, #308]	; (8003068 <HAL_I2C_Mem_Write+0x1f0>)
 8002f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f36:	88f8      	ldrh	r0, [r7, #6]
 8002f38:	893a      	ldrh	r2, [r7, #8]
 8002f3a:	8979      	ldrh	r1, [r7, #10]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	4603      	mov	r3, r0
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fb0e 	bl	8003568 <I2C_RequestMemoryWrite>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d052      	beq.n	8002ff8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e081      	b.n	800305a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fc70 	bl	8003840 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d107      	bne.n	8002f7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06b      	b.n	800305a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	781a      	ldrb	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_I2C_Mem_Write+0x180>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d017      	beq.n	8002ff8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1aa      	bne.n	8002f56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fc5c 	bl	80038c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	2b04      	cmp	r3, #4
 8003016:	d107      	bne.n	8003028 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003026:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e016      	b.n	800305a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003058:	2302      	movs	r3, #2
  }
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	00100002 	.word	0x00100002
 8003068:	ffff0000 	.word	0xffff0000

0800306c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	460b      	mov	r3, r1
 800307a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7fe ffb6 	bl	8001fec <HAL_GetTick>
 8003080:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b20      	cmp	r3, #32
 8003090:	f040 8111 	bne.w	80032b6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2319      	movs	r3, #25
 800309a:	2201      	movs	r2, #1
 800309c:	4988      	ldr	r1, [pc, #544]	; (80032c0 <HAL_I2C_IsDeviceReady+0x254>)
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 faf8 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
 80030ac:	e104      	b.n	80032b8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_I2C_IsDeviceReady+0x50>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e0fd      	b.n	80032b8 <HAL_I2C_IsDeviceReady+0x24c>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d007      	beq.n	80030e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2224      	movs	r2, #36	; 0x24
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a70      	ldr	r2, [pc, #448]	; (80032c4 <HAL_I2C_IsDeviceReady+0x258>)
 8003104:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003114:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2200      	movs	r2, #0
 800311e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fab6 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313c:	d103      	bne.n	8003146 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e0b6      	b.n	80032b8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800314a:	897b      	ldrh	r3, [r7, #10]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003158:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800315a:	f7fe ff47 	bl	8001fec <HAL_GetTick>
 800315e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	bf0c      	ite	eq
 800316e:	2301      	moveq	r3, #1
 8003170:	2300      	movne	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800318e:	e025      	b.n	80031dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003190:	f7fe ff2c 	bl	8001fec <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d302      	bcc.n	80031a6 <HAL_I2C_IsDeviceReady+0x13a>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d103      	bne.n	80031ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	22a0      	movs	r2, #160	; 0xa0
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2ba0      	cmp	r3, #160	; 0xa0
 80031e6:	d005      	beq.n	80031f4 <HAL_I2C_IsDeviceReady+0x188>
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d102      	bne.n	80031f4 <HAL_I2C_IsDeviceReady+0x188>
 80031ee:	7dbb      	ldrb	r3, [r7, #22]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0cd      	beq.n	8003190 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b02      	cmp	r3, #2
 8003208:	d129      	bne.n	800325e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003218:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2319      	movs	r3, #25
 8003236:	2201      	movs	r2, #1
 8003238:	4921      	ldr	r1, [pc, #132]	; (80032c0 <HAL_I2C_IsDeviceReady+0x254>)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fa2a 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e036      	b.n	80032b8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	e02c      	b.n	80032b8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003276:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2319      	movs	r3, #25
 800327e:	2201      	movs	r2, #1
 8003280:	490f      	ldr	r1, [pc, #60]	; (80032c0 <HAL_I2C_IsDeviceReady+0x254>)
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 fa06 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e012      	b.n	80032b8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	3301      	adds	r3, #1
 8003296:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	f4ff af32 	bcc.w	8003106 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
  }
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3720      	adds	r7, #32
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	00100002 	.word	0x00100002
 80032c4:	ffff0000 	.word	0xffff0000

080032c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	460b      	mov	r3, r1
 80032d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d006      	beq.n	80032f2 <I2C_MasterRequestWrite+0x2a>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d003      	beq.n	80032f2 <I2C_MasterRequestWrite+0x2a>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032f0:	d108      	bne.n	8003304 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e00b      	b.n	800331c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	2b12      	cmp	r3, #18
 800330a:	d107      	bne.n	800331c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800331a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f9b3 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003342:	d103      	bne.n	800334c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e035      	b.n	80033bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003358:	d108      	bne.n	800336c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800335a:	897b      	ldrh	r3, [r7, #10]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003368:	611a      	str	r2, [r3, #16]
 800336a:	e01b      	b.n	80033a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800336c:	897b      	ldrh	r3, [r7, #10]
 800336e:	11db      	asrs	r3, r3, #7
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f003 0306 	and.w	r3, r3, #6
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f063 030f 	orn	r3, r3, #15
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	490e      	ldr	r1, [pc, #56]	; (80033c4 <I2C_MasterRequestWrite+0xfc>)
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f9d9 	bl	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e010      	b.n	80033bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4907      	ldr	r1, [pc, #28]	; (80033c8 <I2C_MasterRequestWrite+0x100>)
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f9c9 	bl	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	00010008 	.word	0x00010008
 80033c8:	00010002 	.word	0x00010002

080033cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	460b      	mov	r3, r1
 80033da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d006      	beq.n	8003406 <I2C_MasterRequestRead+0x3a>
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d003      	beq.n	8003406 <I2C_MasterRequestRead+0x3a>
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003404:	d108      	bne.n	8003418 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	e00b      	b.n	8003430 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	2b11      	cmp	r3, #17
 800341e:	d107      	bne.n	8003430 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800342e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f929 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003456:	d103      	bne.n	8003460 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e079      	b.n	8003558 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800346c:	d108      	bne.n	8003480 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	b2da      	uxtb	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	611a      	str	r2, [r3, #16]
 800347e:	e05f      	b.n	8003540 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003480:	897b      	ldrh	r3, [r7, #10]
 8003482:	11db      	asrs	r3, r3, #7
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f003 0306 	and.w	r3, r3, #6
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f063 030f 	orn	r3, r3, #15
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4930      	ldr	r1, [pc, #192]	; (8003560 <I2C_MasterRequestRead+0x194>)
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f94f 	bl	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e054      	b.n	8003558 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034ae:	897b      	ldrh	r3, [r7, #10]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4929      	ldr	r1, [pc, #164]	; (8003564 <I2C_MasterRequestRead+0x198>)
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f93f 	bl	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e044      	b.n	8003558 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f8c7 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d103      	bne.n	8003524 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e017      	b.n	8003558 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003528:	897b      	ldrh	r3, [r7, #10]
 800352a:	11db      	asrs	r3, r3, #7
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f003 0306 	and.w	r3, r3, #6
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f063 030e 	orn	r3, r3, #14
 8003538:	b2da      	uxtb	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4907      	ldr	r1, [pc, #28]	; (8003564 <I2C_MasterRequestRead+0x198>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f8fb 	bl	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	00010008 	.word	0x00010008
 8003564:	00010002 	.word	0x00010002

08003568 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	461a      	mov	r2, r3
 8003576:	4603      	mov	r3, r0
 8003578:	817b      	strh	r3, [r7, #10]
 800357a:	460b      	mov	r3, r1
 800357c:	813b      	strh	r3, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003590:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	2200      	movs	r2, #0
 800359a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f878 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b8:	d103      	bne.n	80035c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e05f      	b.n	8003686 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	6a3a      	ldr	r2, [r7, #32]
 80035da:	492d      	ldr	r1, [pc, #180]	; (8003690 <I2C_RequestMemoryWrite+0x128>)
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f8b0 	bl	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e04c      	b.n	8003686 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003604:	6a39      	ldr	r1, [r7, #32]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f91a 	bl	8003840 <I2C_WaitOnTXEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b04      	cmp	r3, #4
 8003618:	d107      	bne.n	800362a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e02b      	b.n	8003686 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003634:	893b      	ldrh	r3, [r7, #8]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	611a      	str	r2, [r3, #16]
 800363e:	e021      	b.n	8003684 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003640:	893b      	ldrh	r3, [r7, #8]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	b29b      	uxth	r3, r3
 8003646:	b2da      	uxtb	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	6a39      	ldr	r1, [r7, #32]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f8f4 	bl	8003840 <I2C_WaitOnTXEFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00d      	beq.n	800367a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2b04      	cmp	r3, #4
 8003664:	d107      	bne.n	8003676 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003674:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e005      	b.n	8003686 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800367a:	893b      	ldrh	r3, [r7, #8]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	00010002 	.word	0x00010002

08003694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a4:	e025      	b.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d021      	beq.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ae:	f7fe fc9d 	bl	8001fec <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d302      	bcc.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d116      	bne.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f043 0220 	orr.w	r2, r3, #32
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e023      	b.n	800373a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10d      	bne.n	8003718 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4013      	ands	r3, r2
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	bf0c      	ite	eq
 800370e:	2301      	moveq	r3, #1
 8003710:	2300      	movne	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	e00c      	b.n	8003732 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	43da      	mvns	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4013      	ands	r3, r2
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	429a      	cmp	r2, r3
 8003736:	d0b6      	beq.n	80036a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003750:	e051      	b.n	80037f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003760:	d123      	bne.n	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003770:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800377a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f043 0204 	orr.w	r2, r3, #4
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e046      	b.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b0:	d021      	beq.n	80037f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b2:	f7fe fc1b 	bl	8001fec <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d302      	bcc.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d116      	bne.n	80037f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e020      	b.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10c      	bne.n	800381a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	43da      	mvns	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	bf14      	ite	ne
 8003812:	2301      	movne	r3, #1
 8003814:	2300      	moveq	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	e00b      	b.n	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	43da      	mvns	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4013      	ands	r3, r2
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d18d      	bne.n	8003752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800384c:	e02d      	b.n	80038aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f8ce 	bl	80039f0 <I2C_IsAcknowledgeFailed>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e02d      	b.n	80038ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d021      	beq.n	80038aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003866:	f7fe fbc1 	bl	8001fec <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	429a      	cmp	r2, r3
 8003874:	d302      	bcc.n	800387c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d116      	bne.n	80038aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f043 0220 	orr.w	r2, r3, #32
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e007      	b.n	80038ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b4:	2b80      	cmp	r3, #128	; 0x80
 80038b6:	d1ca      	bne.n	800384e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038ce:	e02d      	b.n	800392c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f88d 	bl	80039f0 <I2C_IsAcknowledgeFailed>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e02d      	b.n	800393c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d021      	beq.n	800392c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e8:	f7fe fb80 	bl	8001fec <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d302      	bcc.n	80038fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d116      	bne.n	800392c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	f043 0220 	orr.w	r2, r3, #32
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e007      	b.n	800393c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b04      	cmp	r3, #4
 8003938:	d1ca      	bne.n	80038d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003950:	e042      	b.n	80039d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b10      	cmp	r3, #16
 800395e:	d119      	bne.n	8003994 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0210 	mvn.w	r2, #16
 8003968:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e029      	b.n	80039e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003994:	f7fe fb2a 	bl	8001fec <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d116      	bne.n	80039d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e007      	b.n	80039e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d1b5      	bne.n	8003952 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a06:	d11b      	bne.n	8003a40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f043 0204 	orr.w	r2, r3, #4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0cc      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a64:	4b68      	ldr	r3, [pc, #416]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d90c      	bls.n	8003a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b65      	ldr	r3, [pc, #404]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b63      	ldr	r3, [pc, #396]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0b8      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d020      	beq.n	8003ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa4:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4a58      	ldr	r2, [pc, #352]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003abc:	4b53      	ldr	r3, [pc, #332]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4a52      	ldr	r2, [pc, #328]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	4b50      	ldr	r3, [pc, #320]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	494d      	ldr	r1, [pc, #308]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d044      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d119      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e07f      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d003      	beq.n	8003b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0e:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e06f      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e067      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2e:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f023 0203 	bic.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4934      	ldr	r1, [pc, #208]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b40:	f7fe fa54 	bl	8001fec <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b48:	f7fe fa50 	bl	8001fec <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e04f      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 020c 	and.w	r2, r3, #12
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d1eb      	bne.n	8003b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d20c      	bcs.n	8003b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e032      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4916      	ldr	r1, [pc, #88]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	490e      	ldr	r1, [pc, #56]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bd6:	f000 f855 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	490a      	ldr	r1, [pc, #40]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003be8:	5ccb      	ldrb	r3, [r1, r3]
 8003bea:	fa22 f303 	lsr.w	r3, r2, r3
 8003bee:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe f9b4 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40023c00 	.word	0x40023c00
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	08006358 	.word	0x08006358
 8003c14:	20000000 	.word	0x20000000
 8003c18:	20000004 	.word	0x20000004

08003c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000000 	.word	0x20000000

08003c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c38:	f7ff fff0 	bl	8003c1c <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0a9b      	lsrs	r3, r3, #10
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4903      	ldr	r1, [pc, #12]	; (8003c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40023800 	.word	0x40023800
 8003c58:	08006368 	.word	0x08006368

08003c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c60:	f7ff ffdc 	bl	8003c1c <HAL_RCC_GetHCLKFreq>
 8003c64:	4602      	mov	r2, r0
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	0b5b      	lsrs	r3, r3, #13
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	4903      	ldr	r1, [pc, #12]	; (8003c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c72:	5ccb      	ldrb	r3, [r1, r3]
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	08006368 	.word	0x08006368

08003c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c88:	b0ae      	sub	sp, #184	; 0xb8
 8003c8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003caa:	4bcb      	ldr	r3, [pc, #812]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b0c      	cmp	r3, #12
 8003cb4:	f200 8206 	bhi.w	80040c4 <HAL_RCC_GetSysClockFreq+0x440>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	080040c5 	.word	0x080040c5
 8003cc8:	080040c5 	.word	0x080040c5
 8003ccc:	080040c5 	.word	0x080040c5
 8003cd0:	08003cfd 	.word	0x08003cfd
 8003cd4:	080040c5 	.word	0x080040c5
 8003cd8:	080040c5 	.word	0x080040c5
 8003cdc:	080040c5 	.word	0x080040c5
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	080040c5 	.word	0x080040c5
 8003ce8:	080040c5 	.word	0x080040c5
 8003cec:	080040c5 	.word	0x080040c5
 8003cf0:	08003ef5 	.word	0x08003ef5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cf4:	4bb9      	ldr	r3, [pc, #740]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x358>)
 8003cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003cfa:	e1e7      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cfc:	4bb8      	ldr	r3, [pc, #736]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d02:	e1e3      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d04:	4bb4      	ldr	r3, [pc, #720]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d10:	4bb1      	ldr	r3, [pc, #708]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d071      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1c:	4bae      	ldr	r3, [pc, #696]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d28:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d42:	4622      	mov	r2, r4
 8003d44:	462b      	mov	r3, r5
 8003d46:	f04f 0000 	mov.w	r0, #0
 8003d4a:	f04f 0100 	mov.w	r1, #0
 8003d4e:	0159      	lsls	r1, r3, #5
 8003d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d54:	0150      	lsls	r0, r2, #5
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	1a51      	subs	r1, r2, r1
 8003d5e:	6439      	str	r1, [r7, #64]	; 0x40
 8003d60:	4629      	mov	r1, r5
 8003d62:	eb63 0301 	sbc.w	r3, r3, r1
 8003d66:	647b      	str	r3, [r7, #68]	; 0x44
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003d74:	4649      	mov	r1, r9
 8003d76:	018b      	lsls	r3, r1, #6
 8003d78:	4641      	mov	r1, r8
 8003d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d7e:	4641      	mov	r1, r8
 8003d80:	018a      	lsls	r2, r1, #6
 8003d82:	4641      	mov	r1, r8
 8003d84:	1a51      	subs	r1, r2, r1
 8003d86:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d88:	4649      	mov	r1, r9
 8003d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	00cb      	lsls	r3, r1, #3
 8003da0:	4641      	mov	r1, r8
 8003da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da6:	4641      	mov	r1, r8
 8003da8:	00ca      	lsls	r2, r1, #3
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	4622      	mov	r2, r4
 8003db2:	189b      	adds	r3, r3, r2
 8003db4:	633b      	str	r3, [r7, #48]	; 0x30
 8003db6:	462b      	mov	r3, r5
 8003db8:	460a      	mov	r2, r1
 8003dba:	eb42 0303 	adc.w	r3, r2, r3
 8003dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dcc:	4629      	mov	r1, r5
 8003dce:	024b      	lsls	r3, r1, #9
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	024a      	lsls	r2, r1, #9
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003de8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003dec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003df0:	f7fc feee 	bl	8000bd0 <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dfe:	e067      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e00:	4b75      	ldr	r3, [pc, #468]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	099b      	lsrs	r3, r3, #6
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e0c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e18:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003e22:	4622      	mov	r2, r4
 8003e24:	462b      	mov	r3, r5
 8003e26:	f04f 0000 	mov.w	r0, #0
 8003e2a:	f04f 0100 	mov.w	r1, #0
 8003e2e:	0159      	lsls	r1, r3, #5
 8003e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e34:	0150      	lsls	r0, r2, #5
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	1a51      	subs	r1, r2, r1
 8003e3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e40:	4629      	mov	r1, r5
 8003e42:	eb63 0301 	sbc.w	r3, r3, r1
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003e54:	4649      	mov	r1, r9
 8003e56:	018b      	lsls	r3, r1, #6
 8003e58:	4641      	mov	r1, r8
 8003e5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e5e:	4641      	mov	r1, r8
 8003e60:	018a      	lsls	r2, r1, #6
 8003e62:	4641      	mov	r1, r8
 8003e64:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e68:	4649      	mov	r1, r9
 8003e6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e82:	4692      	mov	sl, r2
 8003e84:	469b      	mov	fp, r3
 8003e86:	4623      	mov	r3, r4
 8003e88:	eb1a 0303 	adds.w	r3, sl, r3
 8003e8c:	623b      	str	r3, [r7, #32]
 8003e8e:	462b      	mov	r3, r5
 8003e90:	eb4b 0303 	adc.w	r3, fp, r3
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	028b      	lsls	r3, r1, #10
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eac:	4621      	mov	r1, r4
 8003eae:	028a      	lsls	r2, r1, #10
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eb8:	2200      	movs	r2, #0
 8003eba:	673b      	str	r3, [r7, #112]	; 0x70
 8003ebc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ebe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003ec2:	f7fc fe85 	bl	8000bd0 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4613      	mov	r3, r2
 8003ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ed0:	4b41      	ldr	r3, [pc, #260]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	3301      	adds	r3, #1
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003ee2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ef2:	e0eb      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef4:	4b38      	ldr	r3, [pc, #224]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003efc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f00:	4b35      	ldr	r3, [pc, #212]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d06b      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0c:	4b32      	ldr	r3, [pc, #200]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	099b      	lsrs	r3, r3, #6
 8003f12:	2200      	movs	r2, #0
 8003f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f20:	2300      	movs	r3, #0
 8003f22:	667b      	str	r3, [r7, #100]	; 0x64
 8003f24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003f28:	4622      	mov	r2, r4
 8003f2a:	462b      	mov	r3, r5
 8003f2c:	f04f 0000 	mov.w	r0, #0
 8003f30:	f04f 0100 	mov.w	r1, #0
 8003f34:	0159      	lsls	r1, r3, #5
 8003f36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f3a:	0150      	lsls	r0, r2, #5
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4621      	mov	r1, r4
 8003f42:	1a51      	subs	r1, r2, r1
 8003f44:	61b9      	str	r1, [r7, #24]
 8003f46:	4629      	mov	r1, r5
 8003f48:	eb63 0301 	sbc.w	r3, r3, r1
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f5a:	4659      	mov	r1, fp
 8003f5c:	018b      	lsls	r3, r1, #6
 8003f5e:	4651      	mov	r1, sl
 8003f60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f64:	4651      	mov	r1, sl
 8003f66:	018a      	lsls	r2, r1, #6
 8003f68:	4651      	mov	r1, sl
 8003f6a:	ebb2 0801 	subs.w	r8, r2, r1
 8003f6e:	4659      	mov	r1, fp
 8003f70:	eb63 0901 	sbc.w	r9, r3, r1
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f88:	4690      	mov	r8, r2
 8003f8a:	4699      	mov	r9, r3
 8003f8c:	4623      	mov	r3, r4
 8003f8e:	eb18 0303 	adds.w	r3, r8, r3
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	462b      	mov	r3, r5
 8003f96:	eb49 0303 	adc.w	r3, r9, r3
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003fa8:	4629      	mov	r1, r5
 8003faa:	024b      	lsls	r3, r1, #9
 8003fac:	4621      	mov	r1, r4
 8003fae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	024a      	lsls	r2, r1, #9
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fc2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003fc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fc8:	f7fc fe02 	bl	8000bd0 <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fd6:	e065      	b.n	80040a4 <HAL_RCC_GetSysClockFreq+0x420>
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	00f42400 	.word	0x00f42400
 8003fe0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe4:	4b3d      	ldr	r3, [pc, #244]	; (80040dc <HAL_RCC_GetSysClockFreq+0x458>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	2200      	movs	r2, #0
 8003fec:	4618      	mov	r0, r3
 8003fee:	4611      	mov	r1, r2
 8003ff0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ff4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	657b      	str	r3, [r7, #84]	; 0x54
 8003ffa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003ffe:	4642      	mov	r2, r8
 8004000:	464b      	mov	r3, r9
 8004002:	f04f 0000 	mov.w	r0, #0
 8004006:	f04f 0100 	mov.w	r1, #0
 800400a:	0159      	lsls	r1, r3, #5
 800400c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004010:	0150      	lsls	r0, r2, #5
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4641      	mov	r1, r8
 8004018:	1a51      	subs	r1, r2, r1
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	4649      	mov	r1, r9
 800401e:	eb63 0301 	sbc.w	r3, r3, r1
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004030:	4659      	mov	r1, fp
 8004032:	018b      	lsls	r3, r1, #6
 8004034:	4651      	mov	r1, sl
 8004036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800403a:	4651      	mov	r1, sl
 800403c:	018a      	lsls	r2, r1, #6
 800403e:	4651      	mov	r1, sl
 8004040:	1a54      	subs	r4, r2, r1
 8004042:	4659      	mov	r1, fp
 8004044:	eb63 0501 	sbc.w	r5, r3, r1
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	00eb      	lsls	r3, r5, #3
 8004052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004056:	00e2      	lsls	r2, r4, #3
 8004058:	4614      	mov	r4, r2
 800405a:	461d      	mov	r5, r3
 800405c:	4643      	mov	r3, r8
 800405e:	18e3      	adds	r3, r4, r3
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	464b      	mov	r3, r9
 8004064:	eb45 0303 	adc.w	r3, r5, r3
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004076:	4629      	mov	r1, r5
 8004078:	028b      	lsls	r3, r1, #10
 800407a:	4621      	mov	r1, r4
 800407c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004080:	4621      	mov	r1, r4
 8004082:	028a      	lsls	r2, r1, #10
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
 8004088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800408c:	2200      	movs	r2, #0
 800408e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004090:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004092:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004096:	f7fc fd9b 	bl	8000bd0 <__aeabi_uldivmod>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4613      	mov	r3, r2
 80040a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040a4:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <HAL_RCC_GetSysClockFreq+0x458>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	0f1b      	lsrs	r3, r3, #28
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80040b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040c2:	e003      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80040c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	37b8      	adds	r7, #184	; 0xb8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040da:	bf00      	nop
 80040dc:	40023800 	.word	0x40023800
 80040e0:	00f42400 	.word	0x00f42400

080040e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e28d      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 8083 	beq.w	800420a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004104:	4b94      	ldr	r3, [pc, #592]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 030c 	and.w	r3, r3, #12
 800410c:	2b04      	cmp	r3, #4
 800410e:	d019      	beq.n	8004144 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004110:	4b91      	ldr	r3, [pc, #580]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004118:	2b08      	cmp	r3, #8
 800411a:	d106      	bne.n	800412a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800411c:	4b8e      	ldr	r3, [pc, #568]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004128:	d00c      	beq.n	8004144 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412a:	4b8b      	ldr	r3, [pc, #556]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004132:	2b0c      	cmp	r3, #12
 8004134:	d112      	bne.n	800415c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004136:	4b88      	ldr	r3, [pc, #544]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004142:	d10b      	bne.n	800415c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004144:	4b84      	ldr	r3, [pc, #528]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d05b      	beq.n	8004208 <HAL_RCC_OscConfig+0x124>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d157      	bne.n	8004208 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e25a      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004164:	d106      	bne.n	8004174 <HAL_RCC_OscConfig+0x90>
 8004166:	4b7c      	ldr	r3, [pc, #496]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a7b      	ldr	r2, [pc, #492]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e01d      	b.n	80041b0 <HAL_RCC_OscConfig+0xcc>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0xb4>
 800417e:	4b76      	ldr	r3, [pc, #472]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a75      	ldr	r2, [pc, #468]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b73      	ldr	r3, [pc, #460]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a72      	ldr	r2, [pc, #456]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e00b      	b.n	80041b0 <HAL_RCC_OscConfig+0xcc>
 8004198:	4b6f      	ldr	r3, [pc, #444]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a6e      	ldr	r2, [pc, #440]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 800419e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b6c      	ldr	r3, [pc, #432]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a6b      	ldr	r2, [pc, #428]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 80041aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d013      	beq.n	80041e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fd ff18 	bl	8001fec <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c0:	f7fd ff14 	bl	8001fec <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	; 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e21f      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b61      	ldr	r3, [pc, #388]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0xdc>
 80041de:	e014      	b.n	800420a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fd ff04 	bl	8001fec <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e8:	f7fd ff00 	bl	8001fec <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	; 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e20b      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fa:	4b57      	ldr	r3, [pc, #348]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x104>
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d06f      	beq.n	80042f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004216:	4b50      	ldr	r3, [pc, #320]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b00      	cmp	r3, #0
 8004220:	d017      	beq.n	8004252 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004222:	4b4d      	ldr	r3, [pc, #308]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800422a:	2b08      	cmp	r3, #8
 800422c:	d105      	bne.n	800423a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800422e:	4b4a      	ldr	r3, [pc, #296]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423a:	4b47      	ldr	r3, [pc, #284]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004242:	2b0c      	cmp	r3, #12
 8004244:	d11c      	bne.n	8004280 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004246:	4b44      	ldr	r3, [pc, #272]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d116      	bne.n	8004280 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	4b41      	ldr	r3, [pc, #260]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_RCC_OscConfig+0x186>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d001      	beq.n	800426a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e1d3      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426a:	4b3b      	ldr	r3, [pc, #236]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4937      	ldr	r1, [pc, #220]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427e:	e03a      	b.n	80042f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d020      	beq.n	80042ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004288:	4b34      	ldr	r3, [pc, #208]	; (800435c <HAL_RCC_OscConfig+0x278>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fd fead 	bl	8001fec <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004296:	f7fd fea9 	bl	8001fec <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e1b4      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a8:	4b2b      	ldr	r3, [pc, #172]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b4:	4b28      	ldr	r3, [pc, #160]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4925      	ldr	r1, [pc, #148]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]
 80042c8:	e015      	b.n	80042f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_RCC_OscConfig+0x278>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fd fe8c 	bl	8001fec <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d8:	f7fd fe88 	bl	8001fec <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e193      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d036      	beq.n	8004370 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d016      	beq.n	8004338 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430a:	4b15      	ldr	r3, [pc, #84]	; (8004360 <HAL_RCC_OscConfig+0x27c>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7fd fe6c 	bl	8001fec <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004318:	f7fd fe68 	bl	8001fec <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e173      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_OscConfig+0x274>)
 800432c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x234>
 8004336:	e01b      	b.n	8004370 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_OscConfig+0x27c>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433e:	f7fd fe55 	bl	8001fec <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	e00e      	b.n	8004364 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004346:	f7fd fe51 	bl	8001fec <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d907      	bls.n	8004364 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e15c      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
 8004358:	40023800 	.word	0x40023800
 800435c:	42470000 	.word	0x42470000
 8004360:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004364:	4b8a      	ldr	r3, [pc, #552]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ea      	bne.n	8004346 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8097 	beq.w	80044ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004382:	4b83      	ldr	r3, [pc, #524]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	4b7f      	ldr	r3, [pc, #508]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	4a7e      	ldr	r2, [pc, #504]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439c:	6413      	str	r3, [r2, #64]	; 0x40
 800439e:	4b7c      	ldr	r3, [pc, #496]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ae:	4b79      	ldr	r3, [pc, #484]	; (8004594 <HAL_RCC_OscConfig+0x4b0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d118      	bne.n	80043ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ba:	4b76      	ldr	r3, [pc, #472]	; (8004594 <HAL_RCC_OscConfig+0x4b0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a75      	ldr	r2, [pc, #468]	; (8004594 <HAL_RCC_OscConfig+0x4b0>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c6:	f7fd fe11 	bl	8001fec <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fd fe0d 	bl	8001fec <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e118      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	4b6c      	ldr	r3, [pc, #432]	; (8004594 <HAL_RCC_OscConfig+0x4b0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0x31e>
 80043f4:	4b66      	ldr	r3, [pc, #408]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	4a65      	ldr	r2, [pc, #404]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004400:	e01c      	b.n	800443c <HAL_RCC_OscConfig+0x358>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b05      	cmp	r3, #5
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x340>
 800440a:	4b61      	ldr	r3, [pc, #388]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a60      	ldr	r2, [pc, #384]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6713      	str	r3, [r2, #112]	; 0x70
 8004416:	4b5e      	ldr	r3, [pc, #376]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a5d      	ldr	r2, [pc, #372]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6713      	str	r3, [r2, #112]	; 0x70
 8004422:	e00b      	b.n	800443c <HAL_RCC_OscConfig+0x358>
 8004424:	4b5a      	ldr	r3, [pc, #360]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	4a59      	ldr	r2, [pc, #356]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	6713      	str	r3, [r2, #112]	; 0x70
 8004430:	4b57      	ldr	r3, [pc, #348]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	4a56      	ldr	r2, [pc, #344]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004436:	f023 0304 	bic.w	r3, r3, #4
 800443a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d015      	beq.n	8004470 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fd fdd2 	bl	8001fec <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fd fdce 	bl	8001fec <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0d7      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004462:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0ee      	beq.n	800444c <HAL_RCC_OscConfig+0x368>
 800446e:	e014      	b.n	800449a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004470:	f7fd fdbc 	bl	8001fec <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004476:	e00a      	b.n	800448e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004478:	f7fd fdb8 	bl	8001fec <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	; 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e0c1      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448e:	4b40      	ldr	r3, [pc, #256]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1ee      	bne.n	8004478 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800449a:	7dfb      	ldrb	r3, [r7, #23]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a0:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 80044a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80ad 	beq.w	8004610 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044b6:	4b36      	ldr	r3, [pc, #216]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d060      	beq.n	8004584 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d145      	bne.n	8004556 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b33      	ldr	r3, [pc, #204]	; (8004598 <HAL_RCC_OscConfig+0x4b4>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fd fd8c 	bl	8001fec <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fd fd88 	bl	8001fec <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e093      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ea:	4b29      	ldr	r3, [pc, #164]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	3b01      	subs	r3, #1
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	061b      	lsls	r3, r3, #24
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	071b      	lsls	r3, r3, #28
 8004522:	491b      	ldr	r1, [pc, #108]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004524:	4313      	orrs	r3, r2
 8004526:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_RCC_OscConfig+0x4b4>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7fd fd5d 	bl	8001fec <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004536:	f7fd fd59 	bl	8001fec <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e064      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCC_OscConfig+0x452>
 8004554:	e05c      	b.n	8004610 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <HAL_RCC_OscConfig+0x4b4>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fd fd46 	bl	8001fec <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fd fd42 	bl	8001fec <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e04d      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	4b06      	ldr	r3, [pc, #24]	; (8004590 <HAL_RCC_OscConfig+0x4ac>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x480>
 8004582:	e045      	b.n	8004610 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d107      	bne.n	800459c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e040      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
 8004590:	40023800 	.word	0x40023800
 8004594:	40007000 	.word	0x40007000
 8004598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800459c:	4b1f      	ldr	r3, [pc, #124]	; (800461c <HAL_RCC_OscConfig+0x538>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d030      	beq.n	800460c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d129      	bne.n	800460c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d122      	bne.n	800460c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045cc:	4013      	ands	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d119      	bne.n	800460c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	3b01      	subs	r3, #1
 80045e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d10f      	bne.n	800460c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d107      	bne.n	800460c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40023800 	.word	0x40023800

08004620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e03f      	b.n	80046b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd fb88 	bl	8001d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2224      	movs	r2, #36	; 0x24
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f829 	bl	80046bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c0:	b0c0      	sub	sp, #256	; 0x100
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	68d9      	ldr	r1, [r3, #12]
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	ea40 0301 	orr.w	r3, r0, r1
 80046e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004714:	f021 010c 	bic.w	r1, r1, #12
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004722:	430b      	orrs	r3, r1
 8004724:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004736:	6999      	ldr	r1, [r3, #24]
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	ea40 0301 	orr.w	r3, r0, r1
 8004742:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b8f      	ldr	r3, [pc, #572]	; (8004988 <UART_SetConfig+0x2cc>)
 800474c:	429a      	cmp	r2, r3
 800474e:	d005      	beq.n	800475c <UART_SetConfig+0xa0>
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4b8d      	ldr	r3, [pc, #564]	; (800498c <UART_SetConfig+0x2d0>)
 8004758:	429a      	cmp	r2, r3
 800475a:	d104      	bne.n	8004766 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800475c:	f7ff fa7e 	bl	8003c5c <HAL_RCC_GetPCLK2Freq>
 8004760:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004764:	e003      	b.n	800476e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004766:	f7ff fa65 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 800476a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004778:	f040 810c 	bne.w	8004994 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800477c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004780:	2200      	movs	r2, #0
 8004782:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004786:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800478a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800478e:	4622      	mov	r2, r4
 8004790:	462b      	mov	r3, r5
 8004792:	1891      	adds	r1, r2, r2
 8004794:	65b9      	str	r1, [r7, #88]	; 0x58
 8004796:	415b      	adcs	r3, r3
 8004798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800479a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800479e:	4621      	mov	r1, r4
 80047a0:	eb12 0801 	adds.w	r8, r2, r1
 80047a4:	4629      	mov	r1, r5
 80047a6:	eb43 0901 	adc.w	r9, r3, r1
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047be:	4690      	mov	r8, r2
 80047c0:	4699      	mov	r9, r3
 80047c2:	4623      	mov	r3, r4
 80047c4:	eb18 0303 	adds.w	r3, r8, r3
 80047c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047cc:	462b      	mov	r3, r5
 80047ce:	eb49 0303 	adc.w	r3, r9, r3
 80047d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047ea:	460b      	mov	r3, r1
 80047ec:	18db      	adds	r3, r3, r3
 80047ee:	653b      	str	r3, [r7, #80]	; 0x50
 80047f0:	4613      	mov	r3, r2
 80047f2:	eb42 0303 	adc.w	r3, r2, r3
 80047f6:	657b      	str	r3, [r7, #84]	; 0x54
 80047f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004800:	f7fc f9e6 	bl	8000bd0 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4b61      	ldr	r3, [pc, #388]	; (8004990 <UART_SetConfig+0x2d4>)
 800480a:	fba3 2302 	umull	r2, r3, r3, r2
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	011c      	lsls	r4, r3, #4
 8004812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004816:	2200      	movs	r2, #0
 8004818:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800481c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004820:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004824:	4642      	mov	r2, r8
 8004826:	464b      	mov	r3, r9
 8004828:	1891      	adds	r1, r2, r2
 800482a:	64b9      	str	r1, [r7, #72]	; 0x48
 800482c:	415b      	adcs	r3, r3
 800482e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004830:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004834:	4641      	mov	r1, r8
 8004836:	eb12 0a01 	adds.w	sl, r2, r1
 800483a:	4649      	mov	r1, r9
 800483c:	eb43 0b01 	adc.w	fp, r3, r1
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800484c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004854:	4692      	mov	sl, r2
 8004856:	469b      	mov	fp, r3
 8004858:	4643      	mov	r3, r8
 800485a:	eb1a 0303 	adds.w	r3, sl, r3
 800485e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004862:	464b      	mov	r3, r9
 8004864:	eb4b 0303 	adc.w	r3, fp, r3
 8004868:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004878:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800487c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004880:	460b      	mov	r3, r1
 8004882:	18db      	adds	r3, r3, r3
 8004884:	643b      	str	r3, [r7, #64]	; 0x40
 8004886:	4613      	mov	r3, r2
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	647b      	str	r3, [r7, #68]	; 0x44
 800488e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004892:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004896:	f7fc f99b 	bl	8000bd0 <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4611      	mov	r1, r2
 80048a0:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <UART_SetConfig+0x2d4>)
 80048a2:	fba3 2301 	umull	r2, r3, r3, r1
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2264      	movs	r2, #100	; 0x64
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	1acb      	subs	r3, r1, r3
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048b6:	4b36      	ldr	r3, [pc, #216]	; (8004990 <UART_SetConfig+0x2d4>)
 80048b8:	fba3 2302 	umull	r2, r3, r3, r2
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048c4:	441c      	add	r4, r3
 80048c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048d8:	4642      	mov	r2, r8
 80048da:	464b      	mov	r3, r9
 80048dc:	1891      	adds	r1, r2, r2
 80048de:	63b9      	str	r1, [r7, #56]	; 0x38
 80048e0:	415b      	adcs	r3, r3
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048e8:	4641      	mov	r1, r8
 80048ea:	1851      	adds	r1, r2, r1
 80048ec:	6339      	str	r1, [r7, #48]	; 0x30
 80048ee:	4649      	mov	r1, r9
 80048f0:	414b      	adcs	r3, r1
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004900:	4659      	mov	r1, fp
 8004902:	00cb      	lsls	r3, r1, #3
 8004904:	4651      	mov	r1, sl
 8004906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490a:	4651      	mov	r1, sl
 800490c:	00ca      	lsls	r2, r1, #3
 800490e:	4610      	mov	r0, r2
 8004910:	4619      	mov	r1, r3
 8004912:	4603      	mov	r3, r0
 8004914:	4642      	mov	r2, r8
 8004916:	189b      	adds	r3, r3, r2
 8004918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800491c:	464b      	mov	r3, r9
 800491e:	460a      	mov	r2, r1
 8004920:	eb42 0303 	adc.w	r3, r2, r3
 8004924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004934:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004938:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800493c:	460b      	mov	r3, r1
 800493e:	18db      	adds	r3, r3, r3
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
 8004942:	4613      	mov	r3, r2
 8004944:	eb42 0303 	adc.w	r3, r2, r3
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800494e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004952:	f7fc f93d 	bl	8000bd0 <__aeabi_uldivmod>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <UART_SetConfig+0x2d4>)
 800495c:	fba3 1302 	umull	r1, r3, r3, r2
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	2164      	movs	r1, #100	; 0x64
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	3332      	adds	r3, #50	; 0x32
 800496e:	4a08      	ldr	r2, [pc, #32]	; (8004990 <UART_SetConfig+0x2d4>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	f003 0207 	and.w	r2, r3, #7
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4422      	add	r2, r4
 8004982:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004984:	e106      	b.n	8004b94 <UART_SetConfig+0x4d8>
 8004986:	bf00      	nop
 8004988:	40011000 	.word	0x40011000
 800498c:	40011400 	.word	0x40011400
 8004990:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004998:	2200      	movs	r2, #0
 800499a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800499e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049a6:	4642      	mov	r2, r8
 80049a8:	464b      	mov	r3, r9
 80049aa:	1891      	adds	r1, r2, r2
 80049ac:	6239      	str	r1, [r7, #32]
 80049ae:	415b      	adcs	r3, r3
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
 80049b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049b6:	4641      	mov	r1, r8
 80049b8:	1854      	adds	r4, r2, r1
 80049ba:	4649      	mov	r1, r9
 80049bc:	eb43 0501 	adc.w	r5, r3, r1
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	00eb      	lsls	r3, r5, #3
 80049ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ce:	00e2      	lsls	r2, r4, #3
 80049d0:	4614      	mov	r4, r2
 80049d2:	461d      	mov	r5, r3
 80049d4:	4643      	mov	r3, r8
 80049d6:	18e3      	adds	r3, r4, r3
 80049d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049dc:	464b      	mov	r3, r9
 80049de:	eb45 0303 	adc.w	r3, r5, r3
 80049e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a02:	4629      	mov	r1, r5
 8004a04:	008b      	lsls	r3, r1, #2
 8004a06:	4621      	mov	r1, r4
 8004a08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	008a      	lsls	r2, r1, #2
 8004a10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a14:	f7fc f8dc 	bl	8000bd0 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4b60      	ldr	r3, [pc, #384]	; (8004ba0 <UART_SetConfig+0x4e4>)
 8004a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	011c      	lsls	r4, r3, #4
 8004a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	61b9      	str	r1, [r7, #24]
 8004a40:	415b      	adcs	r3, r3
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a48:	4641      	mov	r1, r8
 8004a4a:	1851      	adds	r1, r2, r1
 8004a4c:	6139      	str	r1, [r7, #16]
 8004a4e:	4649      	mov	r1, r9
 8004a50:	414b      	adcs	r3, r1
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a60:	4659      	mov	r1, fp
 8004a62:	00cb      	lsls	r3, r1, #3
 8004a64:	4651      	mov	r1, sl
 8004a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a6a:	4651      	mov	r1, sl
 8004a6c:	00ca      	lsls	r2, r1, #3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4619      	mov	r1, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	4642      	mov	r2, r8
 8004a76:	189b      	adds	r3, r3, r2
 8004a78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	460a      	mov	r2, r1
 8004a80:	eb42 0303 	adc.w	r3, r2, r3
 8004a84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	008b      	lsls	r3, r1, #2
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aaa:	4641      	mov	r1, r8
 8004aac:	008a      	lsls	r2, r1, #2
 8004aae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ab2:	f7fc f88d 	bl	8000bd0 <__aeabi_uldivmod>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	4b38      	ldr	r3, [pc, #224]	; (8004ba0 <UART_SetConfig+0x4e4>)
 8004abe:	fba3 2301 	umull	r2, r3, r3, r1
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	2264      	movs	r2, #100	; 0x64
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	1acb      	subs	r3, r1, r3
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	3332      	adds	r3, #50	; 0x32
 8004ad0:	4a33      	ldr	r2, [pc, #204]	; (8004ba0 <UART_SetConfig+0x4e4>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004adc:	441c      	add	r4, r3
 8004ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ae6:	677a      	str	r2, [r7, #116]	; 0x74
 8004ae8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004aec:	4642      	mov	r2, r8
 8004aee:	464b      	mov	r3, r9
 8004af0:	1891      	adds	r1, r2, r2
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	415b      	adcs	r3, r3
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004afc:	4641      	mov	r1, r8
 8004afe:	1851      	adds	r1, r2, r1
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	4649      	mov	r1, r9
 8004b04:	414b      	adcs	r3, r1
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b14:	4659      	mov	r1, fp
 8004b16:	00cb      	lsls	r3, r1, #3
 8004b18:	4651      	mov	r1, sl
 8004b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1e:	4651      	mov	r1, sl
 8004b20:	00ca      	lsls	r2, r1, #3
 8004b22:	4610      	mov	r0, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	4642      	mov	r2, r8
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b2e:	464b      	mov	r3, r9
 8004b30:	460a      	mov	r2, r1
 8004b32:	eb42 0303 	adc.w	r3, r2, r3
 8004b36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	663b      	str	r3, [r7, #96]	; 0x60
 8004b42:	667a      	str	r2, [r7, #100]	; 0x64
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b50:	4649      	mov	r1, r9
 8004b52:	008b      	lsls	r3, r1, #2
 8004b54:	4641      	mov	r1, r8
 8004b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b5a:	4641      	mov	r1, r8
 8004b5c:	008a      	lsls	r2, r1, #2
 8004b5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b62:	f7fc f835 	bl	8000bd0 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <UART_SetConfig+0x4e4>)
 8004b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	2164      	movs	r1, #100	; 0x64
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	3332      	adds	r3, #50	; 0x32
 8004b7e:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <UART_SetConfig+0x4e4>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	f003 020f 	and.w	r2, r3, #15
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4422      	add	r2, r4
 8004b92:	609a      	str	r2, [r3, #8]
}
 8004b94:	bf00      	nop
 8004b96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba0:	51eb851f 	.word	0x51eb851f

08004ba4 <memset>:
 8004ba4:	4402      	add	r2, r0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d100      	bne.n	8004bae <memset+0xa>
 8004bac:	4770      	bx	lr
 8004bae:	f803 1b01 	strb.w	r1, [r3], #1
 8004bb2:	e7f9      	b.n	8004ba8 <memset+0x4>

08004bb4 <__errno>:
 8004bb4:	4b01      	ldr	r3, [pc, #4]	; (8004bbc <__errno+0x8>)
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000058 	.word	0x20000058

08004bc0 <__libc_init_array>:
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	4d0d      	ldr	r5, [pc, #52]	; (8004bf8 <__libc_init_array+0x38>)
 8004bc4:	4c0d      	ldr	r4, [pc, #52]	; (8004bfc <__libc_init_array+0x3c>)
 8004bc6:	1b64      	subs	r4, r4, r5
 8004bc8:	10a4      	asrs	r4, r4, #2
 8004bca:	2600      	movs	r6, #0
 8004bcc:	42a6      	cmp	r6, r4
 8004bce:	d109      	bne.n	8004be4 <__libc_init_array+0x24>
 8004bd0:	4d0b      	ldr	r5, [pc, #44]	; (8004c00 <__libc_init_array+0x40>)
 8004bd2:	4c0c      	ldr	r4, [pc, #48]	; (8004c04 <__libc_init_array+0x44>)
 8004bd4:	f001 fbb4 	bl	8006340 <_init>
 8004bd8:	1b64      	subs	r4, r4, r5
 8004bda:	10a4      	asrs	r4, r4, #2
 8004bdc:	2600      	movs	r6, #0
 8004bde:	42a6      	cmp	r6, r4
 8004be0:	d105      	bne.n	8004bee <__libc_init_array+0x2e>
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be8:	4798      	blx	r3
 8004bea:	3601      	adds	r6, #1
 8004bec:	e7ee      	b.n	8004bcc <__libc_init_array+0xc>
 8004bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf2:	4798      	blx	r3
 8004bf4:	3601      	adds	r6, #1
 8004bf6:	e7f2      	b.n	8004bde <__libc_init_array+0x1e>
 8004bf8:	08006558 	.word	0x08006558
 8004bfc:	08006558 	.word	0x08006558
 8004c00:	08006558 	.word	0x08006558
 8004c04:	0800655c 	.word	0x0800655c

08004c08 <asin>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	ed2d 8b02 	vpush	{d8}
 8004c0e:	ec55 4b10 	vmov	r4, r5, d0
 8004c12:	f000 fb29 	bl	8005268 <__ieee754_asin>
 8004c16:	4622      	mov	r2, r4
 8004c18:	462b      	mov	r3, r5
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	eeb0 8a40 	vmov.f32	s16, s0
 8004c22:	eef0 8a60 	vmov.f32	s17, s1
 8004c26:	f7fb ff45 	bl	8000ab4 <__aeabi_dcmpun>
 8004c2a:	b9a8      	cbnz	r0, 8004c58 <asin+0x50>
 8004c2c:	ec45 4b10 	vmov	d0, r4, r5
 8004c30:	f000 f84a 	bl	8004cc8 <fabs>
 8004c34:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <asin+0x60>)
 8004c36:	ec51 0b10 	vmov	r0, r1, d0
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f7fb ff30 	bl	8000aa0 <__aeabi_dcmpgt>
 8004c40:	b150      	cbz	r0, 8004c58 <asin+0x50>
 8004c42:	f7ff ffb7 	bl	8004bb4 <__errno>
 8004c46:	ecbd 8b02 	vpop	{d8}
 8004c4a:	2321      	movs	r3, #33	; 0x21
 8004c4c:	6003      	str	r3, [r0, #0]
 8004c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c52:	4806      	ldr	r0, [pc, #24]	; (8004c6c <asin+0x64>)
 8004c54:	f000 b89c 	b.w	8004d90 <nan>
 8004c58:	eeb0 0a48 	vmov.f32	s0, s16
 8004c5c:	eef0 0a68 	vmov.f32	s1, s17
 8004c60:	ecbd 8b02 	vpop	{d8}
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
 8004c66:	bf00      	nop
 8004c68:	3ff00000 	.word	0x3ff00000
 8004c6c:	08006370 	.word	0x08006370

08004c70 <sqrt>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	ed2d 8b02 	vpush	{d8}
 8004c76:	ec55 4b10 	vmov	r4, r5, d0
 8004c7a:	f000 f891 	bl	8004da0 <__ieee754_sqrt>
 8004c7e:	4622      	mov	r2, r4
 8004c80:	462b      	mov	r3, r5
 8004c82:	4620      	mov	r0, r4
 8004c84:	4629      	mov	r1, r5
 8004c86:	eeb0 8a40 	vmov.f32	s16, s0
 8004c8a:	eef0 8a60 	vmov.f32	s17, s1
 8004c8e:	f7fb ff11 	bl	8000ab4 <__aeabi_dcmpun>
 8004c92:	b990      	cbnz	r0, 8004cba <sqrt+0x4a>
 8004c94:	2200      	movs	r2, #0
 8004c96:	2300      	movs	r3, #0
 8004c98:	4620      	mov	r0, r4
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	f7fb fee2 	bl	8000a64 <__aeabi_dcmplt>
 8004ca0:	b158      	cbz	r0, 8004cba <sqrt+0x4a>
 8004ca2:	f7ff ff87 	bl	8004bb4 <__errno>
 8004ca6:	2321      	movs	r3, #33	; 0x21
 8004ca8:	6003      	str	r3, [r0, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2300      	movs	r3, #0
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f7fb fd8f 	bl	80007d4 <__aeabi_ddiv>
 8004cb6:	ec41 0b18 	vmov	d8, r0, r1
 8004cba:	eeb0 0a48 	vmov.f32	s0, s16
 8004cbe:	eef0 0a68 	vmov.f32	s1, s17
 8004cc2:	ecbd 8b02 	vpop	{d8}
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}

08004cc8 <fabs>:
 8004cc8:	ec51 0b10 	vmov	r0, r1, d0
 8004ccc:	ee10 2a10 	vmov	r2, s0
 8004cd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004cd4:	ec43 2b10 	vmov	d0, r2, r3
 8004cd8:	4770      	bx	lr
 8004cda:	0000      	movs	r0, r0
 8004cdc:	0000      	movs	r0, r0
	...

08004ce0 <sin>:
 8004ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ce2:	ec53 2b10 	vmov	r2, r3, d0
 8004ce6:	4828      	ldr	r0, [pc, #160]	; (8004d88 <sin+0xa8>)
 8004ce8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004cec:	4281      	cmp	r1, r0
 8004cee:	dc07      	bgt.n	8004d00 <sin+0x20>
 8004cf0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004d80 <sin+0xa0>
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	b005      	add	sp, #20
 8004cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cfc:	f000 b9f4 	b.w	80050e8 <__kernel_sin>
 8004d00:	4822      	ldr	r0, [pc, #136]	; (8004d8c <sin+0xac>)
 8004d02:	4281      	cmp	r1, r0
 8004d04:	dd09      	ble.n	8004d1a <sin+0x3a>
 8004d06:	ee10 0a10 	vmov	r0, s0
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	f7fb fa80 	bl	8000210 <__aeabi_dsub>
 8004d10:	ec41 0b10 	vmov	d0, r0, r1
 8004d14:	b005      	add	sp, #20
 8004d16:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d1a:	4668      	mov	r0, sp
 8004d1c:	f000 fcb8 	bl	8005690 <__ieee754_rem_pio2>
 8004d20:	f000 0003 	and.w	r0, r0, #3
 8004d24:	2801      	cmp	r0, #1
 8004d26:	d00c      	beq.n	8004d42 <sin+0x62>
 8004d28:	2802      	cmp	r0, #2
 8004d2a:	d011      	beq.n	8004d50 <sin+0x70>
 8004d2c:	b9f0      	cbnz	r0, 8004d6c <sin+0x8c>
 8004d2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d32:	ed9d 0b00 	vldr	d0, [sp]
 8004d36:	2001      	movs	r0, #1
 8004d38:	f000 f9d6 	bl	80050e8 <__kernel_sin>
 8004d3c:	ec51 0b10 	vmov	r0, r1, d0
 8004d40:	e7e6      	b.n	8004d10 <sin+0x30>
 8004d42:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d46:	ed9d 0b00 	vldr	d0, [sp]
 8004d4a:	f000 f905 	bl	8004f58 <__kernel_cos>
 8004d4e:	e7f5      	b.n	8004d3c <sin+0x5c>
 8004d50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d54:	ed9d 0b00 	vldr	d0, [sp]
 8004d58:	2001      	movs	r0, #1
 8004d5a:	f000 f9c5 	bl	80050e8 <__kernel_sin>
 8004d5e:	ec53 2b10 	vmov	r2, r3, d0
 8004d62:	ee10 0a10 	vmov	r0, s0
 8004d66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004d6a:	e7d1      	b.n	8004d10 <sin+0x30>
 8004d6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d70:	ed9d 0b00 	vldr	d0, [sp]
 8004d74:	f000 f8f0 	bl	8004f58 <__kernel_cos>
 8004d78:	e7f1      	b.n	8004d5e <sin+0x7e>
 8004d7a:	bf00      	nop
 8004d7c:	f3af 8000 	nop.w
	...
 8004d88:	3fe921fb 	.word	0x3fe921fb
 8004d8c:	7fefffff 	.word	0x7fefffff

08004d90 <nan>:
 8004d90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004d98 <nan+0x8>
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	00000000 	.word	0x00000000
 8004d9c:	7ff80000 	.word	0x7ff80000

08004da0 <__ieee754_sqrt>:
 8004da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	ec55 4b10 	vmov	r4, r5, d0
 8004da8:	4e67      	ldr	r6, [pc, #412]	; (8004f48 <__ieee754_sqrt+0x1a8>)
 8004daa:	43ae      	bics	r6, r5
 8004dac:	ee10 0a10 	vmov	r0, s0
 8004db0:	ee10 2a10 	vmov	r2, s0
 8004db4:	4629      	mov	r1, r5
 8004db6:	462b      	mov	r3, r5
 8004db8:	d10d      	bne.n	8004dd6 <__ieee754_sqrt+0x36>
 8004dba:	f7fb fbe1 	bl	8000580 <__aeabi_dmul>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	f7fb fa25 	bl	8000214 <__adddf3>
 8004dca:	4604      	mov	r4, r0
 8004dcc:	460d      	mov	r5, r1
 8004dce:	ec45 4b10 	vmov	d0, r4, r5
 8004dd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd6:	2d00      	cmp	r5, #0
 8004dd8:	dc0b      	bgt.n	8004df2 <__ieee754_sqrt+0x52>
 8004dda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004dde:	4326      	orrs	r6, r4
 8004de0:	d0f5      	beq.n	8004dce <__ieee754_sqrt+0x2e>
 8004de2:	b135      	cbz	r5, 8004df2 <__ieee754_sqrt+0x52>
 8004de4:	f7fb fa14 	bl	8000210 <__aeabi_dsub>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	f7fb fcf2 	bl	80007d4 <__aeabi_ddiv>
 8004df0:	e7eb      	b.n	8004dca <__ieee754_sqrt+0x2a>
 8004df2:	1509      	asrs	r1, r1, #20
 8004df4:	f000 808d 	beq.w	8004f12 <__ieee754_sqrt+0x172>
 8004df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dfc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8004e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e04:	07c9      	lsls	r1, r1, #31
 8004e06:	bf5c      	itt	pl
 8004e08:	005b      	lslpl	r3, r3, #1
 8004e0a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8004e0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004e12:	bf58      	it	pl
 8004e14:	0052      	lslpl	r2, r2, #1
 8004e16:	2500      	movs	r5, #0
 8004e18:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004e1c:	1076      	asrs	r6, r6, #1
 8004e1e:	0052      	lsls	r2, r2, #1
 8004e20:	f04f 0e16 	mov.w	lr, #22
 8004e24:	46ac      	mov	ip, r5
 8004e26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e2a:	eb0c 0001 	add.w	r0, ip, r1
 8004e2e:	4298      	cmp	r0, r3
 8004e30:	bfde      	ittt	le
 8004e32:	1a1b      	suble	r3, r3, r0
 8004e34:	eb00 0c01 	addle.w	ip, r0, r1
 8004e38:	186d      	addle	r5, r5, r1
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	f1be 0e01 	subs.w	lr, lr, #1
 8004e40:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004e44:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004e48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004e4c:	d1ed      	bne.n	8004e2a <__ieee754_sqrt+0x8a>
 8004e4e:	4674      	mov	r4, lr
 8004e50:	2720      	movs	r7, #32
 8004e52:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004e56:	4563      	cmp	r3, ip
 8004e58:	eb01 000e 	add.w	r0, r1, lr
 8004e5c:	dc02      	bgt.n	8004e64 <__ieee754_sqrt+0xc4>
 8004e5e:	d113      	bne.n	8004e88 <__ieee754_sqrt+0xe8>
 8004e60:	4290      	cmp	r0, r2
 8004e62:	d811      	bhi.n	8004e88 <__ieee754_sqrt+0xe8>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	eb00 0e01 	add.w	lr, r0, r1
 8004e6a:	da57      	bge.n	8004f1c <__ieee754_sqrt+0x17c>
 8004e6c:	f1be 0f00 	cmp.w	lr, #0
 8004e70:	db54      	blt.n	8004f1c <__ieee754_sqrt+0x17c>
 8004e72:	f10c 0801 	add.w	r8, ip, #1
 8004e76:	eba3 030c 	sub.w	r3, r3, ip
 8004e7a:	4290      	cmp	r0, r2
 8004e7c:	bf88      	it	hi
 8004e7e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004e82:	1a12      	subs	r2, r2, r0
 8004e84:	440c      	add	r4, r1
 8004e86:	46c4      	mov	ip, r8
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	3f01      	subs	r7, #1
 8004e8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004e90:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004e94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004e98:	d1dd      	bne.n	8004e56 <__ieee754_sqrt+0xb6>
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	d01b      	beq.n	8004ed6 <__ieee754_sqrt+0x136>
 8004e9e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004f4c <__ieee754_sqrt+0x1ac>
 8004ea2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004f50 <__ieee754_sqrt+0x1b0>
 8004ea6:	e9da 0100 	ldrd	r0, r1, [sl]
 8004eaa:	e9db 2300 	ldrd	r2, r3, [fp]
 8004eae:	f7fb f9af 	bl	8000210 <__aeabi_dsub>
 8004eb2:	e9da 8900 	ldrd	r8, r9, [sl]
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4640      	mov	r0, r8
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	f7fb fddb 	bl	8000a78 <__aeabi_dcmple>
 8004ec2:	b140      	cbz	r0, 8004ed6 <__ieee754_sqrt+0x136>
 8004ec4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004ec8:	e9da 0100 	ldrd	r0, r1, [sl]
 8004ecc:	e9db 2300 	ldrd	r2, r3, [fp]
 8004ed0:	d126      	bne.n	8004f20 <__ieee754_sqrt+0x180>
 8004ed2:	3501      	adds	r5, #1
 8004ed4:	463c      	mov	r4, r7
 8004ed6:	106a      	asrs	r2, r5, #1
 8004ed8:	0863      	lsrs	r3, r4, #1
 8004eda:	07e9      	lsls	r1, r5, #31
 8004edc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004ee0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004ee4:	bf48      	it	mi
 8004ee6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004eea:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8004eee:	461c      	mov	r4, r3
 8004ef0:	e76d      	b.n	8004dce <__ieee754_sqrt+0x2e>
 8004ef2:	0ad3      	lsrs	r3, r2, #11
 8004ef4:	3815      	subs	r0, #21
 8004ef6:	0552      	lsls	r2, r2, #21
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0fa      	beq.n	8004ef2 <__ieee754_sqrt+0x152>
 8004efc:	02dc      	lsls	r4, r3, #11
 8004efe:	d50a      	bpl.n	8004f16 <__ieee754_sqrt+0x176>
 8004f00:	f1c1 0420 	rsb	r4, r1, #32
 8004f04:	fa22 f404 	lsr.w	r4, r2, r4
 8004f08:	1e4d      	subs	r5, r1, #1
 8004f0a:	408a      	lsls	r2, r1
 8004f0c:	4323      	orrs	r3, r4
 8004f0e:	1b41      	subs	r1, r0, r5
 8004f10:	e772      	b.n	8004df8 <__ieee754_sqrt+0x58>
 8004f12:	4608      	mov	r0, r1
 8004f14:	e7f0      	b.n	8004ef8 <__ieee754_sqrt+0x158>
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	3101      	adds	r1, #1
 8004f1a:	e7ef      	b.n	8004efc <__ieee754_sqrt+0x15c>
 8004f1c:	46e0      	mov	r8, ip
 8004f1e:	e7aa      	b.n	8004e76 <__ieee754_sqrt+0xd6>
 8004f20:	f7fb f978 	bl	8000214 <__adddf3>
 8004f24:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	4649      	mov	r1, r9
 8004f30:	f7fb fd98 	bl	8000a64 <__aeabi_dcmplt>
 8004f34:	b120      	cbz	r0, 8004f40 <__ieee754_sqrt+0x1a0>
 8004f36:	1ca0      	adds	r0, r4, #2
 8004f38:	bf08      	it	eq
 8004f3a:	3501      	addeq	r5, #1
 8004f3c:	3402      	adds	r4, #2
 8004f3e:	e7ca      	b.n	8004ed6 <__ieee754_sqrt+0x136>
 8004f40:	3401      	adds	r4, #1
 8004f42:	f024 0401 	bic.w	r4, r4, #1
 8004f46:	e7c6      	b.n	8004ed6 <__ieee754_sqrt+0x136>
 8004f48:	7ff00000 	.word	0x7ff00000
 8004f4c:	20000060 	.word	0x20000060
 8004f50:	20000068 	.word	0x20000068
 8004f54:	00000000 	.word	0x00000000

08004f58 <__kernel_cos>:
 8004f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5c:	ec57 6b10 	vmov	r6, r7, d0
 8004f60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004f64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004f68:	ed8d 1b00 	vstr	d1, [sp]
 8004f6c:	da07      	bge.n	8004f7e <__kernel_cos+0x26>
 8004f6e:	ee10 0a10 	vmov	r0, s0
 8004f72:	4639      	mov	r1, r7
 8004f74:	f7fb fdb4 	bl	8000ae0 <__aeabi_d2iz>
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	f000 8088 	beq.w	800508e <__kernel_cos+0x136>
 8004f7e:	4632      	mov	r2, r6
 8004f80:	463b      	mov	r3, r7
 8004f82:	4630      	mov	r0, r6
 8004f84:	4639      	mov	r1, r7
 8004f86:	f7fb fafb 	bl	8000580 <__aeabi_dmul>
 8004f8a:	4b51      	ldr	r3, [pc, #324]	; (80050d0 <__kernel_cos+0x178>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	4604      	mov	r4, r0
 8004f90:	460d      	mov	r5, r1
 8004f92:	f7fb faf5 	bl	8000580 <__aeabi_dmul>
 8004f96:	a340      	add	r3, pc, #256	; (adr r3, 8005098 <__kernel_cos+0x140>)
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	4682      	mov	sl, r0
 8004f9e:	468b      	mov	fp, r1
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f7fb faec 	bl	8000580 <__aeabi_dmul>
 8004fa8:	a33d      	add	r3, pc, #244	; (adr r3, 80050a0 <__kernel_cos+0x148>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f7fb f931 	bl	8000214 <__adddf3>
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	462b      	mov	r3, r5
 8004fb6:	f7fb fae3 	bl	8000580 <__aeabi_dmul>
 8004fba:	a33b      	add	r3, pc, #236	; (adr r3, 80050a8 <__kernel_cos+0x150>)
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f7fb f926 	bl	8000210 <__aeabi_dsub>
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	462b      	mov	r3, r5
 8004fc8:	f7fb fada 	bl	8000580 <__aeabi_dmul>
 8004fcc:	a338      	add	r3, pc, #224	; (adr r3, 80050b0 <__kernel_cos+0x158>)
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	f7fb f91f 	bl	8000214 <__adddf3>
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	462b      	mov	r3, r5
 8004fda:	f7fb fad1 	bl	8000580 <__aeabi_dmul>
 8004fde:	a336      	add	r3, pc, #216	; (adr r3, 80050b8 <__kernel_cos+0x160>)
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f7fb f914 	bl	8000210 <__aeabi_dsub>
 8004fe8:	4622      	mov	r2, r4
 8004fea:	462b      	mov	r3, r5
 8004fec:	f7fb fac8 	bl	8000580 <__aeabi_dmul>
 8004ff0:	a333      	add	r3, pc, #204	; (adr r3, 80050c0 <__kernel_cos+0x168>)
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	f7fb f90d 	bl	8000214 <__adddf3>
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	f7fb fabf 	bl	8000580 <__aeabi_dmul>
 8005002:	4622      	mov	r2, r4
 8005004:	462b      	mov	r3, r5
 8005006:	f7fb fabb 	bl	8000580 <__aeabi_dmul>
 800500a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800500e:	4604      	mov	r4, r0
 8005010:	460d      	mov	r5, r1
 8005012:	4630      	mov	r0, r6
 8005014:	4639      	mov	r1, r7
 8005016:	f7fb fab3 	bl	8000580 <__aeabi_dmul>
 800501a:	460b      	mov	r3, r1
 800501c:	4602      	mov	r2, r0
 800501e:	4629      	mov	r1, r5
 8005020:	4620      	mov	r0, r4
 8005022:	f7fb f8f5 	bl	8000210 <__aeabi_dsub>
 8005026:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <__kernel_cos+0x17c>)
 8005028:	4598      	cmp	r8, r3
 800502a:	4606      	mov	r6, r0
 800502c:	460f      	mov	r7, r1
 800502e:	dc10      	bgt.n	8005052 <__kernel_cos+0xfa>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4650      	mov	r0, sl
 8005036:	4659      	mov	r1, fp
 8005038:	f7fb f8ea 	bl	8000210 <__aeabi_dsub>
 800503c:	460b      	mov	r3, r1
 800503e:	4926      	ldr	r1, [pc, #152]	; (80050d8 <__kernel_cos+0x180>)
 8005040:	4602      	mov	r2, r0
 8005042:	2000      	movs	r0, #0
 8005044:	f7fb f8e4 	bl	8000210 <__aeabi_dsub>
 8005048:	ec41 0b10 	vmov	d0, r0, r1
 800504c:	b003      	add	sp, #12
 800504e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005052:	4b22      	ldr	r3, [pc, #136]	; (80050dc <__kernel_cos+0x184>)
 8005054:	4920      	ldr	r1, [pc, #128]	; (80050d8 <__kernel_cos+0x180>)
 8005056:	4598      	cmp	r8, r3
 8005058:	bfcc      	ite	gt
 800505a:	4d21      	ldrgt	r5, [pc, #132]	; (80050e0 <__kernel_cos+0x188>)
 800505c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005060:	2400      	movs	r4, #0
 8005062:	4622      	mov	r2, r4
 8005064:	462b      	mov	r3, r5
 8005066:	2000      	movs	r0, #0
 8005068:	f7fb f8d2 	bl	8000210 <__aeabi_dsub>
 800506c:	4622      	mov	r2, r4
 800506e:	4680      	mov	r8, r0
 8005070:	4689      	mov	r9, r1
 8005072:	462b      	mov	r3, r5
 8005074:	4650      	mov	r0, sl
 8005076:	4659      	mov	r1, fp
 8005078:	f7fb f8ca 	bl	8000210 <__aeabi_dsub>
 800507c:	4632      	mov	r2, r6
 800507e:	463b      	mov	r3, r7
 8005080:	f7fb f8c6 	bl	8000210 <__aeabi_dsub>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4640      	mov	r0, r8
 800508a:	4649      	mov	r1, r9
 800508c:	e7da      	b.n	8005044 <__kernel_cos+0xec>
 800508e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80050c8 <__kernel_cos+0x170>
 8005092:	e7db      	b.n	800504c <__kernel_cos+0xf4>
 8005094:	f3af 8000 	nop.w
 8005098:	be8838d4 	.word	0xbe8838d4
 800509c:	bda8fae9 	.word	0xbda8fae9
 80050a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80050a4:	3e21ee9e 	.word	0x3e21ee9e
 80050a8:	809c52ad 	.word	0x809c52ad
 80050ac:	3e927e4f 	.word	0x3e927e4f
 80050b0:	19cb1590 	.word	0x19cb1590
 80050b4:	3efa01a0 	.word	0x3efa01a0
 80050b8:	16c15177 	.word	0x16c15177
 80050bc:	3f56c16c 	.word	0x3f56c16c
 80050c0:	5555554c 	.word	0x5555554c
 80050c4:	3fa55555 	.word	0x3fa55555
 80050c8:	00000000 	.word	0x00000000
 80050cc:	3ff00000 	.word	0x3ff00000
 80050d0:	3fe00000 	.word	0x3fe00000
 80050d4:	3fd33332 	.word	0x3fd33332
 80050d8:	3ff00000 	.word	0x3ff00000
 80050dc:	3fe90000 	.word	0x3fe90000
 80050e0:	3fd20000 	.word	0x3fd20000
 80050e4:	00000000 	.word	0x00000000

080050e8 <__kernel_sin>:
 80050e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	ed2d 8b04 	vpush	{d8-d9}
 80050f0:	eeb0 8a41 	vmov.f32	s16, s2
 80050f4:	eef0 8a61 	vmov.f32	s17, s3
 80050f8:	ec55 4b10 	vmov	r4, r5, d0
 80050fc:	b083      	sub	sp, #12
 80050fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005102:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005106:	9001      	str	r0, [sp, #4]
 8005108:	da06      	bge.n	8005118 <__kernel_sin+0x30>
 800510a:	ee10 0a10 	vmov	r0, s0
 800510e:	4629      	mov	r1, r5
 8005110:	f7fb fce6 	bl	8000ae0 <__aeabi_d2iz>
 8005114:	2800      	cmp	r0, #0
 8005116:	d051      	beq.n	80051bc <__kernel_sin+0xd4>
 8005118:	4622      	mov	r2, r4
 800511a:	462b      	mov	r3, r5
 800511c:	4620      	mov	r0, r4
 800511e:	4629      	mov	r1, r5
 8005120:	f7fb fa2e 	bl	8000580 <__aeabi_dmul>
 8005124:	4682      	mov	sl, r0
 8005126:	468b      	mov	fp, r1
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4620      	mov	r0, r4
 800512e:	4629      	mov	r1, r5
 8005130:	f7fb fa26 	bl	8000580 <__aeabi_dmul>
 8005134:	a341      	add	r3, pc, #260	; (adr r3, 800523c <__kernel_sin+0x154>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	4680      	mov	r8, r0
 800513c:	4689      	mov	r9, r1
 800513e:	4650      	mov	r0, sl
 8005140:	4659      	mov	r1, fp
 8005142:	f7fb fa1d 	bl	8000580 <__aeabi_dmul>
 8005146:	a33f      	add	r3, pc, #252	; (adr r3, 8005244 <__kernel_sin+0x15c>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f7fb f860 	bl	8000210 <__aeabi_dsub>
 8005150:	4652      	mov	r2, sl
 8005152:	465b      	mov	r3, fp
 8005154:	f7fb fa14 	bl	8000580 <__aeabi_dmul>
 8005158:	a33c      	add	r3, pc, #240	; (adr r3, 800524c <__kernel_sin+0x164>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb f859 	bl	8000214 <__adddf3>
 8005162:	4652      	mov	r2, sl
 8005164:	465b      	mov	r3, fp
 8005166:	f7fb fa0b 	bl	8000580 <__aeabi_dmul>
 800516a:	a33a      	add	r3, pc, #232	; (adr r3, 8005254 <__kernel_sin+0x16c>)
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f7fb f84e 	bl	8000210 <__aeabi_dsub>
 8005174:	4652      	mov	r2, sl
 8005176:	465b      	mov	r3, fp
 8005178:	f7fb fa02 	bl	8000580 <__aeabi_dmul>
 800517c:	a337      	add	r3, pc, #220	; (adr r3, 800525c <__kernel_sin+0x174>)
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f7fb f847 	bl	8000214 <__adddf3>
 8005186:	9b01      	ldr	r3, [sp, #4]
 8005188:	4606      	mov	r6, r0
 800518a:	460f      	mov	r7, r1
 800518c:	b9eb      	cbnz	r3, 80051ca <__kernel_sin+0xe2>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4650      	mov	r0, sl
 8005194:	4659      	mov	r1, fp
 8005196:	f7fb f9f3 	bl	8000580 <__aeabi_dmul>
 800519a:	a325      	add	r3, pc, #148	; (adr r3, 8005230 <__kernel_sin+0x148>)
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	f7fb f836 	bl	8000210 <__aeabi_dsub>
 80051a4:	4642      	mov	r2, r8
 80051a6:	464b      	mov	r3, r9
 80051a8:	f7fb f9ea 	bl	8000580 <__aeabi_dmul>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4620      	mov	r0, r4
 80051b2:	4629      	mov	r1, r5
 80051b4:	f7fb f82e 	bl	8000214 <__adddf3>
 80051b8:	4604      	mov	r4, r0
 80051ba:	460d      	mov	r5, r1
 80051bc:	ec45 4b10 	vmov	d0, r4, r5
 80051c0:	b003      	add	sp, #12
 80051c2:	ecbd 8b04 	vpop	{d8-d9}
 80051c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ca:	4b1b      	ldr	r3, [pc, #108]	; (8005238 <__kernel_sin+0x150>)
 80051cc:	ec51 0b18 	vmov	r0, r1, d8
 80051d0:	2200      	movs	r2, #0
 80051d2:	f7fb f9d5 	bl	8000580 <__aeabi_dmul>
 80051d6:	4632      	mov	r2, r6
 80051d8:	ec41 0b19 	vmov	d9, r0, r1
 80051dc:	463b      	mov	r3, r7
 80051de:	4640      	mov	r0, r8
 80051e0:	4649      	mov	r1, r9
 80051e2:	f7fb f9cd 	bl	8000580 <__aeabi_dmul>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	ec51 0b19 	vmov	r0, r1, d9
 80051ee:	f7fb f80f 	bl	8000210 <__aeabi_dsub>
 80051f2:	4652      	mov	r2, sl
 80051f4:	465b      	mov	r3, fp
 80051f6:	f7fb f9c3 	bl	8000580 <__aeabi_dmul>
 80051fa:	ec53 2b18 	vmov	r2, r3, d8
 80051fe:	f7fb f807 	bl	8000210 <__aeabi_dsub>
 8005202:	a30b      	add	r3, pc, #44	; (adr r3, 8005230 <__kernel_sin+0x148>)
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	4640      	mov	r0, r8
 800520e:	4649      	mov	r1, r9
 8005210:	f7fb f9b6 	bl	8000580 <__aeabi_dmul>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4630      	mov	r0, r6
 800521a:	4639      	mov	r1, r7
 800521c:	f7fa fffa 	bl	8000214 <__adddf3>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4620      	mov	r0, r4
 8005226:	4629      	mov	r1, r5
 8005228:	f7fa fff2 	bl	8000210 <__aeabi_dsub>
 800522c:	e7c4      	b.n	80051b8 <__kernel_sin+0xd0>
 800522e:	bf00      	nop
 8005230:	55555549 	.word	0x55555549
 8005234:	3fc55555 	.word	0x3fc55555
 8005238:	3fe00000 	.word	0x3fe00000
 800523c:	5acfd57c 	.word	0x5acfd57c
 8005240:	3de5d93a 	.word	0x3de5d93a
 8005244:	8a2b9ceb 	.word	0x8a2b9ceb
 8005248:	3e5ae5e6 	.word	0x3e5ae5e6
 800524c:	57b1fe7d 	.word	0x57b1fe7d
 8005250:	3ec71de3 	.word	0x3ec71de3
 8005254:	19c161d5 	.word	0x19c161d5
 8005258:	3f2a01a0 	.word	0x3f2a01a0
 800525c:	1110f8a6 	.word	0x1110f8a6
 8005260:	3f811111 	.word	0x3f811111
 8005264:	00000000 	.word	0x00000000

08005268 <__ieee754_asin>:
 8005268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526c:	ed2d 8b04 	vpush	{d8-d9}
 8005270:	ec55 4b10 	vmov	r4, r5, d0
 8005274:	4bcc      	ldr	r3, [pc, #816]	; (80055a8 <__ieee754_asin+0x340>)
 8005276:	b083      	sub	sp, #12
 8005278:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800527c:	4598      	cmp	r8, r3
 800527e:	9501      	str	r5, [sp, #4]
 8005280:	dd33      	ble.n	80052ea <__ieee754_asin+0x82>
 8005282:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8005286:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800528a:	ea58 0804 	orrs.w	r8, r8, r4
 800528e:	d117      	bne.n	80052c0 <__ieee754_asin+0x58>
 8005290:	a3ab      	add	r3, pc, #684	; (adr r3, 8005540 <__ieee754_asin+0x2d8>)
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	ee10 0a10 	vmov	r0, s0
 800529a:	4629      	mov	r1, r5
 800529c:	f7fb f970 	bl	8000580 <__aeabi_dmul>
 80052a0:	a3a9      	add	r3, pc, #676	; (adr r3, 8005548 <__ieee754_asin+0x2e0>)
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	4606      	mov	r6, r0
 80052a8:	460f      	mov	r7, r1
 80052aa:	4620      	mov	r0, r4
 80052ac:	4629      	mov	r1, r5
 80052ae:	f7fb f967 	bl	8000580 <__aeabi_dmul>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4630      	mov	r0, r6
 80052b8:	4639      	mov	r1, r7
 80052ba:	f7fa ffab 	bl	8000214 <__adddf3>
 80052be:	e00b      	b.n	80052d8 <__ieee754_asin+0x70>
 80052c0:	ee10 2a10 	vmov	r2, s0
 80052c4:	462b      	mov	r3, r5
 80052c6:	ee10 0a10 	vmov	r0, s0
 80052ca:	4629      	mov	r1, r5
 80052cc:	f7fa ffa0 	bl	8000210 <__aeabi_dsub>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	f7fb fa7e 	bl	80007d4 <__aeabi_ddiv>
 80052d8:	4604      	mov	r4, r0
 80052da:	460d      	mov	r5, r1
 80052dc:	ec45 4b10 	vmov	d0, r4, r5
 80052e0:	b003      	add	sp, #12
 80052e2:	ecbd 8b04 	vpop	{d8-d9}
 80052e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ea:	4bb0      	ldr	r3, [pc, #704]	; (80055ac <__ieee754_asin+0x344>)
 80052ec:	4598      	cmp	r8, r3
 80052ee:	dc11      	bgt.n	8005314 <__ieee754_asin+0xac>
 80052f0:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80052f4:	f280 80ae 	bge.w	8005454 <__ieee754_asin+0x1ec>
 80052f8:	a395      	add	r3, pc, #596	; (adr r3, 8005550 <__ieee754_asin+0x2e8>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	ee10 0a10 	vmov	r0, s0
 8005302:	4629      	mov	r1, r5
 8005304:	f7fa ff86 	bl	8000214 <__adddf3>
 8005308:	4ba9      	ldr	r3, [pc, #676]	; (80055b0 <__ieee754_asin+0x348>)
 800530a:	2200      	movs	r2, #0
 800530c:	f7fb fbc8 	bl	8000aa0 <__aeabi_dcmpgt>
 8005310:	2800      	cmp	r0, #0
 8005312:	d1e3      	bne.n	80052dc <__ieee754_asin+0x74>
 8005314:	ec45 4b10 	vmov	d0, r4, r5
 8005318:	f7ff fcd6 	bl	8004cc8 <fabs>
 800531c:	49a4      	ldr	r1, [pc, #656]	; (80055b0 <__ieee754_asin+0x348>)
 800531e:	ec53 2b10 	vmov	r2, r3, d0
 8005322:	2000      	movs	r0, #0
 8005324:	f7fa ff74 	bl	8000210 <__aeabi_dsub>
 8005328:	4ba2      	ldr	r3, [pc, #648]	; (80055b4 <__ieee754_asin+0x34c>)
 800532a:	2200      	movs	r2, #0
 800532c:	f7fb f928 	bl	8000580 <__aeabi_dmul>
 8005330:	a389      	add	r3, pc, #548	; (adr r3, 8005558 <__ieee754_asin+0x2f0>)
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	4604      	mov	r4, r0
 8005338:	460d      	mov	r5, r1
 800533a:	f7fb f921 	bl	8000580 <__aeabi_dmul>
 800533e:	a388      	add	r3, pc, #544	; (adr r3, 8005560 <__ieee754_asin+0x2f8>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f7fa ff66 	bl	8000214 <__adddf3>
 8005348:	4622      	mov	r2, r4
 800534a:	462b      	mov	r3, r5
 800534c:	f7fb f918 	bl	8000580 <__aeabi_dmul>
 8005350:	a385      	add	r3, pc, #532	; (adr r3, 8005568 <__ieee754_asin+0x300>)
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f7fa ff5b 	bl	8000210 <__aeabi_dsub>
 800535a:	4622      	mov	r2, r4
 800535c:	462b      	mov	r3, r5
 800535e:	f7fb f90f 	bl	8000580 <__aeabi_dmul>
 8005362:	a383      	add	r3, pc, #524	; (adr r3, 8005570 <__ieee754_asin+0x308>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f7fa ff54 	bl	8000214 <__adddf3>
 800536c:	4622      	mov	r2, r4
 800536e:	462b      	mov	r3, r5
 8005370:	f7fb f906 	bl	8000580 <__aeabi_dmul>
 8005374:	a380      	add	r3, pc, #512	; (adr r3, 8005578 <__ieee754_asin+0x310>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f7fa ff49 	bl	8000210 <__aeabi_dsub>
 800537e:	4622      	mov	r2, r4
 8005380:	462b      	mov	r3, r5
 8005382:	f7fb f8fd 	bl	8000580 <__aeabi_dmul>
 8005386:	a37e      	add	r3, pc, #504	; (adr r3, 8005580 <__ieee754_asin+0x318>)
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	f7fa ff42 	bl	8000214 <__adddf3>
 8005390:	4622      	mov	r2, r4
 8005392:	462b      	mov	r3, r5
 8005394:	f7fb f8f4 	bl	8000580 <__aeabi_dmul>
 8005398:	a37b      	add	r3, pc, #492	; (adr r3, 8005588 <__ieee754_asin+0x320>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	ec41 0b18 	vmov	d8, r0, r1
 80053a2:	4620      	mov	r0, r4
 80053a4:	4629      	mov	r1, r5
 80053a6:	f7fb f8eb 	bl	8000580 <__aeabi_dmul>
 80053aa:	a379      	add	r3, pc, #484	; (adr r3, 8005590 <__ieee754_asin+0x328>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f7fa ff2e 	bl	8000210 <__aeabi_dsub>
 80053b4:	4622      	mov	r2, r4
 80053b6:	462b      	mov	r3, r5
 80053b8:	f7fb f8e2 	bl	8000580 <__aeabi_dmul>
 80053bc:	a376      	add	r3, pc, #472	; (adr r3, 8005598 <__ieee754_asin+0x330>)
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f7fa ff27 	bl	8000214 <__adddf3>
 80053c6:	4622      	mov	r2, r4
 80053c8:	462b      	mov	r3, r5
 80053ca:	f7fb f8d9 	bl	8000580 <__aeabi_dmul>
 80053ce:	a374      	add	r3, pc, #464	; (adr r3, 80055a0 <__ieee754_asin+0x338>)
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f7fa ff1c 	bl	8000210 <__aeabi_dsub>
 80053d8:	4622      	mov	r2, r4
 80053da:	462b      	mov	r3, r5
 80053dc:	f7fb f8d0 	bl	8000580 <__aeabi_dmul>
 80053e0:	4b73      	ldr	r3, [pc, #460]	; (80055b0 <__ieee754_asin+0x348>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	f7fa ff16 	bl	8000214 <__adddf3>
 80053e8:	ec45 4b10 	vmov	d0, r4, r5
 80053ec:	4606      	mov	r6, r0
 80053ee:	460f      	mov	r7, r1
 80053f0:	f7ff fcd6 	bl	8004da0 <__ieee754_sqrt>
 80053f4:	4b70      	ldr	r3, [pc, #448]	; (80055b8 <__ieee754_asin+0x350>)
 80053f6:	4598      	cmp	r8, r3
 80053f8:	ec5b ab10 	vmov	sl, fp, d0
 80053fc:	f340 80de 	ble.w	80055bc <__ieee754_asin+0x354>
 8005400:	4632      	mov	r2, r6
 8005402:	463b      	mov	r3, r7
 8005404:	ec51 0b18 	vmov	r0, r1, d8
 8005408:	f7fb f9e4 	bl	80007d4 <__aeabi_ddiv>
 800540c:	4652      	mov	r2, sl
 800540e:	465b      	mov	r3, fp
 8005410:	f7fb f8b6 	bl	8000580 <__aeabi_dmul>
 8005414:	4652      	mov	r2, sl
 8005416:	465b      	mov	r3, fp
 8005418:	f7fa fefc 	bl	8000214 <__adddf3>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	f7fa fef8 	bl	8000214 <__adddf3>
 8005424:	a348      	add	r3, pc, #288	; (adr r3, 8005548 <__ieee754_asin+0x2e0>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f7fa fef1 	bl	8000210 <__aeabi_dsub>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	a143      	add	r1, pc, #268	; (adr r1, 8005540 <__ieee754_asin+0x2d8>)
 8005434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005438:	f7fa feea 	bl	8000210 <__aeabi_dsub>
 800543c:	9b01      	ldr	r3, [sp, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	bfdc      	itt	le
 8005442:	4602      	movle	r2, r0
 8005444:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8005448:	4604      	mov	r4, r0
 800544a:	460d      	mov	r5, r1
 800544c:	bfdc      	itt	le
 800544e:	4614      	movle	r4, r2
 8005450:	461d      	movle	r5, r3
 8005452:	e743      	b.n	80052dc <__ieee754_asin+0x74>
 8005454:	ee10 2a10 	vmov	r2, s0
 8005458:	ee10 0a10 	vmov	r0, s0
 800545c:	462b      	mov	r3, r5
 800545e:	4629      	mov	r1, r5
 8005460:	f7fb f88e 	bl	8000580 <__aeabi_dmul>
 8005464:	a33c      	add	r3, pc, #240	; (adr r3, 8005558 <__ieee754_asin+0x2f0>)
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	4606      	mov	r6, r0
 800546c:	460f      	mov	r7, r1
 800546e:	f7fb f887 	bl	8000580 <__aeabi_dmul>
 8005472:	a33b      	add	r3, pc, #236	; (adr r3, 8005560 <__ieee754_asin+0x2f8>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f7fa fecc 	bl	8000214 <__adddf3>
 800547c:	4632      	mov	r2, r6
 800547e:	463b      	mov	r3, r7
 8005480:	f7fb f87e 	bl	8000580 <__aeabi_dmul>
 8005484:	a338      	add	r3, pc, #224	; (adr r3, 8005568 <__ieee754_asin+0x300>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f7fa fec1 	bl	8000210 <__aeabi_dsub>
 800548e:	4632      	mov	r2, r6
 8005490:	463b      	mov	r3, r7
 8005492:	f7fb f875 	bl	8000580 <__aeabi_dmul>
 8005496:	a336      	add	r3, pc, #216	; (adr r3, 8005570 <__ieee754_asin+0x308>)
 8005498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549c:	f7fa feba 	bl	8000214 <__adddf3>
 80054a0:	4632      	mov	r2, r6
 80054a2:	463b      	mov	r3, r7
 80054a4:	f7fb f86c 	bl	8000580 <__aeabi_dmul>
 80054a8:	a333      	add	r3, pc, #204	; (adr r3, 8005578 <__ieee754_asin+0x310>)
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	f7fa feaf 	bl	8000210 <__aeabi_dsub>
 80054b2:	4632      	mov	r2, r6
 80054b4:	463b      	mov	r3, r7
 80054b6:	f7fb f863 	bl	8000580 <__aeabi_dmul>
 80054ba:	a331      	add	r3, pc, #196	; (adr r3, 8005580 <__ieee754_asin+0x318>)
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f7fa fea8 	bl	8000214 <__adddf3>
 80054c4:	4632      	mov	r2, r6
 80054c6:	463b      	mov	r3, r7
 80054c8:	f7fb f85a 	bl	8000580 <__aeabi_dmul>
 80054cc:	a32e      	add	r3, pc, #184	; (adr r3, 8005588 <__ieee754_asin+0x320>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	4680      	mov	r8, r0
 80054d4:	4689      	mov	r9, r1
 80054d6:	4630      	mov	r0, r6
 80054d8:	4639      	mov	r1, r7
 80054da:	f7fb f851 	bl	8000580 <__aeabi_dmul>
 80054de:	a32c      	add	r3, pc, #176	; (adr r3, 8005590 <__ieee754_asin+0x328>)
 80054e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e4:	f7fa fe94 	bl	8000210 <__aeabi_dsub>
 80054e8:	4632      	mov	r2, r6
 80054ea:	463b      	mov	r3, r7
 80054ec:	f7fb f848 	bl	8000580 <__aeabi_dmul>
 80054f0:	a329      	add	r3, pc, #164	; (adr r3, 8005598 <__ieee754_asin+0x330>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f7fa fe8d 	bl	8000214 <__adddf3>
 80054fa:	4632      	mov	r2, r6
 80054fc:	463b      	mov	r3, r7
 80054fe:	f7fb f83f 	bl	8000580 <__aeabi_dmul>
 8005502:	a327      	add	r3, pc, #156	; (adr r3, 80055a0 <__ieee754_asin+0x338>)
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f7fa fe82 	bl	8000210 <__aeabi_dsub>
 800550c:	4632      	mov	r2, r6
 800550e:	463b      	mov	r3, r7
 8005510:	f7fb f836 	bl	8000580 <__aeabi_dmul>
 8005514:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <__ieee754_asin+0x348>)
 8005516:	2200      	movs	r2, #0
 8005518:	f7fa fe7c 	bl	8000214 <__adddf3>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4640      	mov	r0, r8
 8005522:	4649      	mov	r1, r9
 8005524:	f7fb f956 	bl	80007d4 <__aeabi_ddiv>
 8005528:	4622      	mov	r2, r4
 800552a:	462b      	mov	r3, r5
 800552c:	f7fb f828 	bl	8000580 <__aeabi_dmul>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4620      	mov	r0, r4
 8005536:	4629      	mov	r1, r5
 8005538:	e6bf      	b.n	80052ba <__ieee754_asin+0x52>
 800553a:	bf00      	nop
 800553c:	f3af 8000 	nop.w
 8005540:	54442d18 	.word	0x54442d18
 8005544:	3ff921fb 	.word	0x3ff921fb
 8005548:	33145c07 	.word	0x33145c07
 800554c:	3c91a626 	.word	0x3c91a626
 8005550:	8800759c 	.word	0x8800759c
 8005554:	7e37e43c 	.word	0x7e37e43c
 8005558:	0dfdf709 	.word	0x0dfdf709
 800555c:	3f023de1 	.word	0x3f023de1
 8005560:	7501b288 	.word	0x7501b288
 8005564:	3f49efe0 	.word	0x3f49efe0
 8005568:	b5688f3b 	.word	0xb5688f3b
 800556c:	3fa48228 	.word	0x3fa48228
 8005570:	0e884455 	.word	0x0e884455
 8005574:	3fc9c155 	.word	0x3fc9c155
 8005578:	03eb6f7d 	.word	0x03eb6f7d
 800557c:	3fd4d612 	.word	0x3fd4d612
 8005580:	55555555 	.word	0x55555555
 8005584:	3fc55555 	.word	0x3fc55555
 8005588:	b12e9282 	.word	0xb12e9282
 800558c:	3fb3b8c5 	.word	0x3fb3b8c5
 8005590:	1b8d0159 	.word	0x1b8d0159
 8005594:	3fe6066c 	.word	0x3fe6066c
 8005598:	9c598ac8 	.word	0x9c598ac8
 800559c:	40002ae5 	.word	0x40002ae5
 80055a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80055a4:	40033a27 	.word	0x40033a27
 80055a8:	3fefffff 	.word	0x3fefffff
 80055ac:	3fdfffff 	.word	0x3fdfffff
 80055b0:	3ff00000 	.word	0x3ff00000
 80055b4:	3fe00000 	.word	0x3fe00000
 80055b8:	3fef3332 	.word	0x3fef3332
 80055bc:	ee10 2a10 	vmov	r2, s0
 80055c0:	ee10 0a10 	vmov	r0, s0
 80055c4:	465b      	mov	r3, fp
 80055c6:	4659      	mov	r1, fp
 80055c8:	f7fa fe24 	bl	8000214 <__adddf3>
 80055cc:	4632      	mov	r2, r6
 80055ce:	463b      	mov	r3, r7
 80055d0:	ec41 0b19 	vmov	d9, r0, r1
 80055d4:	ec51 0b18 	vmov	r0, r1, d8
 80055d8:	f7fb f8fc 	bl	80007d4 <__aeabi_ddiv>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	ec51 0b19 	vmov	r0, r1, d9
 80055e4:	f7fa ffcc 	bl	8000580 <__aeabi_dmul>
 80055e8:	f04f 0800 	mov.w	r8, #0
 80055ec:	4606      	mov	r6, r0
 80055ee:	460f      	mov	r7, r1
 80055f0:	4642      	mov	r2, r8
 80055f2:	465b      	mov	r3, fp
 80055f4:	4640      	mov	r0, r8
 80055f6:	4659      	mov	r1, fp
 80055f8:	f7fa ffc2 	bl	8000580 <__aeabi_dmul>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4620      	mov	r0, r4
 8005602:	4629      	mov	r1, r5
 8005604:	f7fa fe04 	bl	8000210 <__aeabi_dsub>
 8005608:	4642      	mov	r2, r8
 800560a:	4604      	mov	r4, r0
 800560c:	460d      	mov	r5, r1
 800560e:	465b      	mov	r3, fp
 8005610:	4650      	mov	r0, sl
 8005612:	4659      	mov	r1, fp
 8005614:	f7fa fdfe 	bl	8000214 <__adddf3>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4620      	mov	r0, r4
 800561e:	4629      	mov	r1, r5
 8005620:	f7fb f8d8 	bl	80007d4 <__aeabi_ddiv>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	f7fa fdf4 	bl	8000214 <__adddf3>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	a113      	add	r1, pc, #76	; (adr r1, 8005680 <__ieee754_asin+0x418>)
 8005632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005636:	f7fa fdeb 	bl	8000210 <__aeabi_dsub>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4630      	mov	r0, r6
 8005640:	4639      	mov	r1, r7
 8005642:	f7fa fde5 	bl	8000210 <__aeabi_dsub>
 8005646:	4642      	mov	r2, r8
 8005648:	4604      	mov	r4, r0
 800564a:	460d      	mov	r5, r1
 800564c:	465b      	mov	r3, fp
 800564e:	4640      	mov	r0, r8
 8005650:	4659      	mov	r1, fp
 8005652:	f7fa fddf 	bl	8000214 <__adddf3>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	a10b      	add	r1, pc, #44	; (adr r1, 8005688 <__ieee754_asin+0x420>)
 800565c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005660:	f7fa fdd6 	bl	8000210 <__aeabi_dsub>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4620      	mov	r0, r4
 800566a:	4629      	mov	r1, r5
 800566c:	f7fa fdd0 	bl	8000210 <__aeabi_dsub>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	a104      	add	r1, pc, #16	; (adr r1, 8005688 <__ieee754_asin+0x420>)
 8005676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800567a:	e6dd      	b.n	8005438 <__ieee754_asin+0x1d0>
 800567c:	f3af 8000 	nop.w
 8005680:	33145c07 	.word	0x33145c07
 8005684:	3c91a626 	.word	0x3c91a626
 8005688:	54442d18 	.word	0x54442d18
 800568c:	3fe921fb 	.word	0x3fe921fb

08005690 <__ieee754_rem_pio2>:
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	ed2d 8b02 	vpush	{d8}
 8005698:	ec55 4b10 	vmov	r4, r5, d0
 800569c:	4bca      	ldr	r3, [pc, #808]	; (80059c8 <__ieee754_rem_pio2+0x338>)
 800569e:	b08b      	sub	sp, #44	; 0x2c
 80056a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80056a4:	4598      	cmp	r8, r3
 80056a6:	4682      	mov	sl, r0
 80056a8:	9502      	str	r5, [sp, #8]
 80056aa:	dc08      	bgt.n	80056be <__ieee754_rem_pio2+0x2e>
 80056ac:	2200      	movs	r2, #0
 80056ae:	2300      	movs	r3, #0
 80056b0:	ed80 0b00 	vstr	d0, [r0]
 80056b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80056b8:	f04f 0b00 	mov.w	fp, #0
 80056bc:	e028      	b.n	8005710 <__ieee754_rem_pio2+0x80>
 80056be:	4bc3      	ldr	r3, [pc, #780]	; (80059cc <__ieee754_rem_pio2+0x33c>)
 80056c0:	4598      	cmp	r8, r3
 80056c2:	dc78      	bgt.n	80057b6 <__ieee754_rem_pio2+0x126>
 80056c4:	9b02      	ldr	r3, [sp, #8]
 80056c6:	4ec2      	ldr	r6, [pc, #776]	; (80059d0 <__ieee754_rem_pio2+0x340>)
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	ee10 0a10 	vmov	r0, s0
 80056ce:	a3b0      	add	r3, pc, #704	; (adr r3, 8005990 <__ieee754_rem_pio2+0x300>)
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	4629      	mov	r1, r5
 80056d6:	dd39      	ble.n	800574c <__ieee754_rem_pio2+0xbc>
 80056d8:	f7fa fd9a 	bl	8000210 <__aeabi_dsub>
 80056dc:	45b0      	cmp	r8, r6
 80056de:	4604      	mov	r4, r0
 80056e0:	460d      	mov	r5, r1
 80056e2:	d01b      	beq.n	800571c <__ieee754_rem_pio2+0x8c>
 80056e4:	a3ac      	add	r3, pc, #688	; (adr r3, 8005998 <__ieee754_rem_pio2+0x308>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f7fa fd91 	bl	8000210 <__aeabi_dsub>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	e9ca 2300 	strd	r2, r3, [sl]
 80056f6:	4620      	mov	r0, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7fa fd89 	bl	8000210 <__aeabi_dsub>
 80056fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8005998 <__ieee754_rem_pio2+0x308>)
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f7fa fd84 	bl	8000210 <__aeabi_dsub>
 8005708:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800570c:	f04f 0b01 	mov.w	fp, #1
 8005710:	4658      	mov	r0, fp
 8005712:	b00b      	add	sp, #44	; 0x2c
 8005714:	ecbd 8b02 	vpop	{d8}
 8005718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571c:	a3a0      	add	r3, pc, #640	; (adr r3, 80059a0 <__ieee754_rem_pio2+0x310>)
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f7fa fd75 	bl	8000210 <__aeabi_dsub>
 8005726:	a3a0      	add	r3, pc, #640	; (adr r3, 80059a8 <__ieee754_rem_pio2+0x318>)
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	4604      	mov	r4, r0
 800572e:	460d      	mov	r5, r1
 8005730:	f7fa fd6e 	bl	8000210 <__aeabi_dsub>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	e9ca 2300 	strd	r2, r3, [sl]
 800573c:	4620      	mov	r0, r4
 800573e:	4629      	mov	r1, r5
 8005740:	f7fa fd66 	bl	8000210 <__aeabi_dsub>
 8005744:	a398      	add	r3, pc, #608	; (adr r3, 80059a8 <__ieee754_rem_pio2+0x318>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	e7db      	b.n	8005704 <__ieee754_rem_pio2+0x74>
 800574c:	f7fa fd62 	bl	8000214 <__adddf3>
 8005750:	45b0      	cmp	r8, r6
 8005752:	4604      	mov	r4, r0
 8005754:	460d      	mov	r5, r1
 8005756:	d016      	beq.n	8005786 <__ieee754_rem_pio2+0xf6>
 8005758:	a38f      	add	r3, pc, #572	; (adr r3, 8005998 <__ieee754_rem_pio2+0x308>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fa fd59 	bl	8000214 <__adddf3>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	e9ca 2300 	strd	r2, r3, [sl]
 800576a:	4620      	mov	r0, r4
 800576c:	4629      	mov	r1, r5
 800576e:	f7fa fd4f 	bl	8000210 <__aeabi_dsub>
 8005772:	a389      	add	r3, pc, #548	; (adr r3, 8005998 <__ieee754_rem_pio2+0x308>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa fd4c 	bl	8000214 <__adddf3>
 800577c:	f04f 3bff 	mov.w	fp, #4294967295
 8005780:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005784:	e7c4      	b.n	8005710 <__ieee754_rem_pio2+0x80>
 8005786:	a386      	add	r3, pc, #536	; (adr r3, 80059a0 <__ieee754_rem_pio2+0x310>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f7fa fd42 	bl	8000214 <__adddf3>
 8005790:	a385      	add	r3, pc, #532	; (adr r3, 80059a8 <__ieee754_rem_pio2+0x318>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	4604      	mov	r4, r0
 8005798:	460d      	mov	r5, r1
 800579a:	f7fa fd3b 	bl	8000214 <__adddf3>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	e9ca 2300 	strd	r2, r3, [sl]
 80057a6:	4620      	mov	r0, r4
 80057a8:	4629      	mov	r1, r5
 80057aa:	f7fa fd31 	bl	8000210 <__aeabi_dsub>
 80057ae:	a37e      	add	r3, pc, #504	; (adr r3, 80059a8 <__ieee754_rem_pio2+0x318>)
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	e7e0      	b.n	8005778 <__ieee754_rem_pio2+0xe8>
 80057b6:	4b87      	ldr	r3, [pc, #540]	; (80059d4 <__ieee754_rem_pio2+0x344>)
 80057b8:	4598      	cmp	r8, r3
 80057ba:	f300 80d8 	bgt.w	800596e <__ieee754_rem_pio2+0x2de>
 80057be:	f7ff fa83 	bl	8004cc8 <fabs>
 80057c2:	ec55 4b10 	vmov	r4, r5, d0
 80057c6:	ee10 0a10 	vmov	r0, s0
 80057ca:	a379      	add	r3, pc, #484	; (adr r3, 80059b0 <__ieee754_rem_pio2+0x320>)
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	4629      	mov	r1, r5
 80057d2:	f7fa fed5 	bl	8000580 <__aeabi_dmul>
 80057d6:	4b80      	ldr	r3, [pc, #512]	; (80059d8 <__ieee754_rem_pio2+0x348>)
 80057d8:	2200      	movs	r2, #0
 80057da:	f7fa fd1b 	bl	8000214 <__adddf3>
 80057de:	f7fb f97f 	bl	8000ae0 <__aeabi_d2iz>
 80057e2:	4683      	mov	fp, r0
 80057e4:	f7fa fe62 	bl	80004ac <__aeabi_i2d>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	ec43 2b18 	vmov	d8, r2, r3
 80057f0:	a367      	add	r3, pc, #412	; (adr r3, 8005990 <__ieee754_rem_pio2+0x300>)
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	f7fa fec3 	bl	8000580 <__aeabi_dmul>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4620      	mov	r0, r4
 8005800:	4629      	mov	r1, r5
 8005802:	f7fa fd05 	bl	8000210 <__aeabi_dsub>
 8005806:	a364      	add	r3, pc, #400	; (adr r3, 8005998 <__ieee754_rem_pio2+0x308>)
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	4606      	mov	r6, r0
 800580e:	460f      	mov	r7, r1
 8005810:	ec51 0b18 	vmov	r0, r1, d8
 8005814:	f7fa feb4 	bl	8000580 <__aeabi_dmul>
 8005818:	f1bb 0f1f 	cmp.w	fp, #31
 800581c:	4604      	mov	r4, r0
 800581e:	460d      	mov	r5, r1
 8005820:	dc0d      	bgt.n	800583e <__ieee754_rem_pio2+0x1ae>
 8005822:	4b6e      	ldr	r3, [pc, #440]	; (80059dc <__ieee754_rem_pio2+0x34c>)
 8005824:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582c:	4543      	cmp	r3, r8
 800582e:	d006      	beq.n	800583e <__ieee754_rem_pio2+0x1ae>
 8005830:	4622      	mov	r2, r4
 8005832:	462b      	mov	r3, r5
 8005834:	4630      	mov	r0, r6
 8005836:	4639      	mov	r1, r7
 8005838:	f7fa fcea 	bl	8000210 <__aeabi_dsub>
 800583c:	e00e      	b.n	800585c <__ieee754_rem_pio2+0x1cc>
 800583e:	462b      	mov	r3, r5
 8005840:	4622      	mov	r2, r4
 8005842:	4630      	mov	r0, r6
 8005844:	4639      	mov	r1, r7
 8005846:	f7fa fce3 	bl	8000210 <__aeabi_dsub>
 800584a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800584e:	9303      	str	r3, [sp, #12]
 8005850:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005854:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005858:	2b10      	cmp	r3, #16
 800585a:	dc02      	bgt.n	8005862 <__ieee754_rem_pio2+0x1d2>
 800585c:	e9ca 0100 	strd	r0, r1, [sl]
 8005860:	e039      	b.n	80058d6 <__ieee754_rem_pio2+0x246>
 8005862:	a34f      	add	r3, pc, #316	; (adr r3, 80059a0 <__ieee754_rem_pio2+0x310>)
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	ec51 0b18 	vmov	r0, r1, d8
 800586c:	f7fa fe88 	bl	8000580 <__aeabi_dmul>
 8005870:	4604      	mov	r4, r0
 8005872:	460d      	mov	r5, r1
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4630      	mov	r0, r6
 800587a:	4639      	mov	r1, r7
 800587c:	f7fa fcc8 	bl	8000210 <__aeabi_dsub>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4680      	mov	r8, r0
 8005886:	4689      	mov	r9, r1
 8005888:	4630      	mov	r0, r6
 800588a:	4639      	mov	r1, r7
 800588c:	f7fa fcc0 	bl	8000210 <__aeabi_dsub>
 8005890:	4622      	mov	r2, r4
 8005892:	462b      	mov	r3, r5
 8005894:	f7fa fcbc 	bl	8000210 <__aeabi_dsub>
 8005898:	a343      	add	r3, pc, #268	; (adr r3, 80059a8 <__ieee754_rem_pio2+0x318>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	4604      	mov	r4, r0
 80058a0:	460d      	mov	r5, r1
 80058a2:	ec51 0b18 	vmov	r0, r1, d8
 80058a6:	f7fa fe6b 	bl	8000580 <__aeabi_dmul>
 80058aa:	4622      	mov	r2, r4
 80058ac:	462b      	mov	r3, r5
 80058ae:	f7fa fcaf 	bl	8000210 <__aeabi_dsub>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4604      	mov	r4, r0
 80058b8:	460d      	mov	r5, r1
 80058ba:	4640      	mov	r0, r8
 80058bc:	4649      	mov	r1, r9
 80058be:	f7fa fca7 	bl	8000210 <__aeabi_dsub>
 80058c2:	9a03      	ldr	r2, [sp, #12]
 80058c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b31      	cmp	r3, #49	; 0x31
 80058cc:	dc24      	bgt.n	8005918 <__ieee754_rem_pio2+0x288>
 80058ce:	e9ca 0100 	strd	r0, r1, [sl]
 80058d2:	4646      	mov	r6, r8
 80058d4:	464f      	mov	r7, r9
 80058d6:	e9da 8900 	ldrd	r8, r9, [sl]
 80058da:	4630      	mov	r0, r6
 80058dc:	4642      	mov	r2, r8
 80058de:	464b      	mov	r3, r9
 80058e0:	4639      	mov	r1, r7
 80058e2:	f7fa fc95 	bl	8000210 <__aeabi_dsub>
 80058e6:	462b      	mov	r3, r5
 80058e8:	4622      	mov	r2, r4
 80058ea:	f7fa fc91 	bl	8000210 <__aeabi_dsub>
 80058ee:	9b02      	ldr	r3, [sp, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80058f6:	f6bf af0b 	bge.w	8005710 <__ieee754_rem_pio2+0x80>
 80058fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80058fe:	f8ca 3004 	str.w	r3, [sl, #4]
 8005902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005906:	f8ca 8000 	str.w	r8, [sl]
 800590a:	f8ca 0008 	str.w	r0, [sl, #8]
 800590e:	f8ca 300c 	str.w	r3, [sl, #12]
 8005912:	f1cb 0b00 	rsb	fp, fp, #0
 8005916:	e6fb      	b.n	8005710 <__ieee754_rem_pio2+0x80>
 8005918:	a327      	add	r3, pc, #156	; (adr r3, 80059b8 <__ieee754_rem_pio2+0x328>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	ec51 0b18 	vmov	r0, r1, d8
 8005922:	f7fa fe2d 	bl	8000580 <__aeabi_dmul>
 8005926:	4604      	mov	r4, r0
 8005928:	460d      	mov	r5, r1
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4640      	mov	r0, r8
 8005930:	4649      	mov	r1, r9
 8005932:	f7fa fc6d 	bl	8000210 <__aeabi_dsub>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4606      	mov	r6, r0
 800593c:	460f      	mov	r7, r1
 800593e:	4640      	mov	r0, r8
 8005940:	4649      	mov	r1, r9
 8005942:	f7fa fc65 	bl	8000210 <__aeabi_dsub>
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	f7fa fc61 	bl	8000210 <__aeabi_dsub>
 800594e:	a31c      	add	r3, pc, #112	; (adr r3, 80059c0 <__ieee754_rem_pio2+0x330>)
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	4604      	mov	r4, r0
 8005956:	460d      	mov	r5, r1
 8005958:	ec51 0b18 	vmov	r0, r1, d8
 800595c:	f7fa fe10 	bl	8000580 <__aeabi_dmul>
 8005960:	4622      	mov	r2, r4
 8005962:	462b      	mov	r3, r5
 8005964:	f7fa fc54 	bl	8000210 <__aeabi_dsub>
 8005968:	4604      	mov	r4, r0
 800596a:	460d      	mov	r5, r1
 800596c:	e760      	b.n	8005830 <__ieee754_rem_pio2+0x1a0>
 800596e:	4b1c      	ldr	r3, [pc, #112]	; (80059e0 <__ieee754_rem_pio2+0x350>)
 8005970:	4598      	cmp	r8, r3
 8005972:	dd37      	ble.n	80059e4 <__ieee754_rem_pio2+0x354>
 8005974:	ee10 2a10 	vmov	r2, s0
 8005978:	462b      	mov	r3, r5
 800597a:	4620      	mov	r0, r4
 800597c:	4629      	mov	r1, r5
 800597e:	f7fa fc47 	bl	8000210 <__aeabi_dsub>
 8005982:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005986:	e9ca 0100 	strd	r0, r1, [sl]
 800598a:	e695      	b.n	80056b8 <__ieee754_rem_pio2+0x28>
 800598c:	f3af 8000 	nop.w
 8005990:	54400000 	.word	0x54400000
 8005994:	3ff921fb 	.word	0x3ff921fb
 8005998:	1a626331 	.word	0x1a626331
 800599c:	3dd0b461 	.word	0x3dd0b461
 80059a0:	1a600000 	.word	0x1a600000
 80059a4:	3dd0b461 	.word	0x3dd0b461
 80059a8:	2e037073 	.word	0x2e037073
 80059ac:	3ba3198a 	.word	0x3ba3198a
 80059b0:	6dc9c883 	.word	0x6dc9c883
 80059b4:	3fe45f30 	.word	0x3fe45f30
 80059b8:	2e000000 	.word	0x2e000000
 80059bc:	3ba3198a 	.word	0x3ba3198a
 80059c0:	252049c1 	.word	0x252049c1
 80059c4:	397b839a 	.word	0x397b839a
 80059c8:	3fe921fb 	.word	0x3fe921fb
 80059cc:	4002d97b 	.word	0x4002d97b
 80059d0:	3ff921fb 	.word	0x3ff921fb
 80059d4:	413921fb 	.word	0x413921fb
 80059d8:	3fe00000 	.word	0x3fe00000
 80059dc:	08006374 	.word	0x08006374
 80059e0:	7fefffff 	.word	0x7fefffff
 80059e4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80059e8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80059ec:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80059f0:	4620      	mov	r0, r4
 80059f2:	460d      	mov	r5, r1
 80059f4:	f7fb f874 	bl	8000ae0 <__aeabi_d2iz>
 80059f8:	f7fa fd58 	bl	80004ac <__aeabi_i2d>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4620      	mov	r0, r4
 8005a02:	4629      	mov	r1, r5
 8005a04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a08:	f7fa fc02 	bl	8000210 <__aeabi_dsub>
 8005a0c:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <__ieee754_rem_pio2+0x404>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f7fa fdb6 	bl	8000580 <__aeabi_dmul>
 8005a14:	460d      	mov	r5, r1
 8005a16:	4604      	mov	r4, r0
 8005a18:	f7fb f862 	bl	8000ae0 <__aeabi_d2iz>
 8005a1c:	f7fa fd46 	bl	80004ac <__aeabi_i2d>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4620      	mov	r0, r4
 8005a26:	4629      	mov	r1, r5
 8005a28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a2c:	f7fa fbf0 	bl	8000210 <__aeabi_dsub>
 8005a30:	4b18      	ldr	r3, [pc, #96]	; (8005a94 <__ieee754_rem_pio2+0x404>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	f7fa fda4 	bl	8000580 <__aeabi_dmul>
 8005a38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a3c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005a40:	2703      	movs	r7, #3
 8005a42:	2400      	movs	r4, #0
 8005a44:	2500      	movs	r5, #0
 8005a46:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	462b      	mov	r3, r5
 8005a4e:	46b9      	mov	r9, r7
 8005a50:	3f01      	subs	r7, #1
 8005a52:	f7fa fffd 	bl	8000a50 <__aeabi_dcmpeq>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d1f5      	bne.n	8005a46 <__ieee754_rem_pio2+0x3b6>
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <__ieee754_rem_pio2+0x408>)
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	2302      	movs	r3, #2
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	4632      	mov	r2, r6
 8005a64:	464b      	mov	r3, r9
 8005a66:	4651      	mov	r1, sl
 8005a68:	a804      	add	r0, sp, #16
 8005a6a:	f000 f819 	bl	8005aa0 <__kernel_rem_pio2>
 8005a6e:	9b02      	ldr	r3, [sp, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	4683      	mov	fp, r0
 8005a74:	f6bf ae4c 	bge.w	8005710 <__ieee754_rem_pio2+0x80>
 8005a78:	e9da 2100 	ldrd	r2, r1, [sl]
 8005a7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a80:	e9ca 2300 	strd	r2, r3, [sl]
 8005a84:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005a88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a8c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005a90:	e73f      	b.n	8005912 <__ieee754_rem_pio2+0x282>
 8005a92:	bf00      	nop
 8005a94:	41700000 	.word	0x41700000
 8005a98:	080063f4 	.word	0x080063f4
 8005a9c:	00000000 	.word	0x00000000

08005aa0 <__kernel_rem_pio2>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	ed2d 8b02 	vpush	{d8}
 8005aa8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005aac:	f112 0f14 	cmn.w	r2, #20
 8005ab0:	9306      	str	r3, [sp, #24]
 8005ab2:	9104      	str	r1, [sp, #16]
 8005ab4:	4bc2      	ldr	r3, [pc, #776]	; (8005dc0 <__kernel_rem_pio2+0x320>)
 8005ab6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005ab8:	9009      	str	r0, [sp, #36]	; 0x24
 8005aba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	9b06      	ldr	r3, [sp, #24]
 8005ac2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ac6:	bfa8      	it	ge
 8005ac8:	1ed4      	subge	r4, r2, #3
 8005aca:	9305      	str	r3, [sp, #20]
 8005acc:	bfb2      	itee	lt
 8005ace:	2400      	movlt	r4, #0
 8005ad0:	2318      	movge	r3, #24
 8005ad2:	fb94 f4f3 	sdivge	r4, r4, r3
 8005ad6:	f06f 0317 	mvn.w	r3, #23
 8005ada:	fb04 3303 	mla	r3, r4, r3, r3
 8005ade:	eb03 0a02 	add.w	sl, r3, r2
 8005ae2:	9b00      	ldr	r3, [sp, #0]
 8005ae4:	9a05      	ldr	r2, [sp, #20]
 8005ae6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8005db0 <__kernel_rem_pio2+0x310>
 8005aea:	eb03 0802 	add.w	r8, r3, r2
 8005aee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005af0:	1aa7      	subs	r7, r4, r2
 8005af2:	ae20      	add	r6, sp, #128	; 0x80
 8005af4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005af8:	2500      	movs	r5, #0
 8005afa:	4545      	cmp	r5, r8
 8005afc:	dd13      	ble.n	8005b26 <__kernel_rem_pio2+0x86>
 8005afe:	9b06      	ldr	r3, [sp, #24]
 8005b00:	aa20      	add	r2, sp, #128	; 0x80
 8005b02:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005b06:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005b0a:	f04f 0800 	mov.w	r8, #0
 8005b0e:	9b00      	ldr	r3, [sp, #0]
 8005b10:	4598      	cmp	r8, r3
 8005b12:	dc31      	bgt.n	8005b78 <__kernel_rem_pio2+0xd8>
 8005b14:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005db0 <__kernel_rem_pio2+0x310>
 8005b18:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005b1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b20:	462f      	mov	r7, r5
 8005b22:	2600      	movs	r6, #0
 8005b24:	e01b      	b.n	8005b5e <__kernel_rem_pio2+0xbe>
 8005b26:	42ef      	cmn	r7, r5
 8005b28:	d407      	bmi.n	8005b3a <__kernel_rem_pio2+0x9a>
 8005b2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005b2e:	f7fa fcbd 	bl	80004ac <__aeabi_i2d>
 8005b32:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005b36:	3501      	adds	r5, #1
 8005b38:	e7df      	b.n	8005afa <__kernel_rem_pio2+0x5a>
 8005b3a:	ec51 0b18 	vmov	r0, r1, d8
 8005b3e:	e7f8      	b.n	8005b32 <__kernel_rem_pio2+0x92>
 8005b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005b48:	f7fa fd1a 	bl	8000580 <__aeabi_dmul>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b54:	f7fa fb5e 	bl	8000214 <__adddf3>
 8005b58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b5c:	3601      	adds	r6, #1
 8005b5e:	9b05      	ldr	r3, [sp, #20]
 8005b60:	429e      	cmp	r6, r3
 8005b62:	f1a7 0708 	sub.w	r7, r7, #8
 8005b66:	ddeb      	ble.n	8005b40 <__kernel_rem_pio2+0xa0>
 8005b68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b6c:	f108 0801 	add.w	r8, r8, #1
 8005b70:	ecab 7b02 	vstmia	fp!, {d7}
 8005b74:	3508      	adds	r5, #8
 8005b76:	e7ca      	b.n	8005b0e <__kernel_rem_pio2+0x6e>
 8005b78:	9b00      	ldr	r3, [sp, #0]
 8005b7a:	aa0c      	add	r2, sp, #48	; 0x30
 8005b7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b82:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005b84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005b88:	9c00      	ldr	r4, [sp, #0]
 8005b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8005b8c:	00e3      	lsls	r3, r4, #3
 8005b8e:	9308      	str	r3, [sp, #32]
 8005b90:	ab98      	add	r3, sp, #608	; 0x260
 8005b92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b96:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005b9a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005b9e:	ab70      	add	r3, sp, #448	; 0x1c0
 8005ba0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005ba4:	46c3      	mov	fp, r8
 8005ba6:	46a1      	mov	r9, r4
 8005ba8:	f1b9 0f00 	cmp.w	r9, #0
 8005bac:	f1a5 0508 	sub.w	r5, r5, #8
 8005bb0:	dc77      	bgt.n	8005ca2 <__kernel_rem_pio2+0x202>
 8005bb2:	ec47 6b10 	vmov	d0, r6, r7
 8005bb6:	4650      	mov	r0, sl
 8005bb8:	f000 fac2 	bl	8006140 <scalbn>
 8005bbc:	ec57 6b10 	vmov	r6, r7, d0
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005bc6:	ee10 0a10 	vmov	r0, s0
 8005bca:	4639      	mov	r1, r7
 8005bcc:	f7fa fcd8 	bl	8000580 <__aeabi_dmul>
 8005bd0:	ec41 0b10 	vmov	d0, r0, r1
 8005bd4:	f000 fb34 	bl	8006240 <floor>
 8005bd8:	4b7a      	ldr	r3, [pc, #488]	; (8005dc4 <__kernel_rem_pio2+0x324>)
 8005bda:	ec51 0b10 	vmov	r0, r1, d0
 8005bde:	2200      	movs	r2, #0
 8005be0:	f7fa fcce 	bl	8000580 <__aeabi_dmul>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4630      	mov	r0, r6
 8005bea:	4639      	mov	r1, r7
 8005bec:	f7fa fb10 	bl	8000210 <__aeabi_dsub>
 8005bf0:	460f      	mov	r7, r1
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	f7fa ff74 	bl	8000ae0 <__aeabi_d2iz>
 8005bf8:	9002      	str	r0, [sp, #8]
 8005bfa:	f7fa fc57 	bl	80004ac <__aeabi_i2d>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4630      	mov	r0, r6
 8005c04:	4639      	mov	r1, r7
 8005c06:	f7fa fb03 	bl	8000210 <__aeabi_dsub>
 8005c0a:	f1ba 0f00 	cmp.w	sl, #0
 8005c0e:	4606      	mov	r6, r0
 8005c10:	460f      	mov	r7, r1
 8005c12:	dd6d      	ble.n	8005cf0 <__kernel_rem_pio2+0x250>
 8005c14:	1e61      	subs	r1, r4, #1
 8005c16:	ab0c      	add	r3, sp, #48	; 0x30
 8005c18:	9d02      	ldr	r5, [sp, #8]
 8005c1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c1e:	f1ca 0018 	rsb	r0, sl, #24
 8005c22:	fa43 f200 	asr.w	r2, r3, r0
 8005c26:	4415      	add	r5, r2
 8005c28:	4082      	lsls	r2, r0
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	aa0c      	add	r2, sp, #48	; 0x30
 8005c2e:	9502      	str	r5, [sp, #8]
 8005c30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005c34:	f1ca 0217 	rsb	r2, sl, #23
 8005c38:	fa43 fb02 	asr.w	fp, r3, r2
 8005c3c:	f1bb 0f00 	cmp.w	fp, #0
 8005c40:	dd65      	ble.n	8005d0e <__kernel_rem_pio2+0x26e>
 8005c42:	9b02      	ldr	r3, [sp, #8]
 8005c44:	2200      	movs	r2, #0
 8005c46:	3301      	adds	r3, #1
 8005c48:	9302      	str	r3, [sp, #8]
 8005c4a:	4615      	mov	r5, r2
 8005c4c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005c50:	4294      	cmp	r4, r2
 8005c52:	f300 809f 	bgt.w	8005d94 <__kernel_rem_pio2+0x2f4>
 8005c56:	f1ba 0f00 	cmp.w	sl, #0
 8005c5a:	dd07      	ble.n	8005c6c <__kernel_rem_pio2+0x1cc>
 8005c5c:	f1ba 0f01 	cmp.w	sl, #1
 8005c60:	f000 80c1 	beq.w	8005de6 <__kernel_rem_pio2+0x346>
 8005c64:	f1ba 0f02 	cmp.w	sl, #2
 8005c68:	f000 80c7 	beq.w	8005dfa <__kernel_rem_pio2+0x35a>
 8005c6c:	f1bb 0f02 	cmp.w	fp, #2
 8005c70:	d14d      	bne.n	8005d0e <__kernel_rem_pio2+0x26e>
 8005c72:	4632      	mov	r2, r6
 8005c74:	463b      	mov	r3, r7
 8005c76:	4954      	ldr	r1, [pc, #336]	; (8005dc8 <__kernel_rem_pio2+0x328>)
 8005c78:	2000      	movs	r0, #0
 8005c7a:	f7fa fac9 	bl	8000210 <__aeabi_dsub>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	460f      	mov	r7, r1
 8005c82:	2d00      	cmp	r5, #0
 8005c84:	d043      	beq.n	8005d0e <__kernel_rem_pio2+0x26e>
 8005c86:	4650      	mov	r0, sl
 8005c88:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8005db8 <__kernel_rem_pio2+0x318>
 8005c8c:	f000 fa58 	bl	8006140 <scalbn>
 8005c90:	4630      	mov	r0, r6
 8005c92:	4639      	mov	r1, r7
 8005c94:	ec53 2b10 	vmov	r2, r3, d0
 8005c98:	f7fa faba 	bl	8000210 <__aeabi_dsub>
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	460f      	mov	r7, r1
 8005ca0:	e035      	b.n	8005d0e <__kernel_rem_pio2+0x26e>
 8005ca2:	4b4a      	ldr	r3, [pc, #296]	; (8005dcc <__kernel_rem_pio2+0x32c>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	4639      	mov	r1, r7
 8005caa:	f7fa fc69 	bl	8000580 <__aeabi_dmul>
 8005cae:	f7fa ff17 	bl	8000ae0 <__aeabi_d2iz>
 8005cb2:	f7fa fbfb 	bl	80004ac <__aeabi_i2d>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	ec43 2b18 	vmov	d8, r2, r3
 8005cbe:	4b44      	ldr	r3, [pc, #272]	; (8005dd0 <__kernel_rem_pio2+0x330>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f7fa fc5d 	bl	8000580 <__aeabi_dmul>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4630      	mov	r0, r6
 8005ccc:	4639      	mov	r1, r7
 8005cce:	f7fa fa9f 	bl	8000210 <__aeabi_dsub>
 8005cd2:	f7fa ff05 	bl	8000ae0 <__aeabi_d2iz>
 8005cd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cda:	f84b 0b04 	str.w	r0, [fp], #4
 8005cde:	ec51 0b18 	vmov	r0, r1, d8
 8005ce2:	f7fa fa97 	bl	8000214 <__adddf3>
 8005ce6:	f109 39ff 	add.w	r9, r9, #4294967295
 8005cea:	4606      	mov	r6, r0
 8005cec:	460f      	mov	r7, r1
 8005cee:	e75b      	b.n	8005ba8 <__kernel_rem_pio2+0x108>
 8005cf0:	d106      	bne.n	8005d00 <__kernel_rem_pio2+0x260>
 8005cf2:	1e63      	subs	r3, r4, #1
 8005cf4:	aa0c      	add	r2, sp, #48	; 0x30
 8005cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cfa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8005cfe:	e79d      	b.n	8005c3c <__kernel_rem_pio2+0x19c>
 8005d00:	4b34      	ldr	r3, [pc, #208]	; (8005dd4 <__kernel_rem_pio2+0x334>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	f7fa fec2 	bl	8000a8c <__aeabi_dcmpge>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d140      	bne.n	8005d8e <__kernel_rem_pio2+0x2ee>
 8005d0c:	4683      	mov	fp, r0
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2300      	movs	r3, #0
 8005d12:	4630      	mov	r0, r6
 8005d14:	4639      	mov	r1, r7
 8005d16:	f7fa fe9b 	bl	8000a50 <__aeabi_dcmpeq>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	f000 80c1 	beq.w	8005ea2 <__kernel_rem_pio2+0x402>
 8005d20:	1e65      	subs	r5, r4, #1
 8005d22:	462b      	mov	r3, r5
 8005d24:	2200      	movs	r2, #0
 8005d26:	9900      	ldr	r1, [sp, #0]
 8005d28:	428b      	cmp	r3, r1
 8005d2a:	da6d      	bge.n	8005e08 <__kernel_rem_pio2+0x368>
 8005d2c:	2a00      	cmp	r2, #0
 8005d2e:	f000 808a 	beq.w	8005e46 <__kernel_rem_pio2+0x3a6>
 8005d32:	ab0c      	add	r3, sp, #48	; 0x30
 8005d34:	f1aa 0a18 	sub.w	sl, sl, #24
 8005d38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80ae 	beq.w	8005e9e <__kernel_rem_pio2+0x3fe>
 8005d42:	4650      	mov	r0, sl
 8005d44:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005db8 <__kernel_rem_pio2+0x318>
 8005d48:	f000 f9fa 	bl	8006140 <scalbn>
 8005d4c:	1c6b      	adds	r3, r5, #1
 8005d4e:	00da      	lsls	r2, r3, #3
 8005d50:	9205      	str	r2, [sp, #20]
 8005d52:	ec57 6b10 	vmov	r6, r7, d0
 8005d56:	aa70      	add	r2, sp, #448	; 0x1c0
 8005d58:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8005dcc <__kernel_rem_pio2+0x32c>
 8005d5c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8005d60:	462c      	mov	r4, r5
 8005d62:	f04f 0800 	mov.w	r8, #0
 8005d66:	2c00      	cmp	r4, #0
 8005d68:	f280 80d4 	bge.w	8005f14 <__kernel_rem_pio2+0x474>
 8005d6c:	462c      	mov	r4, r5
 8005d6e:	2c00      	cmp	r4, #0
 8005d70:	f2c0 8102 	blt.w	8005f78 <__kernel_rem_pio2+0x4d8>
 8005d74:	4b18      	ldr	r3, [pc, #96]	; (8005dd8 <__kernel_rem_pio2+0x338>)
 8005d76:	461e      	mov	r6, r3
 8005d78:	ab70      	add	r3, sp, #448	; 0x1c0
 8005d7a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8005d7e:	1b2b      	subs	r3, r5, r4
 8005d80:	f04f 0900 	mov.w	r9, #0
 8005d84:	f04f 0a00 	mov.w	sl, #0
 8005d88:	2700      	movs	r7, #0
 8005d8a:	9306      	str	r3, [sp, #24]
 8005d8c:	e0e6      	b.n	8005f5c <__kernel_rem_pio2+0x4bc>
 8005d8e:	f04f 0b02 	mov.w	fp, #2
 8005d92:	e756      	b.n	8005c42 <__kernel_rem_pio2+0x1a2>
 8005d94:	f8d8 3000 	ldr.w	r3, [r8]
 8005d98:	bb05      	cbnz	r5, 8005ddc <__kernel_rem_pio2+0x33c>
 8005d9a:	b123      	cbz	r3, 8005da6 <__kernel_rem_pio2+0x306>
 8005d9c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005da0:	f8c8 3000 	str.w	r3, [r8]
 8005da4:	2301      	movs	r3, #1
 8005da6:	3201      	adds	r2, #1
 8005da8:	f108 0804 	add.w	r8, r8, #4
 8005dac:	461d      	mov	r5, r3
 8005dae:	e74f      	b.n	8005c50 <__kernel_rem_pio2+0x1b0>
	...
 8005dbc:	3ff00000 	.word	0x3ff00000
 8005dc0:	08006540 	.word	0x08006540
 8005dc4:	40200000 	.word	0x40200000
 8005dc8:	3ff00000 	.word	0x3ff00000
 8005dcc:	3e700000 	.word	0x3e700000
 8005dd0:	41700000 	.word	0x41700000
 8005dd4:	3fe00000 	.word	0x3fe00000
 8005dd8:	08006500 	.word	0x08006500
 8005ddc:	1acb      	subs	r3, r1, r3
 8005dde:	f8c8 3000 	str.w	r3, [r8]
 8005de2:	462b      	mov	r3, r5
 8005de4:	e7df      	b.n	8005da6 <__kernel_rem_pio2+0x306>
 8005de6:	1e62      	subs	r2, r4, #1
 8005de8:	ab0c      	add	r3, sp, #48	; 0x30
 8005dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005df2:	a90c      	add	r1, sp, #48	; 0x30
 8005df4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005df8:	e738      	b.n	8005c6c <__kernel_rem_pio2+0x1cc>
 8005dfa:	1e62      	subs	r2, r4, #1
 8005dfc:	ab0c      	add	r3, sp, #48	; 0x30
 8005dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e02:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e06:	e7f4      	b.n	8005df2 <__kernel_rem_pio2+0x352>
 8005e08:	a90c      	add	r1, sp, #48	; 0x30
 8005e0a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	430a      	orrs	r2, r1
 8005e12:	e788      	b.n	8005d26 <__kernel_rem_pio2+0x286>
 8005e14:	3301      	adds	r3, #1
 8005e16:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005e1a:	2900      	cmp	r1, #0
 8005e1c:	d0fa      	beq.n	8005e14 <__kernel_rem_pio2+0x374>
 8005e1e:	9a08      	ldr	r2, [sp, #32]
 8005e20:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8005e24:	446a      	add	r2, sp
 8005e26:	3a98      	subs	r2, #152	; 0x98
 8005e28:	9208      	str	r2, [sp, #32]
 8005e2a:	9a06      	ldr	r2, [sp, #24]
 8005e2c:	a920      	add	r1, sp, #128	; 0x80
 8005e2e:	18a2      	adds	r2, r4, r2
 8005e30:	18e3      	adds	r3, r4, r3
 8005e32:	f104 0801 	add.w	r8, r4, #1
 8005e36:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8005e3a:	9302      	str	r3, [sp, #8]
 8005e3c:	9b02      	ldr	r3, [sp, #8]
 8005e3e:	4543      	cmp	r3, r8
 8005e40:	da04      	bge.n	8005e4c <__kernel_rem_pio2+0x3ac>
 8005e42:	461c      	mov	r4, r3
 8005e44:	e6a2      	b.n	8005b8c <__kernel_rem_pio2+0xec>
 8005e46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e7e4      	b.n	8005e16 <__kernel_rem_pio2+0x376>
 8005e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e4e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005e52:	f7fa fb2b 	bl	80004ac <__aeabi_i2d>
 8005e56:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5c:	46ab      	mov	fp, r5
 8005e5e:	461c      	mov	r4, r3
 8005e60:	f04f 0900 	mov.w	r9, #0
 8005e64:	2600      	movs	r6, #0
 8005e66:	2700      	movs	r7, #0
 8005e68:	9b05      	ldr	r3, [sp, #20]
 8005e6a:	4599      	cmp	r9, r3
 8005e6c:	dd06      	ble.n	8005e7c <__kernel_rem_pio2+0x3dc>
 8005e6e:	9b08      	ldr	r3, [sp, #32]
 8005e70:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005e74:	f108 0801 	add.w	r8, r8, #1
 8005e78:	9308      	str	r3, [sp, #32]
 8005e7a:	e7df      	b.n	8005e3c <__kernel_rem_pio2+0x39c>
 8005e7c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005e80:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005e84:	f7fa fb7c 	bl	8000580 <__aeabi_dmul>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	4639      	mov	r1, r7
 8005e90:	f7fa f9c0 	bl	8000214 <__adddf3>
 8005e94:	f109 0901 	add.w	r9, r9, #1
 8005e98:	4606      	mov	r6, r0
 8005e9a:	460f      	mov	r7, r1
 8005e9c:	e7e4      	b.n	8005e68 <__kernel_rem_pio2+0x3c8>
 8005e9e:	3d01      	subs	r5, #1
 8005ea0:	e747      	b.n	8005d32 <__kernel_rem_pio2+0x292>
 8005ea2:	ec47 6b10 	vmov	d0, r6, r7
 8005ea6:	f1ca 0000 	rsb	r0, sl, #0
 8005eaa:	f000 f949 	bl	8006140 <scalbn>
 8005eae:	ec57 6b10 	vmov	r6, r7, d0
 8005eb2:	4ba0      	ldr	r3, [pc, #640]	; (8006134 <__kernel_rem_pio2+0x694>)
 8005eb4:	ee10 0a10 	vmov	r0, s0
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4639      	mov	r1, r7
 8005ebc:	f7fa fde6 	bl	8000a8c <__aeabi_dcmpge>
 8005ec0:	b1f8      	cbz	r0, 8005f02 <__kernel_rem_pio2+0x462>
 8005ec2:	4b9d      	ldr	r3, [pc, #628]	; (8006138 <__kernel_rem_pio2+0x698>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	4639      	mov	r1, r7
 8005eca:	f7fa fb59 	bl	8000580 <__aeabi_dmul>
 8005ece:	f7fa fe07 	bl	8000ae0 <__aeabi_d2iz>
 8005ed2:	4680      	mov	r8, r0
 8005ed4:	f7fa faea 	bl	80004ac <__aeabi_i2d>
 8005ed8:	4b96      	ldr	r3, [pc, #600]	; (8006134 <__kernel_rem_pio2+0x694>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	f7fa fb50 	bl	8000580 <__aeabi_dmul>
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	4639      	mov	r1, r7
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f7fa f992 	bl	8000210 <__aeabi_dsub>
 8005eec:	f7fa fdf8 	bl	8000ae0 <__aeabi_d2iz>
 8005ef0:	1c65      	adds	r5, r4, #1
 8005ef2:	ab0c      	add	r3, sp, #48	; 0x30
 8005ef4:	f10a 0a18 	add.w	sl, sl, #24
 8005ef8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005efc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005f00:	e71f      	b.n	8005d42 <__kernel_rem_pio2+0x2a2>
 8005f02:	4630      	mov	r0, r6
 8005f04:	4639      	mov	r1, r7
 8005f06:	f7fa fdeb 	bl	8000ae0 <__aeabi_d2iz>
 8005f0a:	ab0c      	add	r3, sp, #48	; 0x30
 8005f0c:	4625      	mov	r5, r4
 8005f0e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005f12:	e716      	b.n	8005d42 <__kernel_rem_pio2+0x2a2>
 8005f14:	ab0c      	add	r3, sp, #48	; 0x30
 8005f16:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005f1a:	f7fa fac7 	bl	80004ac <__aeabi_i2d>
 8005f1e:	4632      	mov	r2, r6
 8005f20:	463b      	mov	r3, r7
 8005f22:	f7fa fb2d 	bl	8000580 <__aeabi_dmul>
 8005f26:	4642      	mov	r2, r8
 8005f28:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	4630      	mov	r0, r6
 8005f30:	4639      	mov	r1, r7
 8005f32:	f7fa fb25 	bl	8000580 <__aeabi_dmul>
 8005f36:	3c01      	subs	r4, #1
 8005f38:	4606      	mov	r6, r0
 8005f3a:	460f      	mov	r7, r1
 8005f3c:	e713      	b.n	8005d66 <__kernel_rem_pio2+0x2c6>
 8005f3e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005f42:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8005f46:	f7fa fb1b 	bl	8000580 <__aeabi_dmul>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4648      	mov	r0, r9
 8005f50:	4651      	mov	r1, sl
 8005f52:	f7fa f95f 	bl	8000214 <__adddf3>
 8005f56:	3701      	adds	r7, #1
 8005f58:	4681      	mov	r9, r0
 8005f5a:	468a      	mov	sl, r1
 8005f5c:	9b00      	ldr	r3, [sp, #0]
 8005f5e:	429f      	cmp	r7, r3
 8005f60:	dc02      	bgt.n	8005f68 <__kernel_rem_pio2+0x4c8>
 8005f62:	9b06      	ldr	r3, [sp, #24]
 8005f64:	429f      	cmp	r7, r3
 8005f66:	ddea      	ble.n	8005f3e <__kernel_rem_pio2+0x49e>
 8005f68:	9a06      	ldr	r2, [sp, #24]
 8005f6a:	ab48      	add	r3, sp, #288	; 0x120
 8005f6c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8005f70:	e9c6 9a00 	strd	r9, sl, [r6]
 8005f74:	3c01      	subs	r4, #1
 8005f76:	e6fa      	b.n	8005d6e <__kernel_rem_pio2+0x2ce>
 8005f78:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	dc0b      	bgt.n	8005f96 <__kernel_rem_pio2+0x4f6>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	dc39      	bgt.n	8005ff6 <__kernel_rem_pio2+0x556>
 8005f82:	d05d      	beq.n	8006040 <__kernel_rem_pio2+0x5a0>
 8005f84:	9b02      	ldr	r3, [sp, #8]
 8005f86:	f003 0007 	and.w	r0, r3, #7
 8005f8a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005f8e:	ecbd 8b02 	vpop	{d8}
 8005f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f96:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d1f3      	bne.n	8005f84 <__kernel_rem_pio2+0x4e4>
 8005f9c:	9b05      	ldr	r3, [sp, #20]
 8005f9e:	9500      	str	r5, [sp, #0]
 8005fa0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005fa4:	eb0d 0403 	add.w	r4, sp, r3
 8005fa8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8005fac:	46a2      	mov	sl, r4
 8005fae:	9b00      	ldr	r3, [sp, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f1aa 0a08 	sub.w	sl, sl, #8
 8005fb6:	dc69      	bgt.n	800608c <__kernel_rem_pio2+0x5ec>
 8005fb8:	46aa      	mov	sl, r5
 8005fba:	f1ba 0f01 	cmp.w	sl, #1
 8005fbe:	f1a4 0408 	sub.w	r4, r4, #8
 8005fc2:	f300 8083 	bgt.w	80060cc <__kernel_rem_pio2+0x62c>
 8005fc6:	9c05      	ldr	r4, [sp, #20]
 8005fc8:	ab48      	add	r3, sp, #288	; 0x120
 8005fca:	441c      	add	r4, r3
 8005fcc:	2000      	movs	r0, #0
 8005fce:	2100      	movs	r1, #0
 8005fd0:	2d01      	cmp	r5, #1
 8005fd2:	f300 809a 	bgt.w	800610a <__kernel_rem_pio2+0x66a>
 8005fd6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8005fda:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005fde:	f1bb 0f00 	cmp.w	fp, #0
 8005fe2:	f040 8098 	bne.w	8006116 <__kernel_rem_pio2+0x676>
 8005fe6:	9b04      	ldr	r3, [sp, #16]
 8005fe8:	e9c3 7800 	strd	r7, r8, [r3]
 8005fec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005ff0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005ff4:	e7c6      	b.n	8005f84 <__kernel_rem_pio2+0x4e4>
 8005ff6:	9e05      	ldr	r6, [sp, #20]
 8005ff8:	ab48      	add	r3, sp, #288	; 0x120
 8005ffa:	441e      	add	r6, r3
 8005ffc:	462c      	mov	r4, r5
 8005ffe:	2000      	movs	r0, #0
 8006000:	2100      	movs	r1, #0
 8006002:	2c00      	cmp	r4, #0
 8006004:	da33      	bge.n	800606e <__kernel_rem_pio2+0x5ce>
 8006006:	f1bb 0f00 	cmp.w	fp, #0
 800600a:	d036      	beq.n	800607a <__kernel_rem_pio2+0x5da>
 800600c:	4602      	mov	r2, r0
 800600e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006012:	9c04      	ldr	r4, [sp, #16]
 8006014:	e9c4 2300 	strd	r2, r3, [r4]
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006020:	f7fa f8f6 	bl	8000210 <__aeabi_dsub>
 8006024:	ae4a      	add	r6, sp, #296	; 0x128
 8006026:	2401      	movs	r4, #1
 8006028:	42a5      	cmp	r5, r4
 800602a:	da29      	bge.n	8006080 <__kernel_rem_pio2+0x5e0>
 800602c:	f1bb 0f00 	cmp.w	fp, #0
 8006030:	d002      	beq.n	8006038 <__kernel_rem_pio2+0x598>
 8006032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006036:	4619      	mov	r1, r3
 8006038:	9b04      	ldr	r3, [sp, #16]
 800603a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800603e:	e7a1      	b.n	8005f84 <__kernel_rem_pio2+0x4e4>
 8006040:	9c05      	ldr	r4, [sp, #20]
 8006042:	ab48      	add	r3, sp, #288	; 0x120
 8006044:	441c      	add	r4, r3
 8006046:	2000      	movs	r0, #0
 8006048:	2100      	movs	r1, #0
 800604a:	2d00      	cmp	r5, #0
 800604c:	da09      	bge.n	8006062 <__kernel_rem_pio2+0x5c2>
 800604e:	f1bb 0f00 	cmp.w	fp, #0
 8006052:	d002      	beq.n	800605a <__kernel_rem_pio2+0x5ba>
 8006054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006058:	4619      	mov	r1, r3
 800605a:	9b04      	ldr	r3, [sp, #16]
 800605c:	e9c3 0100 	strd	r0, r1, [r3]
 8006060:	e790      	b.n	8005f84 <__kernel_rem_pio2+0x4e4>
 8006062:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006066:	f7fa f8d5 	bl	8000214 <__adddf3>
 800606a:	3d01      	subs	r5, #1
 800606c:	e7ed      	b.n	800604a <__kernel_rem_pio2+0x5aa>
 800606e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006072:	f7fa f8cf 	bl	8000214 <__adddf3>
 8006076:	3c01      	subs	r4, #1
 8006078:	e7c3      	b.n	8006002 <__kernel_rem_pio2+0x562>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	e7c8      	b.n	8006012 <__kernel_rem_pio2+0x572>
 8006080:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006084:	f7fa f8c6 	bl	8000214 <__adddf3>
 8006088:	3401      	adds	r4, #1
 800608a:	e7cd      	b.n	8006028 <__kernel_rem_pio2+0x588>
 800608c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006090:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006094:	9b00      	ldr	r3, [sp, #0]
 8006096:	3b01      	subs	r3, #1
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	4632      	mov	r2, r6
 800609c:	463b      	mov	r3, r7
 800609e:	4640      	mov	r0, r8
 80060a0:	4649      	mov	r1, r9
 80060a2:	f7fa f8b7 	bl	8000214 <__adddf3>
 80060a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4640      	mov	r0, r8
 80060b0:	4649      	mov	r1, r9
 80060b2:	f7fa f8ad 	bl	8000210 <__aeabi_dsub>
 80060b6:	4632      	mov	r2, r6
 80060b8:	463b      	mov	r3, r7
 80060ba:	f7fa f8ab 	bl	8000214 <__adddf3>
 80060be:	ed9d 7b06 	vldr	d7, [sp, #24]
 80060c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80060c6:	ed8a 7b00 	vstr	d7, [sl]
 80060ca:	e770      	b.n	8005fae <__kernel_rem_pio2+0x50e>
 80060cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80060d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80060d4:	4640      	mov	r0, r8
 80060d6:	4632      	mov	r2, r6
 80060d8:	463b      	mov	r3, r7
 80060da:	4649      	mov	r1, r9
 80060dc:	f7fa f89a 	bl	8000214 <__adddf3>
 80060e0:	e9cd 0100 	strd	r0, r1, [sp]
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4640      	mov	r0, r8
 80060ea:	4649      	mov	r1, r9
 80060ec:	f7fa f890 	bl	8000210 <__aeabi_dsub>
 80060f0:	4632      	mov	r2, r6
 80060f2:	463b      	mov	r3, r7
 80060f4:	f7fa f88e 	bl	8000214 <__adddf3>
 80060f8:	ed9d 7b00 	vldr	d7, [sp]
 80060fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006100:	ed84 7b00 	vstr	d7, [r4]
 8006104:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006108:	e757      	b.n	8005fba <__kernel_rem_pio2+0x51a>
 800610a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800610e:	f7fa f881 	bl	8000214 <__adddf3>
 8006112:	3d01      	subs	r5, #1
 8006114:	e75c      	b.n	8005fd0 <__kernel_rem_pio2+0x530>
 8006116:	9b04      	ldr	r3, [sp, #16]
 8006118:	9a04      	ldr	r2, [sp, #16]
 800611a:	601f      	str	r7, [r3, #0]
 800611c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006120:	605c      	str	r4, [r3, #4]
 8006122:	609d      	str	r5, [r3, #8]
 8006124:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006128:	60d3      	str	r3, [r2, #12]
 800612a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800612e:	6110      	str	r0, [r2, #16]
 8006130:	6153      	str	r3, [r2, #20]
 8006132:	e727      	b.n	8005f84 <__kernel_rem_pio2+0x4e4>
 8006134:	41700000 	.word	0x41700000
 8006138:	3e700000 	.word	0x3e700000
 800613c:	00000000 	.word	0x00000000

08006140 <scalbn>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	ec55 4b10 	vmov	r4, r5, d0
 8006146:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800614a:	4606      	mov	r6, r0
 800614c:	462b      	mov	r3, r5
 800614e:	b999      	cbnz	r1, 8006178 <scalbn+0x38>
 8006150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006154:	4323      	orrs	r3, r4
 8006156:	d03f      	beq.n	80061d8 <scalbn+0x98>
 8006158:	4b35      	ldr	r3, [pc, #212]	; (8006230 <scalbn+0xf0>)
 800615a:	4629      	mov	r1, r5
 800615c:	ee10 0a10 	vmov	r0, s0
 8006160:	2200      	movs	r2, #0
 8006162:	f7fa fa0d 	bl	8000580 <__aeabi_dmul>
 8006166:	4b33      	ldr	r3, [pc, #204]	; (8006234 <scalbn+0xf4>)
 8006168:	429e      	cmp	r6, r3
 800616a:	4604      	mov	r4, r0
 800616c:	460d      	mov	r5, r1
 800616e:	da10      	bge.n	8006192 <scalbn+0x52>
 8006170:	a327      	add	r3, pc, #156	; (adr r3, 8006210 <scalbn+0xd0>)
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	e01f      	b.n	80061b8 <scalbn+0x78>
 8006178:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800617c:	4291      	cmp	r1, r2
 800617e:	d10c      	bne.n	800619a <scalbn+0x5a>
 8006180:	ee10 2a10 	vmov	r2, s0
 8006184:	4620      	mov	r0, r4
 8006186:	4629      	mov	r1, r5
 8006188:	f7fa f844 	bl	8000214 <__adddf3>
 800618c:	4604      	mov	r4, r0
 800618e:	460d      	mov	r5, r1
 8006190:	e022      	b.n	80061d8 <scalbn+0x98>
 8006192:	460b      	mov	r3, r1
 8006194:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006198:	3936      	subs	r1, #54	; 0x36
 800619a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800619e:	4296      	cmp	r6, r2
 80061a0:	dd0d      	ble.n	80061be <scalbn+0x7e>
 80061a2:	2d00      	cmp	r5, #0
 80061a4:	a11c      	add	r1, pc, #112	; (adr r1, 8006218 <scalbn+0xd8>)
 80061a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061aa:	da02      	bge.n	80061b2 <scalbn+0x72>
 80061ac:	a11c      	add	r1, pc, #112	; (adr r1, 8006220 <scalbn+0xe0>)
 80061ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061b2:	a319      	add	r3, pc, #100	; (adr r3, 8006218 <scalbn+0xd8>)
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f7fa f9e2 	bl	8000580 <__aeabi_dmul>
 80061bc:	e7e6      	b.n	800618c <scalbn+0x4c>
 80061be:	1872      	adds	r2, r6, r1
 80061c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80061c4:	428a      	cmp	r2, r1
 80061c6:	dcec      	bgt.n	80061a2 <scalbn+0x62>
 80061c8:	2a00      	cmp	r2, #0
 80061ca:	dd08      	ble.n	80061de <scalbn+0x9e>
 80061cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061d8:	ec45 4b10 	vmov	d0, r4, r5
 80061dc:	bd70      	pop	{r4, r5, r6, pc}
 80061de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80061e2:	da08      	bge.n	80061f6 <scalbn+0xb6>
 80061e4:	2d00      	cmp	r5, #0
 80061e6:	a10a      	add	r1, pc, #40	; (adr r1, 8006210 <scalbn+0xd0>)
 80061e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061ec:	dac0      	bge.n	8006170 <scalbn+0x30>
 80061ee:	a10e      	add	r1, pc, #56	; (adr r1, 8006228 <scalbn+0xe8>)
 80061f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061f4:	e7bc      	b.n	8006170 <scalbn+0x30>
 80061f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061fa:	3236      	adds	r2, #54	; 0x36
 80061fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006200:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006204:	4620      	mov	r0, r4
 8006206:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <scalbn+0xf8>)
 8006208:	2200      	movs	r2, #0
 800620a:	e7d5      	b.n	80061b8 <scalbn+0x78>
 800620c:	f3af 8000 	nop.w
 8006210:	c2f8f359 	.word	0xc2f8f359
 8006214:	01a56e1f 	.word	0x01a56e1f
 8006218:	8800759c 	.word	0x8800759c
 800621c:	7e37e43c 	.word	0x7e37e43c
 8006220:	8800759c 	.word	0x8800759c
 8006224:	fe37e43c 	.word	0xfe37e43c
 8006228:	c2f8f359 	.word	0xc2f8f359
 800622c:	81a56e1f 	.word	0x81a56e1f
 8006230:	43500000 	.word	0x43500000
 8006234:	ffff3cb0 	.word	0xffff3cb0
 8006238:	3c900000 	.word	0x3c900000
 800623c:	00000000 	.word	0x00000000

08006240 <floor>:
 8006240:	ec51 0b10 	vmov	r0, r1, d0
 8006244:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800624c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006250:	2e13      	cmp	r6, #19
 8006252:	ee10 5a10 	vmov	r5, s0
 8006256:	ee10 8a10 	vmov	r8, s0
 800625a:	460c      	mov	r4, r1
 800625c:	dc31      	bgt.n	80062c2 <floor+0x82>
 800625e:	2e00      	cmp	r6, #0
 8006260:	da14      	bge.n	800628c <floor+0x4c>
 8006262:	a333      	add	r3, pc, #204	; (adr r3, 8006330 <floor+0xf0>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f7f9 ffd4 	bl	8000214 <__adddf3>
 800626c:	2200      	movs	r2, #0
 800626e:	2300      	movs	r3, #0
 8006270:	f7fa fc16 	bl	8000aa0 <__aeabi_dcmpgt>
 8006274:	b138      	cbz	r0, 8006286 <floor+0x46>
 8006276:	2c00      	cmp	r4, #0
 8006278:	da53      	bge.n	8006322 <floor+0xe2>
 800627a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800627e:	4325      	orrs	r5, r4
 8006280:	d052      	beq.n	8006328 <floor+0xe8>
 8006282:	4c2d      	ldr	r4, [pc, #180]	; (8006338 <floor+0xf8>)
 8006284:	2500      	movs	r5, #0
 8006286:	4621      	mov	r1, r4
 8006288:	4628      	mov	r0, r5
 800628a:	e024      	b.n	80062d6 <floor+0x96>
 800628c:	4f2b      	ldr	r7, [pc, #172]	; (800633c <floor+0xfc>)
 800628e:	4137      	asrs	r7, r6
 8006290:	ea01 0307 	and.w	r3, r1, r7
 8006294:	4303      	orrs	r3, r0
 8006296:	d01e      	beq.n	80062d6 <floor+0x96>
 8006298:	a325      	add	r3, pc, #148	; (adr r3, 8006330 <floor+0xf0>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f7f9 ffb9 	bl	8000214 <__adddf3>
 80062a2:	2200      	movs	r2, #0
 80062a4:	2300      	movs	r3, #0
 80062a6:	f7fa fbfb 	bl	8000aa0 <__aeabi_dcmpgt>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d0eb      	beq.n	8006286 <floor+0x46>
 80062ae:	2c00      	cmp	r4, #0
 80062b0:	bfbe      	ittt	lt
 80062b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80062b6:	4133      	asrlt	r3, r6
 80062b8:	18e4      	addlt	r4, r4, r3
 80062ba:	ea24 0407 	bic.w	r4, r4, r7
 80062be:	2500      	movs	r5, #0
 80062c0:	e7e1      	b.n	8006286 <floor+0x46>
 80062c2:	2e33      	cmp	r6, #51	; 0x33
 80062c4:	dd0b      	ble.n	80062de <floor+0x9e>
 80062c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80062ca:	d104      	bne.n	80062d6 <floor+0x96>
 80062cc:	ee10 2a10 	vmov	r2, s0
 80062d0:	460b      	mov	r3, r1
 80062d2:	f7f9 ff9f 	bl	8000214 <__adddf3>
 80062d6:	ec41 0b10 	vmov	d0, r0, r1
 80062da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062de:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80062e2:	f04f 37ff 	mov.w	r7, #4294967295
 80062e6:	40df      	lsrs	r7, r3
 80062e8:	4238      	tst	r0, r7
 80062ea:	d0f4      	beq.n	80062d6 <floor+0x96>
 80062ec:	a310      	add	r3, pc, #64	; (adr r3, 8006330 <floor+0xf0>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f7f9 ff8f 	bl	8000214 <__adddf3>
 80062f6:	2200      	movs	r2, #0
 80062f8:	2300      	movs	r3, #0
 80062fa:	f7fa fbd1 	bl	8000aa0 <__aeabi_dcmpgt>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d0c1      	beq.n	8006286 <floor+0x46>
 8006302:	2c00      	cmp	r4, #0
 8006304:	da0a      	bge.n	800631c <floor+0xdc>
 8006306:	2e14      	cmp	r6, #20
 8006308:	d101      	bne.n	800630e <floor+0xce>
 800630a:	3401      	adds	r4, #1
 800630c:	e006      	b.n	800631c <floor+0xdc>
 800630e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006312:	2301      	movs	r3, #1
 8006314:	40b3      	lsls	r3, r6
 8006316:	441d      	add	r5, r3
 8006318:	45a8      	cmp	r8, r5
 800631a:	d8f6      	bhi.n	800630a <floor+0xca>
 800631c:	ea25 0507 	bic.w	r5, r5, r7
 8006320:	e7b1      	b.n	8006286 <floor+0x46>
 8006322:	2500      	movs	r5, #0
 8006324:	462c      	mov	r4, r5
 8006326:	e7ae      	b.n	8006286 <floor+0x46>
 8006328:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800632c:	e7ab      	b.n	8006286 <floor+0x46>
 800632e:	bf00      	nop
 8006330:	8800759c 	.word	0x8800759c
 8006334:	7e37e43c 	.word	0x7e37e43c
 8006338:	bff00000 	.word	0xbff00000
 800633c:	000fffff 	.word	0x000fffff

08006340 <_init>:
 8006340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006342:	bf00      	nop
 8006344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006346:	bc08      	pop	{r3}
 8006348:	469e      	mov	lr, r3
 800634a:	4770      	bx	lr

0800634c <_fini>:
 800634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634e:	bf00      	nop
 8006350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006352:	bc08      	pop	{r3}
 8006354:	469e      	mov	lr, r3
 8006356:	4770      	bx	lr
